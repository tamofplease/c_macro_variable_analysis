<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/myloader_restore_job.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_restore_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_restore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib-unix.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>intermediate_queue_ended</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>serial_tbl_creation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>overwrite_tables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>num_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>shutdown_triggered</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type><name>file_list_to_do</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GMutex</name> <modifier>*</modifier></type><name>progress_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GMutex</name> <modifier>*</modifier></type><name>single_threaded_create_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>progress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>total_data_sql_files</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>purge_mode</name></name></type> <name>purge_mode</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>initialize_restore_job</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>purge_mode_str</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>file_list_to_do</name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>single_threaded_create_table</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>progress_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>purge_mode_str</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>purge_mode_str</name></expr></argument>,<argument><expr><literal type="string">"TRUNCATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>purge_mode</name><operator>=</operator><name>TRUNCATE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>purge_mode_str</name></expr></argument>,<argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>purge_mode</name><operator>=</operator><name>DROP</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>purge_mode_str</name></expr></argument>,<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>purge_mode</name><operator>=</operator><name>DELETE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>purge_mode_str</name></expr></argument>,<argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>purge_mode</name><operator>=</operator><name>NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"Purge mode unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>overwrite_tables</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>purge_mode</name><operator>=</operator><name>DROP</name></expr>;</expr_stmt></block_content></block></if> <comment type="line">// Default mode is DROP when overwrite_tables is especified</comment>
  <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>purge_mode</name><operator>=</operator><name>NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>data_restore_job</name></name> <modifier>*</modifier></type> <name>new_data_restore_job_internal</name><parameter_list>( <parameter><decl><type><name>guint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>sub_part</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>data_restore_job</name></name> <modifier>*</modifier></type><name>drj</name> <init>= <expr><call><name>g_new</name><argument_list>(<argument><expr>struct <name>data_restore_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>drj</name><operator>-&gt;</operator><name>index</name></name>    <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>drj</name><operator>-&gt;</operator><name>part</name></name>     <operator>=</operator> <name>part</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>drj</name><operator>-&gt;</operator><name>sub_part</name></name> <operator>=</operator> <name>sub_part</name></expr>;</expr_stmt>
  <return>return <expr><name>drj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>schema_restore_job</name></name> <modifier>*</modifier></type> <name>new_schema_restore_job_internal</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type> <name>statement</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>schema_restore_job</name></name> <modifier>*</modifier></type><name>rj</name> <init>= <expr><call><name>g_new</name><argument_list>(<argument><expr>struct <name>schema_restore_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rj</name><operator>-&gt;</operator><name>database</name></name>  <operator>=</operator> <name>database</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rj</name><operator>-&gt;</operator><name>statement</name></name> <operator>=</operator> <name>statement</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rj</name><operator>-&gt;</operator><name>object</name></name>    <operator>=</operator> <name>object</name></expr>;</expr_stmt>
  <return>return <expr><name>rj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type> <name>new_restore_job</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>restore_job_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name> <init>= <expr><call><name>g_new</name><argument_list>(<argument><expr>struct <name>restore_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name>  <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rj</name><operator>-&gt;</operator><name>dbt</name></name>       <operator>=</operator> <name>dbt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rj</name><operator>-&gt;</operator><name>type</name></name>      <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <return>return <expr><name>rj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type> <name>new_data_restore_job</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>restore_job_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>sub_part</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name> <init>= <expr><call><name>new_restore_job</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>drj</name></name><operator>=</operator><call><name>new_data_restore_job_internal</name><argument_list>( <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>sub_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type> <name>new_schema_restore_job</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>restore_job_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type> <name>statement</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name> <init>= <expr><call><name>new_restore_job</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>srj</name></name><operator>=</operator><call><name>new_schema_restore_job_internal</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_restore_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type> <name>rj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <comment type="line">// We consider that</comment>
  <if_stmt><if>if <condition>(<expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<comment type="line">//  if ( !shutdown_triggered &amp;&amp; rj-&gt;filename != NULL ) g_free(rj-&gt;filename);</comment>
<comment type="line">//  if (rj-&gt;statement != NULL ) g_string_free(rj-&gt;statement,TRUE);</comment>
  <if_stmt><if>if <condition>(<expr><name>rj</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>rj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_schema_restore_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>schema_restore_job</name></name> <modifier>*</modifier></type><name>srj</name></decl></parameter>)</parameter_list><block>{<block_content>
<comment type="line">//  g_free(srj-&gt;database);</comment>
<comment type="line">//  if (srj-&gt;statement!=NULL) g_string_free(srj-&gt;statement, TRUE);</comment>
<comment type="line">//  srj-&gt;statement=NULL;</comment>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>srj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name>int</name></type> <name>overwrite_table</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>truncate_or_delete_failed</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>purge_mode</name> <operator>==</operator> <name>DROP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Dropping table or view (if exists) `%s`.`%s`"</literal></expr></argument>,
              <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"DROP TABLE IF EXISTS `%s`.`%s`"</literal></expr></argument>,
                            <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"DROP VIEW IF EXISTS `%s`.`%s`"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>,
                            <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>purge_mode</name> <operator>==</operator> <name>TRUNCATE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Truncating table `%s`.`%s`"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>query</name><operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"TRUNCATE TABLE `%s`.`%s`"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>truncate_or_delete_failed</name><operator>=</operator> <call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>truncate_or_delete_failed</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Truncate failed, we are going to try to create table or view"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>purge_mode</name> <operator>==</operator> <name>DELETE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Deleting content of table `%s`.`%s`"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>query</name><operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM `%s`.`%s`"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>truncate_or_delete_failed</name><operator>=</operator> <call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>truncate_or_delete_failed</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Delete failed, we are going to try to create table or view"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>truncate_or_delete_failed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>process_restore_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>pause_resume</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>resume_mutex</name> <init>= <expr><operator>(</operator><name>GMutex</name> <operator>*</operator><operator>)</operator><call><name>g_async_queue_try_pop</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>pause_resume</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>resume_mutex</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Stop"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>resume_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>resume_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Resumming"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>resume_mutex</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>shutdown_triggered</name></expr>)</condition><block>{<block_content>
<comment type="line">//    g_message("file enqueued to allow resume: %s", rj-&gt;filename);</comment>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>file_list_to_do</name></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name><init>=<expr><name><name>rj</name><operator>-&gt;</operator><name>dbt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>query_counter</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>rj</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JOB_RESTORE_STRING</name></expr>:</case>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d restoring %s `%s`.`%s` from %s"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>srj</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,
                <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>restore_data_in_gstring</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>srj</name><operator>-&gt;</operator><name>statement</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free_schema_restore_job</name><argument_list>(<argument><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>srj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_RESTORE_SCHEMA_STRING</name></expr>:</case>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>=</operator><name>CREATING</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>serial_tbl_creation</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>single_threaded_create_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d restoring table `%s`.`%s` from %s"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,
                <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>truncate_or_delete_failed</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>overwrite_tables</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>truncate_or_delete_failed</name><operator>=</operator><call><name>overwrite_table</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>purge_mode</name> <operator>==</operator> <name>TRUNCATE</name> <operator>||</operator> <name>purge_mode</name> <operator>==</operator> <name>DELETE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>truncate_or_delete_failed</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Skipping table creation `%s`.`%s` from %s"</literal></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Creating table `%s`.`%s` from content in %s"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>restore_data_in_gstring</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>srj</name><operator>-&gt;</operator><name>statement</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_counter</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Thread %d issue restoring %s: %s"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,<argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Creating table `%s`.`%s` from content in %s COMPLETED"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>=</operator><name>CREATED</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>serial_tbl_creation</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>single_threaded_create_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>g_list_length</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>restore_job_list</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>stream_queue</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free_schema_restore_job</name><argument_list>(<argument><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>srj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_RESTORE_FILENAME</name></expr>:</case>
      <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>progress_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>progress</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d restoring `%s`.`%s` part %d of %d from %s. Progress %llu of %llu. Using %d of %d threads."</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,
                <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>drj</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>progress</name></expr></argument>,<argument><expr><name>total_data_sql_files</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>current_threads</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>max_threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>progress_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>stream</name> <operator>&amp;&amp;</operator> <name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>!=</operator><name>CREATED</name></expr>)</condition><block>{<block_content>
        <comment type="line">// In a stream scenario we might need to wait until table is created to start executing inserts.</comment>
        <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>!=</operator><name>CREATED</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><literal type="number">10000</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Waiting table to be created %s"</literal></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>!=</operator><name>CREATED</name></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Table has not been created in more than 10 seconds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>restore_data_from_file</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Thread %d issue restoring %s: %s"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,<argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_atomic_int_dec_and_test</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dbt</name><operator>-&gt;</operator><name>remaining_jobs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>drj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_RESTORE_SCHEMA_FILENAME</name></expr>:</case>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d restoring %s on `%s` from %s"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>srj</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,
                <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>srj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>restore_data_from_file</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>srj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>rj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free_schema_restore_job</name><argument_list>(<argument><expr><name><name>rj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>srj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Something very bad happened!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
<label><name>cleanup</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rj</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free_restore_job</name><argument_list>(<argument><expr><name>rj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>pause_mutex_per_thread</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>gboolean</name></type> <name>sig_triggered</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type><name>queue</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>signal</name> <operator>==</operator> <name>SIGTERM</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>shutdown_triggered</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pause_mutex_per_thread</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>pause_mutex_per_thread</name><operator>=</operator><call><name>g_new</name><argument_list>(<argument><expr><name>GMutex</name> <operator>*</operator></expr></argument> , <argument><expr><name>num_threads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator>struct <name>configuration</name> <operator>*</operator><operator>)</operator><name>user_data</name><operator>)</operator><operator>-&gt;</operator><name>pause_resume</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>configuration</name> <operator>*</operator><operator>)</operator><name>user_data</name><operator>)</operator><operator>-&gt;</operator><name>pause_resume</name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>queue</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>configuration</name> <operator>*</operator><operator>)</operator><name>user_data</name><operator>)</operator><operator>-&gt;</operator><name>pause_resume</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>queue</name></expr></argument>,<argument><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Ctrl+c detected! Are you sure you want to cancel(Y/N)?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{<block_content>
      <do>do<block>{<block_content>
        <expr_stmt><expr><name>c</name><operator>=</operator><call><name>fgetc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>while <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'\n'</literal></expr>)</condition>;</do>
      <if_stmt><if>if <condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'N'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block>{<block_content>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>TRUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'Y'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>shutdown_triggered</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Writing resume.partial file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>p</name><init>=<expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"resume.partial"</literal></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>p2</name><init>=<expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"resume"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>outfile</name> <init>= <expr><call><name>g_fopen</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name>file_list_to_do</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"NO_MORE_FILES"</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Adding %s to resume file"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>filename</name><operator>=</operator><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name>file_list_to_do</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>g_rename</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error renaming resume.partial to resume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Shutting down gracefully completed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>sig_triggered_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>sig_triggered</name><argument_list>(<argument><expr><name>user_data</name></expr></argument>,<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>gboolean</name></type> <name>sig_triggered_term</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>sig_triggered</name><argument_list>(<argument><expr><name>user_data</name></expr></argument>,<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>GMainLoop</name> <modifier>*</modifier></type> <name>loop</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name> <modifier>*</modifier></type><name>signal_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>g_unix_signal_add</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>sig_triggered_int</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_unix_signal_add</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>sig_triggered_term</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>loop</name> <operator>=</operator> <call><name>g_main_loop_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_main_loop_run</name> <argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>stop_signal_thread</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_main_loop_unref</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  g_main_loop_quit(loop);</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>restore_job_finish</name><parameter_list>()</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>shutdown_triggered</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>file_list_to_do</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"NO_MORE_FILES"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

</unit>
