<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/tables_skiplist.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
    Authors:        David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>GSequence</name> <modifier>*</modifier></type><name>tables_skiplist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Comparison function for skiplist sort and lookup */</comment>

<function><type><name>int</name></type> <name>tables_skiplist_cmp</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* Not using user_data, but needed for function prototype, shutting up
   * compiler warnings about unused variable */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>
  <comment type="block">/* Any sorting function would work, as long as its usage is consistent
   * between sort and lookup.  strcmp should be one of the fastest. */</comment>
  <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Read the list of tables to skip from the given filename, and prepares them
 * for future lookups. */</comment>

<function><type><name>void</name></type> <name>read_tables_skiplist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>guint</name> <modifier>*</modifier></type><name>errors</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name>GIOChannel</name> <modifier>*</modifier></type><name>tables_skiplist_channel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Create skiplist if it does not exist */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tables_skiplist</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tables_skiplist</name> <operator>=</operator> <call><name>g_sequence_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><name>tables_skiplist_channel</name> <operator>=</operator> <call><name>g_io_channel_new_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Error opening/reading the file? bail out. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tables_skiplist_channel</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"cannot read/open file %s, %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>errors</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

  <comment type="block">/* Read lines, push them to the list */</comment>
  <do>do <block>{<block_content>
    <expr_stmt><expr><call><name>g_io_channel_read_line</name><argument_list>(<argument><expr><name>tables_skiplist_channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_strchomp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_sequence_append</name><argument_list>(<argument><expr><name>tables_skiplist</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
  </block_content>}</block> while <condition>(<expr><name>buf</name></expr>)</condition>;</do>
  <expr_stmt><expr><call><name>g_io_channel_shutdown</name><argument_list>(<argument><expr><name>tables_skiplist_channel</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Sort the list, so that lookups work */</comment>
  <expr_stmt><expr><call><name>g_sequence_sort</name><argument_list>(<argument><expr><name>tables_skiplist</name></expr></argument>, <argument><expr><name>tables_skiplist_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Omit list file contains %d tables to skip\n"</literal></expr></argument>,
            <argument><expr><call><name>g_sequence_get_length</name><argument_list>(<argument><expr><name>tables_skiplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<comment type="block">/* Check database.table string against skip list; returns TRUE if found */</comment>

<function><type><name>gboolean</name></type> <name>check_skiplist</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>k</name><init>=<expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>b</name> <init>= <expr><call><name>g_sequence_lookup</name><argument_list>(<argument><expr><name>tables_skiplist</name></expr></argument>,
                        <argument><expr><name>k</name></expr></argument>,
                        <argument><expr><name>tables_skiplist_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>
</unit>
