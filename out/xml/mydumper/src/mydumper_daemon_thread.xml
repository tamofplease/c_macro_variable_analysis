<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/mydumper/src/mydumper_daemon_thread.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    Domas Mituzas, Facebook ( domas at fb dot com )
                    Mark Leith, Oracle Corporation (mark dot leith at oracle dot com)
                    Andrew Hutchings, MariaDB Foundation (andrew at mariadb dot org)
                    Max Bubenick, Percona RDBA (max dot bubenick at percona dot com)
                    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gio/gio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib-unix.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_start_dump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>guint</name></type> <name>snapshot_interval</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>snapshot_count</name><init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMainLoop</name> <modifier>*</modifier></type><name>m1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type><name>start_scheduled_dump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>dump_number</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>dump_directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>output_directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>shutdown_triggered</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GOptionEntry</name></type> <name><name>daemon_entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"snapshot-interval"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>snapshot_interval</name></expr>,
     <expr><literal type="string">"Interval between each dump snapshot (in minutes), requires --daemon, "</literal>
     <literal type="string">"default 60"</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"snapshot-count"</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>snapshot_count</name></expr>, <expr><literal type="string">"number of snapshots, default 2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,    
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>load_daemon_entries</name><parameter_list>(<parameter><decl><type><name>GOptionGroup</name> <modifier>*</modifier></type><name>main_group</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>daemon_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_daemon_thread</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>, <decl><type ref="prev"/><name>sid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><literal type="number">0037</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>setsid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d_d</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>dump_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dump_number</name> <operator>&lt;</operator> <name>snapshot_count</name></expr>;</condition> <incr><expr><name>dump_number</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>d_d</name><operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/%d"</literal></expr></argument>, <argument><expr><name>output_directory</name></expr></argument>, <argument><expr><name>dump_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>create_backup_dir</name><argument_list>(<argument><expr><name>d_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>d_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>GFile</name> <modifier>*</modifier></type><name>last_dump</name> <init>= <expr><call><name>g_file_new_for_path</name><argument_list>(
        <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/last_dump"</literal></expr></argument>, <argument><expr><name>output_directory</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GFileInfo</name> <modifier>*</modifier></type><name>last_dump_i</name> <init>= <expr><call><name>g_file_query_info</name><argument_list>(
        <argument><expr><name>last_dump</name></expr></argument>,
        <argument><expr><name>G_FILE_ATTRIBUTE_STANDARD_TYPE</name> <literal type="string">","</literal>
        <name>G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET</name></expr></argument>,
        <argument><expr><name>G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>last_dump_i</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <call><name>g_file_info_get_file_type</name><argument_list>(<argument><expr><name>last_dump_i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>G_FILE_TYPE_SYMBOLIC_LINK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>dump_number</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>g_file_info_get_symlink_target</name><argument_list>(<argument><expr><name>last_dump_i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>dump_number</name> <operator>&gt;=</operator> <name>snapshot_count</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dump_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>dump_number</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>last_dump_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>dump_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>last_dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>run_snapshot</name><parameter_list>(<parameter><decl><type><name>gpointer</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>start_scheduled_dump</name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>!</operator><name>shutdown_triggered</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>exec_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name>start_scheduled_dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    MYSQL *conn = create_main_connection();</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dump_number_str</name><init>=<expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>dump_number</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>dump_directory</name> <operator>=</operator> <call><name>g_build_path</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>output_directory</name></expr></argument>, <argument><expr><name>dump_number_str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>dump_number_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear_dump_directory</name><argument_list>(<argument><expr><name>dump_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>start_dump</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// start_dump already closes mysql</comment>
    <comment type="line">// mysql_close(conn);</comment>
    <comment type="line">// mysql_thread_end();</comment>

    <comment type="line">// Don't switch the symlink on shutdown because the dump is probably</comment>
    <comment type="line">// incomplete.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>shutdown_triggered</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dump_symlink_source</name><init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>dump_number</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dump_symlink_dest</name> <init>=
          <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/last_dump"</literal></expr></argument>, <argument><expr><name>output_directory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// We don't care if this fails</comment>
      <expr_stmt><expr><call><name>g_unlink</name><argument_list>(<argument><expr><name>dump_symlink_dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>symlink</name><argument_list>(<argument><expr><name>dump_symlink_source</name></expr></argument>, <argument><expr><name>dump_symlink_dest</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"error setting last good dump symlink %s, %d"</literal></expr></argument>,
                   <argument><expr><name>dump_symlink_dest</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>dump_symlink_dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>dump_number</name> <operator>&gt;=</operator> <name>snapshot_count</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dump_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>dump_number</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>run_daemon</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>terror</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>start_scheduled_dump</name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>ethread</name> <init>=
        <expr><call><name>g_thread_create</name><argument_list>(<argument><expr><name>exec_thread</name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>terror</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ethread</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not create exec thread: %s"</literal></expr></argument>, <argument><expr><name><name>terror</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_error_free</name><argument_list>(<argument><expr><name>terror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Run initial snapshot</comment>
    <expr_stmt><expr><call><name>run_snapshot</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GLIB_MINOR_VERSION</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
    <expr_stmt><expr><call><name>g_timeout_add</name><argument_list>(<argument><expr><name>snapshot_interval</name> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>(</operator><name>GSourceFunc</name><operator>)</operator><name>run_snapshot</name></expr></argument>,
                  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>g_timeout_add_seconds</name><argument_list>(<argument><expr><name>snapshot_interval</name> <operator>*</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><operator>(</operator><name>GSourceFunc</name><operator>)</operator><name>run_snapshot</name></expr></argument>,
                          <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>guint</name></type> <name>sigsource</name> <init>= <expr><call><name>g_unix_signal_add</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>sig_triggered_int</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sigsource</name> <operator>=</operator> <call><name>g_unix_signal_add</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>sig_triggered_term</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m1</name> <operator>=</operator> <call><name>g_main_loop_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_main_loop_run</name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_source_remove</name><argument_list>(<argument><expr><name>sigsource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
