<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/mydumper/src/myloader_process.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZWRAP_USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../zstd/zstd_zlibwrapper.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_jobs_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_control_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_restore_job.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>compress_extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>max_threads_per_table</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>no_delete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GHashTable</name> <modifier>*</modifier></type><name>tbl_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>innodb_optimize_keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>append_if_not_exist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>resume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>initialize_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>conf</name><operator>=</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>db_table</name></name><modifier>*</modifier></type> <name>append_new_db_table</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>guint64</name></type> <name>number_rows</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>alter_table_statement</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>( <expr><name>database</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"It was not possible to process file: %s, database: %s table: %s"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>real_db_name</name><init>=<expr><call><name>get_db_hash</name><argument_list>(<argument><expr><name>database</name></expr></argument>,<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>real_db_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"It was not possible to process file: %s. %s was not found and real_db_name is null. Restore without schema-create files is not supported"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>lkey</name><init>=<expr><call><name>build_dbt_key</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name><init>=<expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_hash</name></name></expr></argument>,<argument><expr><name>lkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>dbt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_hash_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//struct db_table * dbt=g_hash_table_lookup(table_hash,lkey);</comment>
    <expr_stmt><expr><name>dbt</name><operator>=</operator><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_hash</name></name></expr></argument>,<argument><expr><name>lkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dbt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>dbt</name><operator>=</operator><call><name>g_new</name><argument_list>(<argument><expr>struct <name>db_table</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    dbt-&gt;filename=filename;</comment>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name></name><operator>=</operator><name>database</name></expr>;</expr_stmt>
    <comment type="line">// This should be the only place where we should use `db ? db : `</comment>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>db</name></expr> ?</condition><then> <expr><name>db</name></expr> </then><else>: <expr><name><name>real_db_name</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name><operator>=</operator><name>table</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name><operator>=</operator><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>rows</name></name><operator>=</operator><name>number_rows</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>restore_job_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>queue</name></name><operator>=</operator><call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>current_threads</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>max_threads</name></name><operator>=</operator><name>max_threads_per_table</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name><operator>=</operator><call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>indexes</name></name><operator>=</operator><name>alter_table_statement</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>start_data_time</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>finish_data_time</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>start_index_time</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>finish_time</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>completed</name></name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>=</operator><name>NOT_CREATED</name></expr>;</expr_stmt>
<comment type="line">//      dbt-&gt;schema_created=FALSE;</comment>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>index_enqueued</name></name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>constraints</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>count</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_hash</name></name></expr></argument>, <argument><expr><name>lkey</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>refresh_table_list_without_table_hash_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//      g_message("New db_table: %s", lkey);</comment>
    </block_content>}</block></if><else>else<block>{<block_content>
<comment type="line">//      g_message("Found db_table: %s", lkey);</comment>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>lkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>number_rows</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>rows</name></name><operator>=</operator><name>number_rows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>alter_table_statement</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>indexes</name></name><operator>=</operator><name>alter_table_statement</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<comment type="line">//    if (real_table != NULL) dbt-&gt;real_table=g_strdup(real_table);</comment>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_hash_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
<comment type="line">//      g_message("Found db_table: %s", lkey);</comment>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>lkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>number_rows</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>rows</name></name><operator>=</operator><name>number_rows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>alter_table_statement</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>indexes</name></name><operator>=</operator><name>alter_table_statement</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>dbt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_dbt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  if (dbt-&gt;constraints!=NULL) g_string_free(dbt-&gt;constraints,TRUE);</comment>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>constraints</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <comment type="line">// It should be free after constraint is executed</comment>
  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_clear</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_table_hash</name><parameter_list>(<parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>table_hash</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_hash_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>lkey</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>table_hash</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_hash_table_iter_init</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>table_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>( <expr><call><name>g_hash_table_iter_next</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>lkey</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>dbt</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free_dbt</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><operator>(</operator><name>gchar</name><operator>*</operator><operator>)</operator><name>lkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt> 
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_hash_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_schema</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>infile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>is_compressed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>eof</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name><init>=<expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>create_table_statement</name><init>=<expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>create_table_statement</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>line</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>infile</name> <operator>=</operator> <call><name>g_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>is_compressed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>infile</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>gzopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>is_compressed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>infile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"cannot open schema file %s (%d)"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name>eof</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>read_data</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name>is_compressed</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>g_strrstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>str</name><index>[<expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><literal type="string">"CREATE TABLE "</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
          <decl_stmt><decl><type><name>gchar</name><modifier>*</modifier><modifier>*</modifier></type> <name>create_table</name><init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"`"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>create_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>( <expr><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,<argument><expr><literal type="string">"mydumper_"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>tbl_hash</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>tbl_hash</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>create_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>append_if_not_exist</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><literal type="string">"CREATE TABLE "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="string">"CREATE TABLE IF"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
              <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>tmp_data</name><init>=<expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>tmp_data</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>tmp_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>data</name><operator>=</operator><name>tmp_data</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>innodb_optimize_keys</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dbt</name><operator>-&gt;</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>dbt</name><operator>-&gt;</operator><name>rows</name></name> <operator>&gt;=</operator> <literal type="number">1000000</literal><operator>)</operator></expr>)</condition><block>{<block_content>
          <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>alter_table_statement</name><init>=<expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>alter_table_constraint_statement</name><init>=<expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <comment type="line">// Check if it is a /*!40  SET</comment>
          <if_stmt><if>if <condition>(<expr><call><name>g_strrstr</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"/*!40"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>,<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>create_table_statement</name></expr></argument>,<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <comment type="line">// Processing CREATE TABLE statement</comment>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>new_create_table_statement</name><init>=<expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><call><name>process_create_table_statement</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>new_create_table_statement</name></expr></argument>, <argument><expr><name>alter_table_statement</name></expr></argument>, <argument><expr><name>alter_table_constraint_statement</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>IS_INNODB_TABLE</name></expr>)</condition><block>{<block_content>
              <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>IS_ALTER_TABLE_PRESENT</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name>finish_alter_table</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Fast index creation will be use for table: %s.%s"</literal></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if><else>else<block>{<block_content>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>alter_table_statement</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>create_table_statement</name></expr></argument>,<argument><expr><call><name>g_strjoinv</name><argument_list>(<argument><expr><literal type="string">"\n)"</literal></expr></argument>,<argument><expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>new_create_table_statement</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">",\n)"</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>indexes</name></name><operator>=</operator><name>alter_table_statement</name></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>INCLUDE_CONSTRAINT</name></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name> <init>= <expr><call><name>new_schema_restore_job</name><argument_list>(<argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>JOB_RESTORE_STRING</name></expr></argument>,<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>, <argument><expr><name>alter_table_constraint_statement</name></expr></argument>, <argument><expr><literal type="string">"constraint"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>post_table_queue</name></name></expr></argument>, <argument><expr><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_RESTORE</name></expr></argument>,<argument><expr><name>rj</name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>constraints</name></name><operator>=</operator><name>alter_table_constraint_statement</name></expr>;</expr_stmt>
              </block_content>}</block></if><else>else<block>{<block_content>
                 <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>alter_table_constraint_statement</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if><else>else<block>{<block_content>
              <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>alter_table_constraint_statement</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>create_table_statement</name></expr></argument>,<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>create_table_statement</name></expr></argument>,<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  
  <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type> <name>rj</name> <init>= <expr><call><name>new_schema_restore_job</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>JOB_RESTORE_SCHEMA_STRING</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>, <argument><expr><name>create_table_statement</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_queue</name></name></expr></argument>, <argument><expr><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_RESTORE</name></expr></argument>,<argument><expr><name>rj</name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_compressed</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>gzclose</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>stream</name> <operator>&amp;&amp;</operator> <name>no_delete</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>m_remove</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>



<function><type><name>void</name></type> <name>get_database_table_part_name_from_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>guint</name> <modifier>*</modifier></type><name>part</name></decl></parameter>, <parameter><decl><type><name>guint</name> <modifier>*</modifier></type><name>sub_part</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>guint</name></type> <name>l</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>l</name><operator>-=</operator><call><name>strlen</name><argument_list>(<argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>f</name><init>=<expr><call><name>g_strndup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>split_db_tbl</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>g_strv_length</name><argument_list>(<argument><expr><name>split_db_tbl</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>database</name><operator>)</operator><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>split_db_tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>table</name><operator>)</operator><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>split_db_tbl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_strv_length</name><argument_list>(<argument><expr><name>split_db_tbl</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>part</name><operator>=</operator><call><name>g_ascii_strtoull</name><argument_list>(<argument><expr><name><name>split_db_tbl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>part</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_strv_length</name><argument_list>(<argument><expr><name>split_db_tbl</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>sub_part</name><operator>=</operator><call><name>g_ascii_strtoull</name><argument_list>(<argument><expr><name><name>split_db_tbl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if><else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>database</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>table</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>part</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>sub_part</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>split_db_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>get_database_name_from_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>split_file</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-schema-create.sql"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>db_name</name><init>=<expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>split_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>db_name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_database_table_name_from_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type> <name>suffix</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>split_file</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>split_db_tbl</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>split_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>g_strv_length</name><argument_list>(<argument><expr><name>split_db_tbl</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>database</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>split_db_tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>table</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>split_db_tbl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>database</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>table</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>split_db_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>get_database_name_from_content</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>infile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>is_compressed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>eof</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name><init>=<expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ml_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>infile</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>is_compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*  if (!g_str_has_suffix(filename, compress_extension)) {
    infile = g_fopen(filename, "r");
    is_compressed = FALSE;
  } else {
    infile = (void *)gzopen(filename, "r");
    is_compressed = TRUE;
  }*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>infile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"cannot open database schema file %s (%d)"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>real_database</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>line</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>eof</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>read_data</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name>is_compressed</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>g_strrstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>str</name><index>[<expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"CREATE "</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
          <decl_stmt><decl><type><name>gchar</name><modifier>*</modifier><modifier>*</modifier></type> <name>create</name><init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"`"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>real_database</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>create</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_compressed</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>gzclose</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>real_database</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>process_tablespace_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name> <init>= <expr><call><name>new_schema_restore_job</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>JOB_RESTORE_SCHEMA_FILENAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"tablespace"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>database_queue</name></name></expr></argument>, <argument><expr><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_RESTORE</name></expr></argument>,<argument><expr><name>rj</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>process_database_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>db_kname</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>db_vname</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>db_vname</name><operator>=</operator><name>db_kname</name><operator>=</operator><call><name>get_database_name_from_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>db_kname</name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>db_vname</name><operator>=</operator><name>db</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else
      if <condition>(<expr><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name>db_kname</name></expr></argument>,<argument><expr><literal type="string">"mydumper_"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>db_vname</name><operator>=</operator><call><name>get_database_name_from_content</name><argument_list>(<argument><expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>directory</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"It was not possible to process db file: %s"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Adding database: %s -&gt; %s"</literal></expr></argument>, <argument><expr><name>db_kname</name></expr></argument>, <argument><expr><name>db_vname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>get_db_hash</name><argument_list>(<argument><expr><name>db_kname</name></expr></argument>, <argument><expr><name>db_vname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name> <init>= <expr><call><name>new_schema_restore_job</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>JOB_RESTORE_SCHEMA_FILENAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>db_vname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>database_queue</name></name></expr></argument>, <argument><expr><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_RESTORE</name></expr></argument>,<argument><expr><name>rj</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>process_table_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>db_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>table_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>get_database_table_name_from_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"-schema.sql"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>db_name</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>table_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>db_name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>table_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"It was not possible to process file: %s (1)"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>real_db_name</name><init>=<expr><call><name>get_db_hash</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>,<argument><expr><name>db_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>real_db_name</name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"It was not possible to process file: %s (1) because real_db_name isn't found. We might renqueue it, take into account that restores without schema-create files are not supported"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_table</name><argument_list>(<argument><expr><name><name>real_db_name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Skiping table: `%s`.`%s`"</literal></expr></argument>,<argument><expr><name><name>real_db_name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>dbt</name><operator>=</operator><call><name>append_new_db_table</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>db_name</name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>=</operator><name>CREATING</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>load_schema</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>directory</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
<comment type="line">//  g_free(filename);</comment>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>process_metadata_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>db_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>table_name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>get_database_table_name_from_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"-metadata"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>db_name</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>table_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>db_name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>table_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"It was not possible to process file: %s (1)"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>real_db_name</name><init>=<expr><call><name>get_db_hash</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>,<argument><expr><name>db_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>real_db_name</name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"It was not possible to process file: %s (2) because real_db_name isn't found. We might renqueue it, take into account that restores without schema-create files are not supported"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>infile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>is_compressed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>metadata_val</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>infile</name> <operator>=</operator> <call><name>g_fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>is_compressed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>infile</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>gzopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>is_compressed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>infile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"cannot open metadata file %s (%d)"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>cs</name><init>= <expr><ternary><condition><expr><operator>!</operator><name>is_compressed</name></expr> ?</condition><then> <expr><call><name>fgets</name><argument_list>(<argument><expr><name>metadata_val</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr> </then><else>:<expr><call><name>gzgets</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator><name>infile</name></expr></argument>, <argument><expr><name>metadata_val</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>append_new_db_table</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>db_name</name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>,<argument><expr><call><name>g_ascii_strtoull</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_compressed</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>gzclose</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>process_schema_view_filename</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>database</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>table_name</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>real_db_name</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>get_database_table_from_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"-schema"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>database</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>table_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>database</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Database is null on: %s"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>real_db_name</name><operator>=</operator><call><name>get_db_hash</name><argument_list>(<argument><expr><name>database</name></expr></argument>,<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>real_db_name</name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"It was not possible to process file: %s (3) because real_db_name isn't found. We might renqueue it, take into account that restores without schema-create files are not supported"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_table</name><argument_list>(<argument><expr><name><name>real_db_name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"File %s has been filter out"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  gchar *lkey=g_strdup_printf("%s_%s",database, table_name);</comment>
<comment type="line">//  struct db_table * dbt=g_hash_table_lookup(conf-&gt;table_hash,lkey);</comment>
<comment type="line">//  g_free(lkey);</comment>
<comment type="line">//  if (dbt==NULL)</comment>
<comment type="line">//    return FALSE;</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name> <init>= <expr><call><name>new_schema_restore_job</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>JOB_RESTORE_SCHEMA_FILENAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>real_db_name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"view"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>view_queue</name></name></expr></argument>, <argument><expr><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_RESTORE</name></expr></argument>,<argument><expr><name>rj</name></expr></argument>,<argument><expr><name><name>real_db_name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>process_schema_filename</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>database</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>table_name</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>real_db_name</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>get_database_table_from_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"-schema"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>database</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>table_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>database</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Database is null on: %s"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>real_db_name</name><operator>=</operator><call><name>get_db_hash</name><argument_list>(<argument><expr><name>database</name></expr></argument>,<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>real_db_name</name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"It was not possible to process file: %s (3) because real_db_name isn't found. We might renqueue it, take into account that restores without schema-create files are not supported"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_table</name><argument_list>(<argument><expr><name><name>real_db_name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"File %s has been filter out"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name> <init>= <expr><call><name>new_schema_restore_job</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>JOB_RESTORE_SCHEMA_FILENAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>real_db_name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>post_queue</name></name></expr></argument>, <argument><expr><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_RESTORE</name></expr></argument>,<argument><expr><name>rj</name></expr></argument>,<argument><expr><name><name>real_db_name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type> <name>cmp_restore_job</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>rj1</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>rj2</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator>struct <name>restore_job</name> <operator>*</operator><operator>)</operator><name>rj1</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>drj</name><operator>-&gt;</operator><name>part</name></name> <operator>!=</operator> <operator>(</operator><operator>(</operator>struct <name>restore_job</name> <operator>*</operator><operator>)</operator><name>rj2</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>drj</name><operator>-&gt;</operator><name>part</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>a</name><init>=<expr><operator>(</operator><operator>(</operator>struct <name>restore_job</name> <operator>*</operator><operator>)</operator><name>rj1</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>drj</name><operator>-&gt;</operator><name>part</name></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name><init>=<expr><operator>(</operator><operator>(</operator>struct <name>restore_job</name> <operator>*</operator><operator>)</operator><name>rj2</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>drj</name><operator>-&gt;</operator><name>part</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>( <expr><name>a</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <name>b</name><operator>%</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>b</name><operator>=</operator><name>b</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <return>return <expr><name>a</name><operator>%</operator><literal type="number">2</literal> <operator>&gt;</operator> <name>b</name><operator>%</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><operator>(</operator>struct <name>restore_job</name> <operator>*</operator><operator>)</operator><name>rj1</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>drj</name><operator>-&gt;</operator><name>sub_part</name></name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator>struct <name>restore_job</name> <operator>*</operator><operator>)</operator><name>rj2</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>drj</name><operator>-&gt;</operator><name>sub_part</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>process_data_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>db_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>table_name</name></decl>;</decl_stmt>
  <comment type="line">// TODO: check if it is a data file</comment>
  <comment type="line">// TODO: we need to count sections of the data file to determine if it is ok.</comment>
  <decl_stmt><decl><type><name>guint</name></type> <name>part</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sub_part</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>get_database_table_part_name_from_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>db_name</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>table_name</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>part</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sub_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>db_name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>table_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"It was not possible to process file: %s (3)"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>real_db_name</name><init>=<expr><call><name>get_db_hash</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>,<argument><expr><name>db_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>real_db_name</name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"It was not possible to process file: %s (3) because real_db_name isn't found. We might renqueue it, take into account that restores without schema-create files are not supported"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>real_db_name</name><operator>!=</operator><name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>eval_table</name><argument_list>(<argument><expr><name><name>real_db_name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Skiping table: `%s`.`%s`"</literal></expr></argument>,<argument><expr><name><name>real_db_name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name><init>=<expr><call><name>append_new_db_table</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>db_name</name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name> <init>= <expr><call><name>new_data_restore_job</name><argument_list>( <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>JOB_RESTORE_FILENAME</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>sub_part</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_atomic_int_add</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dbt</name><operator>-&gt;</operator><name>remaining_jobs</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt> 
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>restore_job_list</name></name><operator>=</operator><call><name>g_list_insert_sorted</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>restore_job_list</name></name></expr></argument>,<argument><expr><name>rj</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cmp_restore_job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  dbt-&gt;restore_job_list=g_list_append(dbt-&gt;restore_job_list,rj);</comment>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>



</unit>
