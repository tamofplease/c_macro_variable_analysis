<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/mydumper.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    Domas Mituzas, Facebook ( domas at fb dot com )
                    Mark Leith, Oracle Corporation (mark dot leith at oracle dot com)
                    Andrew Hutchings, MariaDB Foundation (andrew at mariadb dot org)
                    Max Bubenick, Percona RDBA (max dot bubenick at percona dot com)
                    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LARGEFILE64_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FILE_OFFSET_BITS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>MARIADB_CLIENT_VERSION_STR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>MYSQL_SERVER_VERSION</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYSQL_SERVER_VERSION</name></cpp:macro> <cpp:value>MARIADB_CLIENT_VERSION_STR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gio/gio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib-unix.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common_options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logging.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"set_verbose.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tables_skiplist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_start_dump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_daemon_thread.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>DIRECTORY</name><index>[]</index></name> <init>= <expr><literal type="string">"export"</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Some earlier versions of MySQL do not yet define MYSQL_TYPE_JSON */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MYSQL_TYPE_JSON</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYSQL_TYPE_JSON</name></cpp:macro> <cpp:value>245</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Program options */</comment>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>output_directory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>output_directory_param</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>dump_directory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>daemon_mode</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>disk_limits</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>stream</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>no_delete</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>no_stream</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<comment type="line">// For daemon mode</comment>
<decl_stmt><decl><type><name>gboolean</name></type> <name>shutdown_triggered</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guint</name></type> <name>errors</name></decl>;</decl_stmt>

<function><type><name>gboolean</name></type> <name>arguments_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>option_name</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>GError</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>error</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>option_name</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="string">"--stream"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>stream</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>value</name><operator>==</operator><name>NULL</name> <operator>||</operator> <call><name>g_strstr_len</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>,<argument><expr><literal type="string">"TRADITIONAL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="string">"NO_DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>no_delete</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
      <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><literal type="string">"NO_STREAM_AND_NO_DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>no_delete</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>no_stream</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
      <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>GOptionEntry</name></type> <name><name>entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"database"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>db</name></expr>, <expr><literal type="string">"Database to dump"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"outputdir"</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_FILENAME</name></expr>, <expr><operator>&amp;</operator><name>output_directory_param</name></expr>,
     <expr><literal type="string">"Directory to output files to"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"no-data"</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>no_data</name></expr>, <expr><literal type="string">"Do not dump table data"</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"daemon"</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>daemon_mode</name></expr>, <expr><literal type="string">"Enable daemon mode"</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"stream"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_FLAG_OPTIONAL_ARG</name></expr>, <expr><name>G_OPTION_ARG_CALLBACK</name></expr> , <expr><operator>&amp;</operator><name>arguments_callback</name></expr>,
     <expr><literal type="string">"It will stream over STDOUT once the files has been written. Since v0.12.7-1, accepts NO_DELETE, NO_STREAM_AND_NO_DELETE and TRADITIONAL which is the default value and used if no parameter is given"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"no-delete"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>no_delete</name></expr>,
      <expr><literal type="string">"It will not delete the files after stream has been completed. It will be depercated and removed after v0.12.7-1. Used --stream"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"logfile"</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_FILENAME</name></expr>, <expr><operator>&amp;</operator><name>logfile</name></expr>,
     <expr><literal type="string">"Log file name to use, by default stdout is used"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"disk-limits"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>disk_limits</name></expr>,
      <expr><literal type="string">"Set the limit to pause and resume if determines there is no enough disk space."</literal>
      <literal type="string">"Accepts values like: '&lt;resume&gt;:&lt;pause&gt;' in MB."</literal>
      <literal type="string">"For instance: 100:500 will pause when there is only 100MB free and will"</literal>
      <literal type="string">"resume if 500MB are available"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tval</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>parse_disk_limits</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>strsplit</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>disk_limits</name></expr></argument>,<argument><expr><literal type="string">":"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>g_strv_length</name><argument_list>(<argument><expr><name>strsplit</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Parse limit failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>set_disk_limits</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>strsplit</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>strsplit</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_main</name><parameter_list>()</parameter_list><block>{<block_content>

</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GOptionContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>g_thread_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>g_option_context_new</name><argument_list>(<argument><expr><literal type="string">"multi-threaded MySQL dumping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GOptionGroup</name> <modifier>*</modifier></type><name>main_group</name> <init>=
      <expr><call><name>g_option_group_new</name><argument_list>(<argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="string">"Main Options"</literal></expr></argument>, <argument><expr><literal type="string">"Main Options"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>common_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>load_connection_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>load_regex_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>load_start_dump_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>load_daemon_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_option_context_set_main_group</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>tmpargv</name><init>=<expr><call><name>g_strdupv</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tmpargc</name><init>=<expr><name>argc</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_option_context_parse</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpargc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpargv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_print</name><argument_list>(<argument><expr><literal type="string">"option parsing failed: %s, try --help\n"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tmpargc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>stream</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name><operator>=</operator><call><name>strdup</name><argument_list>(<argument><expr><name><name>tmpargv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmpargc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name><name>tmpargv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>pos</name><operator>=</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>pos</name><operator>&lt;</operator><name>tmpargc</name></expr>;</condition><incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">",%s"</literal></expr></argument>,<argument><expr><name><name>tmpargv</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>tables_list</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>tmpargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>set_verbose</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>mydumper</name> <init>= <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"mydumper"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initialize_common_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>mydumper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>mydumper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_option_context_free</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initialize_main</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initialize_start_dump</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>hide_password</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ask_password</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>disk_limits</name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>parse_disk_limits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>program_version</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print_version</name><argument_list>(<argument><expr><literal type="string">"mydumper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>set_verbose</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>GDateTime</name> <modifier>*</modifier></type> <name>datetime</name> <init>= <expr><call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"MyDumper backup version: %s"</literal></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initialize_regex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>datetimestr</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_directory_param</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>datetimestr</name><operator>=</operator><call><name>g_date_time_format</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>,<argument><expr><literal type="string">"\%Y\%m\%d-\%H\%M\%S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>output_directory</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s-%s"</literal></expr></argument>, <argument><expr><name>DIRECTORY</name></expr></argument>, <argument><expr><name>datetimestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>datetimestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>output_directory</name><operator>=</operator><name>output_directory_param</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>g_date_time_unref</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>create_backup_dir</name><argument_list>(<argument><expr><name>output_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>daemon_mode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>initialize_daemon_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>dump_directory</name> <operator>=</operator> <name>output_directory</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Give ourselves an array of tables to dump */</comment>
  <if_stmt><if>if <condition>(<expr><name>tables_list</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>tables</name> <operator>=</operator> <call><name>get_table_list</name><argument_list>(<argument><expr><name>tables_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    
  <comment type="block">/* Process list of tables to omit if specified */</comment>
  <if_stmt><if>if <condition>(<expr><name>tables_skiplist_file</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>read_tables_skiplist</name><argument_list>(<argument><expr><name>tables_skiplist_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>daemon_mode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>run_daemon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>start_dump</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>output_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>logoutfile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>logoutfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>key_file</name></expr>)</condition><block type="pseudo"><block_content>  <expr_stmt><expr><call><name>g_key_file_free</name><argument_list>(<argument><expr><name>key_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<comment type="line">//  g_strfreev(argv);</comment>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><ternary><condition><expr><name>errors</name></expr> ?</condition><then> <expr><name>EXIT_FAILURE</name></expr> </then><else>: <expr><name>EXIT_SUCCESS</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
