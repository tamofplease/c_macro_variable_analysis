<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/myloader.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

    Authors:        Andrew Hutchings, MariaDB Foundation (andrew at mariadb dot org)
                    David Ducos, Percona (david dot ducos at percona dot com)

*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LARGEFILE64_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FILE_OFFSET_BITS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>MARIADB_CLIENT_VERSION_STR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>MYSQL_SERVER_VERSION</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYSQL_SERVER_VERSION</name></cpp:macro> <cpp:value>MARIADB_CLIENT_VERSION_STR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZWRAP_USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../zstd/zstd_zlibwrapper.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_stream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<comment type="line">//#include "getPassword.h"</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logging.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"set_verbose.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_detect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tables_skiplist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common_options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_jobs_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_directory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_restore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_pmm_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_restore_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_intermediate_queue.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>guint</name></type> <name>commit_count</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>input_directory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>directory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>pwd</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>overwrite_tables</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>innodb_optimize_keys</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>innodb_optimize_keys_per_table</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>innodb_optimize_keys_all_tables</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>enable_binlog</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>disable_redo_log</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>skip_triggers</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>skip_post</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>serial_tbl_creation</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>resume</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>source_db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>purge_mode_str</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>set_names_str</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>max_threads_per_table</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>max_threads_for_index_creation</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>append_if_not_exist</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>stream</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>no_delete</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<comment type="line">//unsigned long long int total_data_sql_files = 0;</comment>
<comment type="line">//unsigned long long int progress = 0;</comment>
<comment type="line">//GHashTable *db_hash=NULL;</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GHashTable</name> <modifier>*</modifier></type><name>db_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>shutdown_triggered</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>DIRECTORY</name><index>[]</index></name> <init>= <expr><literal type="string">"import"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>pmm_resolution</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>pmm_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>pmm</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<function><type><name>gboolean</name></type> <name>arguments_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>option_name</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>GError</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>error</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>option_name</name></expr></argument>,<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><literal type="string">"--innodb-optimize-keys"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>innodb_optimize_keys</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>value</name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>innodb_optimize_keys_per_table</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>innodb_optimize_keys_all_tables</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
      <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>AFTER_IMPORT_PER_TABLE</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>innodb_optimize_keys_per_table</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>innodb_optimize_keys_all_tables</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
      <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>AFTER_IMPORT_ALL_TABLES</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>innodb_optimize_keys_all_tables</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>innodb_optimize_keys_per_table</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
      <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>GOptionEntry</name></type> <name><name>entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"directory"</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>input_directory</name></expr>,
     <expr><literal type="string">"Directory of the dump to import"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"queries-per-transaction"</literal></expr>, <expr><literal type="char">'q'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>commit_count</name></expr>,
     <expr><literal type="string">"Number of queries per transaction, default 1000"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"overwrite-tables"</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>overwrite_tables</name></expr>,
     <expr><literal type="string">"Drop tables if they already exist"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"append-if-not-exist"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>,<expr><operator>&amp;</operator><name>append_if_not_exist</name></expr>,
      <expr><literal type="string">"Appends IF NOT EXISTS to the create table statements. This will be removed when https://bugs.mysql.com/bug.php?id=103791 has been implemented"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"database"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>db</name></expr>,
     <expr><literal type="string">"An alternative database to restore into"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"source-db"</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>source_db</name></expr>,
     <expr><literal type="string">"Database to restore"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"enable-binlog"</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>enable_binlog</name></expr>,
     <expr><literal type="string">"Enable binary logging of the restore data"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"innodb-optimize-keys"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_FLAG_OPTIONAL_ARG</name></expr>, <expr><name>G_OPTION_ARG_CALLBACK</name></expr> , <expr><operator>&amp;</operator><name>arguments_callback</name></expr>,
     <expr><literal type="string">"Creates the table without the indexes and it adds them at the end. Options: AFTER_IMPORT_PER_TABLE and AFTER_IMPORT_ALL_TABLES. Default: AFTER_IMPORT_PER_TABLE"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"set-names"</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>set_names_str</name></expr>, 
      <expr><literal type="string">"Sets the names, use it at your own risk, default binary"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"logfile"</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_FILENAME</name></expr>, <expr><operator>&amp;</operator><name>logfile</name></expr>,
     <expr><literal type="string">"Log file name to use, by default stdout is used"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"purge-mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>purge_mode_str</name></expr>, 
      <expr><literal type="string">"This specify the truncate mode which can be: NONE, DROP, TRUNCATE and DELETE"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"disable-redo-log"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>disable_redo_log</name></expr>,
      <expr><literal type="string">"Disables the REDO_LOG and enables it after, doesn't check initial status"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"rows"</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>rows</name></expr>,
     <expr><literal type="string">"Split the INSERT statement into this many rows."</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"max-threads-per-table"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>max_threads_per_table</name></expr>,
     <expr><literal type="string">"Maximum number of threads per table to use, default 4"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"max-threads-for-index-creation"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>max_threads_for_index_creation</name></expr>,
     <expr><literal type="string">"Maximum number of threads for index creation, default 4"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"skip-triggers"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>skip_triggers</name></expr>, <expr><literal type="string">"Do not import triggers. By default, it imports triggers"</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"skip-post"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>skip_post</name></expr>,
     <expr><literal type="string">"Do not import events, stored procedures and functions. By default, it imports events, stored procedures nor functions"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"no-data"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>no_data</name></expr>, <expr><literal type="string">"Do not dump or import table data"</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"serialized-table-creation"</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>serial_tbl_creation</name></expr>, 
      <expr><literal type="string">"Table recreation will be executed in series, one thread at a time"</literal></expr>,<expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"resume"</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>resume</name></expr>,
      <expr><literal type="string">"Expect to find resume file in backup dir and will only process those files"</literal></expr>,<expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"pmm-path"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>pmm_path</name></expr>,
      <expr><literal type="string">"which default value will be /usr/local/percona/pmm2/collectors/textfile-collector/high-resolution"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"pmm-resolution"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>pmm_resolution</name></expr>,
      <expr><literal type="string">"which default will be high"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,    
    <expr><block>{<expr><literal type="string">"stream"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>stream</name></expr>,
     <expr><literal type="string">"It will receive the streamo from STDIN and creates the file in the disk before start processing"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"no-delete"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>no_delete</name></expr>,
      <expr><literal type="string">"It will not delete the files after stream has been completed"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>GHashTable</name> <modifier>*</modifier></type> <name>myloader_initialize_hash_of_session_variables</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>set_session_hash</name><init>=<expr><call><name>initialize_hash_of_session_variables</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>enable_binlog</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>set_session_hash</name></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"SQL_LOG_BIN"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>commit_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>set_session_hash</name></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"AUTOCOMMIT"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>set_session_hash</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>gchar</name> <modifier>*</modifier></type> <name>print_time</name><parameter_list>(<parameter><decl><type><name>GTimeSpan</name></type> <name>timespan</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GTimeSpan</name></type> <name>days</name>   <init>= <expr><name>timespan</name><operator>/</operator><name>G_TIME_SPAN_DAY</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GTimeSpan</name></type> <name>hours</name>  <init>=<expr><operator>(</operator><name>timespan</name><operator>-</operator><operator>(</operator><name>days</name><operator>*</operator><name>G_TIME_SPAN_DAY</name><operator>)</operator><operator>)</operator><operator>/</operator><name>G_TIME_SPAN_HOUR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GTimeSpan</name></type> <name>minutes</name><init>=<expr><operator>(</operator><name>timespan</name><operator>-</operator><operator>(</operator><name>days</name><operator>*</operator><name>G_TIME_SPAN_DAY</name><operator>)</operator><operator>-</operator><operator>(</operator><name>hours</name><operator>*</operator><name>G_TIME_SPAN_HOUR</name><operator>)</operator><operator>)</operator><operator>/</operator><name>G_TIME_SPAN_MINUTE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GTimeSpan</name></type> <name>seconds</name><init>=<expr><operator>(</operator><name>timespan</name><operator>-</operator><operator>(</operator><name>days</name><operator>*</operator><name>G_TIME_SPAN_DAY</name><operator>)</operator><operator>-</operator><operator>(</operator><name>hours</name><operator>*</operator><name>G_TIME_SPAN_HOUR</name><operator>)</operator><operator>-</operator><operator>(</operator><name>minutes</name><operator>*</operator><name>G_TIME_SPAN_MINUTE</name><operator>)</operator><operator>)</operator><operator>/</operator><name>G_TIME_SPAN_SECOND</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%ld %02ld:%02ld:%02ld"</literal></expr></argument>,<argument><expr><name>days</name></expr></argument>,<argument><expr><name>hours</name></expr></argument>,<argument><expr><name>minutes</name></expr></argument>,<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>gint</name></type> <name>compare_by_time</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return
    <expr><call><name>g_date_time_difference</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>finish_time</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>start_data_time</name></expr></argument>)</argument_list></call> <operator>&gt;</operator>
    <call><name>g_date_time_difference</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>finish_time</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>start_data_time</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>create_database</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>database</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filename</name> <init>=
      <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s-schema-create.sql"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filenamegz</name> <init>=
      <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s-schema-create.sql%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/%s-schema-create.sql"</literal></expr></argument>,
                                          <argument><expr><name>directory</name></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filepathgz</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/%s-schema-create.sql%s"</literal></expr></argument>,
                                            <argument><expr><name>directory</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>g_file_test</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>G_FILE_TEST_EXISTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>restore_data_from_file</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>g_file_test</name><argument_list>(<argument><expr><name>filepathgz</name></expr></argument>, <argument><expr><name>G_FILE_TEST_EXISTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>restore_data_from_file</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filenamegz</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"CREATE DATABASE IF NOT EXISTS `%s`"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Fail to create database: %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>configuration</name></name></type> <name>conf</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GOptionContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_thread_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>source_db</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>source_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>g_option_context_new</name><argument_list>(<argument><expr><literal type="string">"multi-threaded MySQL loader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GOptionGroup</name> <modifier>*</modifier></type><name>main_group</name> <init>=
      <expr><call><name>g_option_group_new</name><argument_list>(<argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="string">"Main Options"</literal></expr></argument>, <argument><expr><literal type="string">"Main Options"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>common_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  load_common_entries(main_group);</comment>
  <expr_stmt><expr><call><name>load_connection_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>load_regex_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>load_restore_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_option_context_set_main_group</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>tmpargv</name><init>=<expr><call><name>g_strdupv</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tmpargc</name><init>=<expr><name>argc</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_option_context_parse</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpargc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpargv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_print</name><argument_list>(<argument><expr><literal type="string">"option parsing failed: %s, try --help\n"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>tmpargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>set_verbose</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initialize_common_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"myloader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_option_context_free</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>hide_password</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ask_password</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>program_version</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print_version</name><argument_list>(<argument><expr><literal type="string">"myloader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>set_verbose</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZWRAP_USE_ZSTD</name></cpp:ifdef>
  <expr_stmt><expr><name>compress_extension</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">".zst"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>compress_extension</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">".gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>set_names_str</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>tmp_str</name><init>=<expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"/*!40101 SET NAMES %s*/"</literal></expr></argument>,<argument><expr><name>set_names_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>set_names_str</name><operator>=</operator><name>tmp_str</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else<block type="pseudo"><block_content> 
    <expr_stmt><expr><name>set_names_str</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"/*!40101 SET NAMES binary*/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pmm_path</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>pmm</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pmm_resolution</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>pmm_resolution</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"high"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>pmm_resolution</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>pmm</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pmm_path</name><operator>=</operator><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"/usr/local/percona/pmm2/collectors/textfile-collector/%s-resolution"</literal></expr></argument>,<argument><expr><name>pmm_resolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>pmmthread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pmm</name></expr>)</condition><block>{<block_content>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Using PMM resolution %s at %s"</literal></expr></argument>, <argument><expr><name>pmm_resolution</name></expr></argument>, <argument><expr><name>pmm_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>serror</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pmmthread</name> <operator>=</operator>
        <call><name>g_thread_create</name><argument_list>(<argument><expr><name>pmm_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pmmthread</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not create pmm thread: %s"</literal></expr></argument>, <argument><expr><name><name>serror</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_error_free</name><argument_list>(<argument><expr><name>serror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>initialize_job</name><argument_list>(<argument><expr><name>purge_mode_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>current_dir</name><init>=<expr><call><name>g_get_current_dir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_directory</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>GDateTime</name> <modifier>*</modifier></type> <name>datetime</name> <init>= <expr><call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>datetimestr</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>datetimestr</name><operator>=</operator><call><name>g_date_time_format</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>,<argument><expr><literal type="string">"\%Y\%m\%d-\%H\%M\%S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>directory</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/%s-%s"</literal></expr></argument>,<argument><expr><name>current_dir</name></expr></argument>, <argument><expr><name>DIRECTORY</name></expr></argument>, <argument><expr><name>datetimestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>create_backup_dir</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_date_time_unref</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>datetimestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"a directory needs to be specified, see --help\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>directory</name><operator>=</operator><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name>input_directory</name></expr></argument>,<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>?</condition><then><expr><literal type="string">""</literal></expr></then><else>:<expr><name>current_dir</name></expr></else></ternary></expr></argument>, <argument><expr><name>input_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_file_test</name><argument_list>(<argument><expr><name>input_directory</name></expr></argument>,<argument><expr><name>G_FILE_TEST_IS_DIR</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>create_backup_dir</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"the specified directory doesn't exists\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/metadata"</literal></expr></argument>, <argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_file_test</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>G_FILE_TEST_EXISTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"the specified directory %s is not a mydumper backup"</literal></expr></argument>,<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<comment type="line">//      initialize_directory();</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>current_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_chdir</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Process list of tables to omit if specified */</comment>
  <if_stmt><if>if <condition>(<expr><name>tables_skiplist_file</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>read_tables_skiplist</name><argument_list>(<argument><expr><name>tables_skiplist_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>initialize_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initialize_common</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initialize_regex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>serror</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>sthread</name> <init>=
      <expr><call><name>g_thread_create</name><argument_list>(<argument><expr><name>signal_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serror</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sthread</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not create signal thread: %s"</literal></expr></argument>, <argument><expr><name><name>serror</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_error_free</name><argument_list>(<argument><expr><name>serror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>mysql_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>m_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><literal type="string">"myloader"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>set_session</name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>detected_server</name> <operator>=</operator> <call><name>detect_server</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>detect_server_version</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>set_session_hash</name> <init>= <expr><call><name>myloader_initialize_hash_of_session_variables</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>defaults_file</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>load_session_hash_from_key_file</name><argument_list>(<argument><expr><name>key_file</name></expr></argument>,<argument><expr><name>set_session_hash</name></expr></argument>,<argument><expr><literal type="string">"myloader_variables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>refresh_set_session_from_hash</name><argument_list>(<argument><expr><name>set_session</name></expr></argument>,<argument><expr><name>set_session_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>execute_gstring</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>set_session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TODO: we need to set the variables in the initilize session varibles, not from:</comment>
<comment type="line">//  if (mysql_query(conn, "SET SESSION wait_timeout = 2147483")) {</comment>
<comment type="line">//    g_warning("Failed to increase wait_timeout: %s", mysql_error(conn));</comment>
<comment type="line">//  }</comment>

<comment type="line">//  if (!enable_binlog)</comment>
<comment type="line">//    mysql_query(conn, "SET SQL_LOG_BIN=0");</comment>
  <if_stmt><if>if <condition>(<expr><name>disable_redo_log</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>get_major</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>get_secondary</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">21</literal><operator>)</operator></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Disabling redologs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"ALTER INSTANCE DISABLE INNODB REDO_LOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"Disabling redologs is not supported for version %d.%d"</literal></expr></argument>, <argument><expr><call><name>get_major</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_secondary</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"/*!40014 SET FOREIGN_KEY_CHECKS=0*/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// To here.</comment>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>database_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>table_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>data_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>post_table_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>post_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>index_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>view_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>ready</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>pause_resume</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>table_list_mutex</name></name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>stream_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>table_hash</name></name> <operator>=</operator> <call><name>g_hash_table_new</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>table_hash_mutex</name></name><operator>=</operator><call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>db_hash</name><operator>=</operator><call><name>g_hash_table_new_full</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>g_file_test</name><argument_list>(<argument><expr><literal type="string">"resume"</literal></expr></argument>,<argument><expr><name>G_FILE_TEST_EXISTS</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>resume</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Resume file found but --resume has not been provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>resume</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Resume file not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>thread_data</name></name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>thread_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>conf</name></name> <operator>=</operator> <operator>&amp;</operator><name>conf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>thrconn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>current_database</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>tables_list</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>tables</name> <operator>=</operator> <call><name>get_table_list</name><argument_list>(<argument><expr><name>tables_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="line">// Create database before the thread, to allow connection</comment>
  <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type> <name>d</name><init>=<expr><call><name>get_db_hash</name><argument_list>(<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>create_database</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>schema_created</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initialize_intermediate_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>resume</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"We don't expect to find resume files in a stream scenario"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>initialize_stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initialize_loader_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>wait_stream_to_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>process_directory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>wait_loader_threads_to_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>ready</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>disable_redo_log</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"ALTER INSTANCE ENABLE INNODB REDO_LOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>data_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>data_queue</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checksum_databases</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>stream</name> <operator>&amp;&amp;</operator> <name>no_delete</name> <operator>==</operator> <name>FALSE</name> <operator>&amp;&amp;</operator> <name>input_directory</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <comment type="line">// remove metadata files</comment>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>e</name><init>=<expr><name><name>conf</name><operator>.</operator><name>metadata_list</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>m_remove</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>e</name><operator>=</operator><name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>m_remove</name><argument_list>(<argument><expr><name>directory</name></expr></argument>,<argument><expr><literal type="string">"metadata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_rmdir</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Restore directory not removed: %s"</literal></expr></argument>, <argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>database_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>table_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>pause_resume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>post_table_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>post_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free_hash</name><argument_list>(<argument><expr><name>set_session_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_hash_table_remove_all</name><argument_list>(<argument><expr><name>set_session_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_hash_table_unref</name><argument_list>(<argument><expr><name>set_session_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_thread_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_library_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free_loader_threads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pmm</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>kill_pmm_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    g_thread_join(pmmthread);</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free_table_hash</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>table_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_hash_table_remove_all</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>table_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_hash_table_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>table_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>checksum_list</name></name></expr></argument>,<argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>logoutfile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>logoutfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>stop_signal_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
  GList * tl=g_list_sort(conf.table_list, compare_by_time);
  g_message("Import timings:");
  g_message("Data      \t| Index    \t| Total   \t| Table");
  while (tl != NULL){
    struct db_table * dbt=tl-&gt;data;
    GTimeSpan diff1=g_date_time_difference(dbt-&gt;start_index_time,dbt-&gt;start_time);
    GTimeSpan diff2=g_date_time_difference(dbt-&gt;finish_time,dbt-&gt;start_index_time);
    g_message("%s\t| %s\t| %s\t| `%s`.`%s`",print_time(diff1),print_time(diff2),print_time(diff1+diff2),dbt-&gt;real_database,dbt-&gt;real_table);
    tl=tl-&gt;next;
  }
*/</comment>

  <return>return <expr><ternary><condition><expr><name>errors</name></expr> ?</condition><then> <expr><name>EXIT_FAILURE</name></expr> </then><else>: <expr><name>EXIT_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

</unit>
