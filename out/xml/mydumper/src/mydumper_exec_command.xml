<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/mydumper_exec_command.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZWRAP_USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../zstd/zstd_zlibwrapper.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>errno</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>m_open</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>compress_extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GAsyncQueue</name> <modifier>*</modifier></type><name>stream_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>no_delete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier><modifier>*</modifier></type><name>exec_command_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>exec_command</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>num_exec_threads</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHashTable</name><modifier>*</modifier></type> <name>pid_file_table</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>exec_this_command</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>,<parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>c_arg</name></decl></parameter>,<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>childpid</name><init>=<expr><call><name>vfork</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><operator>!</operator><name>childpid</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>pid_file_table</name></expr></argument>,<argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execv</name><argument_list>(<argument><expr><name>bin</name></expr></argument>,<argument><expr><name>c_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>wstatus</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>waitchildpid</name><init>=<expr><call><name>wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wstatus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// TODO: do we want to keep the file depending og the wstatus ??</comment>
    <if_stmt><if>if <condition>(<expr><name>no_delete</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>key</name><init>=<expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>waitchildpid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>filename</name><operator>=</operator><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>pid_file_table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_hash_table_remove</name><argument_list>(<argument><expr><name>pid_file_table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>process_exec_command</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>space</name><init>=<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>exec_command</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>exec_command</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>space</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>filename</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>bin</name><init>=<expr><call><name>g_strndup</name><argument_list>(<argument><expr><name>exec_command</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>arguments</name><init>=<expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>space</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier> <specifier>volatile</specifier></type> <name>c_arg</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>filename_pos</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>c_arg</name><operator>=</operator><call><name>g_strdupv</name><argument_list>(<argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>g_strv_length</name><argument_list>(<argument><expr><name>c_arg</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>c_arg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"FILENAME"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>c</name><init>=<expr><call><name>g_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>*</operator><name>c</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>filename_pos</name><operator>=</operator><call><name>g_list_prepend</name><argument_list>(<argument><expr><name>filename_pos</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
    <expr_stmt><expr><name>filename</name><operator>=</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
<comment type="line">//    char *used_filemame=g_path_get_basename(filename);</comment>
    <expr_stmt><expr><name>iter</name><operator>=</operator><name>filename_pos</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>iter</name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name><name>c_arg</name><index>[<expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>guint</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>]</index></name><operator>=</operator><name>filename</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while> 
    <expr_stmt><expr><call><name>exec_this_command</name><argument_list>(<argument><expr><name>bin</name></expr></argument>,<argument><expr><name>c_arg</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>GOptionEntry</name></type> <name><name>exec_entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"exec-threads"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>num_exec_threads</name></expr>,
     <expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>load_exec_entries</name><parameter_list>(<parameter><decl><type><name>GOptionGroup</name> <modifier>*</modifier></type><name>main_group</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>exec_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_exec_command</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>stream_queue</name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>exec_command_thread</name><operator>=</operator><call><name>g_new</name><argument_list>(<argument><expr><name>GThread</name> <operator>*</operator></expr></argument> , <argument><expr><name>num_exec_threads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pid_file_table</name><operator>=</operator><call><name>g_hash_table_new_full</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_free</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_free</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_exec_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>exec_command_thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>g_thread_create</name><argument_list>(<argument><expr><operator>(</operator><name>GThreadFunc</name><operator>)</operator><name>process_exec_command</name></expr></argument>, <argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wait_exec_command_to_finish</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_exec_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_exec_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>g_thread_join</name><argument_list>(<argument><expr><name><name>exec_command_thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
