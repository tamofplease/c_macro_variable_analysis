<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/mydumper_working_thread.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    Domas Mituzas, Facebook ( domas at fb dot com )
                    Mark Leith, Oracle Corporation (mark dot leith at oracle dot com)
                    Andrew Hutchings, MariaDB Foundation (andrew at mariadb dot org)
                    Max Bubenick, Percona RDBA (max dot bubenick at percona dot com)
                    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LARGEFILE64_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FILE_OFFSET_BITS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>MARIADB_CLIENT_VERSION_STR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>MYSQL_SERVER_VERSION</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYSQL_SERVER_VERSION</name></cpp:macro> <cpp:value>MARIADB_CLIENT_VERSION_STR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZWRAP_USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../zstd/zstd_zlibwrapper.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcre.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gerror.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gio/gio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_detect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<comment type="line">//#include "common_options.h"</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib-unix.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logging.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"set_verbose.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/statvfs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tables_skiplist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_start_dump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_jobs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_working_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_masquerade.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_jobs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_chunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_write.h"</cpp:file></cpp:include>

<comment type="block">/* Some earlier versions of MySQL do not yet define MYSQL_TYPE_JSON */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MYSQL_TYPE_JSON</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYSQL_TYPE_JSON</name></cpp:macro> <cpp:value>245</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>init_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="block">/* Program options */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>no_locks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>complete_insert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guint</name></type> <name>rows_per_file</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>use_savepoints</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>load_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>function_pointer</name></name></type> <name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>dump_triggers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GAsyncQueue</name> <modifier>*</modifier></type><name>stream_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>detected_server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>no_data</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>m_open</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> (<modifier>*</modifier><name>m_close</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> (<modifier>*</modifier><name>m_write</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>compress_extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GString</name> <modifier>*</modifier></type><name>set_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>num_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>tables_skiplist_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GMutex</name> <modifier>*</modifier></type><name>ready_database_dump_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GHashTable</name> <modifier>*</modifier></type><name>all_where_per_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gint</name></type> <name>database_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//gint table_counter = 0;</comment>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ignore_engines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>binlog_snapshot_gtid_executed</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>binlog_snapshot_gtid_executed_status</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>binlog_snapshot_gtid_executed_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ignore</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>tidb_snapshot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GList</name> <modifier>*</modifier></type><name>no_updated_tables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_tz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>need_dummy_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>need_dummy_toku_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>compress_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sync_wait</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>ignore_generated_fields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>no_schemas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>dump_events</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>dump_routines</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>no_dump_views</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>less_locking</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>success_on_1146</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GList</name>  <modifier>*</modifier></type><name>innodb_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>innodb_table_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GList</name>  <modifier>*</modifier></type><name>non_innodb_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>non_innodb_table_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GList</name> <modifier>*</modifier></type><name>table_schemas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>table_schemas_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GList</name> <modifier>*</modifier></type><name>trigger_schemas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>trigger_schemas_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GList</name> <modifier>*</modifier></type><name>view_schemas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>view_schemas_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GList</name> <modifier>*</modifier></type><name>schema_post</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gint</name></type> <name>non_innodb_done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>less_locking_threads</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>trx_consistency_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>set_names_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>configuration_per_table</name></name></type> <name>conf_per_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>character_set_hash</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>character_set_hash_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gboolean</name></type> <name>hex_blob</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>dump_checksums</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>data_checksums</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>schema_checksums</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>routine_checksums</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>exit_if_broken_table_found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<comment type="line">// For daemon mode</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>dump_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>shutdown_triggered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GAsyncQueue</name> <modifier>*</modifier></type><name>start_scheduled_dump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GCond</name> <modifier>*</modifier></type><name>ll_cond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>statement_size</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>build_empty_files</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>where_option</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>consistent_snapshot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>consistent_snapshot_token_I</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>consistent_snapshot_token_II</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>rows_per_chunk</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>split_partitions</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GOptionEntry</name></type> <name><name>working_thread_entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"events"</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>dump_events</name></expr>, <expr><literal type="string">"Dump events. By default, it do not dump events"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"routines"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>dump_routines</name></expr>,
     <expr><literal type="string">"Dump stored procedures and functions. By default, it do not dump stored procedures nor functions"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"no-views"</literal></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>no_dump_views</name></expr>, <expr><literal type="string">"Do not dump VIEWs"</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"split-partitions"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>split_partitions</name></expr>,
      <expr><literal type="string">"Dump partitions into separate files. This options overrides the --rows option for partitioned tables."</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"checksum-all"</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>dump_checksums</name></expr>,
     <expr><literal type="string">"Dump checksums for all elements"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"data-checksums"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>data_checksums</name></expr>,
     <expr><literal type="string">"Dump table checksums with the data"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"schema-checksums"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>schema_checksums</name></expr>,
     <expr><literal type="string">"Dump schema table and view creation checksums"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"routine-checksums"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>routine_checksums</name></expr>,
     <expr><literal type="string">"Dump triggers, functions and routines checksums"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"tz-utc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_FLAG_REVERSE</name></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>skip_tz</name></expr>,
     <expr><literal type="string">"SET TIME_ZONE='+00:00' at top of dump to allow dumping of TIMESTAMP data "</literal>
     <literal type="string">"when a server has data in different time zones or data is being moved "</literal>
     <literal type="string">"between servers with different time zones, defaults to on use "</literal>
     <literal type="string">"--skip-tz-utc to disable."</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"complete-insert"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>complete_insert</name></expr>,
     <expr><literal type="string">"Use complete INSERT statements that include column names"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"skip-tz-utc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>skip_tz</name></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"tidb-snapshot"</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>tidb_snapshot</name></expr>,
     <expr><literal type="string">"Snapshot to use for TiDB"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"exit-if-broken-table-found"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>exit_if_broken_table_found</name></expr>,
      <expr><literal type="string">"Exits if a broken table has been found"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"success-on-1146"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>success_on_1146</name></expr>,
     <expr><literal type="string">"Not increment error count and Warning instead of Critical in case of "</literal>
     <literal type="string">"table doesn't exist"</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"use-savepoints"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>use_savepoints</name></expr>,
     <expr><literal type="string">"Use savepoints to reduce metadata locking issues, needs SUPER privilege"</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"statement-size"</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>statement_size</name></expr>,
     <expr><literal type="string">"Attempted size of INSERT statement in bytes, default 1000000"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"build-empty-files"</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>build_empty_files</name></expr>,
     <expr><literal type="string">"Build dump files even if no data available from table"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"where"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>where_option</name></expr>,
      <expr><literal type="string">"Dump only selected records."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"ignore-engines"</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>ignore_engines</name></expr>,
     <expr><literal type="string">"Comma delimited list of storage engines to ignore"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hex-blob"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>hex_blob</name></expr>,
      <expr><literal type="string">"Dump binary columns using hexadecimal notation"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"rows"</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>rows_per_chunk</name></expr>,
     <expr><literal type="string">"Try to split tables into chunks of this many rows."</literal></expr>,
<comment type="line">//    {"rows", 'r', 0, G_OPTION_ARG_INT, &amp;rows_per_file,</comment>
<comment type="line">//     "Try to split tables into chunks of this many rows. This option turns off "</comment>
<comment type="line">//     "--chunk-filesize",</comment>
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>dump_database_thread</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>gchar</name> <modifier>*</modifier></type><name>get_primary_key_string</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>guint64</name></type> <name>estimate_count</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>,
                       <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>guint64</name></type> <name>write_table_data_into_file</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>write_table_job_into_file</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type> <name>tj</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>load_working_thread_entries</name><parameter_list>(<parameter><decl><type><name>GOptionGroup</name> <modifier>*</modifier></type><name>main_group</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>working_thread_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>guint</name></type> <name>min_rows_per_file</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>max_rows_per_file</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>parse_rows_per_chunk</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>split</name><init>=<expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>rows_per_chunk</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>len</name> <init>= <expr><call><name>g_strv_length</name><argument_list>(<argument><expr><name>split</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>len</name></expr>)</condition><block>{<block_content>
   <case>case <expr><literal type="number">0</literal></expr>:</case>
     <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"This should not happend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <break>break;</break>
   <case>case <expr><literal type="number">1</literal></expr>:</case>
     <expr_stmt><expr><name>rows_per_file</name><operator>=</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>min_rows_per_file</name><operator>=</operator><name>rows_per_file</name></expr>;</expr_stmt>
     <expr_stmt><expr><name>max_rows_per_file</name><operator>=</operator><name>rows_per_file</name></expr>;</expr_stmt>
     <break>break;</break>
   <case>case <expr><literal type="number">2</literal></expr>:</case>
     <expr_stmt><expr><name>min_rows_per_file</name><operator>=</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>rows_per_file</name><operator>=</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>max_rows_per_file</name><operator>=</operator><name>rows_per_file</name></expr>;</expr_stmt>
     <break>break;</break>
   <default>default:</default>
     <expr_stmt><expr><name>min_rows_per_file</name><operator>=</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>rows_per_file</name><operator>=</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>max_rows_per_file</name><operator>=</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>split</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>initialize_working_thread</name><parameter_list>()</parameter_list><block>{<block_content>

  <if_stmt><if>if <condition>(<expr><name>rows_per_chunk</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>parse_rows_per_chunk</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name>min_rows_per_file</name> <operator>=</operator> <name>rows_per_file</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>max_rows_per_file</name> <operator>=</operator> <name>rows_per_file</name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>character_set_hash</name><operator>=</operator><call><name>g_hash_table_new_full</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_free</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>character_set_hash_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>non_innodb_table_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>innodb_table_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>view_schemas_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>table_schemas_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>trigger_schemas_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>innodb_table_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>init_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ll_cond</name> <operator>=</operator> <call><name>g_cond_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>consistent_snapshot</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>consistent_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>consistent_snapshot_token_I</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>consistent_snapshot_token_II</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>consistent_snapshot_token_II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>less_locking</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>less_locking_threads</name> <operator>=</operator> <name>num_threads</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>initialize_jobs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initialize_chunk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initialize_write</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <comment type="block">/* savepoints workaround to avoid metadata locking issues
     doesnt work for chuncks */</comment>
  <if_stmt><if>if <condition>(<expr><name>rows_per_file</name> <operator>&amp;&amp;</operator> <name>use_savepoints</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>use_savepoints</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"--use-savepoints disabled by --rows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Give ourselves an array of engines to ignore */</comment>
  <if_stmt><if>if <condition>(<expr><name>ignore_engines</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ignore</name> <operator>=</operator> <call><name>g_strsplit</name><argument_list>(<argument><expr><name>ignore_engines</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>compress_output</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>m_open</name><operator>=</operator><operator>&amp;</operator><name>g_fopen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_close</name><operator>=</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>fclose</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_write</name><operator>=</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>write_file</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>compress_extension</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>m_open</name><operator>=</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>gzopen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_close</name><operator>=</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>gzclose</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_write</name><operator>=</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gzwrite</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZWRAP_USE_ZSTD</name></cpp:ifdef>
    <expr_stmt><expr><name>compress_extension</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">".zst"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>compress_extension</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">".gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>dump_checksums</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>data_checksums</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>schema_checksums</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>routine_checksums</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

</block_content>}</block></function>


<function><type><name>void</name></type> <name>finalize_working_thread</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name>character_set_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_free</name><argument_list>(<argument><expr><name>character_set_hash_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_free</name><argument_list>(<argument><expr><name>innodb_table_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_free</name><argument_list>(<argument><expr><name>non_innodb_table_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_free</name><argument_list>(<argument><expr><name>view_schemas_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_free</name><argument_list>(<argument><expr><name>table_schemas_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_free</name><argument_list>(<argument><expr><name>trigger_schemas_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_free</name><argument_list>(<argument><expr><name>init_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>consistent_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_free</name><argument_list>(<argument><expr><name>consistent_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_free</name><argument_list>(<argument><expr><name>consistent_snapshot_token_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>consistent_snapshot_token_II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_free</name><argument_list>(<argument><expr><name>consistent_snapshot_token_II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="line">// Free structures</comment>
<function><type><name>void</name></type> <name>free_table_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"free_table_job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>where</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>where</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>order_by</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>order_by</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name></name></expr>)</condition><block>{<block_content>
    <switch>switch <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name></expr>)</condition><block>{<block_content>
     <case>case <expr><name>INTEGER</name></expr>:</case>
       <expr_stmt><expr><call><name>free_integer_step</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <break>break;</break>
     <case>case <expr><name>CHAR</name></expr>:</case>
       <expr_stmt><expr><call><name>free_char_step</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <break>break;</break>
     <default>default:</default>
       <break>break;</break>
    </block_content>}</block></switch><empty_stmt>;</empty_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<comment type="line">//    g_free(tj-&gt;filename);</comment>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>thd_JOB_DUMP_ALL_DATABASES</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
  <comment type="line">// TODO: This should be in a job as needs to be done by a thread.</comment>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>databases</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"SHOW DATABASES"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><operator>(</operator><name>databases</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Unable to list databases: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>databases</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"information_schema"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"performance_schema"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"data_dictionary"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type> <name>db_tmp</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>get_database</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>,<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>db_tmp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_schemas</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>eval_regex</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>db_tmp</name><operator>-&gt;</operator><name>ad_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>db_tmp</name><operator>-&gt;</operator><name>already_dumped</name></name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>create_job_to_dump_schema</name><argument_list>(<argument><expr><name><name>db_tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db_tmp</name><operator>-&gt;</operator><name>already_dumped</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>db_tmp</name><operator>-&gt;</operator><name>ad_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>create_job_to_dump_database</name><argument_list>(<argument><expr><name>db_tmp</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><call><name>g_atomic_int_dec_and_test</name><argument_list>(<argument><expr><operator>&amp;</operator><name>database_counter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>ready_database_dump_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>databases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>thd_JOB_DUMP_DATABASE</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dump_database_job</name></name> <modifier>*</modifier></type> <name>ddj</name> <init>= <expr><operator>(</operator>struct <name>dump_database_job</name> <operator>*</operator><operator>)</operator><name><name>job</name><operator>-&gt;</operator><name>job_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d dumping db information for `%s`"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,
            <argument><expr><name><name>ddj</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dump_database_thread</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>, <argument><expr><name><name>ddj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ddj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>g_atomic_int_dec_and_test</name><argument_list>(<argument><expr><operator>&amp;</operator><name>database_counter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>ready_database_dump_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_table_info_to_process_from_list</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>table_list</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>dt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>x</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>table_list</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>dt</name> <operator>=</operator> <call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>table_list</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>query</name> <operator>=</operator>
        <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW TABLE STATUS FROM %s LIKE '%s'"</literal></expr></argument>, <argument><expr><name><name>dt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>query</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error showing table status on: %s - Could not execute query: %s"</literal></expr></argument>, <argument><expr><name><name>dt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint</name></type> <name>ecol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ccol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>collcol</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>determine_ecol_ccol</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ccol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>collcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type> <name>database</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>get_database</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>dt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>database</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>database</name><operator>-&gt;</operator><name>already_dumped</name></name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>ad_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>database</name><operator>-&gt;</operator><name>already_dumped</name></name></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>create_job_to_dump_schema</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>database</name><operator>-&gt;</operator><name>already_dumped</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>ad_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        g_async_queue_push(conf-&gt;ready_database_dump, GINT_TO_POINTER(1));</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not list tables for %s: %s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

      <decl_stmt><decl><type><name>int</name></type> <name>is_view</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name><operator>)</operator> <operator>&amp;&amp;</operator>
          <operator>(</operator><name><name>row</name><index>[<expr><name>ccol</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>ccol</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>is_view</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <comment type="block">/* Checks skip list on 'database.table' string */</comment>
      <if_stmt><if>if <condition>(<expr><name>tables_skiplist_file</name> <operator>&amp;&amp;</operator> <call><name>check_skiplist</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>

      <comment type="block">/* Checks PCRE expressions on 'database.table' string */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_regex</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name>new_table_to_dump</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>is_view</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>collcol</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>ecol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>g_atomic_int_dec_and_test</name><argument_list>(<argument><expr><operator>&amp;</operator><name>database_counter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>ready_database_dump_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

</block_content>}</block></function>



<function><type><name>void</name></type> <name>thd_JOB_DUMP_TABLE_LIST</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dump_table_list_job</name></name> <modifier>*</modifier></type> <name>dtlj</name> <init>= <expr><operator>(</operator>struct <name>dump_table_list_job</name> <operator>*</operator><operator>)</operator><name><name>job</name><operator>-&gt;</operator><name>job_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>get_table_info_to_process_from_list</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>, <argument><expr><name><name>dtlj</name><operator>-&gt;</operator><name>table_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>new_partition_step</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>partition</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type> <name>cs</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>union <name>chunk_step</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>partition</name></expr>;</expr_stmt>
<comment type="line">//  cs-&gt;partition_step.partition = g_strdup(partition);</comment>
  <return>return <expr><name>cs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>m_async_queue_push_conservative</name><parameter_list>(<parameter><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>element</name></decl></parameter>)</parameter_list><block>{<block_content>
  <comment type="line">// Each job weights 500 bytes aprox.</comment>
  <comment type="line">// if we reach to 200k of jobs, which is 100MB of RAM, we are going to wait 5 seconds</comment>
  <comment type="line">// which is not too much considering that it will impossible to proccess 200k of jobs</comment>
  <comment type="line">// in 5 seconds.</comment>
  <comment type="line">// I don't think that we need to this values as parameters, unless that a user needs to</comment>
  <comment type="line">// set hundreds of threads</comment>
  <while>while <condition>(<expr><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">200000</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Too many jobs in the queue. We are pausing the jobs creation for 5 seconds."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>process_integer_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>process_char_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>process_partition_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>thd_JOB_DUMP</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name> <init>= <expr><operator>(</operator>struct <name>table_job</name> <operator>*</operator><operator>)</operator><name><name>job</name><operator>-&gt;</operator><name>job_data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>use_savepoints</name> <operator>&amp;&amp;</operator> <call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"SAVEPOINT mydumper"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Savepoint failed: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>INTEGER</name></expr>:</case>
      <expr_stmt><expr><call><name>process_integer_chunk</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>CHAR</name></expr>:</case>
      <expr_stmt><expr><call><name>process_char_chunk</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>PARTITION</name></expr>:</case>
      <expr_stmt><expr><call><name>process_partition_chunk</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>NONE</name></expr>:</case>
      <expr_stmt><expr><call><name>message_dumping_data</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>write_table_job_into_file</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default> 
      <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"dbt on UNDEFINED shouldn't happen. This must be a bug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>dat_file</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_file</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>build_empty_files</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// dropping the useless file</comment>
    <if_stmt><if>if <condition>(<expr><call><name>remove</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Failed to remove empty file : %s"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: File removed: %s"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>load_data</name></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>remove</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Failed to remove empty file : %s"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: File removed: %s"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>load_data</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>use_savepoints</name> <operator>&amp;&amp;</operator>
      <call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"ROLLBACK TO SAVEPOINT mydumper"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Rollback to savepoint failed: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<comment type="line">//  free_table_job(tj);</comment>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_thread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>m_connect</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"mydumper"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d connected using MySQL connection ID %lu"</literal></expr></argument>,
            <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><call><name>mysql_thread_id</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>gboolean</name></type> <name>are_all_threads_in_same_pos</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>binlog_snapshot_gtid_executed</name></name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>binlog_snapshot_gtid_executed_status_local</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>consistent_snapshot_token_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: All threads in same pos check"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>binlog_snapshot_gtid_executed</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>binlog_snapshot_gtid_executed_count</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>binlog_snapshot_gtid_executed</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>binlog_snapshot_gtid_executed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>binlog_snapshot_gtid_executed_status</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else 
    if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator> <name>binlog_snapshot_gtid_executed_status</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>binlog_snapshot_gtid_executed</name></name></expr></argument>,<argument><expr><name>binlog_snapshot_gtid_executed</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>binlog_snapshot_gtid_executed_status</name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>binlog_snapshot_gtid_executed_count</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>binlog_snapshot_gtid_executed_count</name> <operator>&lt;</operator> <name>num_threads</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Consistent_snapshot_token_I trying unlock"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>consistent_snapshot_token_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Consistent_snapshot_token_I unlocked"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>consistent_snapshot_token_II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Consistent_snapshot_token_II locked"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>binlog_snapshot_gtid_executed_status_local</name><operator>=</operator><name>binlog_snapshot_gtid_executed_status</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>binlog_snapshot_gtid_executed_count</name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>binlog_snapshot_gtid_executed_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>binlog_snapshot_gtid_executed_status_local</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>binlog_snapshot_gtid_executed</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Consistent_snapshot trying unlock"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>consistent_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Consistent_snapshot unlocked"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: 1- Consistent_snapshot_token_II trying unlock"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>consistent_snapshot_token_II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: 1- Consistent_snapshot_token_II unlocked"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>binlog_snapshot_gtid_executed_status_local</name><operator>=</operator><name>binlog_snapshot_gtid_executed_status</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: 2- Consistent_snapshot_token_II trying unlock"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>consistent_snapshot_token_II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: 2- Consistent_snapshot_token_II unlocked"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>consistent_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Consistent_snapshot locked"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Consistent_snapshot_token_I trying unlock"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>consistent_snapshot_token_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Consistent_snapshot_token_I unlocked"</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: binlog_snapshot_gtid_executed_status_local %s with gtid: '%s'."</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>binlog_snapshot_gtid_executed_status_local</name></expr>?</condition><then><expr><literal type="string">"succeeded"</literal></expr></then><else>:<expr><literal type="string">"failed"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>binlog_snapshot_gtid_executed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>binlog_snapshot_gtid_executed_status_local</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_consistent_snapshot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>( <expr><name>sync_wait</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SET SESSION WSREP_SYNC_WAIT = %d"</literal></expr></argument>,<argument><expr><name>sync_wait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Failed to set wsrep_sync_wait for the thread: %s"</literal></expr></argument>,
               <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>set_transaction_isolation_level_repeatable_read</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>start_transaction_retry</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>cont</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
  <while>while <condition>( <expr><operator>!</operator><name>cont</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>start_transaction_retry</name> <operator>&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block>{<block_content>
<comment type="line">//  Uncommenting the sleep will cause inconsitent scenarios always, which is useful for debugging </comment>
<comment type="line">//    sleep(td-&gt;thread_id);</comment>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Start trasaction #%d"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name>start_transaction_retry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>,
                  <argument><expr><literal type="string">"START TRANSACTION /*!40108 WITH CONSISTENT SNAPSHOT */"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Failed to start consistent snapshot: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>,
                  <argument><expr><literal type="string">"SHOW STATUS LIKE 'binlog_snapshot_gtid_executed'"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Failed to get binlog_snapshot_gtid_executed: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name> <init>= <expr><call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>row</name><operator>!=</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>binlog_snapshot_gtid_executed</name></name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>binlog_snapshot_gtid_executed</name></name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>start_transaction_retry</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>cont</name><operator>=</operator><call><name>are_all_threads_in_same_pos</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while> 

  <if_stmt><if>if <condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>binlog_snapshot_gtid_executed</name></name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>no_locks</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"We are not able to determine if the backup will be consistent."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cont</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"All threads in the same position. This will be a consistent backup."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>no_locks</name></expr>)</condition><block>{<block_content> 
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Backup will not be consistent, but we are continuing because you use --no-locks."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"Backup will not be consistent. Threads are in different points in time. Use --no-locks if you expect inconsistent backups."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_connection_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_TIDB</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Worker threads must set their tidb_snapshot in order to be safe</comment>
    <comment type="line">// Because no locking has been used.</comment>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>=
        <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SET SESSION tidb_snapshot = '%s'"</literal></expr></argument>, <argument><expr><name>tidb_snapshot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Failed to set tidb_snapshot: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d set to tidb_snapshot '%s'"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,
              <argument><expr><name>tidb_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Unfortunately version before 4.1.8 did not support consistent snapshot
   * transaction starts, so we cheat */</comment>
  <if_stmt><if>if <condition>(<expr><name>need_dummy_read</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>,
                <argument><expr><literal type="string">"SELECT /*!40001 SQL_NO_CACHE */ * FROM mysql.mydumperdummy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>need_dummy_toku_read</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>,
                <argument><expr><literal type="string">"SELECT /*!40001 SQL_NO_CACHE */ * FROM mysql.tokudbdummy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/* Write some stuff we know about snapshot, before it changes */</comment>
<function><type><name>void</name></type> <name>write_snapshot_info</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slave</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>masterlog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>masterpos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mastergtid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>connname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slavehost</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slavelog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slavepos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slavegtid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>isms</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SHOW MASTER STATUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>master</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>master</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>masterlog</name> <operator>=</operator> <name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>masterpos</name> <operator>=</operator> <name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <comment type="block">/* Oracle/Percona GTID */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_num_fields</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>mastergtid</name> <operator>=</operator> <name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="block">/* Let's try with MariaDB 10.x */</comment>
      <comment type="block">/* Use gtid_binlog_pos due to issue with gtid_current_pos with galera
 *        * cluster, gtid_binlog_pos works as well with normal mariadb server
 *               * https://jira.mariadb.org/browse/MDEV-10279 */</comment>
      <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SELECT @@gtid_binlog_pos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>mdb</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>mdb</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>mdb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mastergtid</name> <operator>=</operator> <name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>masterlog</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"SHOW MASTER STATUS:\n\tLog: %s\n\tPos: %s\n\tGTID:%s\n\n"</literal></expr></argument>,
            <argument><expr><name>masterlog</name></expr></argument>, <argument><expr><name>masterpos</name></expr></argument>, <argument><expr><name>mastergtid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Written master status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>isms</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SELECT @@default_master_connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>rest</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>mysql_num_rows</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Multisource slave detected."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>isms</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>isms</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SHOW ALL SLAVES STATUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SHOW SLAVE STATUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <decl_stmt><decl><type><name>guint</name></type> <name>slave_count</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>slave</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>slave</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>fields</name> <operator>=</operator> <call><name>mysql_fetch_fields</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>mysql_num_fields</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>isms</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"connection_name"</literal></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>connname</name> <operator>=</operator> <name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"exec_master_log_pos"</literal></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>slavepos</name> <operator>=</operator> <name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"relay_master_log_file"</literal></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>slavelog</name> <operator>=</operator> <name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"master_host"</literal></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>slavehost</name> <operator>=</operator> <name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"Executed_Gtid_Set"</literal></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator>
                 <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"Gtid_Slave_Pos"</literal></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>slavegtid</name> <operator>=</operator> <name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>slavehost</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>slave_count</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"SHOW SLAVE STATUS:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>isms</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"\n\tConnection name: %s"</literal></expr></argument>, <argument><expr><name>connname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"\n\tHost: %s\n\tLog: %s\n\tPos: %s\n\tGTID:%s\n\n"</literal></expr></argument>,
              <argument><expr><name>slavehost</name></expr></argument>, <argument><expr><name>slavelog</name></expr></argument>, <argument><expr><name>slavepos</name></expr></argument>, <argument><expr><name>slavegtid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Written slave status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>slave_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Multisource replication found. Do not trust in the exec_master_log_pos as it might cause data inconsistencies. Search 'Replication and Transaction Inconsistencies' on MySQL Documentation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>master</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>slave</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>mdb</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>mdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="line">//    if (g_atomic_int_dec_and_test(&amp;schema_counter)) {</comment>
<comment type="line">//      g_mutex_unlock(ready_schema_mutex);</comment>
<comment type="line">//    }</comment>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>process_job_builder_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
    <switch>switch <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JOB_DUMP_TABLE_LIST</name></expr>:</case>
      <expr_stmt><expr><call><name>thd_JOB_DUMP_TABLE_LIST</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_DUMP_DATABASE</name></expr>:</case>
      <expr_stmt><expr><call><name>thd_JOB_DUMP_DATABASE</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_DUMP_ALL_DATABASES</name></expr>:</case>
      <expr_stmt><expr><call><name>thd_JOB_DUMP_ALL_DATABASES</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
<comment type="line">//    case JOB_TABLE:</comment>
<comment type="line">//      thd_JOB_TABLE(td, job);</comment>
<comment type="line">//      break;</comment>
    <case>case <expr><name>JOB_SHUTDOWN</name></expr>:</case>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>FALSE</name></expr>;</return>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"Something very bad happened!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>process_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
    <switch>switch <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JOB_DETERMINE_CHUNK_TYPE</name></expr>:</case>
      <expr_stmt><expr><call><name>set_chunk_strategy_for_dbt</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>job_data</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_DUMP</name></expr>:</case>
      <expr_stmt><expr><call><name>thd_JOB_DUMP</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_DUMP_NON_INNODB</name></expr>:</case>
      <expr_stmt><expr><call><name>thd_JOB_DUMP</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_CHECKSUM</name></expr>:</case>
      <expr_stmt><expr><call><name>do_JOB_CHECKSUM</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_CREATE_DATABASE</name></expr>:</case>
      <expr_stmt><expr><call><name>do_JOB_CREATE_DATABASE</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_CREATE_TABLESPACE</name></expr>:</case>
      <expr_stmt><expr><call><name>do_JOB_CREATE_TABLESPACE</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_SCHEMA</name></expr>:</case>
      <expr_stmt><expr><call><name>do_JOB_SCHEMA</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_VIEW</name></expr>:</case>
      <expr_stmt><expr><call><name>do_JOB_VIEW</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_TRIGGERS</name></expr>:</case>
      <expr_stmt><expr><call><name>do_JOB_TRIGGERS</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_SCHEMA_POST</name></expr>:</case>
      <expr_stmt><expr><call><name>do_JOB_SCHEMA_POST</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_WRITE_MASTER_STATUS</name></expr>:</case>
      <expr_stmt><expr><call><name>write_snapshot_info</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>job_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_SHUTDOWN</name></expr>:</case>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>FALSE</name></expr>;</return>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"Something very bad happened!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>process_queue</name><parameter_list>(<parameter><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>resume_mutex</name></decl></parameter>, <parameter><function_decl><type><name>gboolean</name></type> (<modifier>*</modifier><name>p</name>)<parameter_list>()</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>f</name>)<parameter_list>()</parameter_list></function_decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>pause_resume</name></name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>resume_mutex</name> <operator>=</operator> <operator>(</operator><name>GMutex</name> <operator>*</operator><operator>)</operator><call><name>g_async_queue_try_pop</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>pause_resume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>resume_mutex</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>resume_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>resume_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resume_mutex</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>f</name><operator>!=</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>f</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>job</name> <operator>=</operator> <operator>(</operator>struct <name>job</name> <operator>*</operator><operator>)</operator><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>shutdown_triggered</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JOB_SHUTDOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>p</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>build_lock_tables_statement</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>non_innodb_table_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>non_innodb_table</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>( <expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>dbt</name> <operator>=</operator> <operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>lock_tables_statement</name></name> <operator>=</operator> <call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>lock_tables_statement</name></name></expr></argument>, <argument><expr><literal type="string">"LOCK TABLES `%s`.`%s` READ LOCAL"</literal></expr></argument>,
                      <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>dbt</name> <operator>=</operator> <operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>lock_tables_statement</name></name></expr></argument>, <argument><expr><literal type="string">", `%s`.`%s` READ LOCAL"</literal></expr></argument>,
                      <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>non_innodb_table_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>update_where_on_table_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <switch>switch <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name></expr>)</condition><block>{<block_content>
    <case>case <expr><name>INTEGER</name></expr>:</case>
      <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>where</name></name><operator>=</operator><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name> <operator>==</operator> <name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name></expr> ?</condition><then>
                <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s( `%s` = %"</literal><name>G_GUINT64_FORMAT</name><literal type="string">")"</literal></expr></argument>,
                          <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>prefix</name></name></expr>?</condition><then><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>prefix</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                          <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr></then><else>:
                <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s( %"</literal><name>G_GUINT64_FORMAT</name><literal type="string">" &lt; `%s` AND `%s` &lt;= %"</literal><name>G_GUINT64_FORMAT</name><literal type="string">")"</literal></expr></argument>,
                          <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>prefix</name></name></expr>?</condition><then><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>prefix</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                          <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>field</name></name></expr></argument>,
                          <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>CHAR</name></expr>:</case>
    <if_stmt><if>if <condition>(<expr><name>td</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>where</name></name><operator>=</operator><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s(`%s` &gt;= '%s')"</literal></expr></argument>,
                          <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>prefix</name></name></expr>?</condition><then><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>prefix</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                          <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_escaped</name></name></expr></argument>
                          )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>update_cursor</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>,<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>where</name></name><operator>=</operator><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s('%s' &lt; `%s` AND `%s` &lt;= '%s')"</literal></expr></argument>,
                          <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>prefix</name></name></expr>?</condition><then><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>prefix</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                          <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_escaped</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>field</name></name></expr></argument>,
                          <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_escaped</name></name></expr></argument>
                          )</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        g_message("Thread %d: Cursor char: %c New where: %s", td-&gt;thread_id, tj-&gt;chunk_step-&gt;char_step.cursor[0], tj-&gt;where);</comment>
      </block_content>}</block></else></if_stmt>
     </block_content>}</block></if></if_stmt>
     <break>break;</break>
  <default>default:</default> <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>process_integer_chunk_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>check_max</name></name></expr>)</condition><block>{<block_content>
<comment type="line">//    g_message("thread: %d Updating MAX", td-&gt;thread_id);</comment>
    <expr_stmt><expr><call><name>update_integer_max</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>check_max</name></name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>check_min</name></name></expr>)</condition><block>{<block_content>
<comment type="line">//    g_message("thread: %d Updating MIN", td-&gt;thread_id);</comment>
    <expr_stmt><expr><call><name>update_integer_min</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>check_min</name></name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name> <operator>+</operator> <name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name> <operator>&gt;</operator> <name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name></expr> ?</condition><then> <expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name></expr> </then><else>: <expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name> <operator>+</operator> <name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*  if (tj-&gt;chunk_step-&gt;integer_step.nmin == tj-&gt;chunk_step-&gt;integer_step.nmax){
    return;
  }*/</comment>
<comment type="line">//  g_message("CONTINUE");</comment>
  <expr_stmt><expr><call><name>update_where_on_table_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>message_dumping_data</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>GDateTime</name> <modifier>*</modifier></type><name>from</name> <init>= <expr><call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>write_table_job_into_file</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GDateTime</name> <modifier>*</modifier></type><name>to</name> <init>= <expr><call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>GTimeSpan</name></type> <name>diff</name><init>=<expr><call><name>g_date_time_difference</name><argument_list>(<argument><expr><name>to</name></expr></argument>,<argument><expr><name>from</name></expr></argument>)</argument_list></call><operator>/</operator><name>G_TIME_SPAN_SECOND</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name><operator>=</operator><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name>  <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name><operator>=</operator><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name><operator>&lt;</operator><name>min_rows_per_file</name></expr>?</condition><then><expr><name>max_rows_per_file</name></expr></then><else>:<expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name></expr></else></ternary></expr>;</expr_stmt>
<comment type="line">//    g_message("Decreasing time: %ld | %ld", diff, tj-&gt;chunk_step-&gt;integer_step.step);</comment>
  </block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name><operator>=</operator><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name>  <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name><operator>=</operator><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name><operator>&gt;</operator><name>max_rows_per_file</name></expr>?</condition><then><expr><name>max_rows_per_file</name></expr></then><else>:<expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name></expr></else></ternary></expr>;</expr_stmt>
<comment type="line">//    g_message("Increasing time: %ld | %ld", diff, tj-&gt;chunk_step-&gt;integer_step.step);</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name><operator>=</operator><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>process_integer_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name> <init>= <expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>process_integer_chunk_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>prefix</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>prefix</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <while>while <condition>( <expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name> <operator>&lt;</operator> <name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>process_integer_chunk_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name><operator>=</operator><call><name>g_list_remove</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>,<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>g_list_length</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Table %s completed "</literal></expr></argument>,<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<comment type="line">//  g_message("Thread %d:Remaining 2 chunks: %d",td-&gt;thread_id,g_list_length(dbt-&gt;chunks));</comment>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>process_char_chunk_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>update_where_on_table_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>message_dumping_data</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>GDateTime</name> <modifier>*</modifier></type><name>from</name> <init>= <expr><call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>write_table_job_into_file</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GDateTime</name> <modifier>*</modifier></type><name>to</name> <init>= <expr><call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>GTimeSpan</name></type> <name>diff</name><init>=<expr><call><name>g_date_time_difference</name><argument_list>(<argument><expr><name>to</name></expr></argument>,<argument><expr><name>from</name></expr></argument>)</argument_list></call><operator>/</operator><name>G_TIME_SPAN_SECOND</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>step</name></name><operator>=</operator><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>step</name></name>  <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>step</name></name><operator>=</operator><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>step</name></name><operator>&lt;</operator><name>min_rows_per_file</name></expr>?</condition><then><expr><name>max_rows_per_file</name></expr></then><else>:<expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>step</name></name></expr></else></ternary></expr>;</expr_stmt>
<comment type="line">//    g_message("Decreasing time: %ld | %ld", diff, tj-&gt;chunk_step-&gt;char_step.step);</comment>
  </block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>step</name></name><operator>=</operator><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>step</name></name>  <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>step</name></name><operator>=</operator><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>step</name></name><operator>&gt;</operator><name>max_rows_per_file</name></expr>?</condition><then><expr><name>max_rows_per_file</name></expr></then><else>:<expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>step</name></name></expr></else></ternary></expr>;</expr_stmt>
<comment type="line">//    g_message("Increasing time: %ld | %ld", diff, tj-&gt;chunk_step-&gt;char_step.step);</comment>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>prefix</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>prefix</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>next_chunk_in_char_step</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>process_char_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name> <init>= <expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>previous</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>previous</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>cont</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>previous</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition><block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>previous</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      
      <expr_stmt><expr><name>cont</name><operator>=</operator><call><name>get_new_minmax</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>cont</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block>{<block_content>
        
        <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>previous</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name><operator>=</operator><call><name>g_list_append</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>,<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>status</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>process_char_chunk_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>status</name></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin</name></name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>process_char_chunk_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name><operator>=</operator><call><name>g_list_remove</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>,<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>process_partition_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>partition</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>partition</name><operator>=</operator><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">" PARTITION (%s) "</literal></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>list</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Partition text: %s"</literal></expr></argument>, <argument><expr><name>partition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>list</name></name><operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>partition</name></name> <operator>=</operator> <name>partition</name></expr>;</expr_stmt>
<comment type="line">// = new_table_job(dbt, partition ,  cs-&gt;partition_step.number, dbt-&gt;primary_key, cs);</comment>
    <expr_stmt><expr><call><name>message_dumping_data</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>write_table_job_into_file</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>partition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>working_thread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// mysql_init is not thread safe, especially in Connector/C</comment>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>init_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name> <operator>=</operator> <call><name>mysql_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>init_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initialize_thread</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>execute_gstring</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>set_session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Initialize connection </comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_tz</name> <operator>&amp;&amp;</operator> <call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"/*!40103 SET TIME_ZONE='+00:00' */"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Failed to set time zone: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>less_locking_stage</name></name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>use_savepoints</name> <operator>&amp;&amp;</operator> <call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"SET SQL_LOG_BIN = 0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Failed to disable binlog for the thread: %s"</literal></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>initialize_consistent_snapshot</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>check_connection_status</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>set_names_str</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>set_names_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Thread Ready to process jobs</comment>
  
  <decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>resume_mutex</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Creating Jobs"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>process_queue</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>initial_queue</name></name></expr></argument>,<argument><expr><name>td</name></expr></argument>, <argument><expr><name>resume_mutex</name></expr></argument>, <argument><expr><name>process_job_builder_job</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>process_queue</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>schema_queue</name></name></expr></argument>,<argument><expr><name>td</name></expr></argument>, <argument><expr><name>resume_mutex</name></expr></argument>, <argument><expr><name>process_job</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_data</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d Schema Done, Starting Non-Innodb"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ready_non_innodb_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>less_locking</name></expr>)</condition><block>{<block_content>
      <comment type="line">// Sending LOCK TABLE over all non-innodb tables</comment>
      <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>lock_tables_statement</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"Error locking non-innodb tables %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// This push will unlock the FTWRL on the Main Connection</comment>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>unlock_tables</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>process_queue</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>non_innodb_queue</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>resume_mutex</name></expr></argument>, <argument><expr><name>process_job</name></expr></argument>, <argument><expr><name>give_me_another_non_innodb_chunk_step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>UNLOCK_TABLES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"Error locking non-innodb tables %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>process_queue</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>non_innodb_queue</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>resume_mutex</name></expr></argument>, <argument><expr><name>process_job</name></expr></argument>, <argument><expr><name>give_me_another_non_innodb_chunk_step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>unlock_tables</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d Non-Innodb Done, Starting Innodb"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>process_queue</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>innodb_queue</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>resume_mutex</name></expr></argument>, <argument><expr><name>process_job</name></expr></argument>, <argument><expr><name>give_me_another_innodb_chunk_step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  start_processing(td, resume_mutex);</comment>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>unlock_tables</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>process_queue</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>post_data_queue</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>resume_mutex</name></expr></argument>, <argument><expr><name>process_job</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d shutting down"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>binlog_snapshot_gtid_executed</name></name><operator>!=</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>binlog_snapshot_gtid_executed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mysql_thread_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GString</name> <modifier>*</modifier></type><name>get_insertable_fields</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>field_list</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>=
      <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"select COLUMN_NAME from information_schema.COLUMNS "</literal>
                      <literal type="string">"where TABLE_SCHEMA='%s' and TABLE_NAME='%s' and extra "</literal>
                      <literal type="string">"not like '%%VIRTUAL GENERATED%%' and extra not like '%%STORED GENERATED%%'"</literal></expr></argument>,
                      <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>field_list</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>tb</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"`%s`"</literal></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>field_list</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
<comment type="line">//  g_string_append(field_list, ")");</comment>
  <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>field_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GList</name> <modifier>*</modifier></type><name>get_anonymized_function_for</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list><block>{<block_content>
  <comment type="line">// TODO #364: this is the place where we need to link the column between file loaded and dbt.</comment>
  <comment type="line">// Currently, we are using identity_function, which return the same data.</comment>
  <comment type="line">// Key: `database`.`table`.`column`</comment>

  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>=
      <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"select COLUMN_NAME from information_schema.COLUMNS "</literal>
                      <literal type="string">"where TABLE_SCHEMA='%s' and TABLE_NAME='%s' ORDER BY ORDINAL_POSITION;"</literal></expr></argument>,
                      <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>anonymized_function_list</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>k</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"`%s`.`%s`"</literal></expr></argument>,<argument><expr><name>database</name></expr></argument>,<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>conf_per_table</name><operator>.</operator><name>all_anonymized_function</name></name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>function_pointer</name></name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ht</name></expr>)</condition><block>{<block_content>
    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>fp</name><operator>=</operator><operator>(</operator>struct <name>function_pointer</name><operator>*</operator><operator>)</operator><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>ht</name></expr></argument>,<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>fp</name>  <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>anonymized_function_list</name><operator>=</operator><call><name>g_list_append</name><argument_list>(<argument><expr><name>anonymized_function_list</name></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>anonymized_function_list</name><operator>=</operator><call><name>g_list_append</name><argument_list>(<argument><expr><name>anonymized_function_list</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>anonymized_function_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>detect_generated_fields</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>gchar</name><modifier>*</modifier></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>gboolean</name></type> <name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ignore_generated_fields</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(
      <argument><expr><literal type="string">"select COLUMN_NAME from information_schema.COLUMNS where "</literal>
      <literal type="string">"TABLE_SCHEMA='%s' and TABLE_NAME='%s' and extra like '%%GENERATED%%' and extra not like '%%DEFAULT_GENERATED%%'"</literal></expr></argument>,
      <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <return>return <expr><name>FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type><name>get_character_set_from_collation</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>collation</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>character_set_hash_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>character_set</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>character_set_hash</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>character_set</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>=
      <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SELECT CHARACTER_SET_NAME FROM INFORMATION_SCHEMA.COLLATIONS "</literal>
                      <literal type="string">"WHERE collation_name='%s'"</literal></expr></argument>,
                      <argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>character_set_hash</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>character_set</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>character_set_hash_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>character_set</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>new_db_table</name><parameter_list>( <parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table_collation</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datalength</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name> <init>= <expr><call><name>g_new</name><argument_list>(<argument><expr>struct <name>db_table</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <name>database</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name> <operator>=</operator> <call><name>get_ref_table</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>character_set</name></name> <operator>=</operator> <ternary><condition><expr><name>table_collation</name><operator>==</operator><name>NULL</name></expr>?</condition><then> <expr><name>NULL</name></expr></then><else>:<expr><call><name>get_character_set_from_collation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>table_collation</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>rows_lock</name></name><operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>escaped_table</name></name> <operator>=</operator> <call><name>escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>anonymized_function</name></name><operator>=</operator><call><name>get_anonymized_function_for</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>k</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"`%s`.`%s`"</literal></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>where</name></name><operator>=</operator><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>conf_per_table</name><operator>.</operator><name>all_where_per_table</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>limit</name></name><operator>=</operator><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>conf_per_table</name><operator>.</operator><name>all_limit_per_table</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>num_threads</name></name><operator>=</operator><ternary><condition><expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>conf_per_table</name><operator>.</operator><name>all_num_threads_per_table</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><call><name>strtoul</name><argument_list>(<argument><expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>conf_per_table</name><operator>.</operator><name>all_num_threads_per_table</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>num_threads</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>min</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>max</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name> <operator>=</operator> <name>UNDEFINED</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>insert_statement</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name><operator>=</operator><call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_queue</name></name><operator>=</operator><call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name><operator>=</operator><call><name>get_field_for_dbt</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name>dbt</name></expr></argument>,<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>primary_key</name></name> <operator>=</operator> <call><name>get_primary_key_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  set_chunk_strategy_for_dbt(conn, dbt);</comment>
<comment type="line">//  create_job_to_determine_chunk_type(dbt, g_async_queue_push, );</comment>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>complete_insert</name></name> <operator>=</operator> <name>complete_insert</name> <operator>||</operator> <call><name>detect_generated_fields</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>escaped</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>escaped_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>complete_insert</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>select_fields</name></name> <operator>=</operator> <call><name>get_insertable_fields</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>escaped</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>escaped_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>select_fields</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>rows</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>datalength</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>datalength</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>datalength</name></name> <operator>=</operator> <call><name>g_ascii_strtoull</name><argument_list>(<argument><expr><name>datalength</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <return>return <expr><name>dbt</name></expr>;</return> 
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_db_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_free</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>rows_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>escaped_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>select_fields</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>min</name></name><operator>!=</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>max</name></name><operator>!=</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<comment type="block">/*  g_free();
  g_free();
  g_free();*/</comment>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>new_table_to_dump</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>is_view</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>collation</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datalength</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ecol</name></decl></parameter>)</parameter_list><block>{<block_content>
    <comment type="block">/* Green light! */</comment>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>ad_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>database</name><operator>-&gt;</operator><name>already_dumped</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>create_job_to_dump_schema</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>database</name><operator>-&gt;</operator><name>already_dumped</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>ad_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name> <init>= <expr><call><name>new_db_table</name><argument_list>( <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>datalength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

 <comment type="line">// if is a view we care only about schema</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_view</name></expr>)</condition> <block>{<block_content>
  <comment type="line">// with trx_consistency_only we dump all as innodb_table</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_schemas</name></expr>)</condition> <block>{<block_content>
<comment type="line">//      write_table_metadata_into_file(dbt);</comment>
      <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>table_schemas_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>table_schemas</name><operator>=</operator><call><name>g_list_prepend</name><argument_list>( <argument><expr><name>table_schemas</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>table_schemas_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>create_job_to_dump_table_schema</name><argument_list>( <argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dump_triggers</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>create_job_to_dump_triggers</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_data</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>ecol</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>g_ascii_strcasecmp</name><argument_list>(<argument><expr><literal type="string">"MRG_MYISAM"</literal></expr></argument>,<argument><expr><name>ecol</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>data_checksums</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>create_job_to_dump_checksum</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>trx_consistency_only</name> <operator>||</operator>
          <operator>(</operator><name>ecol</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>g_ascii_strcasecmp</name><argument_list>(<argument><expr><literal type="string">"InnoDB"</literal></expr></argument>, <argument><expr><name>ecol</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>g_ascii_strcasecmp</name><argument_list>(<argument><expr><literal type="string">"TokuDB"</literal></expr></argument>, <argument><expr><name>ecol</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>is_innodb</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>innodb_table_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>innodb_table</name><operator>=</operator><call><name>g_list_prepend</name><argument_list>(<argument><expr><name>innodb_table</name></expr></argument>,<argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>innodb_table_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>is_innodb</name></name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>non_innodb_table_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>non_innodb_table</name> <operator>=</operator> <call><name>g_list_prepend</name><argument_list>(<argument><expr><name>non_innodb_table</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>non_innodb_table_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_schemas</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>create_job_to_dump_view</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>determine_if_schema_is_elected_to_dump_post</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>database</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <comment type="line">// Store Procedures and Events</comment>
  <comment type="line">// As these are not attached to tables we need to define when we need to dump</comment>
  <comment type="line">// or not Having regex filter make this hard because we dont now if a full</comment>
  <comment type="line">// schema is filtered or not Also I cant decide this based on tables from a</comment>
  <comment type="line">// schema being dumped So I will use only regex to dump or not SP and EVENTS I</comment>
  <comment type="line">// only need one match to dump all</comment>

  <decl_stmt><decl><type><name>gboolean</name></type> <name>post_dump</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>dump_routines</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// SP</comment>
    <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW PROCEDURE STATUS WHERE CAST(Db AS BINARY) = '%s'"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>escaped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>query</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error showing procedure on: %s - Could not execute query: %s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>post_dump</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Checks skip list on 'database.sp' string */</comment>
      <if_stmt><if>if <condition>(<expr><name>tables_skiplist_file</name> <operator>&amp;&amp;</operator> <call><name>check_skiplist</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>

      <comment type="block">/* Checks PCRE expressions on 'database.sp' string */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_regex</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>post_dump</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>post_dump</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// FUNCTIONS</comment>
      <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW FUNCTION STATUS WHERE CAST(Db AS BINARY) = '%s'"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>escaped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>query</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error showing function on: %s - Could not execute query: %s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                   <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>post_dump</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Checks skip list on 'database.sp' string */</comment>
        <if_stmt><if>if <condition>(<expr><name>tables_skiplist_file</name> <operator>&amp;&amp;</operator> <call><name>check_skiplist</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <continue>continue;</continue></block_content></block></if></if_stmt>
        <comment type="block">/* Checks PCRE expressions on 'database.sp' string */</comment>
        <if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>eval_regex</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>post_dump</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dump_events</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>post_dump</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// EVENTS</comment>
    <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW EVENTS FROM `%s`"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>query</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error showing events on: %s - Could not execute query: %s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>post_dump</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Checks skip list on 'database.sp' string */</comment>
      <if_stmt><if>if <condition>(<expr><name>tables_skiplist_file</name> <operator>&amp;&amp;</operator> <call><name>check_skiplist</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>
      <comment type="block">/* Checks PCRE expressions on 'database.sp' string */</comment>
      <if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>eval_regex</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>post_dump</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>post_dump</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dump_database_thread</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>database</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mysql_select_db</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name> <operator>||</operator>
      <name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_TIDB</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"SHOW TABLE STATUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>query</name> <operator>=</operator>
        <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SELECT TABLE_NAME, ENGINE, TABLE_TYPE as COMMENT FROM "</literal>
                        <literal type="string">"DATA_DICTIONARY.TABLES WHERE TABLE_SCHEMA='%s'"</literal></expr></argument>,
                        <argument><expr><name><name>database</name><operator>-&gt;</operator><name>escaped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>query</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error showing tables on: %s - Could not execute query: %s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
               <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>ecol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>ccol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>collcol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>determine_ecol_ccol</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ccol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>collcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not list tables for %s: %s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>dump</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_view</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* We now do care about views!
            num_fields&gt;1 kicks in only in case of 5.0 SHOW FULL TABLES or SHOW
       TABLE STATUS row[1] == NULL if it is a view in 5.0 'SHOW TABLE STATUS'
            row[1] == "VIEW" if it is a view in 5.0 'SHOW FULL TABLES'
    */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>row</name><index>[<expr><name>ccol</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>ccol</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>is_view</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Check for broken tables, i.e. mrg with missing source tbl */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_view</name> <operator>&amp;&amp;</operator> <name><name>row</name><index>[<expr><name>ecol</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Broken table detected, please review: %s.%s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>exit_if_broken_table_found</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>dump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Skip ignored engines, handy for avoiding Merge, Federated or Blackhole
     * :-) dumps */</comment>
    <if_stmt><if>if <condition>(<expr><name>dump</name> <operator>&amp;&amp;</operator> <name>ignore</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_view</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ignore</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>g_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>ignore</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>ecol</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>dump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Skip views */</comment>
    <if_stmt><if>if <condition>(<expr><name>is_view</name> <operator>&amp;&amp;</operator> <name>no_dump_views</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>dump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dump</name></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>

    <comment type="block">/* In case of table-list option is enabled, check if table is part of the
     * list */</comment>
    <if_stmt><if>if <condition>(<expr><name>tables</name></expr>)</condition> <block>{<block_content>
<comment type="block">/*      int table_found = 0;
      for (i = 0; tables[i] != NULL; i++)
        if (g_ascii_strcasecmp(tables[i], row[0]) == 0)
          table_found = 1;
*/</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_table_in_list</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>dump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dump</name></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>

    <comment type="block">/* Special tables */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>g_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"mysql"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <operator>(</operator><call><name>g_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"general_log"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>g_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"slow_log"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>g_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"innodb_index_stats"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>g_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"innodb_table_stats"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>dump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Checks skip list on 'database.table' string */</comment>
    <if_stmt><if>if <condition>(<expr><name>tables_skiplist_file</name> <operator>&amp;&amp;</operator> <call><name>check_skiplist</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>

    <comment type="block">/* Checks PCRE expressions on 'database.table' string */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_regex</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>

    <comment type="block">/* Check if the table was recently updated */</comment>
    <if_stmt><if>if <condition>(<expr><name>no_updated_tables</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_view</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <name>no_updated_tables</name></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>g_ascii_strcasecmp</name><argument_list>(
                <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"NO UPDATED TABLE: %s.%s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>dump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dump</name></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>new_table_to_dump</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>is_view</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>collcol</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>ecol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></while>

  <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>determine_if_schema_is_elected_to_dump_post</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>create_job_to_dump_post</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    struct schema_post *sp = g_new(struct schema_post, 1);</comment>
<comment type="line">//    sp-&gt;database = database;</comment>
<comment type="line">//    schema_post = g_list_prepend(schema_post, sp);</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_table_job_into_file</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>guint64</name></type> <name>rows_count</name> <init>=
      <expr><call><name>write_table_data_into_file</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rows_count</name></expr>)</condition><block>{<block_content>
<comment type="line">//    g_message("Empty chunk on %s.%s", tj-&gt;dbt-&gt;database-&gt;name, tj-&gt;dbt-&gt;table);</comment>
<comment type="line">//    tj-&gt;cs-&gt;char_step.step=cs-&gt;char_step.step</comment>
  </block_content>}</block></if></if_stmt>
  
</block_content>}</block></function>

</unit>
