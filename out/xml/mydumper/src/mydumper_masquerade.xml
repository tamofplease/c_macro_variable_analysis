<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/mydumper_masquerade.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
    Authors:        David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gerror.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gio/gio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_masquerade.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>struct</name> <name>function_pointer</name></name></type> <name>pp</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>identity_function</name></expr>,<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>identity_function</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>mem</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>mem</name></expr>;</expr_stmt>
  <return>return <expr><operator>*</operator><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>random_int_function</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>mem</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>mem</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>g_random_int</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>*</operator><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>random_int_function_with_mem</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>mem</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>value</name><init>=<expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>mem</name></expr></argument>,<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>value</name><operator>=</operator><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>g_random_int</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>mem</name></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_strlcpy</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>*</operator><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WITH_GLIB_uuid_string_random</name></cpp:ifndef>
<function><type><name>char</name> <modifier>*</modifier></type><name>rand_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>charset</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>--</operator><name>size</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><sizeof>sizeof <name>charset</name></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>str</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>charset</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>str</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>random_uuid_function</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>mem</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>mem</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_GLIB_uuid_string_random</name></cpp:ifdef>
  <expr_stmt><expr><call><name>g_strlcpy</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>,<argument><expr><call><name>g_uuid_string_random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>rand_string</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><operator>*</operator><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>random_uuid_function_with_mem</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>mem</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>value</name><init>=<expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>mem</name></expr></argument>,<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_GLIB_uuid_string_random</name></cpp:ifdef>
    <expr_stmt><expr><name>value</name><operator>=</operator><call><name>g_strndup</name><argument_list>(<argument><expr><call><name>g_uuid_string_random</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>rand_string</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>mem</name></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_strlcpy</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>*</operator><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>fun_ptr</name></type> <name>get_function_pointer_for</name> <parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>function_char</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><name>function_char</name></expr></argument>,<argument><expr><literal type="string">"random_int"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><name>random_int_function</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><name>function_char</name></expr></argument>,<argument><expr><literal type="string">"random_int_with_mem"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><name>random_int_function_with_mem</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><name>function_char</name></expr></argument>,<argument><expr><literal type="string">"random_uuid"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><name>random_uuid_function</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><name>function_char</name></expr></argument>,<argument><expr><literal type="string">"random_uuid_with_mem"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><name>random_uuid_function_with_mem</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// TODO: more functions needs to be added.</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><name>function_char</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><name>identity_function</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><name>function_char</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><name>identity_function</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>&amp;</operator><name>identity_function</name></expr>;</return>
</block_content>}</block></function>
</unit>
