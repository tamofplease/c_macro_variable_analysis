<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/mydumper/src/myloader_stream.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_control_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_intermediate_queue.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>num_threads</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> (<modifier>*</modifier><name>m_close</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> (<modifier>*</modifier><name>m_write</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>stream_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>process_stream</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>initialize_stream</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>stream_thread</name> <operator>=</operator> <call><name>g_thread_create</name><argument_list>(<argument><expr><operator>(</operator><name>GThreadFunc</name><operator>)</operator><name>process_stream</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wait_stream_to_finish</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_thread_join</name><argument_list>(<argument><expr><name>stream_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>read_stream_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>gboolean</name> <modifier>*</modifier></type><name>eof</name></decl></parameter>,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c_to_read</name></decl></parameter>)</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>c_to_read</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>bytes</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>feof</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition><block type="pseudo"><block_content> 
    <if_stmt><if>if <condition>(<expr><call><name>m_write</name><argument_list>(<argument><expr><name>file</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buffer</name><index>[<expr><name>from</name></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><name>to</name><operator>-</operator><name>from</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>to</name><operator>-</operator><name>from</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"error on writing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>gboolean</name></type> <name>has_mydumper_suffix</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return
    <expr><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="string">".dat"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
    <call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="string">".dat.gz"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
    <call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="string">".dat.zst"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
    <call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="string">".sql"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
    <call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="string">".sql.gz"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
    <call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="string">".sql.zst"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
    <call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="string">"metadata"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
    <call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="string">"-checksum"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
    <call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="string">"-checksum.gz"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
    <call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="string">"-checksum.zst"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>process_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>stream_conf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>filename</name><init>=<expr><name>NULL</name></expr></init></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>real_filename</name><init>=<expr><name>NULL</name></expr></init></decl>,<decl><type ref="prev"><modifier>*</modifier></type> <name>previous_filename</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name><init>=<expr><call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>STREAM_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>eof</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>buffer_len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>diff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>line_from</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>line_end</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_pos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>next_line_from</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>STREAM_BUFFER_SIZE</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <do>do <block>{<block_content>
<label><name>read_more</name>:</label>    <expr_stmt><expr><name>buffer_len</name><operator>=</operator><call><name>read_stream_line</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buffer</name><index>[<expr><name>diff</name></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>,<argument><expr><name>file</name></expr></argument>,<argument><expr><name>STREAM_BUFFER_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>diff</name></expr></argument>)</argument_list></call><operator>+</operator><name>diff</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>next_line_from</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>diff</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<comment type="line">//g_message("Buffer_len %d", buffer_len);</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer_len</name></expr>)</condition><block>{<block_content> 
      <break>break;</break>
    </block_content>}</block></if><else>else<block>{<block_content>
      <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>buffer_len</name></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator><literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>line_from</name><operator>=</operator><name>next_line_from</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>buffer_len</name> <operator>&amp;&amp;</operator> <name><name>buffer</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>!=</operator><literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>last_pos</name><operator>=</operator><name>pos</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>line_end</name><operator>=</operator><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <comment type="line">// Is a header?</comment>
        <if_stmt><if>if <condition>(<expr><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buffer</name><index>[<expr><name>line_from</name></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><literal type="string">"\n-- "</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>last_pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>previous_filename</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>gchar</name></type> <name>a</name><init>=<expr><name><name>buffer</name><index>[<expr><name>last_pos</name><operator>-</operator><operator>(</operator><name>line_from</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>last_pos</name><operator>-</operator><operator>(</operator><name>line_from</name><operator>)</operator></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<comment type="line">//g_message("Pos: %d Line_end: %d line_from %d last_pos: %d next_line_from: %d", pos,line_end, line_from, last_pos, next_line_from);</comment>
<comment type="line">//            if (line_from==last_pos)</comment>
<comment type="line">//g_error("Pos: %d Line_end: %d line_from %d last_pos: %d next_line_from: %d", pos,line_end, line_from, last_pos, next_line_from);</comment>
            <expr_stmt><expr><name>filename</name><operator>=</operator><call><name>g_strndup</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buffer</name><index>[<expr><name>line_from</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><name>last_pos</name><operator>-</operator><operator>(</operator><name>line_from</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>last_pos</name><operator>-</operator><operator>(</operator><name>line_from</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>real_filename</name> <operator>=</operator> <call><name>g_build_filename</name><argument_list>(<argument><expr><name>directory</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>has_mydumper_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
              <if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
              <if_stmt><if>if <condition>(<expr><name>previous_filename</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>intermediate_queue_new</name><argument_list>(<argument><expr><name>previous_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
              <if_stmt><if>if <condition>(<expr><call><name>g_file_test</name><argument_list>(<argument><expr><name>real_filename</name></expr></argument>, <argument><expr><name>G_FILE_TEST_EXISTS</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Stream Thread: File exists in datadir: %s"</literal></expr></argument>, <argument><expr><name>real_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>last_pos</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
              </block_content>}</block></if><else>else<block>{<block_content>
                <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>g_fopen</name><argument_list>(<argument><expr><name>real_filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>m_write</name><operator>=</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>write_file</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>m_close</name><operator>=</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>fclose</name></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></if><else>else<block>{<block_content>
              <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Not a mydumper file: %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>next_line_from</name><operator>=</operator><name>last_pos</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>buffer_len</name></expr>)</condition><block>{<block_content>

            <expr_stmt><expr><name>diff</name><operator>=</operator><name>buffer_len</name><operator>-</operator><name>line_from</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_strlcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buffer</name><index>[<expr><name>line_from</name></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><name>buffer_len</name><operator>-</operator><name>line_from</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>read_more</name>;</goto>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>flush</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,<argument><expr><name>line_from</name></expr></argument>,<argument><expr><name>line_end</name></expr></argument>,<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>next_line_from</name><operator>=</operator><name>last_pos</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>eof</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>;</do>
  <if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition><block type="pseudo"><block_content> 
    <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>intermediate_queue_new</name><argument_list>(<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>intermediate_queue_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr> ;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<comment type="line">//    g_async_queue_push(stream_conf-&gt;data_queue, new_job(JOB_SHUTDOWN,NULL,NULL));</comment>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>stream_conf</name><operator>-&gt;</operator><name>post_table_queue</name></name></expr></argument>, <argument><expr><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_SHUTDOWN</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>stream_conf</name><operator>-&gt;</operator><name>post_queue</name></name></expr></argument>, <argument><expr><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_SHUTDOWN</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>stream_conf</name><operator>-&gt;</operator><name>view_queue</name></name></expr></argument>, <argument><expr><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_SHUTDOWN</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

</unit>
