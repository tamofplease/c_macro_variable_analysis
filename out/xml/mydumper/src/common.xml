<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/mydumper/src/common.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
    Authors:        David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_detect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>no_delete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>defaults_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GKeyFile</name> <modifier>*</modifier></type> <name>key_file</name></decl>;</decl_stmt>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>m_open</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type><name>stream_queue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>detected_server</name></decl>;</decl_stmt>

<function><type><name>GHashTable</name> <modifier>*</modifier></type> <name>initialize_hash_of_session_variables</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>set_session_hash</name><init>=<expr><call><name>g_hash_table_new</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>set_session_hash</name></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"WAIT_TIMEOUT"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"2147483"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>set_session_hash</name></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"NET_WRITE_TIMEOUT"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"2147483"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>set_session_hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>generic_checksum</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errn</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>query_template</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column_number</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>errn</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><name>query_template</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>mysql_use_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error dumping checksum (%s.%s): %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>errn</name><operator>=</operator><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* There should never be more than one row */</comment>
  <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>r</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>row</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name><operator>=</operator><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name><name>row</name><index>[<expr><name>column_number</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>checksum_table</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>generic_checksum</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>errn</name></expr></argument>, <argument><expr><literal type="string">"CHECKSUM TABLE `%s`.`%s`"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type> <name>checksum_table_structure</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>generic_checksum</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>errn</name></expr></argument>,<argument><expr><literal type="string">"SELECT COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(CONCAT_WS(column_name, ordinal_position, data_type)) AS UNSIGNED)), 10, 16)), 0) AS crc FROM information_schema.columns WHERE table_schema='%s' AND table_name='%s';"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>checksum_process_structure</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>table</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>errn</name></expr>;</expr_stmt>
  <return>return <expr><call><name>generic_checksum</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>errn</name></expr></argument>,<argument><expr><literal type="string">"SELECT COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(replace(ROUTINE_DEFINITION,' ','')) AS UNSIGNED)), 10, 16)), 0) AS crc FROM information_schema.routines WHERE ROUTINE_SCHEMA='%s' order by ROUTINE_TYPE,ROUTINE_NAME"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>checksum_trigger_structure</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>generic_checksum</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>errn</name></expr></argument>,<argument><expr><literal type="string">"SELECT COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(REPLACE(REPLACE(REPLACE(REPLACE(ACTION_STATEMENT, CHAR(32), ''), CHAR(13), ''), CHAR(10), ''), CHAR(9), '')) AS UNSIGNED)), 10, 16)), 0) AS crc FROM information_schema.triggers WHERE EVENT_OBJECT_SCHEMA='%s' AND EVENT_OBJECT_TABLE='%s';"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>checksum_view_structure</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>generic_checksum</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>errn</name></expr></argument>,<argument><expr><literal type="string">"SELECT COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(REPLACE(VIEW_DEFINITION,TABLE_SCHEMA,'')) AS UNSIGNED)), 10, 16)), 0) AS crc FROM information_schema.views WHERE TABLE_SCHEMA='%s' AND TABLE_NAME='%s';"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>checksum_database_defaults</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>generic_checksum</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>errn</name></expr></argument>,<argument><expr><literal type="string">"SELECT COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(concat(DEFAULT_CHARACTER_SET_NAME,DEFAULT_COLLATION_NAME)) AS UNSIGNED)), 10, 16)), 0) AS crc FROM information_schema.SCHEMATA WHERE SCHEMA_NAME='%s' ;"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>checksum_table_indexes</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>generic_checksum</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>errn</name></expr></argument>,<argument><expr><literal type="string">"SELECT COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(CONCAT_WS(TABLE_NAME,INDEX_NAME,SEQ_IN_INDEX,COLUMN_NAME)) AS UNSIGNED)), 10, 16)), 0) AS crc FROM information_schema.STATISTICS WHERE TABLE_SCHEMA='%s' AND TABLE_NAME='%s' ORDER BY INDEX_NAME,SEQ_IN_INDEX,COLUMN_NAME"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GKeyFile</name> <modifier>*</modifier></type> <name>load_config_file</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>config_file</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GKeyFile</name> <modifier>*</modifier></type><name>kf</name> <init>= <expr><call><name>g_key_file_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// Loads the config_file</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_key_file_load_from_file</name> <argument_list>(<argument><expr><name>kf</name></expr></argument>, <argument><expr><name>config_file</name></expr></argument>,
                                  <argument><expr><name>G_KEY_FILE_KEEP_COMMENTS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_warning</name> <argument_list>(<argument><expr><literal type="string">"Failed to load config file %s: %s"</literal></expr></argument>, <argument><expr><name>config_file</name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>kf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_config_group</name><parameter_list>(<parameter><decl><type><name>GKeyFile</name> <modifier>*</modifier></type><name>kf</name></decl></parameter>, <parameter><decl><type><name>GOptionContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gsize</name></type> <name>len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>keys</name><init>=<expr><call><name>g_key_file_get_keys</name><argument_list>(<argument><expr><name>kf</name></expr></argument>,<argument><expr><name>group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gsize</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GSList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"loading %s: %s"</literal></expr></argument>,<argument><expr><name>group</name></expr></argument>,<argument><expr><name><name>error</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="line">// Transform the key-value pair to parameters option that the parsing will understand</comment>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>,<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>g_strcmp0</name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>,<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>g_strcmp0</name><argument_list>(<argument><expr><literal type="string">"password"</literal></expr></argument>,<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>g_slist_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"--%s"</literal></expr></argument>,<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>value</name><init>=<expr><call><name>g_key_file_get_value</name><argument_list>(<argument><expr><name>kf</name></expr></argument>,<argument><expr><name>group</name></expr></argument>,<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>( <expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>list</name><operator>=</operator><call><name>g_slist_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>gint</name></type> <name>slen</name> <init>= <expr><call><name>g_slist_length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>gclist</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>gchar</name> <operator>*</operator></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GSList</name> <modifier>*</modifier></type><name>ilist</name><init>=<expr><name>list</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>slen</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>gclist</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>ilist</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ilist</name><operator>=</operator><name><name>ilist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>g_slist_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Second parse over the options</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_option_context_parse</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gclist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_print</name><argument_list>(<argument><expr><literal type="string">"option parsing failed: %s, try --help\n"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Config file loaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>gclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_session_hash_from_key_file</name><parameter_list>(<parameter><decl><type><name>GKeyFile</name> <modifier>*</modifier></type><name>kf</name></decl></parameter>, <parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>set_session_hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type> <name>group_variables</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>value</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gsize</name></type> <name>len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name><init>=<expr><call><name>g_key_file_get_keys</name><argument_list>(<argument><expr><name>kf</name></expr></argument>,<argument><expr><name>group_variables</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>value</name><operator>=</operator><call><name>g_key_file_get_value</name><argument_list>(<argument><expr><name>kf</name></expr></argument>,<argument><expr><name>group_variables</name></expr></argument>,<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>set_session_hash</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_per_table_info_from_key_file</name><parameter_list>(<parameter><decl><type><name>GKeyFile</name> <modifier>*</modifier></type><name>kf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration_per_table</name></name> <modifier>*</modifier></type> <name>conf_per_table</name></decl></parameter>, <parameter><function_decl><type><name>fun_ptr</name></type> <name>get_function_pointer_for</name><parameter_list>()</parameter_list></function_decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gsize</name></type> <name>len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>len2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>groups</name><init>=<expr><call><name>g_key_file_get_groups</name><argument_list>(<argument><expr><name>kf</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>ht</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>value</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"`.`"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"`"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"`"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>ht</name><operator>=</operator><call><name>g_hash_table_new</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>keys</name><operator>=</operator><call><name>g_key_file_get_keys</name><argument_list>(<argument><expr><name>kf</name></expr></argument>,<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len2</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"`"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"`"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>g_key_file_get_value</name><argument_list>(<argument><expr><name>kf</name></expr></argument>,<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name><name>struct</name> <name>function_pointer</name></name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>function_pointer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>function</name></name><operator>=</operator><call><name>get_function_pointer_for</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>memory</name></name><operator>=</operator><call><name>g_hash_table_new</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>ht</name></expr></argument>,<argument><expr><call><name>g_strndup</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"where"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>g_key_file_get_value</name><argument_list>(<argument><expr><name>kf</name></expr></argument>,<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name><name>conf_per_table</name><operator>-&gt;</operator><name>all_where_per_table</name></name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"limit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>g_key_file_get_value</name><argument_list>(<argument><expr><name>kf</name></expr></argument>,<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name><name>conf_per_table</name><operator>-&gt;</operator><name>all_limit_per_table</name></name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"num_threads"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>g_key_file_get_value</name><argument_list>(<argument><expr><name>kf</name></expr></argument>,<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name><name>conf_per_table</name><operator>-&gt;</operator><name>all_num_threads_per_table</name></name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name><name>conf_per_table</name><operator>-&gt;</operator><name>all_anonymized_function</name></name></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>free_hash_table</name><parameter_list>(<parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>hash</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>lkey</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_hash_table_iter_init</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>e</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>( <expr><call><name>g_hash_table_iter_next</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>lkey</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>e</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>lkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>refresh_set_session_from_hash</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>set_session_hash</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>lkey</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_hash_table_iter_init</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>set_session_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>e</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>c</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>( <expr><call><name>g_hash_table_iter_next</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>lkey</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>e</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
    <expr_stmt><expr><name>c</name><operator>=</operator><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"/*!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>ss</name></expr></argument>,<argument><expr><literal type="string">"/%s SET SESSION %s = %s */;\n"</literal></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>lkey</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>ss</name></expr></argument>,<argument><expr><literal type="string">"SET SESSION %s = %s ;\n"</literal></expr></argument>,<argument><expr><name>lkey</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_hash</name><parameter_list>(<parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>set_session_hash</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>lkey</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_hash_table_iter_init</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>set_session_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>e</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>( <expr><call><name>g_hash_table_iter_next</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>lkey</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>e</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>lkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>execute_gstring</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ss</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name><modifier>*</modifier><modifier>*</modifier></type> <name>line</name><init>=<expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>g_strv_length</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
       <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
         <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Set session failed: %s"</literal></expr></argument>,<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>write_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>write</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type><name>replace_escaped_strings</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'\0'</literal></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
      <switch>switch <condition>(<expr><name><name>c</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
        <case>case <expr><literal type="char">'n'</literal></expr>:</case>
          <expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'t'</literal></expr>:</case>
          <expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="char">'\t'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'r'</literal></expr>:</case>
          <expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="char">'\r'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'f'</literal></expr>:</case>
          <expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="char">'\f'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></switch>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>escape_tab_with</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>from</name><init>=<expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>from</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'\0'</literal></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>from</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'\t'</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name><name>to</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="char">'\\'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>to</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="char">'t'</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>to</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>from</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>to</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>from</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  return to;</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_backup_dir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new_directory</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>g_mkdir</name><argument_list>(<argument><expr><name>new_directory</name></expr></argument>, <argument><expr><literal type="number">0750</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Unable to create `%s': %s"</literal></expr></argument>, <argument><expr><name>new_directory</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>guint</name></type> <name>strcount</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>t</name><init>=<expr><name>text</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>t</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>t</name><operator>=</operator><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>m_remove</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>directory</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stream</name> <operator>&amp;&amp;</operator> <name>no_delete</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><ternary><condition><expr><name>directory</name> <operator>==</operator> <name>NULL</name></expr>?</condition><then><expr><literal type="string">""</literal></expr></then><else>:<expr><name>directory</name></expr></else></ternary></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Removing file: %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>is_table_in_list</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>table_name</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>tl</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>g_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>tl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>initialize_common_options</name><parameter_list>(<parameter><decl><type><name>GOptionContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list><block>{<block_content>

  <if_stmt><if>if <condition>(<expr><name>defaults_file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_file_test</name><argument_list>(<argument><expr><name>defaults_file</name></expr></argument>,<argument><expr><name>G_FILE_TEST_EXISTS</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Default file not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_path_is_absolute</name><argument_list>(<argument><expr><name>defaults_file</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>new_defaults_file</name><init>=<expr><call><name>g_build_filename</name><argument_list>(<argument><expr><call><name>g_get_current_dir</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>defaults_file</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>defaults_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>defaults_file</name><operator>=</operator><name>new_defaults_file</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>key_file</name><operator>=</operator><call><name>load_config_file</name><argument_list>(<argument><expr><name>defaults_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>load_config_group</name><argument_list>(<argument><expr><name>key_file</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>get_table_list</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>tables_list</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>tl</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>tables_list</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>g_strv_length</name><argument_list>(<argument><expr><name>tl</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>tl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"Table name %s is not in DATABASE.TABLE format"</literal></expr></argument>, <argument><expr><name><name>tl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>tl</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove_definer_from_gchar</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>from</name> <init>= <expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><literal type="number">50</literal></expr></argument>,<argument><expr><literal type="string">" DEFINER="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>from</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>from</name><operator>++</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>to</name><init>=<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>from</name></expr></argument>,<argument><expr><literal type="number">110</literal></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>to</name></expr>)</condition><block>{<block_content>
      <while>while<condition>(<expr><name>from</name> <operator>!=</operator> <name>to</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>from</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">' '</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>from</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove_definer</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>remove_definer_from_gchar</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>program</name></decl></parameter>)</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>str</name><init>=<expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s, built against MySQL %s"</literal></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>, <argument><expr><name>MYSQL_VERSION_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_SSL</name></cpp:ifdef>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><literal type="string">" with SSL support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZWRAP_USE_ZSTD</name></cpp:ifdef>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><literal type="string">" with ZSTD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><literal type="string">" with GZIP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>g_print</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


</unit>
