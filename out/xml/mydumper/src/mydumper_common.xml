<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/mydumper_common.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    Domas Mituzas, Facebook ( domas at fb dot com )
                    Mark Leith, Oracle Corporation (mark dot leith at oracle dot com)
                    Andrew Hutchings, MariaDB Foundation (andrew at mariadb dot org)
                    Max Bubenick, Percona RDBA (max dot bubenick at percona dot com)
                    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gio/gio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>compress_extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>dump_directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>fields_escaped_by</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>ref_table_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>ref_table</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>table_number</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>initialize_common</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>ref_table_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ref_table</name><operator>=</operator><call><name>g_hash_table_new_full</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_free</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_free</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_common</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_free</name><argument_list>(<argument><expr><name>ref_table_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name>ref_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type> <name>determine_filename</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>)</parameter_list><block>{<block_content>
  <comment type="line">// https://stackoverflow.com/questions/11794144/regular-expression-for-valid-filename</comment>
  <comment type="line">// We might need to define a better filename alternatives</comment>
  <if_stmt><if>if <condition>(<expr><call><name>check_filename_regex</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>table</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name>table</name></expr></argument>,<argument><expr><literal type="string">"mydumper_"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"mydumper_%d"</literal></expr></argument>,<argument><expr><name>table_number</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>table_number</name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>r</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type><name>get_ref_table</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>ref_table_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>val</name><init>=<expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>ref_table</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>t</name><init>=<expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>val</name><operator>=</operator><call><name>determine_filename</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>ref_table</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>ref_table_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type> <name>escape_string</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>r</name><init>=<expr><call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>build_schema_table_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%s.%s-%s.sql%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>dump_directory</name></expr></argument>, <argument><expr><name><name>filename</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>build_schema_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%s-%s.sql%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>dump_directory</name></expr></argument>, <argument><expr><name><name>filename</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>build_tablespace_filename</name><parameter_list>()</parameter_list><block>{<block_content>
  <return>return <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>dump_directory</name></expr></argument>, <argument><expr><literal type="string">"all-schema-create-tablespace.sql"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>build_meta_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%s.%s-%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%s-%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>dump_directory</name></expr></argument>, <argument><expr><name><name>filename</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_charset</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>character_set</name></decl></parameter>,
                 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>collation_connection</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,
                  <argument><expr><literal type="string">"SET @PREV_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,
                  <argument><expr><literal type="string">"SET @PREV_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,
                  <argument><expr><literal type="string">"SET @PREV_COLLATION_CONNECTION=@@COLLATION_CONNECTION;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"SET character_set_client = %s;\n"</literal></expr></argument>,
                         <argument><expr><name>character_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"SET character_set_results = %s;\n"</literal></expr></argument>,
                         <argument><expr><name>character_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"SET collation_connection = %s;\n"</literal></expr></argument>,
                         <argument><expr><name>collation_connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>restore_charset</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,
                  <argument><expr><literal type="string">"SET character_set_client = @PREV_CHARACTER_SET_CLIENT;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,
                  <argument><expr><literal type="string">"SET character_set_results = @PREV_CHARACTER_SET_RESULTS;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,
                  <argument><expr><literal type="string">"SET collation_connection = @PREV_COLLATION_CONNECTION;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_dump_directory</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>directory</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>g_dir_open</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"cannot open directory %s, %s\n"</literal></expr></argument>, <argument><expr><name>directory</name></expr></argument>,
               <argument><expr><name><name>error</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>filename</name> <operator>=</operator> <call><name>g_dir_read_name</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"error removing file %s (%d)\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>g_dir_close</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_transaction_isolation_level_repeatable_read</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
                  <argument><expr><literal type="string">"SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Failed to set isolation level: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Global Var used:</comment>
<comment type="line">// - dump_directory</comment>
<comment type="line">// - compress_extension</comment>
<function><type><name>gchar</name> <modifier>*</modifier></type> <name>build_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>sub_part</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>extension</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>second_extension</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><ternary><condition><expr><name>sub_part</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then>
    <expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%s.%s.%05u.%s%s%s%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr><name>compress_extension</name></expr></argument>, <argument><expr><ternary><condition><expr><name>second_extension</name><operator>!=</operator><name>NULL</name></expr> ?</condition><then><expr><literal type="string">"."</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name>second_extension</name><operator>!=</operator><name>NULL</name></expr> ?</condition><then><expr><name>second_extension</name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr></then><else>:
    <expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%s.%s.%05u.%05u.%s%s%s%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>sub_part</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr><name>compress_extension</name></expr></argument>, <argument><expr><ternary><condition><expr><name>second_extension</name><operator>!=</operator><name>NULL</name></expr> ?</condition><then><expr><literal type="string">"."</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name>second_extension</name><operator>!=</operator><name>NULL</name></expr> ?</condition><then><expr><name>second_extension</name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>dump_directory</name></expr></argument>, <argument><expr><name><name>filename</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>build_data_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>sub_part</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>build_filename</name><argument_list>(<argument><expr><name>database</name></expr></argument>,<argument><expr><name>table</name></expr></argument>,<argument><expr><name>part</name></expr></argument>,<argument><expr><name>sub_part</name></expr></argument>,<argument><expr><literal type="string">"sql"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>build_fifo_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>sub_part</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>extension</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>build_filename</name><argument_list>(<argument><expr><name>database</name></expr></argument>,<argument><expr><name>table</name></expr></argument>,<argument><expr><name>part</name></expr></argument>,<argument><expr><name>sub_part</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>,<argument><expr><literal type="string">"fifo"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>build_stdout_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>sub_part</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>extension</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>second_extension</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>build_filename</name><argument_list>(<argument><expr><name>database</name></expr></argument>,<argument><expr><name>table</name></expr></argument>,<argument><expr><name>part</name></expr></argument>,<argument><expr><name>sub_part</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr><name>second_extension</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>build_load_data_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>sub_part</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>build_filename</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>sub_part</name></expr></argument>, <argument><expr><literal type="string">"dat"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>m_real_escape_string</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>length</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>conn</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>to</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>from</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>to_length</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>length</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to_start</name> <init>= <expr><name>to</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>to_end</name> <init>= <expr><name>to_start</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>to_length</name></expr> ?</condition><then> <expr><name>to_length</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal> <operator>*</operator> <name>length</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tmp_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>end</name> <operator>=</operator> <name>from</name> <operator>+</operator> <name>length</name></expr>;</init> <condition><expr><name>from</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>from</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>escape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*    if (use_mb_flag &amp;&amp; (tmp_length = my_ismbchar(charset_info, from, end))) {
      if (to + tmp_length &gt; to_end) {
        overflow = true;
        break;
      }
      while (tmp_length--) *to++ = *from++;
      from--;
      continue;
    }
*/</comment>
    <comment type="block">/*
 *      If the next character appears to begin a multi-byte character, we
 *      escape that first byte of that apparent multi-byte character. (The
 *      character just looks like a multi-byte character -- if it were actually
 *      a multi-byte character, it would have been passed through in the test
 *      above.)
 *      Without this check, we can create a problem by converting an invalid
 *      multi-byte character into a valid one. For example, 0xbf27 is not
 *      a valid GBK character, but 0xbf5c is. (0x27 = ', 0x5c = \)
 *      */</comment>

<comment type="line">//    tmp_length = use_mb_flag ? my_mbcharlen_ptr(charset_info, from, end) : 0;</comment>

    <if_stmt><if>if <condition>(<expr><name>tmp_length</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>escape</name> <operator>=</operator> <operator>*</operator><name>from</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <switch>switch <condition>(<expr><operator>*</operator><name>from</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="block">/* Must be escaped for 'mysql' */</comment>
          <expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <comment type="block">/* Must be escaped for logs */</comment>
          <expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'\r'</literal></expr>:</case>
          <expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
          <expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'\''</literal></expr>:</case>
          <expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'"'</literal></expr>:</case> <comment type="block">/* Better safe than sorry */</comment>
          <expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'\032'</literal></expr>:</case> <comment type="block">/* This gives problems on Win32 */</comment>
          <expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="char">'Z'</literal></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>escape</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>to</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>to_end</name></expr>)</condition> <block>{<block_content>
<comment type="line">//        overflow = true;</comment>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>fields_escaped_by</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <name>escape</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>to</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>to_end</name></expr>)</condition> <block>{<block_content>
<comment type="line">//        overflow = true;</comment>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <comment type="line">//overflow ? (size_t)-1 : </comment>
         <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>to</name> <operator>-</operator> <name>to_start</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>m_escape_char_with_char</name><parameter_list>(<parameter><decl><type><name>gchar</name></type> <name>neddle</name></decl></parameter>, <parameter><decl><type><name>gchar</name></type> <name>replace</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>length</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>from</name><init>=<expr><call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ffrom</name><init>=<expr><name>from</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>from</name> <operator>+</operator> <name>length</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>end</name> <operator>=</operator> <name>from</name> <operator>+</operator> <name>length</name></expr>;</init> <condition><expr><name>from</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>from</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>( <expr><operator>*</operator><name>from</name> <operator>==</operator> <name>neddle</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <name>replace</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>to</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>to</name><operator>=</operator><operator>*</operator><name>from</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>to</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ffrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>m_replace_char_with_char</name><parameter_list>(<parameter><decl><type><name>gchar</name></type> <name>neddle</name></decl></parameter>, <parameter><decl><type><name>gchar</name></type> <name>replace</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>length</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>from</name> <operator>+</operator> <name>length</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>end</name> <operator>=</operator> <name>from</name> <operator>+</operator> <name>length</name></expr>;</init> <condition><expr><name>from</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>from</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>( <expr><operator>*</operator><name>from</name> <operator>==</operator> <name>neddle</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>from</name> <operator>=</operator> <name>replace</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>from</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>determine_ecol_ccol</name><parameter_list>(<parameter><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>guint</name> <modifier>*</modifier></type><name>ecol</name></decl></parameter>, <parameter><decl><type><name>guint</name> <modifier>*</modifier></type><name>ccol</name></decl></parameter>, <parameter><decl><type><name>guint</name> <modifier>*</modifier></type><name>collcol</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>mysql_fetch_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>mysql_num_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Engine"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><name>ecol</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Comment"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><name>ccol</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Collation"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><name>collcol</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
