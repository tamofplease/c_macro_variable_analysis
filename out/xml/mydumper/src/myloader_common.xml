<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/mydumper/src/myloader_common.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZWRAP_USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../zstd/zstd_zlibwrapper.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_restore_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_control_job.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tables_skiplist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>compress_extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>no_delete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>resume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>tables_skiplist_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>directory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GMutex</name> <modifier>*</modifier></type><name>db_hash_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>db_hash</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>tbl_hash</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>initialize_common</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>db_hash_mutex</name><operator>=</operator><call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tbl_hash</name><operator>=</operator><call><name>g_hash_table_new</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>m_filename_has_suffix</name><parameter_list>(<parameter><decl><type><name>gchar</name> <specifier>const</specifier> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <specifier>const</specifier> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
    <return>return <expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>str</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>strlen</name><argument_list>(<argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>strlen</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>strlen</name><argument_list>(<argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>suffix</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return> 
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type> <name>new_database</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>database</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type> <name>d</name> <init>= <expr><call><name>g_new</name><argument_list>(<argument><expr>struct <name>database</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name><operator>=</operator><name>database</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>schema_created</name></name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>
  <return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type> <name>get_db_hash</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>db_hash_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type> <name>d</name><init>=<expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>db_hash</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>d</name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>d</name><operator>=</operator><call><name>new_database</name><argument_list>(<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>db_hash</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>db_hash_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
struct database * db_hash_lookup(gchar *database){
  struct database *r=NULL;
  g_mutex_lock(db_hash_mutex);
  r=g_hash_table_lookup(db_hash,database);
  g_mutex_unlock(db_hash_mutex);
  return r;
}
*/</comment>
<function><type><name>gboolean</name></type> <name>eval_table</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>db_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>table_name</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>( <expr><name>tables</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>is_table_in_list</name><argument_list>(<argument><expr><name>table_name</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>( <expr><name>tables_skiplist_file</name> <operator>&amp;&amp;</operator> <call><name>check_skiplist</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>, <argument><expr><name>table_name</name></expr></argument> )</argument_list></call></expr>)</condition><block>{<block_content>
    <return>return <expr><name>FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>eval_regex</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*struct restore_job * new_restore_job( char * filename, char * database, struct db_table * dbt, GString * statement, guint part, guint sub_part, enum restore_job_type type, const char *object){
  struct restore_job *rj = g_new(struct restore_job, 1);
  rj-&gt;filename  = filename;
  rj-&gt;database  = database;
  rj-&gt;dbt       = dbt;
  rj-&gt;statement = statement;
  rj-&gt;part      = part;
  rj-&gt;sub_part  = sub_part;
  rj-&gt;type      = type;
  rj-&gt;object    = object;
  return rj;
}

*/</comment>
<function><type><name>guint</name></type> <name>execute_use</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"USE `%s`"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>current_database</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Error switching to database `%s` %s"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>current_database</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>execute_use_if_needs_to</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>( <expr><name>database</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>db</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>current_database</name></name><operator>==</operator><name>NULL</name> <operator>||</operator> <call><name>g_strcmp0</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>current_database</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>current_database</name></name><operator>=</operator><name>database</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>execute_use</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>file_type</name></name></type> <name>get_file_type</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>m_filename_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-schema.sql"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>SCHEMA_TABLE</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>m_filename_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-metadata"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>METADATA_TABLE</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"metadata"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>METADATA_GLOBAL</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"all-schema-create-tablespace.sql"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SCHEMA_TABLESPACE</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"resume"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>resume</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"resume file found, but no --resume option passed. Use --resume or remove it and restart process if you consider that it will be safe."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>RESUME</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"resume.partial"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"resume.partial file found. Remove it and restart process if you consider that it will be safe."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>m_filename_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-checksum"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>CHECKSUM</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>m_filename_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-schema-view.sql"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SCHEMA_VIEW</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>m_filename_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-schema-triggers.sql"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SCHEMA_TRIGGER</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>m_filename_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-schema-post.sql"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SCHEMA_POST</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>m_filename_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-schema-create.sql"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SCHEMA_CREATE</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>m_filename_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">".sql"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>DATA</name></expr>;</return>
  </block_content>}</block></if><if type="elseif">else if <condition>(<expr><call><name>m_filename_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">".dat"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>LOAD_DATA</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>IGNORED</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>gboolean</name></type> <name>read_data</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>is_compressed</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
                   <parameter><decl><type><name>gboolean</name> <modifier>*</modifier></type><name>eof</name></decl></parameter>, <parameter><decl><type><name>guint</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

  <do>do <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_compressed</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gzgets</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator><name>file</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gzeof</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>line</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>buffer</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>eof</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>;</do>

  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_database_table_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sufix</name></decl></parameter>,<parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>database</name></decl></parameter>,<parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>split_filename</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>sufix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>split</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>split_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"."</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>split_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>count</name><init>=<expr><call><name>g_strv_length</name><argument_list>(<argument><expr><name>split</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"We need to get the db and table name from the create table statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>table</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>database</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>append_alter_table</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type> <name>alter_table_statement</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>,<argument><expr><literal type="string">"ALTER TABLE `"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>,<argument><expr><literal type="string">"`.`"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>,<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>,<argument><expr><literal type="string">"` "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>finish_alter_table</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type> <name>alter_table_statement</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>str</name><init>=<expr><call><name>g_strrstr_len</name><argument_list>(<argument><expr><name><name>alter_table_statement</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><name><name>alter_table_statement</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>-</operator> <name><name>alter_table_statement</name><operator>-&gt;</operator><name>str</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>long</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>alter_table_statement</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>str</name><operator>=</operator><literal type="char">';'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>,<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>,<argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>process_create_table_statement</name> <parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>statement</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>create_table_statement</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>alter_table_statement</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>alter_table_constraint_statement</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name><modifier>*</modifier><modifier>*</modifier></type> <name>split_file</name><init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>autoinc_column</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>append_alter_table</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>append_alter_table</name><argument_list>(<argument><expr><name>alter_table_constraint_statement</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fulltext_counter</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>g_strv_length</name><argument_list>(<argument><expr><name>split_file</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if <condition>( <expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="string">"  KEY"</literal></expr></argument>)</argument_list></call>
      <operator>||</operator> <call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="string">"  UNIQUE"</literal></expr></argument>)</argument_list></call>
      <operator>||</operator> <call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="string">"  SPATIAL"</literal></expr></argument>)</argument_list></call>
      <operator>||</operator> <call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><literal type="string">"  FULLTEXT"</literal></expr></argument>)</argument_list></call>
      <operator>||</operator> <call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="string">"  INDEX"</literal></expr></argument>)</argument_list></call></expr>
      )</condition><block>{<block_content>
      <comment type="line">// Ignore if the first column of the index is the AUTO_INCREMENT column</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>autoinc_column</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>g_strrstr</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>autoinc_column</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>create_table_statement</name></expr></argument>, <argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>create_table_statement</name></expr></argument>,<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>flag</name><operator>|=</operator><name>IS_ALTER_TABLE_PRESENT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>g_strrstr</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"  FULLTEXT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fulltext_counter</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fulltext_counter</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><name>fulltext_counter</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>finish_alter_table</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>append_alter_table</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>,<argument><expr><literal type="string">"\n ADD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>alter_table_statement</name></expr></argument>, <argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="string">"  CONSTRAINT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>flag</name><operator>|=</operator><name>INCLUDE_CONSTRAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>alter_table_constraint_statement</name></expr></argument>,<argument><expr><literal type="string">"\n ADD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>alter_table_constraint_statement</name></expr></argument>, <argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>g_strrstr</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"AUTO_INCREMENT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
          <decl_stmt><decl><type><name>gchar</name><modifier>*</modifier><modifier>*</modifier></type> <name>autoinc_split</name><init>=<expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"`"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>autoinc_column</name><operator>=</operator><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"(`%s`"</literal></expr></argument>, <argument><expr><name><name>autoinc_split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>create_table_statement</name></expr></argument>, <argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>create_table_statement</name></expr></argument>,<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_strrstr</name><argument_list>(<argument><expr><name><name>split_file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"ENGINE=InnoDB"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name><operator>|=</operator><name>IS_INNODB_TABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>flag</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type><name>build_dbt_key</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"`%s`_`%s`"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type> <name>compare_dbt</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>table_hash</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>a_key</name><init>=<expr><call><name>build_dbt_key</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>database</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>b_key</name><init>=<expr><call><name>build_dbt_key</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>database</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>a_val</name><init>=<expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>table_hash</name></expr></argument>,<argument><expr><name>a_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>b_val</name><init>=<expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>table_hash</name></expr></argument>,<argument><expr><name>b_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>a_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>b_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>a_val</name><operator>-&gt;</operator><name>rows</name></name> <operator>&lt;</operator> <name><name>b_val</name><operator>-&gt;</operator><name>rows</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type> <name>compare_dbt_short</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>rows</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>rows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>refresh_table_list_without_table_hash_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type> <name>table_list</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>lkey</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_hash_table_iter_init</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_hash</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>( <expr><call><name>g_hash_table_iter_next</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>lkey</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>dbt</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
 <comment type="line">//   table_list=g_list_insert_sorted_with_data (table_list,dbt,&amp;compare_dbt,conf-&gt;table_hash);</comment>
    <expr_stmt><expr><name>table_list</name><operator>=</operator><call><name>g_list_insert_sorted</name><argument_list>(<argument><expr><name>table_list</name></expr></argument>,<argument><expr><name>dbt</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>compare_dbt_short</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list</name></name><operator>=</operator><name>table_list</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>refresh_table_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_hash_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>refresh_table_list_without_table_hash_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_hash_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>checksum_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><function_decl><type><name>gchar</name><modifier>*</modifier></type> <name>fun</name><parameter_list>()</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>database</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>get_database_table_from_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>suffix</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>database</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>real_database</name><init>=<expr><call><name>get_db_hash</name><argument_list>(<argument><expr><name>database</name></expr></argument>,<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>real_table</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>real_table</name><operator>=</operator><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>tbl_hash</name></expr></argument>,<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>infile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>checksum</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>errn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>row</name><init>=<expr><call><name>fun</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><name>db</name></expr> ?</condition><then> <expr><name>db</name></expr> </then><else>: <expr><name><name>real_database</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>real_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>gboolean</name></type> <name>is_compressed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>infile</name> <operator>=</operator> <call><name>g_fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>is_compressed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>infile</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>gzopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>is_compressed</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>infile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"cannot open checksum file %s (%d)"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>cs</name><init>= <expr><ternary><condition><expr><operator>!</operator><name>is_compressed</name></expr> ?</condition><then> <expr><call><name>fgets</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr> </then><else>:<expr><call><name>gzgets</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator><name>infile</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>checksum</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>checksum</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>g_strcasecmp</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>real_table</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s mismatch found for `%s`.`%s`. Got '%s', expecting '%s' in file: %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><ternary><condition><expr><name>db</name></expr> ?</condition><then> <expr><name>db</name></expr> </then><else>: <expr><name><name>real_database</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>real_table</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content> 
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s mismatch found for `%s`. Got '%s', expecting '%s' in file: %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><ternary><condition><expr><name>db</name></expr> ?</condition><then> <expr><name>db</name></expr> </then><else>: <expr><name><name>real_database</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>real_table</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s confirmed for `%s`.`%s`"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><ternary><condition><expr><name>db</name></expr> ?</condition><then> <expr><name>db</name></expr> </then><else>: <expr><name><name>real_database</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>real_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s confirmed for `%s`"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><ternary><condition><expr><name>db</name></expr> ?</condition><then> <expr><name>db</name></expr> </then><else>: <expr><name><name>real_database</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"error reading file %s (%d)"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_compressed</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>gzclose</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// this can be moved to the table structure and executed before index creation.</comment>
<function><type><name>void</name></type> <name>checksum_databases</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Starting table checksum verification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>checksum_list</name></name></expr></init></decl>;</decl_stmt><comment type="line">//, *p;</comment>
  <while>while <condition>(<expr><name>e</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>filename</name><operator>=</operator><name><name>e</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"-schema-checksum"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>checksum_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"-schema-checksum"</literal></expr></argument>, <argument><expr><literal type="string">"Structure checksum"</literal></expr></argument>, <argument><expr><name>checksum_table_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"-schema-post-checksum"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>checksum_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"-schema-post-checksum"</literal></expr></argument>, <argument><expr><literal type="string">"Post checksum"</literal></expr></argument>, <argument><expr><name>checksum_process_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"-schema-triggers-checksum"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>checksum_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"-schema-triggers-checksum"</literal></expr></argument>, <argument><expr><literal type="string">"Trigger checksum"</literal></expr></argument>, <argument><expr><name>checksum_trigger_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"-schema-view-checksum"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>checksum_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"-schema-view-checksum"</literal></expr></argument>, <argument><expr><literal type="string">"View checksum"</literal></expr></argument>, <argument><expr><name>checksum_view_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"-schema-create-checksum"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>checksum_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"-schema-create-checksum"</literal></expr></argument>, <argument><expr><literal type="string">"Schema create checksum"</literal></expr></argument>, <argument><expr><name>checksum_database_defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"-schema-indexes-checksum"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>checksum_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"-schema-indexes-checksum"</literal></expr></argument>, <argument><expr><literal type="string">"Schema index checksum"</literal></expr></argument>, <argument><expr><name>checksum_table_indexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>checksum_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"-checksum"</literal></expr></argument>, <argument><expr><literal type="string">"Checksum"</literal></expr></argument>, <argument><expr><name>checksum_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt></block_content>}</block></else></if_stmt></block_content>}</block></else></if_stmt></block_content>}</block></else></if_stmt></block_content>}</block></else></if_stmt></block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>e</name><operator>=</operator><name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>has_compession_extension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>g_str_has_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>compress_extension</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ml_open</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier><modifier>*</modifier></type><name>infile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>gboolean</name> <modifier>*</modifier></type><name>is_compressed</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_compession_extension</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>infile</name> <operator>=</operator> <call><name>g_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>is_compressed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>infile</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>gzopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>is_compressed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
