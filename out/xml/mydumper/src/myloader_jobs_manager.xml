<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/myloader_jobs_manager.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_jobs_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_directory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_restore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_restore_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_control_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>set_names_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GString</name> <modifier>*</modifier></type><name>set_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>num_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>max_threads_for_index_creation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GMutex</name> <modifier>*</modifier></type><name>init_mutex</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GMutex</name> <modifier>*</modifier></type><name>index_mutex</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>index_threads_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>sync_threads_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GMutex</name> <modifier>*</modifier></type><name>sync_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guint</name></type> <name>sync_threads_remaining2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GMutex</name> <modifier>*</modifier></type><name>sync_mutex2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>view_mutex</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>initialize_job</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>purge_mode_str</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>initialize_restore_job</name><argument_list>(<argument><expr><name>purge_mode_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>init_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>index_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sync_threads_remaining</name><operator>=</operator><name>num_threads</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sync_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>sync_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>view_mutex</name><operator>=</operator><call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>sync_threads_remaining2</name><operator>=</operator><name>num_threads</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sync_mutex2</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>sync_mutex2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>index_threads_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>gboolean</name></type> <name>process_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type> <name>td</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>b</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>index_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>( <expr><name>max_threads_for_index_creation</name> <operator>&gt;</operator> <name>index_threads_counter</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>control_job</name></name> <modifier>*</modifier></type><name>job</name><init>=<expr><call><name>g_async_queue_try_pop</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>index_queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name><init>=<expr><name><name>job</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>restore_job</name><operator>-&gt;</operator><name>dbt</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>index_threads_counter</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>index_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>execute_use_if_needs_to</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>use_database</name></name></expr></argument>, <argument><expr><literal type="string">"Restoring index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>start_index_time</name></name><operator>=</operator><call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//      g_message("restoring index: %s.%s", dbt-&gt;database, dbt-&gt;table);</comment>
      <expr_stmt><expr><name>b</name><operator>=</operator><call><name>process_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>finish_time</name></name><operator>=</operator><call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//      job-&gt;data.restore_job-&gt;dbt-&gt;index_completed=TRUE;</comment>
      <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>index_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>index_threads_counter</name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>b</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>index_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sync_threads</name><parameter_list>(<parameter><decl><type><name>guint</name> <modifier>*</modifier></type><name>counter</name></decl></parameter>, <parameter><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>g_atomic_int_dec_and_test</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>loader_thread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>conf</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>init_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name> <operator>=</operator> <call><name>mysql_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>init_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>current_database</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>m_connect</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"myloader"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>set_names_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"/*!40101 SET SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"/*!40014 SET UNIQUE_CHECKS=0 */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"/*!40014 SET FOREIGN_KEY_CHECKS=0*/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>execute_gstring</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>set_session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>current_database</name></name><operator>=</operator><name>db</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>execute_use</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><literal type="string">"Initializing thread"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Changing to database: %s %s"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>current_database</name></name></expr></argument>,<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Starting import"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>process_stream_queue</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>control_job</name></name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>cont</name><init>=<expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>cont</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>cont</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>cont</name><operator>=</operator><call><name>process_index</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sync_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync_threads_remaining</name></expr></argument>,<argument><expr><name>sync_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Starting post import task over table"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cont</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>cont</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>job</name> <operator>=</operator> <operator>(</operator>struct <name>control_job</name> <operator>*</operator><operator>)</operator><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>post_table_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_use_if_needs_to</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>use_database</name></name></expr></argument>, <argument><expr><literal type="string">"Restoring post table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>view_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cont</name><operator>=</operator><call><name>process_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>view_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

<comment type="line">//  g_message("Thread %d: Starting post import task: triggers, procedures and triggers", td-&gt;thread_id);</comment>
  <expr_stmt><expr><name>cont</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>cont</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>job</name> <operator>=</operator> <operator>(</operator>struct <name>control_job</name> <operator>*</operator><operator>)</operator><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>post_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_use_if_needs_to</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>use_database</name></name></expr></argument>, <argument><expr><literal type="string">"Restoring post tasks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>view_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cont</name><operator>=</operator><call><name>process_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>view_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sync_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync_threads_remaining2</name></expr></argument>,<argument><expr><name>sync_mutex2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cont</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>cont</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>job</name> <operator>=</operator> <operator>(</operator>struct <name>control_job</name> <operator>*</operator><operator>)</operator><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>view_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_use_if_needs_to</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>use_database</name></name></expr></argument>, <argument><expr><literal type="string">"Restoring view tasks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>view_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cont</name><operator>=</operator><call><name>process_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name>view_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mysql_thread_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d ending"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier><modifier>*</modifier></type><name>threads</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>initialize_loader_threads</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>guint</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>threads</name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>GThread</name> <operator>*</operator></expr></argument>, <argument><expr><name>num_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>td</name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr>struct <name>thread_data</name></expr></argument>, <argument><expr><name>num_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>td</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>conf</name> <operator>=</operator> <name>conf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>td</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>thread_id</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator>
        <call><name>g_thread_create</name><argument_list>(<argument><expr><operator>(</operator><name>GThreadFunc</name><operator>)</operator><name>loader_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>td</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Here, the ready queue is being used to serialize the connection to the database.</comment>
    <comment type="line">// We don't want all the threads try to connect at the same time</comment>
    <expr_stmt><expr><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wait_loader_threads_to_finish</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>guint</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>g_thread_join</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>restore_job_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<comment type="block">/*  if (shutdown_triggered)
    g_async_queue_push(file_list_to_do, g_strdup("NO_MORE_FILES"));
    */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_loader_threads</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
