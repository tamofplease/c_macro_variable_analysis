<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/myloader_pmm_thread.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gerror.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gio/gio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>pmm_resolution</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>pmm_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gint</name></type> <name>kill_pmm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>kill_pmm_thread</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>kill_pmm</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>append_pmm_entry</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>content</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"myloader_queue{name=\"%s\"} %d\n"</literal></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>append_pmm_entry_tables</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>content</name></decl></parameter>,<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>lkey</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>table_hash</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_hash_table_iter_init</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_hash</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>( <expr><call><name>g_hash_table_iter_next</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>lkey</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>dbt</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"myloader_table{name=\"%s\"} %d\n"</literal></expr></argument>,<argument><expr><name>lkey</name></expr></argument>,<argument><expr><ternary><condition><expr><name>stream</name></expr>?</condition><then><expr><operator>(</operator><name>guint</name><operator>)</operator><call><name>g_list_length</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>restore_job_list</name></name></expr></argument>)</argument_list></call></expr></then><else>:<expr><operator>(</operator><name>guint</name><operator>)</operator><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_pmm_entries</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>content</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name><modifier>*</modifier></type> <name>conf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>append_pmm_entry</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"database_queue"</literal></expr></argument>,    <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>database_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>append_pmm_entry</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"table_queue"</literal></expr></argument>,       <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>append_pmm_entry</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"ready"</literal></expr></argument>,             <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>append_pmm_entry</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"data_queue"</literal></expr></argument>,        <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>data_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>append_pmm_entry</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"post_table_queue"</literal></expr></argument>,  <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>post_table_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>append_pmm_entry</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"post_queue"</literal></expr></argument>,        <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>post_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>append_pmm_entry</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"pause_resume"</literal></expr></argument>,      <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>pause_resume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>append_pmm_entry</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"stream_queue"</literal></expr></argument>,      <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>stream_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>append_pmm_entry</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"ready"</literal></expr></argument>,             <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>append_pmm_entry_tables</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_file_set_contents</name><argument_list>( <argument><expr><name>filename</name></expr></argument> , <argument><expr><name><name>content</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>content</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>pmm_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name><modifier>*</modifier></type> <name>filename</name><init>=<expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/myloader.prom"</literal></expr></argument>,<argument><expr><name>pmm_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>!</operator><name>kill_pmm</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>write_pmm_entries</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>configuration</name><operator>*</operator><operator>)</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>write_pmm_entries</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
