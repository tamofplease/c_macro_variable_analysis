<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/mydumper/src/mydumper_stream.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZWRAP_USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../zstd/zstd_zlibwrapper.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>m_open</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>compress_extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GAsyncQueue</name> <modifier>*</modifier></type><name>stream_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>no_delete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>no_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>stream_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name> <modifier>*</modifier></type><name>process_stream</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>filename</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>f</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>STREAM_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint64</name></type> <name>total_size</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GDateTime</name> <modifier>*</modifier></type><name>total_start_time</name><init>=<expr><call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GTimeSpan</name></type> <name>diff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>total_diff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//  gboolean not_compressed = FALSE;</comment>
<comment type="line">//  guint sz=0;</comment>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GDateTime</name> <modifier>*</modifier></type><name>datetime</name></decl>;</decl_stmt>
  <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
    <expr_stmt><expr><name>filename</name><operator>=</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>used_filemame</name><init>=<expr><call><name>g_path_get_basename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>len</name><operator>=</operator><call><name>write</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\n-- "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name><operator>=</operator><call><name>write</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>used_filemame</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>used_filemame</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name><operator>=</operator><call><name>write</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>total_size</name><operator>+=</operator><literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>total_size</name><operator>+=</operator><call><name>strlen</name><argument_list>(<argument><expr><name>used_filemame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>used_filemame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>no_stream</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block>{<block_content>
<comment type="line">//      g_message("Opening: %s",filename);</comment>
      <expr_stmt><expr><name>f</name><operator>=</operator><call><name>g_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"File failed to open: %s"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"File failed to open: %s. Reetrying"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>f</name><operator>=</operator><call><name>g_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"File failed to open: %s. Cancelling"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>guint</name></type> <name>total_len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GDateTime</name> <modifier>*</modifier></type><name>start_time</name><init>=<expr><call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>STREAM_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>buflen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><name>len</name><operator>=</operator><call><name>write</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>total_len</name><operator>=</operator><name>total_len</name> <operator>+</operator> <name>buflen</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"Stream failed during transmition of file: %s"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>STREAM_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>datetime</name> <operator>=</operator> <call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>diff</name><operator>=</operator><call><name>g_date_time_difference</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>,<argument><expr><name>start_time</name></expr></argument>)</argument_list></call><operator>/</operator><name>G_TIME_SPAN_SECOND</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_date_time_unref</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>total_diff</name><operator>=</operator><call><name>g_date_time_difference</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>,<argument><expr><name>total_start_time</name></expr></argument>)</argument_list></call><operator>/</operator><name>G_TIME_SPAN_SECOND</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_date_time_unref</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"File %s transferred in %ld seconds at %ld MB/s | Global: %ld MB/s"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>diff</name></expr></argument>,<argument><expr><name>total_len</name><operator>/</operator><literal type="number">1024</literal><operator>/</operator><literal type="number">1024</literal><operator>/</operator><name>diff</name></expr></argument>,<argument><expr><ternary><condition><expr><name>total_diff</name><operator>!=</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>total_size</name><operator>/</operator><literal type="number">1024</literal><operator>/</operator><literal type="number">1024</literal><operator>/</operator><name>total_diff</name></expr></then><else>:<expr><name>total_size</name><operator>/</operator><literal type="number">1024</literal><operator>/</operator><literal type="number">1024</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"File %s transferred | Global: %ld MB/s"</literal></expr></argument>,<argument><expr><name>filename</name></expr></argument>,<argument><expr><ternary><condition><expr><name>total_diff</name><operator>!=</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>total_size</name><operator>/</operator><literal type="number">1024</literal><operator>/</operator><literal type="number">1024</literal><operator>/</operator><name>total_diff</name></expr></then><else>:<expr><name>total_size</name><operator>/</operator><literal type="number">1024</literal><operator>/</operator><literal type="number">1024</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>total_size</name><operator>+=</operator><name>total_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>no_delete</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>datetime</name> <operator>=</operator> <call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>total_diff</name><operator>=</operator><call><name>g_date_time_difference</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>,<argument><expr><name>total_start_time</name></expr></argument>)</argument_list></call><operator>/</operator><name>G_TIME_SPAN_SECOND</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_date_time_unref</name><argument_list>(<argument><expr><name>total_start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_date_time_unref</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"All data transferred was %ld at a rate of %ld MB/s"</literal></expr></argument>,<argument><expr><name>total_size</name></expr></argument>,<argument><expr><ternary><condition><expr><name>total_diff</name><operator>!=</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>total_size</name><operator>/</operator><literal type="number">1024</literal><operator>/</operator><literal type="number">1024</literal><operator>/</operator><name>total_diff</name></expr></then><else>:<expr><name>total_size</name><operator>/</operator><literal type="number">1024</literal><operator>/</operator><literal type="number">1024</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_stream</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>stream_queue</name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>stream_thread</name> <operator>=</operator> <call><name>g_thread_create</name><argument_list>(<argument><expr><operator>(</operator><name>GThreadFunc</name><operator>)</operator><name>process_stream</name></expr></argument>, <argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wait_stream_to_finish</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_thread_join</name><argument_list>(<argument><expr><name>stream_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
