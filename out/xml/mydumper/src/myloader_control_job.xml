<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/mydumper/src/myloader_control_job.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_control_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_restore_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_restore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_jobs_manager.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>gboolean</name></type> <name>intermediate_queue_ended_local</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>innodb_optimize_keys_per_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>num_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>resume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GHashTable</name> <modifier>*</modifier></type><name>tbl_hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gboolean</name></type> <name>dont_wait_for_schema_create</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>control_job</name></name> <modifier>*</modifier></type> <name>new_job</name> <parameter_list>(<parameter><decl><type><name><name>enum</name> <name>control_job_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>job_data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>use_database</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>control_job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>control_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>use_database</name></name><operator>=</operator><name>use_database</name></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition><block>{<block_content>
    <case>case <expr><name>JOB_WAIT</name></expr>:</case>
      <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>queue</name></name> <operator>=</operator> <operator>(</operator><name>GAsyncQueue</name> <operator>*</operator><operator>)</operator><name>job_data</name></expr>;</expr_stmt>
    <case>case <expr><name>JOB_SHUTDOWN</name></expr>:</case>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>restore_job</name></name> <operator>=</operator> <operator>(</operator>struct <name>restore_job</name> <operator>*</operator><operator>)</operator><name>job_data</name></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>process_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>control_job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
  <switch>switch <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JOB_RESTORE</name></expr>:</case>
<comment type="line">//      g_message("Restore Job");</comment>
      <expr_stmt><expr><call><name>process_restore_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name><name>job</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>restore_job</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_WAIT</name></expr>:</case>
<comment type="line">//      g_message("Wait Job");</comment>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//      GAsyncQueue *queue=job-&gt;data.queue;</comment>
      <expr_stmt><expr><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JOB_SHUTDOWN</name></expr>:</case>
<comment type="line">//      g_message("Thread %d shutting down", td-&gt;thread_id);</comment>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>FALSE</name></expr>;</return>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Something very bad happened!(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>schema_file_missed_lets_continue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type> <name>td</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type> <name>iter</name><init>=<expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>=</operator><name>CREATED</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>g_list_length</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>restore_job_list</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>stream_queue</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>are_we_waiting_for_schema_jobs_to_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type> <name>td</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>database_queue</name></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal> <operator>||</operator> <call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_queue</name></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type> <name>iter</name><init>=<expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>==</operator><name>CREATING</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>are_we_waiting_for_create_schema_jobs_to_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type> <name>td</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>database_queue</name></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
    <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type> <name>iter</name><init>=<expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>==</operator><name>CREATING</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>are_available_jobs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type> <name>td</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type> <name>iter</name><init>=<expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>!=</operator><name>CREATED</name> <operator>||</operator> <call><name>g_list_length</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>restore_job_list</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_index_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>tdid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>indexes</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>dbt</name><operator>-&gt;</operator><name>index_enqueued</name></name></expr>)</condition><block>{<block_content>
<comment type="line">//    if (g_atomic_int_get(&amp;(dbt-&gt;remaining_jobs)) == 0){</comment>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Enqueuing index for table: `%s`.`%s`"</literal></expr></argument>, <argument><expr><name>tdid</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name> <init>= <expr><call><name>new_schema_restore_job</name><argument_list>(<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>JOB_RESTORE_STRING</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>indexes</name></name></expr></argument>,<argument><expr><literal type="string">"indexes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>index_queue</name></name></expr></argument>, <argument><expr><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_RESTORE</name></expr></argument>,<argument><expr><name>rj</name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>index_enqueued</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<comment type="line">//  }</comment>
</block_content>}</block></function>
<function><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type> <name>give_me_next_data_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type> <name>td</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>test_condition</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type> <name>iter</name><init>=<expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type> <name>next</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="line">//  g_debug("Elements in table_list: %d",g_list_length(td-&gt;conf-&gt;table_list));</comment>
<comment type="line">//  We are going to check every table and see if there is any missing job</comment>
  <while>while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>completed</name></name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
<comment type="line">//    g_debug("DB: %s Table: %s len: %d", dbt-&gt;real_database,dbt-&gt;real_table,g_list_length(dbt-&gt;restore_job_list));</comment>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>test_condition</name> <operator>||</operator> <operator>(</operator><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>==</operator><name>CREATED</name> <operator>&amp;&amp;</operator> <name><name>dbt</name><operator>-&gt;</operator><name>current_threads</name></name> <operator>&lt;</operator> <name><name>dbt</name><operator>-&gt;</operator><name>max_threads</name></name><operator>)</operator></expr>)</condition><block>{<block_content>
      <comment type="line">// I could do some job in here, do we have some for me?</comment>
<comment type="line">//      g_message("DB: %s Table: %s max_threads: %d current: %d", dbt-&gt;real_database,dbt-&gt;real_table, dbt-&gt;max_threads,dbt-&gt;current_threads);</comment>
<comment type="line">//      g_mutex_lock(dbt-&gt;mutex);</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>resume</name> <operator>&amp;&amp;</operator> <name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>!=</operator><name>CREATED</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>dont_wait_for_schema_create</name> <operator>&amp;&amp;</operator> <name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>!=</operator><name>CREATING</name></expr>)</condition><block>{<block_content>
<comment type="line">//g_message("dont_wait_for_schema_create");</comment>
          <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>tbl_hash</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>=</operator><name>CREATED</name></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>completed</name></name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>g_list_length</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>restore_job_list</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <comment type="line">// We found a job that we can process!</comment>
        <expr_stmt><expr><name>job</name> <operator>=</operator> <name><name>dbt</name><operator>-&gt;</operator><name>restore_job_list</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>dbt</name><operator>-&gt;</operator><name>restore_job_list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_list_free_1</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>restore_job_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>restore_job_list</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>current_threads</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>intermediate_queue_ended_local</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>completed</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>create_index_job</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

<comment type="line">//      g_mutex_unlock(dbt-&gt;mutex);</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>job</name></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type> <name>give_any_data_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type> <name>td</name></decl></parameter>)</parameter_list><block>{<block_content>
 <return>return <expr><call><name>give_me_next_data_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enqueue_indexes_if_possible</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name> <operator>)</operator><name>conf</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type> <name>iter</name><init>=<expr><name><name>conf</name><operator>-&gt;</operator><name>table_list</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>dbt</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>schema_state</name></name><operator>==</operator><name>CREATED</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dbt</name><operator>-&gt;</operator><name>index_enqueued</name></name></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>intermediate_queue_ended_local</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>g_atomic_int_get</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dbt</name><operator>-&gt;</operator><name>remaining_jobs</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>create_index_job</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
        if (dbt-&gt;indexes != NULL){
          if (g_atomic_int_get(&amp;(dbt-&gt;remaining_jobs)) == 0){
            g_message("Enqueuing index for table: %s", dbt-&gt;table);
            struct restore_job *rj = new_schema_restore_job(g_strdup("index"),JOB_RESTORE_STRING, dbt, dbt-&gt;real_database,dbt-&gt;indexes,"indexes");
            g_async_queue_push(conf-&gt;index_queue, new_job(JOB_RESTORE,rj,dbt-&gt;real_database));
            dbt-&gt;index_enqueued=TRUE;
          }
        }
*/</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>process_stream_queue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type> <name>td</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>control_job</name></name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>cont</name><init>=<expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>enum</name> <name>file_type</name></name></type> <name>ft</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//  enum file_type ft;</comment>
<comment type="line">//  int remaining_shutdown_pass=2*num_threads;</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>pass</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>max_jobs_to_wait</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>cont</name></expr>)</condition><block>{<block_content>
<comment type="line">//    if (ft == SHUTDOWN)</comment>
<comment type="line">//      g_async_queue_push(td-&gt;conf-&gt;stream_queue,GINT_TO_POINTER(ft));     </comment>


    <expr_stmt><expr><name>ft</name><operator>=</operator><operator>(</operator>enum <name>file_type</name><operator>)</operator><call><name>GPOINTER_TO_INT</name><argument_list>(<argument><expr><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>stream_queue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>ft</name></expr>)</condition><block>{<block_content>
    <case>case <expr><name>SCHEMA_CREATE</name></expr>:</case>
      <expr_stmt><expr><name>job</name><operator>=</operator><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>database_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JOB_SHUTDOWN</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Restoring database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type> <name>d</name><init>=<expr><call><name>get_db_hash</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>restore_job</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>srj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>restore_job</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>srj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cont</name><operator>=</operator><call><name>process_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>schema_created</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
<comment type="line">//        continue;</comment>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>database_queue</name></name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SCHEMA_TABLE</name></expr>:</case>

<comment type="block">/*
    // Enqueue index to add
    enqueue_indexes_if_possible(td-&gt;conf);

   // Check if are index and can be added

    if (innodb_optimize_keys_per_table){
      enqueue_indexes_if_possible(td-&gt;conf);

      gboolean b=process_index(td);
      if (b){
        g_async_queue_push(td-&gt;conf-&gt;stream_queue,GINT_TO_POINTER(ft));
        ft=-1;
//        continue;
      }
    }
*/</comment>

    <expr_stmt><expr><name>job</name><operator>=</operator><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JOB_SHUTDOWN</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>real_db_name</name><init>=<expr><call><name>get_db_hash</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>use_database</name></name></expr></argument>,<argument><expr><name><name>job</name><operator>-&gt;</operator><name>use_database</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
    <if_stmt><if>if <condition>(<expr><name><name>real_db_name</name><operator>-&gt;</operator><name>schema_created</name></name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>execute_use_if_needs_to</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>use_database</name></name></expr></argument>, <argument><expr><literal type="string">"Restoring table structure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cont</name><operator>=</operator><call><name>process_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>table_queue</name></name></expr></argument>,<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>stream_queue</name></name></expr></argument>,<argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>max_jobs_to_wait</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pass</name><operator>&gt;</operator><name>max_jobs_to_wait</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Max jobs waited (%d) for schema: %s"</literal></expr></argument>, <argument><expr><name>max_jobs_to_wait</name></expr></argument>, <argument><expr><name><name>real_db_name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>real_db_name</name><operator>-&gt;</operator><name>schema_created</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
<comment type="line">//      ft=-1;</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    
<comment type="line">//      continue;</comment>
    </block_content>}</block></if></if_stmt>

      <break>break;</break>

    <case>case <expr><name>DATA</name></expr>:</case>
      <expr_stmt><expr><name>rj</name> <operator>=</operator> <call><name>give_me_next_data_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>job</name><operator>=</operator><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_RESTORE</name></expr></argument>,<argument><expr><name>rj</name></expr></argument>,<argument><expr><name><name>rj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>execute_use_if_needs_to</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>use_database</name></name></expr></argument>, <argument><expr><literal type="string">"Restoring tables (1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cont</name><operator>=</operator><call><name>process_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>current_threads</name></name><operator>--</operator></expr>;</expr_stmt>
<comment type="line">//        continue;</comment>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rj</name><operator>=</operator><call><name>give_any_data_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Giving any data job"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>job</name><operator>=</operator><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_RESTORE</name></expr></argument>,<argument><expr><name>rj</name></expr></argument>,<argument><expr><name><name>rj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>execute_use_if_needs_to</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>use_database</name></name></expr></argument>, <argument><expr><literal type="string">"Restoring tables (2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>cont</name><operator>=</operator><call><name>process_job</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>rj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>current_threads</name></name><operator>--</operator></expr>;</expr_stmt>
<comment type="line">//        continue;</comment>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <comment type="line">// NO DATA JOB available, no worries, there will be another one shortly...</comment>
      <break>break;</break>
      <case>case <expr><name>SHUTDOWN</name></expr>:</case>
        <expr_stmt><expr><name>cont</name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>INTERMEDIATE_ENDED</name></expr>:</case>
        <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>database_queue</name></name></expr></argument>, <argument><expr><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_SHUTDOWN</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>( <expr><call><name>are_available_jobs</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>are_we_waiting_for_schema_jobs_to_complete</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Schema files missed, we continue..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>schema_file_missed_lets_continue</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>pass</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>max_jobs_to_wait</name><operator>=</operator><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>stream_queue</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>intermediate_queue_ended_local</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
      <default>default:</default>
        <expr_stmt><expr><name>NULL</name></expr>;</expr_stmt>
<comment type="line">//        g_message("What do we do with: %d", ft);</comment>

    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>enqueue_indexes_if_possible</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>innodb_optimize_keys_per_table</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>process_index</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>intermediate_queue_ended_local</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>( <expr><call><name>are_available_jobs</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>are_we_waiting_for_schema_jobs_to_complete</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<comment type="line">//          g_warning("Schema files missed, we continue...");</comment>
          <expr_stmt><expr><call><name>schema_file_missed_lets_continue</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
<comment type="line">//          g_message("Thread %d: There ar jobs %d", td-&gt;thread_id, ft);</comment>
        </block_content>}</block></else></if_stmt>     
        <expr_stmt><expr><name>pass</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>stream_queue</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>SHUTDOWN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>enqueue_indexes_if_possible</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Data import ended"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
