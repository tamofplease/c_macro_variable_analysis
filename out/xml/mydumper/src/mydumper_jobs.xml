<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/mydumper/src/mydumper_jobs.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    Domas Mituzas, Facebook ( domas at fb dot com )
                    Mark Leith, Oracle Corporation (mark dot leith at oracle dot com)
                    Andrew Hutchings, MariaDB Foundation (andrew at mariadb dot org)
                    Max Bubenick, Percona RDBA (max dot bubenick at percona dot com)
                    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gio/gio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_start_dump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_detect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_jobs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_working_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_write.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_chunks.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>char_chunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>load_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>where_option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>success_on_1146</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>detected_server</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>m_open</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> (<modifier>*</modifier><name>m_close</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>statement_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>skip_tz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>set_names_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GAsyncQueue</name> <modifier>*</modifier></type><name>stream_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>dump_routines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>dump_events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>use_savepoints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gint</name></type> <name>database_counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GMutex</name> <modifier>*</modifier></type><name>ready_database_dump_mutex</name></decl>;</decl_stmt>
<comment type="line">//extern gint table_counter;</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>rows_per_file</name></decl>;</decl_stmt>
<comment type="line">//extern gint non_innodb_table_counter;</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GMutex</name> <modifier>*</modifier></type><name>ready_table_dump_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>dump_triggers</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>order_by_primary_key</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>ignore_generated_fields</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>exec_per_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>exec_per_thread_extension</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>use_fifo</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>exec_per_thread_cmd</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>schema_checksums</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>routine_checksums</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>use_fifo</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>gboolean</name></type> <name>skip_definer</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GOptionEntry</name></type> <name><name>dump_into_file_entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"triggers"</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>dump_triggers</name></expr>, <expr><literal type="string">"Dump triggers. By default, it do not dump triggers"</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"no-check-generated-fields"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>ignore_generated_fields</name></expr>,
      <expr><literal type="string">"Queries related to generated fields are not going to be executed."</literal>
      <literal type="string">"It will lead to restoration issues if you have generated columns"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"order-by-primary"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>order_by_primary_key</name></expr>,
     <expr><literal type="string">"Sort the data by Primary Key or Unique key if no primary key exists"</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"exec-per-thread"</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>exec_per_thread</name></expr>,
     <expr><literal type="string">"Set the command that will receive by STDIN and write in the STDOUT into the output file"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"exec-per-thread-extension"</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>exec_per_thread_extension</name></expr>,
     <expr><literal type="string">"Set the extension for the STDOUT file when --exec-per-thread is used"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"skip-definer"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>skip_definer</name></expr>,
     <expr><literal type="string">"Removes DEFINER from the CREATE statement. By default, statements are not modified"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>load_dump_into_file_entries</name><parameter_list>(<parameter><decl><type><name>GOptionGroup</name> <modifier>*</modifier></type><name>main_group</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>dump_into_file_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_jobs</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>initialize_database</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ignore_generated_fields</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Queries related to generated fields are not going to be executed. It will lead to restoration issues if you have generated columns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>exec_per_thread_extension</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>exec_per_thread</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"--exec-per-thread needs to be set when --exec-per-thread-extension is used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>exec_per_thread</name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>use_fifo</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>exec_per_thread_cmd</name><operator>=</operator><call><name>g_strsplit</name><argument_list>(<argument><expr><name>exec_per_thread</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_checksum_into_file</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><function_decl><type><name>gchar</name> <modifier>*</modifier></type><name>fun</name><parameter_list>()</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>errn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>checksum</name><init>=<expr><call><name>fun</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>errn</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>success_on_1146</name> <operator>&amp;&amp;</operator> <name>errn</name> <operator>==</operator> <literal type="number">1146</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>checksum</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>checksum</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>outfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>outfile</name> <operator>=</operator> <call><name>g_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>outfile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error: DB: %s TABLE: %s Could not create output file %s (%d)"</literal></expr></argument>,
               <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_my_data_into_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>table_meta</name> <init>= <expr><call><name>g_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><name>table_meta</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>table_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_table_metadata_into_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>build_meta_filename</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>, <argument><expr><literal type="string">"metadata"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>table_meta</name> <init>= <expr><call><name>g_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>table_meta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't write table metadata file %s (%d)"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>table_meta</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>G_GUINT64_FORMAT</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>table_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>get_tablespace_query</name><parameter_list>()</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>( <expr><call><name>get_product</name><argument_list>()</argument_list></call> <operator>==</operator> <name>SERVER_TYPE_PERCONA</name> <operator>||</operator> <call><name>get_product</name><argument_list>()</argument_list></call> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>( <expr><call><name>get_major</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <call><name>get_secondary</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"select NAME, PATH, FS_BLOCK_SIZE from information_schema.INNODB_SYS_TABLESPACES join information_schema.INNODB_SYS_DATAFILES using (space) where SPACE_TYPE='General' and NAME != 'mysql';"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>( <expr><call><name>get_major</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"select NAME,PATH,FS_BLOCK_SIZE,ENCRYPTION from information_schema.INNODB_TABLESPACES join information_schema.INNODB_DATAFILES using (space) where SPACE_TYPE='General' and NAME != 'mysql';"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_tablespace_definition_into_file</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>outfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>outfile</name> <operator>=</operator> <call><name>m_open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>outfile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error: Could not create output file %s (%d)"</literal></expr></argument>,
               <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>query</name><operator>=</operator><call><name>get_tablespace_query</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Tablespace resquested, but not possible due to server version not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>mysql_use_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>success_on_1146</name> <operator>&amp;&amp;</operator> <call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1146</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Error dumping create tablespace: %s"</literal></expr></argument>,
                <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error dumping create tablespace: %s"</literal></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><name>statement_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLESPACE `%s` ADD DATAFILE '%s' FILE_BLOCK_SIZE = %s ENGINE=INNODB;\n"</literal></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write tablespace data for %s"</literal></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_schema_definition_into_file</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>checksum_filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>outfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>outfile</name> <operator>=</operator> <call><name>m_open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>outfile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error: DB: %s Could not create output file %s (%d)"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>,
               <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><name>statement_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW CREATE DATABASE IF NOT EXISTS `%s`"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>mysql_use_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>success_on_1146</name> <operator>&amp;&amp;</operator> <call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1146</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Error dumping create database (%s): %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>,
                <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error dumping create database (%s): %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* There should never be more than one row */</comment>
  <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write create database for %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


  <if_stmt><if>if <condition>(<expr><name>schema_checksums</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>write_checksum_into_file</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>checksum_filename</name></expr></argument>, <argument><expr><name>checksum_database_defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_table_definition_into_file</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
                      <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>checksum_filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>checksum_index_filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>outfile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>outfile</name> <operator>=</operator> <call><name>m_open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>outfile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error: DB: %s Could not create output file %s (%d)"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>,
               <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><name>statement_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>set_names_str</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,<argument><expr><literal type="string">"%s;\n"</literal></expr></argument>,<argument><expr><name>set_names_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"/*!40014 SET FOREIGN_KEY_CHECKS=0*/;\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_tz</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"/*!40103 SET TIME_ZONE='+00:00' */;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_TIDB</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_tz</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"/*!40103 SET TIME_ZONE='+00:00' */;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"SET FOREIGN_KEY_CHECKS=0;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write schema data for %s.%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW CREATE TABLE `%s`.`%s`"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>mysql_use_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>success_on_1146</name> <operator>&amp;&amp;</operator> <call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1146</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Error dumping schemas (%s.%s): %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>,
                <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error dumping schemas (%s.%s): %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* There should never be more than one row */</comment>
  <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write schema for %s.%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>checksum_filename</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>write_checksum_into_file</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>checksum_filename</name></expr></argument>, <argument><expr><name>checksum_table_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>checksum_index_filename</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>write_checksum_into_file</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>checksum_index_filename</name></expr></argument>, <argument><expr><name>checksum_table_indexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_triggers_definition_into_file</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>checksum_filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>outfile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>splited_st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>outfile</name> <operator>=</operator> <call><name>m_open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>outfile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error: DB: %s Could not create output file %s (%d)"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>,
               <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><name>statement_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// get triggers</comment>
  <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW TRIGGERS FROM `%s` LIKE '%s'"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>success_on_1146</name> <operator>&amp;&amp;</operator> <call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1146</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Error dumping triggers (%s.%s): %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>,
                <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error dumping triggers (%s.%s): %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>set_charset</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write triggers data for %s.%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW CREATE TRIGGER `%s`.`%s`"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result2</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>row2</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>row2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>splited_st</name> <operator>=</operator> <call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>statement</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>g_strjoinv</name><argument_list>(<argument><expr><literal type="string">"; \n"</literal></expr></argument>, <argument><expr><name>splited_st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>restore_charset</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write triggers data for %s.%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>splited_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>result2</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>checksum_filename</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>write_checksum_into_file</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>checksum_filename</name></expr></argument>, <argument><expr><name>checksum_trigger_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_view_definition_into_file</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename2</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>checksum_filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>outfile</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outfile2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><name>statement_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mysql_select_db</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>outfile</name> <operator>=</operator> <call><name>m_open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>outfile2</name> <operator>=</operator> <call><name>m_open</name><argument_list>(<argument><expr><name>filename2</name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>outfile</name> <operator>||</operator> <operator>!</operator><name>outfile2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error: DB: %s Could not create output file (%d)"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>,
               <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name> <operator>&amp;&amp;</operator> <name>set_names_str</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,<argument><expr><literal type="string">"%s;\n"</literal></expr></argument>,<argument><expr><name>set_names_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write schema data for %s.%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"DROP TABLE IF EXISTS `%s`;\n"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"DROP VIEW IF EXISTS `%s`;\n"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile2</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write schema data for %s.%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// we create tables as workaround</comment>
  <comment type="line">// for view dependencies</comment>
  <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW FIELDS FROM `%s`.`%s`"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>mysql_use_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>success_on_1146</name> <operator>&amp;&amp;</operator> <call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1146</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Error dumping schemas (%s.%s): %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>,
                <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error dumping schemas (%s.%s): %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS `%s`(\n"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"`%s` int"</literal></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"`%s` int"</literal></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"\n);\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write view schema for %s.%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// real view</comment>
  <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW CREATE VIEW `%s`.`%s`"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>mysql_use_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>success_on_1146</name> <operator>&amp;&amp;</operator> <call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1146</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Error dumping schemas (%s.%s): %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>,
                <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error dumping schemas (%s.%s): %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* There should never be more than one row */</comment>
  <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>set_charset</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>( <expr><name>skip_definer</name> <operator>&amp;&amp;</operator> <call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"CREATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>remove_definer_from_gchar</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>restore_charset</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile2</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write schema for %s.%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name>outfile2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>checksum_filename</name></expr>)</condition><block type="pseudo"><block_content>
    <comment type="line">// build_meta_filename(database,table,"schema-view-checksum"),</comment>
    <expr_stmt><expr><call><name>write_checksum_into_file</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>checksum_filename</name></expr></argument>, <argument><expr><name>checksum_view_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return;</return>
</block_content>}</block></function>

<comment type="line">// Routines, Functions and Events</comment>
<comment type="line">// TODO: We need to split it in 3 functions </comment>
<function><type><name>void</name></type> <name>write_routines_definition_into_file</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>checksum_filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>outfile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>splited_st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>outfile</name> <operator>=</operator> <call><name>m_open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>outfile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error: DB: %s Could not create output file %s (%d)"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
               <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><name>statement_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>dump_routines</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// get functions</comment>
    <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW FUNCTION STATUS WHERE CAST(Db AS BINARY) = '%s'"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>escaped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>success_on_1146</name> <operator>&amp;&amp;</operator> <call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1146</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Error dumping functions from %s: %s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                  <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error dumping functions from %s: %s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                   <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>set_charset</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"DROP FUNCTION IF EXISTS `%s`;\n"</literal></expr></argument>,
                             <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write stored procedure data for %s.%s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                   <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>query</name> <operator>=</operator>
          <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW CREATE FUNCTION `%s`.`%s`"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>result2</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>row2</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>row2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>( <expr><name>skip_definer</name> <operator>&amp;&amp;</operator> <call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>statement</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"CREATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>remove_definer</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>splited_st</name> <operator>=</operator> <call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>statement</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>g_strjoinv</name><argument_list>(<argument><expr><literal type="string">"; \n"</literal></expr></argument>, <argument><expr><name>splited_st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>restore_charset</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write function data for %s.%s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// get sp</comment>
    <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW PROCEDURE STATUS WHERE CAST(Db AS BINARY) = '%s'"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>escaped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>success_on_1146</name> <operator>&amp;&amp;</operator> <call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1146</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Error dumping stored procedures from %s: %s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                  <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error dumping stored procedures from %s: %s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                   <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>set_charset</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"DROP PROCEDURE IF EXISTS `%s`;\n"</literal></expr></argument>,
                             <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write stored procedure data for %s.%s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                   <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>query</name> <operator>=</operator>
          <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW CREATE PROCEDURE `%s`.`%s`"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>result2</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>row2</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>row2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>( <expr><name>skip_definer</name> <operator>&amp;&amp;</operator> <call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>statement</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"CREATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>remove_definer</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>splited_st</name> <operator>=</operator> <call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>statement</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>g_strjoinv</name><argument_list>(<argument><expr><literal type="string">"; \n"</literal></expr></argument>, <argument><expr><name>splited_st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>restore_charset</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write stored procedure data for %s.%s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                   <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>checksum_filename</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>write_checksum_into_file</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>checksum_filename</name></expr></argument>, <argument><expr><name>checksum_process_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// get events</comment>
  <if_stmt><if>if <condition>(<expr><name>dump_events</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW EVENTS FROM `%s`"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>success_on_1146</name> <operator>&amp;&amp;</operator> <call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1146</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Error dumping events from %s: %s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                  <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error dumping events from %s: %s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                   <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>set_charset</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"DROP EVENT IF EXISTS `%s`;\n"</literal></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write stored procedure data for %s.%s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                   <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW CREATE EVENT `%s`.`%s`"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>result2</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// DROP EVENT IF EXISTS event_name</comment>
      <expr_stmt><expr><name>row2</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>row2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>( <expr><name>skip_definer</name> <operator>&amp;&amp;</operator> <call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>statement</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"CREATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>remove_definer</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>splited_st</name> <operator>=</operator> <call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>statement</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>g_strjoinv</name><argument_list>(<argument><expr><literal type="string">"; \n"</literal></expr></argument>, <argument><expr><name>splited_st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>restore_charset</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name>outfile</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write event data for %s.%s"</literal></expr></argument>, <argument><expr><name><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>splited_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>result2</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_schema_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>schema_job</name></name> <modifier>*</modifier></type><name>sj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>table</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>filename</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>sj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_view_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>view_job</name></name> <modifier>*</modifier></type><name>vj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>vj</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>vj</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>vj</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>vj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>vj</name><operator>-&gt;</operator><name>filename2</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>vj</name><operator>-&gt;</operator><name>filename2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<comment type="line">//  g_free(vj);</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_schema_post_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>schema_post_job</name></name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<comment type="line">//  g_free(sp);</comment>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>free_create_database_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>create_database_job</name></name> <modifier>*</modifier></type> <name>cdj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>cdj</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>cdj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cdj</name><operator>-&gt;</operator><name>database</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>cdj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>cdj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_create_tablespace_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>create_tablespace_job</name></name> <modifier>*</modifier></type> <name>ctj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctj</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>ctj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<comment type="line">//  g_free(cdj);</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_table_checksum_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>table_checksum_job</name></name><modifier>*</modifier></type><name>tcj</name></decl></parameter>)</parameter_list><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>tcj</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>tcj</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>tcj</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>tcj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>tcj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_JOB_CREATE_DATABASE</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>create_database_job</name></name> <modifier>*</modifier></type> <name>cdj</name> <init>= <expr><operator>(</operator>struct <name>create_database_job</name> <operator>*</operator><operator>)</operator><name><name>job</name><operator>-&gt;</operator><name>job_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d dumping schema create for `%s`"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,
            <argument><expr><name><name>cdj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>write_schema_definition_into_file</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>cdj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>cdj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>cdj</name><operator>-&gt;</operator><name>checksum_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free_create_database_job</name><argument_list>(<argument><expr><name>cdj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_JOB_CREATE_TABLESPACE</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>create_tablespace_job</name></name> <modifier>*</modifier></type> <name>ctj</name> <init>= <expr><operator>(</operator>struct <name>create_tablespace_job</name> <operator>*</operator><operator>)</operator><name><name>job</name><operator>-&gt;</operator><name>job_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d dumping create tablespace if any"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>write_tablespace_definition_into_file</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>ctj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free_create_tablespace_job</name><argument_list>(<argument><expr><name>ctj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_JOB_SCHEMA_POST</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>schema_post_job</name></name> <modifier>*</modifier></type> <name>sp</name> <init>= <expr><operator>(</operator>struct <name>schema_post_job</name> <operator>*</operator><operator>)</operator><name><name>job</name><operator>-&gt;</operator><name>job_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d dumping SP and VIEWs for `%s`"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,
            <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>write_routines_definition_into_file</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>checksum_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free_schema_post_job</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_JOB_VIEW</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>view_job</name></name> <modifier>*</modifier></type> <name>vj</name> <init>= <expr><operator>(</operator>struct <name>view_job</name> <operator>*</operator><operator>)</operator><name><name>job</name><operator>-&gt;</operator><name>job_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d dumping view for `%s`.`%s`"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,
            <argument><expr><name><name>vj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>vj</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>write_view_definition_into_file</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>vj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>vj</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,
                 <argument><expr><name><name>vj</name><operator>-&gt;</operator><name>filename2</name></name></expr></argument>, <argument><expr><name><name>vj</name><operator>-&gt;</operator><name>checksum_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  free_view_job(vj);</comment>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_JOB_SCHEMA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>schema_job</name></name> <modifier>*</modifier></type><name>sj</name> <init>= <expr><operator>(</operator>struct <name>schema_job</name> <operator>*</operator><operator>)</operator><name><name>job</name><operator>-&gt;</operator><name>job_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d dumping schema for `%s`.`%s`"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,
            <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>write_table_definition_into_file</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>checksum_filename</name></name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>checksum_index_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  free_schema_job(sj);</comment>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  if (g_atomic_int_dec_and_test(&amp;table_counter)) {</comment>
<comment type="line">//    g_message("Unlocing ready_table_dump_mutex");</comment>
<comment type="line">//    g_mutex_unlock(ready_table_dump_mutex);</comment>
<comment type="line">//  }</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_JOB_TRIGGERS</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>schema_job</name></name> <modifier>*</modifier></type> <name>sj</name> <init>= <expr><operator>(</operator>struct <name>schema_job</name> <operator>*</operator><operator>)</operator><name><name>job</name><operator>-&gt;</operator><name>job_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d dumping triggers for `%s`.`%s`"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,
            <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>write_triggers_definition_into_file</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>checksum_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free_schema_job</name><argument_list>(<argument><expr><name>sj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>do_JOB_CHECKSUM</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>table_checksum_job</name></name> <modifier>*</modifier></type><name>tcj</name> <init>= <expr><operator>(</operator>struct <name>table_checksum_job</name> <operator>*</operator><operator>)</operator><name><name>job</name><operator>-&gt;</operator><name>job_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d dumping checksum for `%s`.`%s`"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,
            <argument><expr><name><name>tcj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>tcj</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>use_savepoints</name> <operator>&amp;&amp;</operator> <call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"SAVEPOINT mydumper"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Savepoint failed: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>write_checksum_into_file</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>tcj</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>tcj</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>tcj</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>checksum_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>use_savepoints</name> <operator>&amp;&amp;</operator>
      <call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"ROLLBACK TO SAVEPOINT mydumper"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Rollback to savepoint failed: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free_table_checksum_job</name><argument_list>(<argument><expr><name>tcj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>create_job_to_dump_metadata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>mdfile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>mdfile</name></expr>;</expr_stmt>
<comment type="line">//  j-&gt;conf = conf;</comment>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_WRITE_MASTER_STATUS</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_job_to_dump_tablespaces</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>create_tablespace_job</name></name> <modifier>*</modifier></type><name>ctj</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>create_tablespace_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ctj</name></expr>;</expr_stmt>
<comment type="line">//  j-&gt;conf = conf;</comment>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_CREATE_TABLESPACE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctj</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>build_tablespace_filename</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_job_to_dump_schema</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>create_database_job</name></name> <modifier>*</modifier></type><name>cdj</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>create_database_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cdj</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>d</name><init>=<expr><call><name>get_ref_table</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cdj</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  j-&gt;conf = conf;</comment>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_CREATE_DATABASE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cdj</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>build_schema_filename</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"schema-create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>schema_checksums</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>cdj</name><operator>-&gt;</operator><name>checksum_filename</name></name> <operator>=</operator> <call><name>build_meta_filename</name><argument_list>(<argument><expr><name>database</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"schema-create-checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_job_to_dump_triggers</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>dump_triggers</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>query</name> <operator>=</operator>
        <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW TRIGGERS FROM `%s` LIKE '%s'"</literal></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>escaped_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error Checking triggers for %s.%s. Err: %s St: %s"</literal></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>mysql_num_rows</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>schema_job</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>schema_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>job_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>st</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        t-&gt;conf = conf;</comment>
        <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_TRIGGERS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>build_schema_table_filename</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>, <argument><expr><literal type="string">"schema-triggers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>( <expr><name>routine_checksums</name></expr> )</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>checksum_filename</name></name><operator>=</operator><call><name>build_meta_filename</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>,<argument><expr><literal type="string">"schema-triggers-checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>post_data_queue</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_job_to_dump_table_schema</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>schema_job</name></name> <modifier>*</modifier></type><name>sj</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>schema_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sj</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  j-&gt;conf = conf;</comment>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_SCHEMA</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>build_schema_table_filename</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>, <argument><expr><literal type="string">"schema"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>( <expr><name>schema_checksums</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>checksum_filename</name></name><operator>=</operator><call><name>build_meta_filename</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>,<argument><expr><literal type="string">"schema-checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>checksum_index_filename</name></name> <operator>=</operator> <call><name>build_meta_filename</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>,<argument><expr><literal type="string">"schema-indexes-checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_job_to_dump_view</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>view_job</name></name> <modifier>*</modifier></type><name>vj</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>view_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>vj</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>vj</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>vj</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  j-&gt;conf = conf;</comment>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_VIEW</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>vj</name><operator>-&gt;</operator><name>filename</name></name>  <operator>=</operator> <call><name>build_schema_table_filename</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>, <argument><expr><literal type="string">"schema"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>vj</name><operator>-&gt;</operator><name>filename2</name></name> <operator>=</operator> <call><name>build_schema_table_filename</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>, <argument><expr><literal type="string">"schema-view"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>( <expr><name>schema_checksums</name></expr> )</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>vj</name><operator>-&gt;</operator><name>checksum_filename</name></name> <operator>=</operator> <call><name>build_meta_filename</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>, <argument><expr><literal type="string">"schema-view-checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>post_data_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_job_to_dump_post</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>schema_post_job</name></name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>schema_post_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <name>database</name></expr>;</expr_stmt>
<comment type="line">//  j-&gt;conf = conf;</comment>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_SCHEMA_POST</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>build_schema_filename</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,<argument><expr><literal type="string">"schema-post"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>( <expr><name>routine_checksums</name></expr> )</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>checksum_filename</name></name> <operator>=</operator> <call><name>build_meta_filename</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"schema-post-checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>post_data_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_job_to_dump_checksum</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>table_checksum_job</name></name> <modifier>*</modifier></type><name>tcj</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>table_checksum_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>tcj</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tcj</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tcj</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  j-&gt;conf = conf;</comment>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_CHECKSUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tcj</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>build_meta_filename</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>,<argument><expr><literal type="string">"checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>post_data_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>execute_file_per_thread</name><parameter_list>( <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>sql_fn</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>sql_fn3</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>childpid</name><init>=<expr><call><name>fork</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><operator>!</operator><name>childpid</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>sql_file2</name> <init>= <expr><call><name>m_open</name><argument_list>(<argument><expr><name>sql_fn</name></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>sql_file3</name> <init>= <expr><call><name>m_open</name><argument_list>(<argument><expr><name>sql_fn3</name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>sql_file2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>sql_file3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execv</name><argument_list>(<argument><expr><name><name>exec_per_thread_cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>exec_per_thread_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name>sql_file2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name>sql_file3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_fn</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type> <name>sql_filename</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier><modifier>*</modifier></type> <name>sql_file</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>sub_part</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>extension</name></decl></parameter>, <parameter><function_decl><type><name>gchar</name> <modifier>*</modifier></type> <name>f</name><parameter_list>()</parameter_list></function_decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>stdout_fn</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="block">/*  if (*sql_filename != NULL){
    remove(*sql_filename);
    g_free(*sql_filename);
  }
*/</comment>
  <if_stmt><if>if <condition>(<expr><name>use_fifo</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>sql_filename</name> <operator>=</operator> <call><name>build_fifo_filename</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>sub_part</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mkfifo</name><argument_list>(<argument><expr><operator>*</operator><name>sql_filename</name></expr></argument>,<argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stdout_fn</name> <operator>=</operator> <call><name>build_stdout_filename</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>sub_part</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr><name>exec_per_thread_extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_file_per_thread</name><argument_list>(<argument><expr><operator>*</operator><name>sql_filename</name></expr></argument>,<argument><expr><name>stdout_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>sql_filename</name> <operator>=</operator> <call><name>f</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>sub_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>sql_file</name> <operator>=</operator> <call><name>m_open</name><argument_list>(<argument><expr><operator>*</operator><name>sql_filename</name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_sql_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type> <name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>initialize_fn</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name><operator>)</operator></expr></argument>,<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>nchunk</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sub_part</name></name></expr></argument>,<argument><expr><literal type="string">"sql"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>build_data_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_load_data_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type> <name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>initialize_fn</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>dat_filename</name></name><operator>)</operator></expr></argument>,<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>dat_file</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>nchunk</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sub_part</name></name></expr></argument>,<argument><expr><literal type="string">"dat"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>build_load_data_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>update_files_on_table_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>load_data</name></expr>)</condition><block>{<block_content>
       <expr_stmt><expr><call><name>initialize_load_data_fn</name><argument_list>(<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name> <operator>=</operator> <call><name>build_data_filename</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>table_filename</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>nchunk</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sub_part</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name> <operator>=</operator> <call><name>m_open</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if><else>else<block>{<block_content>
       <expr_stmt><expr><call><name>initialize_sql_fn</name><argument_list>(<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
<comment type="line">//     write_load_data_statement(tj, fields, num_fields);</comment>
  </block_content>}</block></if></if_stmt>

</block_content>}</block></function>


<function><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type> <name>new_table_job</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>partition</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>nchunk</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>order_by</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>chunk_step</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>update_where</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>table_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">// begin Refactoring: We should review this, as dbt-&gt;database should not be free, so it might be no need to g_strdup.</comment>
  <comment type="line">// from the ref table?? TODO</comment>
<comment type="line">//  tj-&gt;database=dbt-&gt;database-&gt;name;</comment>
<comment type="line">//  tj-&gt;table=g_strdup(dbt-&gt;table);</comment>
<comment type="line">// end</comment>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>partition</name></name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name>partition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name></name> <operator>=</operator> <name>chunk_step</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>where</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>order_by</name></name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name>order_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>nchunk</name></name><operator>=</operator><name>nchunk</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>sub_part</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name></name><operator>=</operator><name>dbt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>st_in_file</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>char_chunk_part</name></name><operator>=</operator><name>char_chunk</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>update_where</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>update_where_on_table_job</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>update_files_on_table_job</name><argument_list>(<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type> <name>create_job_to_dump_chunk_without_enqueuing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>partition</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>nchunk</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>order_by</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>chunk_step</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>update_where</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name> <init>= <expr><call><name>new_table_job</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>partition</name></expr></argument>, <argument><expr><name>nchunk</name></expr></argument>, <argument><expr><name>order_by</name></expr></argument>, <argument><expr><name>chunk_step</name></expr></argument>, <argument><expr><name>update_where</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name><operator>=</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>tj</name></expr>;</expr_stmt>
<comment type="line">//  j-&gt;conf=conf;</comment>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name><operator>=</operator> <ternary><condition><expr><name><name>dbt</name><operator>-&gt;</operator><name>is_innodb</name></name></expr> ?</condition><then> <expr><name>JOB_DUMP</name></expr> </then><else>: <expr><name>JOB_DUMP_NON_INNODB</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>tj</name></expr>;</expr_stmt>
  <return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_job_to_dump_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>partition</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>nchunk</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>order_by</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>chunk_step</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> <name>f</name><parameter_list>()</parameter_list></function_decl></parameter>, <parameter><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>update_where</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name> <init>= <expr><call><name>new_table_job</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>partition</name></expr></argument>, <argument><expr><name>nchunk</name></expr></argument>, <argument><expr><name>order_by</name></expr></argument>, <argument><expr><name>chunk_step</name></expr></argument>, <argument><expr><name>update_where</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name><operator>=</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>tj</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name><operator>=</operator> <ternary><condition><expr><name><name>dbt</name><operator>-&gt;</operator><name>is_innodb</name></name></expr> ?</condition><then> <expr><name>JOB_DUMP</name></expr> </then><else>: <expr><name>JOB_DUMP_NON_INNODB</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><name>queue</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_job_to_determine_chunk_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> <name>f</name><parameter_list>()</parameter_list></function_decl></parameter>, <parameter><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_DETERMINE_CHUNK_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name><operator>=</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>dbt</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><name>queue</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_job_to_dump_all_databases</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>g_atomic_int_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>database_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<comment type="line">//  j-&gt;conf = conf;</comment>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_DUMP_ALL_DATABASES</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>initial_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_job_to_dump_table_list</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>table_list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>g_atomic_int_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>database_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dump_table_list_job</name></name> <modifier>*</modifier></type><name>dtlj</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>dump_table_list_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>dtlj</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dtlj</name><operator>-&gt;</operator><name>table_list</name></name> <operator>=</operator> <name>table_list</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_DUMP_TABLE_LIST</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>initial_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_job_to_dump_database</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>database</name></name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>g_atomic_int_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>database_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dump_database_job</name></name> <modifier>*</modifier></type><name>ddj</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>dump_database_job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>job_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ddj</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ddj</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <name>database</name></expr>;</expr_stmt>
<comment type="line">//  j-&gt;conf = conf;</comment>
  <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_DUMP_DATABASE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>initial_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type><name>get_primary_key_string</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>order_by_primary_key</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>field_list</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>=
          <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SELECT k.COLUMN_NAME, ORDINAL_POSITION "</literal>
                          <literal type="string">"FROM information_schema.table_constraints t "</literal>
                          <literal type="string">"LEFT JOIN information_schema.key_column_usage k "</literal>
                          <literal type="string">"USING(constraint_name,table_schema,table_name) "</literal>
                          <literal type="string">"WHERE t.constraint_type IN ('PRIMARY KEY', 'UNIQUE') "</literal>
                          <literal type="string">"AND t.table_schema='%s' "</literal>
                          <literal type="string">"AND t.table_name='%s' "</literal>
                          <literal type="string">"ORDER BY t.constraint_type, ORDINAL_POSITION; "</literal></expr></argument>,
                          <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>field_list</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>tb</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"`%s`"</literal></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>field_list</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Return NULL if we never found a PRIMARY or UNIQUE key</comment>
  <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>field_list</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>field_list</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
