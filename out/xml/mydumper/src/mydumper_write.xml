<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/mydumper_write.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    Domas Mituzas, Facebook ( domas at fb dot com )
                    Mark Leith, Oracle Corporation (mark dot leith at oracle dot com)
                    Andrew Hutchings, MariaDB Foundation (andrew at mariadb dot org)
                    Max Bubenick, Percona RDBA (max dot bubenick at percona dot com)
                    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gio/gio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_start_dump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_detect.h"</cpp:file></cpp:include>
<comment type="line">//#include "common.h"</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_jobs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_working_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_write.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<comment type="line">//#include "common_options.h"</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_masquerade.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZWRAP_USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../zstd/zstd_zlibwrapper.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>insert_statement</name><init>=<expr><name>INSERT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>function_pointer</name></name></type> <name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GAsyncQueue</name> <modifier>*</modifier></type><name>stream_queue</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> (<modifier>*</modifier><name>m_write</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> (<modifier>*</modifier><name>m_close</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>detected_server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>skip_tz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>set_names_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>statement_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>success_on_1146</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>where_option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>load_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>rows_per_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>compress_output</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>m_open</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>guint</name></type> <name>chunk_filesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>load_data</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>csv</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>fields_enclosed_by</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>fields_escaped_by</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>fields_terminated_by</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>lines_starting_by</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>lines_terminated_by</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>statement_terminated_by</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>fields_enclosed_by_ld</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>lines_starting_by_ld</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>lines_terminated_by_ld</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>statement_terminated_by_ld</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>fields_terminated_by_ld</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>insert_ignore</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>replace</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GOptionEntry</name></type> <name><name>write_entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"chunk-filesize"</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>chunk_filesize</name></expr>,
     <expr><literal type="string">"Split tables into chunks of this output file size. This value is in MB"</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"load-data"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>load_data</name></expr>,
     <expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"csv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>csv</name></expr>,
      <expr><literal type="string">"Automatically enables --load-data and set variables to export in CSV format."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"fields-terminated-by"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>fields_terminated_by_ld</name></expr>,<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"fields-enclosed-by"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>fields_enclosed_by_ld</name></expr>,<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"fields-escaped-by"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>fields_escaped_by</name></expr>,
      <expr><literal type="string">"Single character that is going to be used to escape characters in the"</literal>
      <literal type="string">"LOAD DATA stament, default: '\\' "</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"lines-starting-by"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>lines_starting_by_ld</name></expr>,
      <expr><literal type="string">"Adds the string at the begining of each row. When --load-data is used"</literal>
      <literal type="string">"it is added to the LOAD DATA statement. Its affects INSERT INTO statements"</literal>
      <literal type="string">"also when it is used."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"lines-terminated-by"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>lines_terminated_by_ld</name></expr>,
      <expr><literal type="string">"Adds the string at the end of each row. When --load-data is used it is"</literal>
       <literal type="string">"added to the LOAD DATA statement. Its affects INSERT INTO statements"</literal>
       <literal type="string">"also when it is used."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"statement-terminated-by"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>statement_terminated_by_ld</name></expr>,
      <expr><literal type="string">"This might never be used, unless you know what are you doing"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"insert-ignore"</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>insert_ignore</name></expr>,
     <expr><literal type="string">"Dump rows with INSERT IGNORE"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"replace"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> , <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>replace</name></expr>,
     <expr><literal type="string">"Dump rows with REPLACE"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>load_write_entries</name><parameter_list>(<parameter><decl><type><name>GOptionGroup</name> <modifier>*</modifier></type><name>main_group</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>write_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_write</name><parameter_list>()</parameter_list><block>{<block_content>

  <comment type="line">// rows chunks have precedence over chunk_filesize</comment>
  <if_stmt><if>if <condition>(<expr><name>rows_per_file</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>chunk_filesize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<comment type="line">//    chunk_filesize = 0;</comment>
<comment type="line">//    g_warning("--chunk-filesize disabled by --rows option");</comment>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"We are going to chunk by row and by filesize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>fields_enclosed_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>csv</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>load_data</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fields_terminated_by_ld</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fields_terminated_by_ld</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fields_enclosed_by_ld</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fields_enclosed_by_ld</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fields_escaped_by</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fields_escaped_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lines_terminated_by_ld</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lines_terminated_by_ld</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>load_data</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fields_enclosed_by_ld</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>fields_enclosed_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>fields_enclosed_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>fields_enclosed_by_ld</name><operator>=</operator><name>fields_enclosed_by</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fields_enclosed_by_ld</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"--fields-enclosed-by must be a single character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>fields_enclosed_by</name><operator>=</operator><name>fields_enclosed_by_ld</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>fields_escaped_by</name></expr>)</condition><block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fields_escaped_by</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"--fields-escaped-by must be a single character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fields_escaped_by</name></expr></argument>,<argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>fields_escaped_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>fields_escaped_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>fields_terminated_by_ld</name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>load_data</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>fields_terminated_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>fields_terminated_by_ld</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>fields_terminated_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else if <condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name>fields_terminated_by_ld</name></expr></argument>, <argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>fields_terminated_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>fields_terminated_by_ld</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>fields_terminated_by</name><operator>=</operator><call><name>replace_escaped_strings</name><argument_list>(<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>fields_terminated_by_ld</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lines_starting_by_ld</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>load_data</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>lines_starting_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>lines_starting_by_ld</name><operator>=</operator><name>lines_starting_by</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>lines_starting_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if><else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>lines_starting_by</name><operator>=</operator><call><name>replace_escaped_strings</name><argument_list>(<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>lines_starting_by_ld</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lines_terminated_by_ld</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>load_data</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>lines_terminated_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>lines_terminated_by_ld</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>lines_terminated_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if><else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>lines_terminated_by</name><operator>=</operator><call><name>replace_escaped_strings</name><argument_list>(<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>lines_terminated_by_ld</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>statement_terminated_by_ld</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>load_data</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>statement_terminated_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>statement_terminated_by_ld</name><operator>=</operator><name>statement_terminated_by</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>statement_terminated_by</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if><else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>statement_terminated_by</name><operator>=</operator><call><name>replace_escaped_strings</name><argument_list>(<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>statement_terminated_by_ld</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>( <expr><name>insert_ignore</name> <operator>&amp;&amp;</operator> <name>replace</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"You can't use --insert-ignore and --replace at the same time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>insert_ignore</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>insert_statement</name><operator>=</operator><name>INSERT_IGNORE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>replace</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>insert_statement</name><operator>=</operator><name>REPLACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>append_columns</name> <parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name></decl></parameter>, <parameter><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>num_fields</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<comment type="line">//    g_string_append_printf(statement, "`%s`", fields[i].name);</comment>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,<argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,<argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>build_insert_statement</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>, <parameter><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>num_fields</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>insert_statement</name></name><operator>=</operator><call><name>g_string_new</name><argument_list>(<argument><expr><name>insert_statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>insert_statement</name></name></expr></argument>, <argument><expr><literal type="string">" INTO `"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>insert_statement</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>complete_insert</name></name></expr>)</condition> <block>{<block_content>
<comment type="line">//    g_string_printf(statement, "%s INTO `%s` (", insert_statement, table);</comment>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>insert_statement</name></name></expr></argument>, <argument><expr><literal type="string">"` ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_columns</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>insert_statement</name></name></expr></argument>,<argument><expr><name>fields</name></expr></argument>,<argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>insert_statement</name></name></expr></argument>, <argument><expr><literal type="string">") VALUES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
<comment type="line">//    g_string_printf(statement, "%s INTO `%s` VALUES", insert_statement, table);</comment>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>insert_statement</name></name></expr></argument>, <argument><expr><literal type="string">"` VALUES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>real_write_data</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>filesize</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>second_write_zero</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>written</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>r</name><operator>=</operator><call><name>m_write</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't write data to a file: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>( <expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>second_write_zero</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't write data to a file: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>second_write_zero</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>second_write_zero</name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>written</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>filesize</name><operator>+=</operator><name>written</name></expr>;</expr_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>gboolean</name></type> <name>write_data</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>float</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>real_write_data</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>initialize_load_data_statement</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>character_set</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>basename</name></decl></parameter>, <parameter><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type> <name>fields</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>num_fields</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"LOAD DATA LOCAL INFILE '%s' REPLACE INTO TABLE `%s` "</literal></expr></argument>, <argument><expr><name>basename</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>character_set</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"CHARACTER SET %s "</literal></expr></argument>,<argument><expr><name>character_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>fields_terminated_by_ld</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"FIELDS TERMINATED BY '%s' "</literal></expr></argument>,<argument><expr><name>fields_terminated_by_ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>fields_enclosed_by_ld</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"ENCLOSED BY '%s' "</literal></expr></argument>,<argument><expr><name>fields_enclosed_by_ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>fields_escaped_by</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"ESCAPED BY '%s' "</literal></expr></argument>,<argument><expr><name>fields_escaped_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"LINES "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lines_starting_by_ld</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"STARTING BY '%s' "</literal></expr></argument>,<argument><expr><name>lines_starting_by_ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"TERMINATED BY '%s' ("</literal></expr></argument>, <argument><expr><name>lines_terminated_by_ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>append_columns</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,<argument><expr><name>fields</name></expr></argument>,<argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,<argument><expr><literal type="string">");\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_sql_statement</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>set_names_str</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,<argument><expr><literal type="string">"%s;\n"</literal></expr></argument>,<argument><expr><name>set_names_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"/*!40014 SET FOREIGN_KEY_CHECKS=0*/;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_tz</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"/*!40103 SET TIME_ZONE='+00:00' */;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_TIDB</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_tz</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"/*!40103 SET TIME_ZONE='+00:00' */;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="string">"SET FOREIGN_KEY_CHECKS=0;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>write_statement</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>load_data_file</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>filessize</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>real_write_data</name><argument_list>(<argument><expr><name>load_data_file</name></expr></argument>, <argument><expr><name>filessize</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write out data for %s.%s"</literal></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>write_load_data_statement</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type> <name>tj</name></decl></parameter>, <parameter><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>num_fields</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><name>statement_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>basename</name><init>=<expr><call><name>g_path_get_basename</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initialize_sql_statement</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initialize_load_data_statement</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="string">"BINARY"</literal></expr></argument>, <argument><expr><name>basename</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_data</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write out data for %s.%s"</literal></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>message_dumping_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Thread %d dumping data for `%s`.`%s` %s %s %s %s %s %s %s %s %s into %s| Remaining jobs: %d"</literal></expr></argument>,
                    <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,
                    <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>partition</name></name></expr>?</condition><then><expr><name><name>tj</name><operator>-&gt;</operator><name>partition</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                     <argument><expr><ternary><condition><expr><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>where</name></name> <operator>||</operator> <name>where_option</name>   <operator>||</operator> <name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>where</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"WHERE"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> ,      <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>where</name></name></expr> ?</condition><then>      <expr><name><name>tj</name><operator>-&gt;</operator><name>where</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                     <argument><expr><ternary><condition><expr><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>where</name></name> <operator>&amp;&amp;</operator> <name>where_option</name> <operator>)</operator></expr>                    ?</condition><then> <expr><literal type="string">"AND"</literal></expr>   </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> ,   <argument><expr><ternary><condition><expr><name>where_option</name></expr> ?</condition><then>   <expr><name>where_option</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>where</name></name> <operator>||</operator> <name>where_option</name> <operator>)</operator> <operator>&amp;&amp;</operator> <name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>where</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"AND"</literal></expr>   </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> , <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>where</name></name></expr> ?</condition><then> <expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>where</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>order_by</name></name></expr> ?</condition><then> <expr><literal type="string">"ORDER BY"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>order_by</name></name></expr> ?</condition><then> <expr><name><name>tj</name><operator>-&gt;</operator><name>order_by</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name></expr></argument>,
                    <argument><expr><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>innodb_queue</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>non_innodb_queue</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>schema_queue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_load_data_column_into_string</name><parameter_list>( <parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>MYSQL_FIELD</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>gulong</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>escaped</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement_row</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>function_pointer</name></name> <modifier>*</modifier></type><name>fun_ptr_i</name></decl></parameter>)</parameter_list><block>{<block_content>
<comment type="line">//  if (load_data){</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>column</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><literal type="string">"\\N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>field</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>MYSQL_TYPE_LONG</name> <operator>&amp;&amp;</operator> <name><name>field</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>MYSQL_TYPE_LONGLONG</name>  <operator>&amp;&amp;</operator> <name><name>field</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>MYSQL_TYPE_INT24</name>  <operator>&amp;&amp;</operator> <name><name>field</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>MYSQL_TYPE_SHORT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>,<argument><expr><name>fields_enclosed_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>escaped</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name><name>fun_ptr_i</name><operator>-&gt;</operator><name>function</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>,<argument><expr><name><name>fun_ptr_i</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>m_replace_char_with_char</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>,<argument><expr><operator>*</operator><name>fields_escaped_by</name></expr></argument>,<argument><expr><name><name>escaped</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><name><name>escaped</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>m_escape_char_with_char</name><argument_list>(<argument><expr><operator>*</operator><name>fields_terminated_by</name></expr></argument>, <argument><expr><operator>*</operator><name>fields_escaped_by</name></expr></argument>, <argument><expr><name><name>escaped</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><name><name>escaped</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>,<argument><expr><name><name>escaped</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>,<argument><expr><name>fields_enclosed_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><call><name><name>fun_ptr_i</name><operator>-&gt;</operator><name>function</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>,<argument><expr><name><name>fun_ptr_i</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_sql_column_into_string</name><parameter_list>( <parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>MYSQL_FIELD</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>gulong</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>escaped</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement_row</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>function_pointer</name></name> <modifier>*</modifier></type><name>fun_ptr_i</name></decl></parameter>)</parameter_list><block>{<block_content>
    <comment type="block">/* Don't escape safe formats, saves some time */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>column</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>field</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>NUM_FLAG</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><call><name><name>fun_ptr_i</name><operator>-&gt;</operator><name>function</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>,<argument><expr><name><name>fun_ptr_i</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>,<argument><expr><operator>*</operator><name>fields_enclosed_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>,<argument><expr><operator>*</operator><name>fields_enclosed_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>field</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MYSQL_TYPE_BLOB</name></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>,<argument><expr><literal type="string">"0x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mysql_hex_string</name><argument_list>(<argument><expr><name><name>escaped</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><call><name><name>fun_ptr_i</name><operator>-&gt;</operator><name>function</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>,<argument><expr><name><name>fun_ptr_i</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>,<argument><expr><name><name>escaped</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="block">/* We reuse buffers for string escaping, growing is expensive just at
 *        * the beginning */</comment>
      <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>escaped</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name><name>fun_ptr_i</name><operator>-&gt;</operator><name>function</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>,<argument><expr><name><name>fun_ptr_i</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MYSQL_TYPE_JSON</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><literal type="string">"CONVERT("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><operator>*</operator><name>fields_enclosed_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><name><name>escaped</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><operator>*</operator><name>fields_enclosed_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MYSQL_TYPE_JSON</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><literal type="string">" USING UTF8MB4)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_row_into_string</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>, <parameter><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>gulong</name> <modifier>*</modifier></type><name>lengths</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>num_fields</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>escaped</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement_row</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> <name>write_column_into_string</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>MYSQL_FIELD</name></type></decl></parameter> , <parameter><decl><type><name>gulong</name></type></decl></parameter> ,<parameter><decl><type><name>GString</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>function_pointer</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><name>lines_starting_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dbt</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>dbt</name><operator>-&gt;</operator><name>anonymized_function</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>function_pointer</name></name> <modifier>*</modifier></type><name>fun_ptr_i</name><init>=<expr><operator>&amp;</operator><name>pp</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fields</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>fun_ptr_i</name><operator>=</operator><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f</name><operator>=</operator><name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>write_column_into_string</name><argument_list>( <argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>, <argument><expr><name>statement_row</name></expr></argument>, <argument><expr><name>fun_ptr_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><name>fields_terminated_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>write_column_into_string</name><argument_list>( <argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>, <argument><expr><name>statement_row</name></expr></argument>, <argument><expr><name>fun_ptr_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><name>lines_terminated_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>guint64</name></type> <name>write_row_into_file_in_load_data_mode</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type> <name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name> <init>= <expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name></name></expr></init></decl>;</decl_stmt>
<comment type="line">//  guint fn = tj-&gt;nchunk;</comment>
  <decl_stmt><decl><type><name>guint64</name></type> <name>num_rows</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>escaped</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>num_fields</name> <init>= <expr><call><name>mysql_num_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>mysql_fetch_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement_row</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>statement_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//  guint sections = tj-&gt;where==NULL?1:2;</comment>

  <expr_stmt><expr><call><name>update_files_on_table_job</name><argument_list>(<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>write_load_data_statement</name><argument_list>(<argument><expr><name>tj</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>gulong</name> <modifier>*</modifier></type><name>lengths</name> <init>= <expr><call><name>mysql_fetch_lengths</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>num_rows</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>chunk_filesize</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>guint</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator>
            <name>chunk_filesize</name></expr> )</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_statement</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name><operator>)</operator></expr></argument>, <argument><expr><name>statement_row</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>num_rows</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_file</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_filename</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>

<comment type="line">//      if (sections == 1){</comment>
<comment type="line">//        fn++;</comment>
<comment type="line">//      }else{</comment>
        <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>sub_part</name></name><operator>++</operator></expr>;</expr_stmt>
<comment type="line">//      }</comment>

      <expr_stmt><expr><call><name>update_files_on_table_job</name><argument_list>(<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>st_in_file</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>write_load_data_statement</name><argument_list>(<argument><expr><name>tj</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>write_row_into_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>, <argument><expr><name>statement_row</name></expr></argument>, <argument><expr><name>write_load_data_column_into_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name><operator>+=</operator><name><name>statement_row</name><operator>-&gt;</operator><name>len</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>statement_row</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* INSERT statement is closed before over limit but this is load data, so we only need to flush the data to disk*/</comment>
    <if_stmt><if>if <condition>(<expr><name><name>statement</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>statement_size</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>write_statement</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name><operator>)</operator></expr></argument>, <argument><expr><name>statement</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>num_rows</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name><name>statement</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>real_write_data</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dat_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name><operator>)</operator></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write out data for %s.%s"</literal></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>num_rows</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>num_rows</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>guint64</name></type> <name>write_row_into_file_in_sql_mode</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type> <name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <comment type="line">// There are 2 possible options to chunk the files:</comment>
  <comment type="line">// - no chunk: this means that will be just 1 data file</comment>
  <comment type="line">// - chunk_filesize: this function will be spliting the per filesize, this means that multiple files will be created</comment>
  <comment type="line">// Split by row is before this step</comment>
  <comment type="line">// It could write multiple INSERT statments in a data file if statement_size is reached</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name> <init>= <expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name></name></expr></init></decl>;</decl_stmt>
<comment type="line">//  guint sections = tj-&gt;where==NULL?1:2;</comment>
  <decl_stmt><decl><type><name>guint</name></type> <name>num_fields</name> <init>= <expr><call><name>mysql_num_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>escaped</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>mysql_fetch_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><name>statement_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>statement_row</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gulong</name> <modifier>*</modifier></type><name>lengths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint64</name></type> <name>num_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint64</name></type> <name>num_rows_st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//  guint fn = tj-&gt;nchunk;</comment>
<comment type="line">//  if (tj-&gt;sql_file == NULL)</comment>
<comment type="line">//    initialize_sql_fn(tj);</comment>

  <expr_stmt><expr><call><name>update_files_on_table_job</name><argument_list>(<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>insert_statement</name></name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>insert_statement</name></name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>build_insert_statement</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>lengths</name> <operator>=</operator> <call><name>mysql_fetch_lengths</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>num_rows</name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>statement</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// if statement-&gt;len is 0 we consider that new statement needs to be written</comment>
      <comment type="line">// A file can be chunked by amount of rows or file size.</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tj</name><operator>-&gt;</operator><name>st_in_file</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// File Header</comment>
        <expr_stmt><expr><call><name>initialize_sql_statement</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>real_write_data</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name><operator>)</operator></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write out data for %s.%s"</literal></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>num_rows</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>insert_statement</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>num_rows_st</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>statement_row</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// previous row needs to be written</comment>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>statement_row</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>num_rows_st</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>write_row_into_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>, <argument><expr><name>statement_row</name></expr></argument>, <argument><expr><name>write_sql_column_into_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>statement</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name><name>statement_row</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>statement_size</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// We need to flush the statement into disk</comment>
      <if_stmt><if>if <condition>(<expr><name>num_rows_st</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>statement_row</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Row bigger than statement_size for %s.%s"</literal></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                  <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>statement_terminated_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>real_write_data</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name><operator>)</operator></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not write out data for %s.%s"</literal></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>num_rows</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>st_in_file</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>chunk_filesize</name> <operator>&amp;&amp;</operator>
          <operator>(</operator><name>guint</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator>
              <name>chunk_filesize</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// We reached the file size limit, we need to rotate the file</comment>
<comment type="line">//        if (sections == 1){</comment>
<comment type="line">//          fn++;</comment>
<comment type="line">//        }else{</comment>
          <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>sub_part</name></name><operator>++</operator></expr>;</expr_stmt>
<comment type="line">//        }</comment>
        <expr_stmt><expr><call><name>m_close</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">//initialize_sql_fn(tj);</comment>
        <expr_stmt><expr><call><name>update_files_on_table_job</name><argument_list>(<argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>st_in_file</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>num_rows_st</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>statement_row</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>num_rows_st</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name><name>statement_row</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* this last row has not been written out */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>statement</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>insert_statement</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name><name>statement_row</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>statement</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>statement_terminated_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>real_write_data</name><argument_list>(<argument><expr><name><name>tj</name><operator>-&gt;</operator><name>sql_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>filesize</name></name><operator>)</operator></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(
          <argument><expr><literal type="string">"Could not write out closing newline for %s.%s, now this is sad!"</literal></expr></argument>,
          <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>num_rows</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>st_in_file</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>rows_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>rows</name></name><operator>+=</operator><name>num_rows</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>rows_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>statement_row</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>num_rows</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Do actual data chunk reading/writing magic */</comment>
<function><type><name>guint64</name></type> <name>write_table_data_into_file</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type> <name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>guint64</name></type> <name>num_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//  guint64 num_rows_st = 0;</comment>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Ghm, not sure if this should be statement_size - but default isn't too big
   * for now */</comment>
  <comment type="block">/* Poor man's database code */</comment>
  <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(
      <argument><expr><literal type="string">"SELECT %s %s FROM `%s`.`%s` %s %s %s %s %s %s %s %s %s %s %s"</literal></expr></argument>,
      <argument><expr><ternary><condition><expr><operator>(</operator><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"/*!40001 SQL_NO_CACHE */"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
      <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>select_fields</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,
      <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>partition</name></name></expr>?</condition><then><expr><name><name>tj</name><operator>-&gt;</operator><name>partition</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
       <argument><expr><ternary><condition><expr><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>where</name></name> <operator>||</operator> <name>where_option</name>   <operator>||</operator> <name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>where</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"WHERE"</literal></expr>  </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> ,      <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>where</name></name></expr> ?</condition><then>      <expr><name><name>tj</name><operator>-&gt;</operator><name>where</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
       <argument><expr><ternary><condition><expr><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>where</name></name> <operator>&amp;&amp;</operator> <name>where_option</name> <operator>)</operator></expr>                    ?</condition><then> <expr><literal type="string">"AND"</literal></expr>    </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> ,   <argument><expr><ternary><condition><expr><name>where_option</name></expr> ?</condition><then>   <expr><name>where_option</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
      <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>tj</name><operator>-&gt;</operator><name>where</name></name> <operator>||</operator> <name>where_option</name> <operator>)</operator> <operator>&amp;&amp;</operator> <name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>where</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"AND"</literal></expr>    </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> , <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>where</name></name></expr> ?</condition><then> <expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>where</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
      <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>order_by</name></name></expr> ?</condition><then> <expr><literal type="string">"ORDER BY"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>order_by</name></name></expr>   ?</condition><then> <expr><name><name>tj</name><operator>-&gt;</operator><name>order_by</name></name></expr>   </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
      <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>limit</name></name></expr> ?</condition><then>  <expr><literal type="string">"LIMIT"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>limit</name></name></expr> ?</condition><then> <expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>limit</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>mysql_use_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <comment type="line">// ERROR 1146</comment>
    <if_stmt><if>if <condition>(<expr><name>success_on_1146</name> <operator>&amp;&amp;</operator> <call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1146</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Error dumping table (%s.%s) data: %s\nQuery: %s"</literal></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
                <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error dumping table (%s.%s) data: %s\nQuery: %s "</literal></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Poor man's data dump code */</comment>
  <if_stmt><if>if <condition>(<expr><name>load_data</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>num_rows</name> <operator>=</operator> <call><name>write_row_into_file_in_load_data_mode</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>num_rows</name><operator>=</operator><call><name>write_row_into_file_in_sql_mode</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>tj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not read data from %s.%s: %s"</literal></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
               <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>num_rows</name></expr>;</return>
</block_content>}</block></function>

</unit>
