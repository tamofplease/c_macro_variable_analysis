<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/mydumper/zstd/gzwrite.c"><comment type="block">/* gzwrite.c contains minimal changes required to be compiled with zlibWrapper:
 * - gz_statep was converted to union to work with -Wstrict-aliasing=1      */</comment>

 <comment type="block">/* gzwrite.c -- zlib functions for writing gzip files
 * Copyright (C) 2004-2017 Mark Adler
 * For conditions of distribution and use, see http://www.zlib.net/zlib_license.html
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gzguts.h"</cpp:file></cpp:include>

<comment type="block">/* Local functions */</comment>
<decl_stmt><decl><type><name>local</name> <name>int</name> <name>gz_init</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gz_statep</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>int</name> <name>gz_comp</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gz_statep</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>int</name> <name>gz_zero</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gz_statep</name><operator>,</operator> <name>z_off64_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>z_size_t</name> <name>gz_write</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gz_statep</name><operator>,</operator> <name>voidpc</name><operator>,</operator> <name>z_size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block">/* Initialize state for writing a gzip file.  Mark initialization by setting
   state.state-&gt;size to non-zero.  Return -1 on a memory allocation failure, or 0 on
   success. */</comment>
<function><type><name>local</name> <name>int</name></type> <name>gz_init</name><parameter_list>(<parameter><decl><type><name>state</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="block">/* allocate input buffer (double size for gzprintf) */</comment>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>want</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_MEM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* only need output buffer and deflate state if compressing */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>direct</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* allocate output buffer */</comment>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>want</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_MEM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* allocate deflate memory, set up for gzip compression */</comment>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>zalloc</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>zfree</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>deflateInit2</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name>Z_DEFLATED</name></expr></argument>,
                           <argument><expr><name>MAX_WBITS</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>DEF_MEM_LEVEL</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_MEM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* mark state as initialized */</comment>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>want</name></name></expr>;</expr_stmt>

    <comment type="block">/* initialize write buffer if compressing */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>direct</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Compress whatever is at avail_in and next_in and write to the output file.
   Return -1 if there is an error writing to the output file or if gz_init()
   fails to allocate memory, otherwise 0.  flush is assumed to be a valid
   deflate() flush value.  If flush is Z_FINISH, then the deflate() state is
   reset to start a new gzip stream.  If gz-&gt;direct is true, then simply write
   to the output file without compressing, and ignore flush. */</comment>
<function><type><name>local</name> <name>int</name></type> <name>gz_comp</name><parameter_list>(<parameter><decl><type><name>state</name></type></decl></parameter>, <parameter><decl><type><name>flush</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flush</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>writ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>have</name></decl>, <decl><type ref="prev"/><name>put</name></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="block">/* allocate memory if this is the first time through */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gz_init</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* write directly if requested */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>direct</name></name></expr>)</condition> <block>{<block_content>
        <while>while <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>put</name> <operator>=</operator> <ternary><condition><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;</operator> <name>max</name></expr> ?</condition><then> <expr><name>max</name></expr> </then><else>: <expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>writ</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>write</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>, <argument><expr><name>put</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>writ</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_ERRNO</name></expr></argument>, <argument><expr><call><name>zstrerror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>writ</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <name>writ</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* run deflate() on provided input until it produces no more output */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Z_OK</name></expr>;</expr_stmt>
    <do>do <block>{<block_content>
        <comment type="block">/* write out current buffer contents if full, or if flushing, but if
           doing Z_FINISH then don't write until we get to Z_STREAM_END */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>flush</name> <operator>!=</operator> <name>Z_NO_FLUSH</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>flush</name> <operator>!=</operator> <name>Z_FINISH</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>Z_STREAM_END</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>&gt;</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>put</name> <operator>=</operator> <ternary><condition><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>-</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>max</name></expr> ?</condition><then> <expr><name>max</name></expr> </then><else>:
                      <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>-</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
                <expr_stmt><expr><name>writ</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>write</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name></expr></argument>, <argument><expr><name>put</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>writ</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_ERRNO</name></expr></argument>, <argument><expr><call><name>zstrerror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>+=</operator> <name>writ</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* compress */</comment>
        <expr_stmt><expr><name>have</name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>Z_STREAM_ERROR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_STREAM_ERROR</name></expr></argument>,
                      <argument><expr><literal type="string">"internal error: deflate stream corrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>have</name> <operator>-=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>have</name></expr>)</condition>;</do>

    <comment type="block">/* if that completed a deflate stream, allow another to start */</comment>
    <if_stmt><if>if <condition>(<expr><name>flush</name> <operator>==</operator> <name>Z_FINISH</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>deflateReset</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* all done, no errors */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Compress len zeros to output.  Return -1 on a write error or memory
   allocation failure by gz_comp(), or 0 on success. */</comment>
<function><type><name>local</name> <name>int</name></type> <name>gz_zero</name><parameter_list>(<parameter><decl><type><name>state</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_off64_t</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="block">/* consume whatever's left in the input buffer */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&amp;&amp;</operator> <call><name>gz_comp</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* compress len zeros (len guaranteed &gt; 0) */</comment>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><call><name>GT_OFF</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>z_off64_t</name><operator>)</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>len</name></expr> ?</condition><then>
            <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>len</name></expr> </then><else>: <expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gz_comp</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Write len bytes from buf to file.  Return the number of bytes written.  If
   the returned value is less than len, then there was an error. */</comment>
<function><type><name>local</name> <name>z_size_t</name></type> <name>gz_write</name><parameter_list>(<parameter><decl><type><name>state</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>voidpc</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>z_size_t</name></type> <name>put</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* if len is zero, avoid unnecessary operations */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* allocate memory if this is the first time through */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gz_init</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check for seek request */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gz_zero</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* for small len, copy to input buffer, otherwise compress directly */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* copy to input buffer, compress when full */</comment>
        <do>do <block>{<block_content>
            <decl_stmt><decl><type><name>z_size_t</name></type> <name>have</name></decl>, <decl><type ref="prev"/><name>copy</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>have</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>next_in</name></name> <operator>+</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name><operator>)</operator> <operator>-</operator>
                              <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>copy</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>have</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>copy</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>copy</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <name>have</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>+=</operator> <name>copy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>copy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>copy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>copy</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <call><name>gz_comp</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <comment type="block">/* consume whatever's left in the input buffer */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>&amp;&amp;</operator> <call><name>gz_comp</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* directly compress user buffer to file */</comment>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>z_const</name> <name>Bytef</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
        <do>do <block>{<block_content>
            <decl_stmt><decl><type><name>z_size_t</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <operator>(</operator><name>z_uInt</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gz_comp</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* input was all buffered or compressed */</comment>
    <return>return <expr><name>put</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- see zlib.h -- */</comment>
<function><type><name>int</name> <name>ZEXPORT</name></type> <name>gzwrite</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>voidpc</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>

    <comment type="block">/* get internal structure */</comment>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

    <comment type="block">/* check that we're writing and that there's no error */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_WRITE</name> <operator>||</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* since an int is returned, make sure len fits in one, otherwise return
       with an error (this avoids a flaw in the interface) */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_DATA_ERROR</name></expr></argument>, <argument><expr><literal type="string">"requested length does not fit in int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* write len bytes from buf (the return value will fit in an int) */</comment>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>gz_write</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- see zlib.h -- */</comment>
<function><type><name>z_size_t</name> <name>ZEXPORT</name></type> <name>gzfwrite</name><parameter_list>(<parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>size</name></type></decl></parameter>, <parameter><decl><type><name>nitems</name></type></decl></parameter>, <parameter><decl><type><name>file</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>voidpc</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_size_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_size_t</name></type> <name>nitems</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>z_size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>

    <comment type="block">/* get internal structure */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

    <comment type="block">/* check that we're writing and that there's no error */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_WRITE</name> <operator>||</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* compute bytes to read -- error on overflow */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>nitems</name> <operator>*</operator> <name>size</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>/</operator> <name>size</name> <operator>!=</operator> <name>nitems</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_STREAM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"request does not fit in a size_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* write len bytes to buf, return the number of full items written */</comment>
    <return>return <expr><ternary><condition><expr><name>len</name></expr> ?</condition><then> <expr><call><name>gz_write</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- see zlib.h -- */</comment>
<function><type><name>int</name> <name>ZEXPORT</name></type> <name>gzputc</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>, <parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>have</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name></decl>;</decl_stmt>

    <comment type="block">/* get internal structure */</comment>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* check that we're writing and that there's no error */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_WRITE</name> <operator>||</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check for seek request */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gz_zero</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* try writing to input buffer for speed (state.state-&gt;size == 0 if buffer not
       initialized) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>have</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>)</operator> <operator>-</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>have</name> <operator>&lt;</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>have</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
            <return>return <expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* no room in buffer or not initialized, use gz_write() */</comment>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gz_write</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- see zlib.h -- */</comment>
<function><type><name>int</name> <name>ZEXPORT</name></type> <name>gzputs</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>, <parameter><decl><type><name>str</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>

    <comment type="block">/* get internal structure */</comment>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

    <comment type="block">/* check that we're writing and that there's no error */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_WRITE</name> <operator>||</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* write string */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>gz_write</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STDC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>Z_HAVE_STDARG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<comment type="block">/* -- see zlib.h -- */</comment>
<function><type><name>int</name> <name>ZEXPORTVA</name></type> <name>gzvprintf</name><parameter_list>(<parameter><decl><type><name>gzFile</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>va</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name></decl>;</decl_stmt>

    <comment type="block">/* get internal structure */</comment>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* check that we're writing and that there's no error */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_WRITE</name> <operator>||</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* make sure we have some buffer space */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gz_init</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check for seek request */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gz_zero</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* do the printf() into the input buffer, put length in len -- the input
       buffer is double-sized just for this function, so there is guaranteed to
       be state.state-&gt;size bytes available after the current contents */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>-</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name><operator>)</operator> <operator>+</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>next</name><index>[<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NO_vsnprintf</name></cpp:ifdef>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>HAS_vsprintf_void</name></cpp:ifdef>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vsprintf</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>next</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vsprintf</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>HAS_vsnprintf_void</name></cpp:ifdef>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vsnprintf</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* check that printf() results fit in buffer */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>len</name> <operator>&gt;=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name><name>next</name><index>[<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* update buffer and position, compress first half if past that */</comment>
    <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gz_comp</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>ZEXPORTVA</name></type> <name>gzprintf</name><parameter_list>(<parameter><decl><type><name>gzFile</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gzvprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !STDC &amp;&amp; !Z_HAVE_STDARG_H */</comment>

<comment type="block">/* -- see zlib.h -- */</comment>
<function><type><name>int</name> <name>ZEXPORTVA</name></type> <name>gzprintf</name> <parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>, <parameter><decl><type><name>format</name></type></decl></parameter>, <parameter><decl><type><name>a1</name></type></decl></parameter>, <parameter><decl><type><name>a2</name></type></decl></parameter>, <parameter><decl><type><name>a3</name></type></decl></parameter>, <parameter><decl><type><name>a4</name></type></decl></parameter>, <parameter><decl><type><name>a5</name></type></decl></parameter>, <parameter><decl><type><name>a6</name></type></decl></parameter>, <parameter><decl><type><name>a7</name></type></decl></parameter>, <parameter><decl><type><name>a8</name></type></decl></parameter>, <parameter><decl><type><name>a9</name></type></decl></parameter>, <parameter><decl><type><name>a10</name></type></decl></parameter>,
                       <parameter><decl><type><name>a11</name></type></decl></parameter>, <parameter><decl><type><name>a12</name></type></decl></parameter>, <parameter><decl><type><name>a13</name></type></decl></parameter>, <parameter><decl><type><name>a14</name></type></decl></parameter>, <parameter><decl><type><name>a15</name></type></decl></parameter>, <parameter><decl><type><name>a16</name></type></decl></parameter>, <parameter><decl><type><name>a17</name></type></decl></parameter>, <parameter><decl><type><name>a18</name></type></decl></parameter>, <parameter><decl><type><name>a19</name></type></decl></parameter>, <parameter><decl><type><name>a20</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>a4</name></decl>, <decl><type ref="prev"/><name>a5</name></decl>, <decl><type ref="prev"/><name>a6</name></decl>, <decl><type ref="prev"/><name>a7</name></decl>, <decl><type ref="prev"/><name>a8</name></decl>, <decl><type ref="prev"/><name>a9</name></decl>, <decl><type ref="prev"/><name>a10</name></decl>,
        <decl><type ref="prev"/><name>a11</name></decl>, <decl><type ref="prev"/><name>a12</name></decl>, <decl><type ref="prev"/><name>a13</name></decl>, <decl><type ref="prev"/><name>a14</name></decl>, <decl><type ref="prev"/><name>a15</name></decl>, <decl><type ref="prev"/><name>a16</name></decl>, <decl><type ref="prev"/><name>a17</name></decl>, <decl><type ref="prev"/><name>a18</name></decl>, <decl><type ref="prev"/><name>a19</name></decl>, <decl><type ref="prev"/><name>a20</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name></decl>;</decl_stmt>

    <comment type="block">/* get internal structure */</comment>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>gz_statep</name><operator>)</operator><name>file</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* check that can really pass pointer in ints */</comment>
    <if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check that we're writing and that there's no error */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_WRITE</name> <operator>||</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* make sure we have some buffer space */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gz_init</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>error</name></name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check for seek request */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gz_zero</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>error</name></name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* do the printf() into the input buffer, put length in len -- the input
       buffer is double-sized just for this function, so there is guaranteed to
       be state.state-&gt;size bytes available after the current contents */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>next</name><index>[<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NO_snprintf</name></cpp:ifdef>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>HAS_sprintf_void</name></cpp:ifdef>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>, <argument><expr><name>a9</name></expr></argument>, <argument><expr><name>a10</name></expr></argument>, <argument><expr><name>a11</name></expr></argument>, <argument><expr><name>a12</name></expr></argument>,
            <argument><expr><name>a13</name></expr></argument>, <argument><expr><name>a14</name></expr></argument>, <argument><expr><name>a15</name></expr></argument>, <argument><expr><name>a16</name></expr></argument>, <argument><expr><name>a17</name></expr></argument>, <argument><expr><name>a18</name></expr></argument>, <argument><expr><name>a19</name></expr></argument>, <argument><expr><name>a20</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>next</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>, <argument><expr><name>a9</name></expr></argument>, <argument><expr><name>a10</name></expr></argument>, <argument><expr><name>a11</name></expr></argument>,
                  <argument><expr><name>a12</name></expr></argument>, <argument><expr><name>a13</name></expr></argument>, <argument><expr><name>a14</name></expr></argument>, <argument><expr><name>a15</name></expr></argument>, <argument><expr><name>a16</name></expr></argument>, <argument><expr><name>a17</name></expr></argument>, <argument><expr><name>a18</name></expr></argument>, <argument><expr><name>a19</name></expr></argument>, <argument><expr><name>a20</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>HAS_snprintf_void</name></cpp:ifdef>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>, <argument><expr><name>a9</name></expr></argument>,
             <argument><expr><name>a10</name></expr></argument>, <argument><expr><name>a11</name></expr></argument>, <argument><expr><name>a12</name></expr></argument>, <argument><expr><name>a13</name></expr></argument>, <argument><expr><name>a14</name></expr></argument>, <argument><expr><name>a15</name></expr></argument>, <argument><expr><name>a16</name></expr></argument>, <argument><expr><name>a17</name></expr></argument>, <argument><expr><name>a18</name></expr></argument>, <argument><expr><name>a19</name></expr></argument>, <argument><expr><name>a20</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>,
                   <argument><expr><name>a9</name></expr></argument>, <argument><expr><name>a10</name></expr></argument>, <argument><expr><name>a11</name></expr></argument>, <argument><expr><name>a12</name></expr></argument>, <argument><expr><name>a13</name></expr></argument>, <argument><expr><name>a14</name></expr></argument>, <argument><expr><name>a15</name></expr></argument>, <argument><expr><name>a16</name></expr></argument>, <argument><expr><name>a17</name></expr></argument>, <argument><expr><name>a18</name></expr></argument>, <argument><expr><name>a19</name></expr></argument>, <argument><expr><name>a20</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* check that printf() results fit in buffer */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&gt;=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name><name>next</name><index>[<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* update buffer and position, compress first half if past that */</comment>
    <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gz_comp</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- see zlib.h -- */</comment>
<function><type><name>int</name> <name>ZEXPORT</name></type> <name>gzflush</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>, <parameter><decl><type><name>flush</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flush</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>

    <comment type="block">/* get internal structure */</comment>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

    <comment type="block">/* check that we're writing and that there's no error */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_WRITE</name> <operator>||</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check flush parameter */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>flush</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>flush</name></expr></argument> &gt;</argument_list></name> <name>Z_FINISH</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check for seek request */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gz_zero</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* compress remaining data with requested flush */</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gz_comp</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- see zlib.h -- */</comment>
<function><type><name>int</name> <name>ZEXPORT</name></type> <name>gzsetparams</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>, <parameter><decl><type><name>level</name></type></decl></parameter>, <parameter><decl><type><name>strategy</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>strategy</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name></decl>;</decl_stmt>

    <comment type="block">/* get internal structure */</comment>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* check that we're writing and that there's no error */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_WRITE</name> <operator>||</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* if no change is requested, then do nothing */</comment>
    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>&amp;&amp;</operator> <name>strategy</name> <operator>==</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strategy</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_OK</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check for seek request */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gz_zero</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* change compression parameters for subsequent input */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* flush previous input with previous parameters before changing */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&amp;&amp;</operator> <call><name>gz_comp</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_BLOCK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>deflateParams</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strategy</name></name> <operator>=</operator> <name>strategy</name></expr>;</expr_stmt>
    <return>return <expr><name>Z_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- see zlib.h -- */</comment>
<function><type><name>int</name> <name>ZEXPORT</name></type> <name>gzclose_w</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>Z_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>

    <comment type="block">/* get internal structure */</comment>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

    <comment type="block">/* check that we're writing */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check for seek request */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gz_zero</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* flush, free memory, and close file */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gz_comp</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>err</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>direct</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_OK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Z_ERRNO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
