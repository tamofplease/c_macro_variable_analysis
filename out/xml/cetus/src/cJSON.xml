<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/cJSON.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>cJSON_GetErrorPtr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>ep</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cJSON_strcasecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s1</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>s1</name> <operator>==</operator> <name>s2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s2</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init>;</init> <condition><expr><call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><name>s2</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>s1</name></expr><operator>,</operator> <expr><operator>++</operator><name>s2</name></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <return>return <expr><call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>s1</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>s2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>cJSON_malloc</name>) <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <init>= <expr><name>malloc</name></expr></init>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>cJSON_free</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <init>= <expr><name>free</name></expr></init>;</function_decl>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>cJSON_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>copy</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>copy</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cJSON_InitHooks</name><parameter_list>(<parameter><decl><type><name>cJSON_Hooks</name> <modifier>*</modifier></type><name>hooks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hooks</name></expr>)</condition> <block>{<block_content>               <comment type="block">/* Reset hooks */</comment>
        <expr_stmt><expr><name>cJSON_malloc</name> <operator>=</operator> <name>malloc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cJSON_free</name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cJSON_malloc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hooks</name><operator>-&gt;</operator><name>malloc_fn</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>hooks</name><operator>-&gt;</operator><name>malloc_fn</name></name></expr> </then><else>: <expr><name>malloc</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>cJSON_free</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hooks</name><operator>-&gt;</operator><name>free_fn</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>hooks</name><operator>-&gt;</operator><name>free_fn</name></name></expr> </then><else>: <expr><name>free</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Internal constructor. */</comment>
<function><type><specifier>static</specifier> <name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_New_Item</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>cJSON</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cJSON</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cJSON</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Delete a cJSON structure. */</comment>
<function><type><name>void</name></type>
<name>cJSON_Delete</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>cJSON_IsReference</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>cJSON_IsReference</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>valuestring</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>cJSON_StringIsConst</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* Parse the input text to generate a number, and populate the result into item. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>parse_number</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>scale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>subscale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>signsubscale</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>num</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>       <comment type="block">/* Has sign? */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>num</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>                  <comment type="block">/* is zero */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>num</name> <operator>&gt;=</operator> <literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>num</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
        <do>do<block type="pseudo"><block_content>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>*</operator> <literal type="number">10.0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>num</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block>
        while <condition>(<expr><operator>*</operator><name>num</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>num</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>;</do></block_content></block></if></if_stmt> <comment type="block">/* Number? */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>num</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
        <do>do<block type="pseudo"><block_content>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>*</operator> <literal type="number">10.0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>num</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr><operator>,</operator> <expr><name>scale</name><operator>--</operator></expr>;</expr_stmt></block_content></block>
        while <condition>(<expr><operator>*</operator><name>num</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>num</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>;</do>
    </block_content>}</block></if></if_stmt>                           <comment type="block">/* Fractional part? */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>num</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <operator>*</operator><name>num</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>   <comment type="block">/* Exponent? */</comment>
        <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>num</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>num</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>signsubscale</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>   <comment type="block">/* With sign? */</comment>
        <while>while <condition>(<expr><operator>*</operator><name>num</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>num</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>subscale</name> <operator>=</operator> <operator>(</operator><name>subscale</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>num</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>    <comment type="block">/* Number? */</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sign</name> <operator>*</operator> <name>n</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>scale</name> <operator>+</operator> <name>subscale</name> <operator>*</operator> <name>signsubscale</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* number = +/- number.fraction *10^+/- exponent */</comment>

    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>valueint</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_Number</name></expr>;</expr_stmt>
    <return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pow2gt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>--</operator><name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <return>return <expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>printbuffer</name>;</typedef>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ensure</name><parameter_list>(<parameter><decl><type><name>printbuffer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>needed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbuffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>newsize</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>needed</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>needed</name> <operator>&lt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>newsize</name> <operator>=</operator> <call><name>pow2gt</name><argument_list>(<argument><expr><name>needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>newbuffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>newbuffer</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>newbuffer</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newbuffer</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>newbuffer</name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>newbuffer</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>update</name><parameter_list>(<parameter><decl><type><name>printbuffer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
    <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Render the number nicely from the given item into a string. */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>print_number</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>printbuffer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* special case for 0. */</comment>
        <if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>valueint</name></name><operator>)</operator> <operator>-</operator> <name>d</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>DBL_EPSILON</name> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;=</operator> <name>INT_MAX</name> <operator>&amp;&amp;</operator> <name>d</name> <operator>&gt;=</operator> <name>INT_MIN</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block">/* 2^64+1 can be represented in 21 chars. */</comment>
        <if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>valueint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block">/* This is a nice tradeoff. */</comment>
        <if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><call><name>floor</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>d</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>DBL_EPSILON</name> <operator>&amp;&amp;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.0e60</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%.0f"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.0e-6</literal> <operator>||</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1.0e9</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%e"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>parse_hex4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
    <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Parse the input text into an unescaped cstring, and populate item. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>firstByteMark</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xFC</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>parse_string</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>uc</name></decl>, <decl><type ref="prev"/><name>uc2</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* not a string! */</comment>
    <while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\"'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>++</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>              <comment type="block">/* Skip escaped quotes. */</comment>

    <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* This is how long we need for the string, roughly. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>str</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\"'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'b'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'f'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'n'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'r'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'t'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'u'</literal></expr>:</case>          <comment type="block">/* transcode utf16 to utf8. */</comment>
                <expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>parse_hex4</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>       <comment type="block">/* get the unicode char. */</comment>

                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uc</name> <operator>&gt;=</operator> <literal type="number">0xDC00</literal> <operator>&amp;&amp;</operator> <name>uc</name> <operator>&lt;=</operator> <literal type="number">0xDFFF</literal><operator>)</operator> <operator>||</operator> <name>uc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>      <comment type="block">/* check for invalid.   */</comment>

                <if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&gt;=</operator> <literal type="number">0xD800</literal> <operator>&amp;&amp;</operator> <name>uc</name> <operator>&lt;=</operator> <literal type="number">0xDBFF</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* UTF16 surrogate pairs. */</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'u'</literal></expr>)</condition><block type="pseudo"><block_content>
                        <break>break;</break></block_content></block></if></if_stmt>  <comment type="block">/* missing second-half of surrogate.    */</comment>
                    <expr_stmt><expr><name>uc2</name> <operator>=</operator> <call><name>parse_hex4</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>uc2</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0xDC00</literal> <operator>||</operator> <name>uc2</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xDFFF</literal></expr>)</condition><block type="pseudo"><block_content>
                        <break>break;</break></block_content></block></if></if_stmt>  <comment type="block">/* invalid second-half of surrogate.    */</comment>
                    <expr_stmt><expr><name>uc</name> <operator>=</operator> <literal type="number">0x10000</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uc2</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

                <switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="number">4</literal></expr>:</case>
                    <expr_stmt><expr><operator>*</operator><operator>--</operator><name>ptr2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xBF</literal><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uc</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
                <case>case <expr><literal type="number">3</literal></expr>:</case>
                    <expr_stmt><expr><operator>*</operator><operator>--</operator><name>ptr2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xBF</literal><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uc</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
                <case>case <expr><literal type="number">2</literal></expr>:</case>
                    <expr_stmt><expr><operator>*</operator><operator>--</operator><name>ptr2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xBF</literal><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uc</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
                <case>case <expr><literal type="number">1</literal></expr>:</case>
                    <expr_stmt><expr><operator>*</operator><operator>--</operator><name>ptr2</name> <operator>=</operator> <operator>(</operator><name>uc</name> <operator>|</operator> <name><name>firstByteMark</name><index>[<expr><name>len</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                </block_content>}</block></switch>
                <expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
            <expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><operator>*</operator><name>ptr2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>valuestring</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_String</name></expr>;</expr_stmt>
    <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Render the cstring provided to an escaped version that can be printed. */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>print_string_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>printbuffer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>token</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>out</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><operator>*</operator><name>ptr</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\"'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>str</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ptr2</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ptr2</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>out</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>token</name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>++</operator><name>len</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"\"\\\b\f\n\r\t"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>token</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ptr</name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\"'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name>token</name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'\"'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'\b'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'\f'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'\r'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="string">"u%04x"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
                <break>break;</break>          <comment type="block">/* escape and print */</comment>
            </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Invote print_string_ptr (which is useful) on an item. */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>print_string</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>printbuffer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>print_string_ptr</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Predeclare these prototypes. */</comment>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_value</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>print_value</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>printbuffer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_array</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>print_array</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>printbuffer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_object</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>print_object</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>printbuffer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Utility to jump whitespace and cr/lf */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>skip</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while <condition>(<expr><name>in</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>in</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>in</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Parse an object - create a new root, and populate. */</comment>
<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_ParseWithOpts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>return_parse_end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>require_null_terminated</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>               <comment type="block">/* memory fail */</comment>

    <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>parse_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>skip</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* parse failure. ep is set. */</comment>
    <comment type="block">/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */</comment>
    <if_stmt><if>if <condition>(<expr><name>require_null_terminated</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>skip</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>return_parse_end</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>return_parse_end</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Default options for cJSON_Parse */</comment>
<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_Parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>cJSON_ParseWithOpts</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Render a cJSON item/entity/structure to text. */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>cJSON_Print</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>print_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>cJSON_PrintUnformatted</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>print_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>cJSON_PrintBuffered</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prebuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>printbuffer</name></type> <name>p</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><name>prebuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>prebuffer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>print_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Parser core - when encountering text, process appropriately. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>parse_value</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>               <comment type="block">/* Fail on null. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>value</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_False</name></expr>;</expr_stmt>
        <return>return <expr><name>value</name> <operator>+</operator> <literal type="number">5</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_True</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>valueint</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>value</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>parse_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>value</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>value</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>parse_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>parse_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>parse_object</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>                   <comment type="block">/* failure. */</comment>
</block_content>}</block></function>

<comment type="block">/* Render a value to text. */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>print_value</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>printbuffer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>cJSON_NULL</name></expr>:</case><block>{<block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>cJSON_False</name></expr>:</case><block>{<block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>cJSON_True</name></expr>:</case><block>{<block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>cJSON_Number</name></expr>:</case>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>print_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>cJSON_String</name></expr>:</case>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>print_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>cJSON_Array</name></expr>:</case>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>print_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>cJSON_Object</name></expr>:</case>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>print_object</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <switch>switch <condition>(<expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>cJSON_NULL</name></expr>:</case>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>cJSON_strdup</name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>cJSON_False</name></expr>:</case>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>cJSON_strdup</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>cJSON_True</name></expr>:</case>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>cJSON_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>cJSON_Number</name></expr>:</case>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>print_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>cJSON_String</name></expr>:</case>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>print_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>cJSON_Array</name></expr>:</case>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>print_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>cJSON_Object</name></expr>:</case>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>print_object</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Build an array from input text. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>parse_array</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* not an array! */</comment>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_Array</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>skip</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>       <comment type="block">/* empty array. */</comment>

    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>child</name> <operator>=</operator> <call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>               <comment type="block">/* memory fail */</comment>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>skip</name><argument_list>(<argument><expr><call><name>parse_value</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><call><name>skip</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip any spacing, get the value. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>new_item</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new_item</name> <operator>=</operator> <call><name>cJSON_New_Item</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>           <comment type="block">/* memory fail */</comment>
        <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>child</name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>skip</name><argument_list>(<argument><expr><call><name>parse_value</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><call><name>skip</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>           <comment type="block">/* memory fail */</comment>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>       <comment type="block">/* end of array */</comment>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>                   <comment type="block">/* malformed. */</comment>
</block_content>}</block></function>

<comment type="block">/* Render an array to text */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>print_array</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>printbuffer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numentries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* How many entries in the array? */</comment>
    <while>while <condition>(<expr><name>child</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>numentries</name><operator>++</operator></expr><operator>,</operator> <expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
    <comment type="block">/* Explicitly handle numentries == 0 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>numentries</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>out</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Compose the output array. */</comment>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>child</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fail</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>print_value</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>update</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>fmt</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
                <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Allocate an array to hold the values for each */</comment>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>entries</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><name>numentries</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>entries</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>numentries</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Retrieve all the results: */</comment>
        <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>child</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fail</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>print_value</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>fmt</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* If we didn't fail, try to malloc the output string */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fail</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* If that fails, we fail. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Handle failure. */</comment>
        <if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numentries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
            <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Compose the output array. */</comment>
        <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>out</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numentries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>tmplen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>tmplen</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>numentries</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Build an object from the text. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>parse_object</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* not an object! */</comment>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_Object</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>skip</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>       <comment type="block">/* empty array. */</comment>

    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>child</name> <operator>=</operator> <call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>skip</name><argument_list>(<argument><expr><call><name>parse_string</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><call><name>skip</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>valuestring</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>valuestring</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>                           <comment type="block">/* fail! */</comment>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>skip</name><argument_list>(<argument><expr><call><name>parse_value</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><call><name>skip</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip any spacing, get the value. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>new_item</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new_item</name> <operator>=</operator> <call><name>cJSON_New_Item</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>           <comment type="block">/* memory fail */</comment>
        <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>child</name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>skip</name><argument_list>(<argument><expr><call><name>parse_string</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><call><name>skip</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>valuestring</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>valuestring</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>                       <comment type="block">/* fail! */</comment>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>skip</name><argument_list>(<argument><expr><call><name>parse_value</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><call><name>skip</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip any spacing, get the value. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>       <comment type="block">/* end of array */</comment>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>                   <comment type="block">/* malformed. */</comment>
</block_content>}</block></function>

<comment type="block">/* Render an object to text. */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>print_object</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>printbuffer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numentries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Count the number of entries. */</comment>
    <while>while <condition>(<expr><name>child</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>numentries</name><operator>++</operator></expr><operator>,</operator> <expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
    <comment type="block">/* Explicitly handle empty object case */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>numentries</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fmt</name></expr> ?</condition><then> <expr><name>depth</name> <operator>+</operator> <literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><ternary><condition><expr><name>fmt</name></expr> ?</condition><then> <expr><name>depth</name> <operator>+</operator> <literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>out</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Compose the output: */</comment>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>fmt</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
                <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>depth</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt></block_content></block></for>
                <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>depth</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>print_string_ptr</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>update</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>fmt</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>print_value</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>update</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>fmt</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fmt</name></expr> ?</condition><then> <expr><operator>(</operator><name>depth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Allocate space for the names and the objects */</comment>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>entries</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><name>numentries</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>entries</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><name>numentries</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>names</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numentries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numentries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Collect all the results into our arrays: */</comment>
        <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>depth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>str</name> <operator>=</operator> <call><name>print_string_ptr</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ret</name> <operator>=</operator> <call><name>print_value</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>fmt</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>+</operator> <name>depth</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Try to allocate the output string */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fail</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cJSON_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Handle failure */</comment>
        <if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numentries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Compose the output: */</comment>
        <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>out</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numentries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
                <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>depth</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>tmplen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>tmplen</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>numentries</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get Array size/item / object item. */</comment>
<function><type><name>int</name></type>
<name>cJSON_GetArraySize</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>array</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
    <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_GetArrayItem</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>array</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name>item</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>item</name><operator>--</operator></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
    <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_GetObjectItem</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <call><name>cJSON_strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
    <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Utility for array list handling. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>suffix_object</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Utility for handling references. */</comment>
<function><type><specifier>static</specifier> <name>cJSON</name> <modifier>*</modifier></type>
<name>create_reference</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cJSON</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>cJSON_IsReference</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>ref</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add item to array/object. */</comment>
<function><type><name>void</name></type>
<name>cJSON_AddItemToArray</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>array</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <while>while <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
        <expr_stmt><expr><call><name>suffix_object</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cJSON_AddItemToObject</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>cJSON_strdup</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cJSON_AddItemToObjectCS</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>cJSON_StringIsConst</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>cJSON_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>cJSON_StringIsConst</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cJSON_AddItemReferenceToArray</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>create_reference</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cJSON_AddItemReferenceToObject</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>create_reference</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_DetachItemFromArray</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>array</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name>which</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>which</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>array</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cJSON_DeleteItemFromArray</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><call><name>cJSON_DetachItemFromArray</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>which</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_DetachItemFromObject</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <call><name>cJSON_strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>cJSON_DetachItemFromArray</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cJSON_DeleteItemFromObject</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><call><name>cJSON_DetachItemFromObject</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Replace array/object items with new ones. */</comment>
<function><type><name>void</name></type>
<name>cJSON_InsertItemInArray</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>newitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>array</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name>which</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>which</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>newitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>array</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cJSON_ReplaceItemInArray</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>newitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>array</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name>which</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>which</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>array</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cJSON_ReplaceItemInObject</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>newitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <call><name>cJSON_strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>cJSON_strdup</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_ReplaceItemInArray</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>newitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Create basic types: */</comment>
<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_CreateNull</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_CreateTrue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_True</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_CreateFalse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_False</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_CreateBool</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><name>cJSON_True</name></expr> </then><else>: <expr><name>cJSON_False</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_CreateNumber</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_Number</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>valueint</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>num</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_CreateString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_String</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>valuestring</name></name> <operator>=</operator> <call><name>cJSON_strdup</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_CreateArray</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_Array</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_CreateObject</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cJSON_Object</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create Arrays: */</comment>
<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_CreateIntArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>numbers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name><name>numbers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>suffix_object</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_CreateFloatArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>numbers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name><name>numbers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>suffix_object</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_CreateDoubleArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>numbers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name><name>numbers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>suffix_object</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_CreateStringArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strings</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>suffix_object</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Duplication */</comment>
<function><type><name>cJSON</name> <modifier>*</modifier></type>
<name>cJSON_Duplicate</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recurse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>newitem</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newchild</name></decl>;</decl_stmt>
    <comment type="block">/* Bail on bad ptr */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* Create new item */</comment>
    <expr_stmt><expr><name>newitem</name> <operator>=</operator> <call><name>cJSON_New_Item</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>newitem</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* Copy over all vars */</comment>
    <expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>cJSON_IsReference</name><operator>)</operator></expr><operator>,</operator> <expr><name><name>newitem</name><operator>-&gt;</operator><name>valueint</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>valueint</name></name></expr><operator>,</operator> <expr><name><name>newitem</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>=</operator>
        <name><name>item</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>valuestring</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>valuestring</name></name> <operator>=</operator> <call><name>cJSON_strdup</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>newitem</name><operator>-&gt;</operator><name>valuestring</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>newitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>cJSON_strdup</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>newitem</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>newitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* If non-recursive, then we're done! */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>recurse</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>newitem</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* Walk the -&gt;next chain for the child. */</comment>
    <expr_stmt><expr><name>cptr</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>cptr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>newchild</name> <operator>=</operator> <call><name>cJSON_Duplicate</name><argument_list>(<argument><expr><name>cptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* Duplicate (with recurse) each item in the -&gt;next chain */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>newchild</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>newitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>nptr</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>nptr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newchild</name></expr><operator>,</operator> <expr><name><name>newchild</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nptr</name> <operator>=</operator> <name>newchild</name></expr>;</expr_stmt>
        </block_content>}</block></if> <comment type="block">/* If newitem-&gt;child already set, then crosswire -&gt;prev and -&gt;next and move on */</comment>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>newchild</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nptr</name> <operator>=</operator> <name>newchild</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>                       <comment type="block">/* Set newitem-&gt;child and move to it */</comment>
        <expr_stmt><expr><name>cptr</name> <operator>=</operator> <name><name>cptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>newitem</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cJSON_Minify</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>into</name> <init>= <expr><name>json</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>json</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>json</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>json</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>json</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>json</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>             <comment type="block">/* Whitespace characters. */</comment>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>json</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>json</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>json</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>json</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>json</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>json</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
            <while>while <condition>(<expr><operator>*</operator><name>json</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>json</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>json</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if>         <comment type="block">/* double-slash comments, to end of line. */</comment>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>json</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>json</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><operator>*</operator><name>json</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>json</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>json</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>json</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
            <expr_stmt><expr><name>json</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <comment type="block">/* multiline comments. */</comment>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>json</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>into</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>json</name><operator>++</operator></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>*</operator><name>json</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>json</name> <operator>!=</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>json</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>*</operator><name>into</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>json</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><operator>*</operator><name>into</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>json</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><operator>*</operator><name>into</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>json</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <comment type="block">/* string literals, which are \" sensitive. */</comment>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>into</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>json</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* All other characters. */</comment>
    </block_content>}</block></while>
    <expr_stmt><expr><operator>*</operator><name>into</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                  <comment type="block">/* and null-terminate. */</comment>
</block_content>}</block></function>
</unit>
