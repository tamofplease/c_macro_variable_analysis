<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/network-conn-pool-wrap.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_FILIO_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/filio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ioctlsocket</name></cpp:macro> <cpp:value>ioctl</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-conn-pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-conn-pool-wrap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * handle the events of a idling server connection in the pool
 *
 * make sure we know about connection close from the server side
 * - wait_timeout
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>network_mysqld_con_idle_handle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:visit network_mysqld_con_idle_handle"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_connection_pool_entry</name> <modifier>*</modifier></type><name>pool_entry</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>pool_entry</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="doxygen">/**
         * @todo we have to handle the case that the server really sent use something
         *        up to now we just ignore it
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"ioctl(%d, FIONREAD) failed: %s"</literal></expr></argument>, <argument><expr><name>event_fd</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"ioctl(%d, FIONREAD) said something to read, oops: %d"</literal></expr></argument>, <argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* the server decided the close the connection (wait_timeout, crash, ... )
             *
             * remove us from the connection pool and close the connection */</comment>

            <expr_stmt><expr><call><name>network_connection_pool_remove</name><argument_list>(<argument><expr><name>pool_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>srv</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>complement_conn_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:the server decided to close the connection:%d for sock:%p"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>pool_entry</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name></expr></argument>, <argument><expr><name><name>pool_entry</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>srv</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>complement_conn_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_connection_pool_remove</name><argument_list>(<argument><expr><name>pool_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:idle connection timeout:%d for sock:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                <argument><expr><name><name>pool_entry</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name></expr></argument>, <argument><expr><name><name>pool_entry</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_pool_add_idle_conn</name><parameter_list>(<parameter><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_connection_pool_entry</name> <modifier>*</modifier></type><name>pool_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pool_entry</name> <operator>=</operator> <call><name>network_connection_pool_add</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><name>network_mysqld_con_idle_handle</name></expr></argument>, <argument><expr><name>pool_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>surplus_time</name> <init>= <expr><name><name>srv</name><operator>-&gt;</operator><name>current_time</name></name> <operator>-</operator> <name><name>server</name><operator>-&gt;</operator><name>create_time</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>surplus_time</name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>max_alive_time</name></name> <operator>-</operator> <name>surplus_time</name> <operator>+</operator> <call><name>g_random_int_range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>surplus_time</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>surplus_time</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>surplus_time</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ev:%p add network_mysqld_con_idle_handle for server:%p, fd:%d, timeout:%d"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>surplus_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * move the con-&gt;server into connection pool and disconnect the
 * proxy from its backend *only RW-edition
 */</comment>
<function><type><name>int</name></type>
<name>network_pool_add_conn</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_swap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* con-server is already disconnected, got out */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>response</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: server response is null:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: st backend is null:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>prepare_stmt_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: con valid_prepare_stmt_cnt:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>prepare_stmt_count</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_sess_context</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: transact feature is changed:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: now transact feature is changed, orig is read server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_in_sess_context</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: server is in sess context true:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>to_be_put_to_pool</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server_in_tran_and_auto_commit_received</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:server in tran and auto commit and put to pool:%p"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>to_be_put_to_pool</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>to_be_put_to_pool</name> <operator>==</operator> <name>TRUE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_swap</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_reduce_conns</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>network_conn_pool_do_reduce_conns_verdict</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>to_be_put_to_pool</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>to_be_put_to_pool</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: recv queue length :%d, state:%s"</literal></expr></argument>,
                       <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><call><name>network_mysqld_con_st_name</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_authed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>checked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SERVER_NUM_FOR_PREPARE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: st backend ndx array is null:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: i:%d backend_ndx_array value:%d for con:%p"</literal></expr></argument>,
                            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>backend</name> <operator>=</operator> <call><name>network_backends_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CHECK_PENDING_EVENT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>server_conn_refresh_time</name></name> <operator>&lt;=</operator> <name><name>server</name><operator>-&gt;</operator><name>create_time</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: add conn fd:%d to pool:%p "</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_pool_add_idle_conn</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: old connection for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>complement_conn_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p, backend ndx:%d:connected_clients sub, clients:%d"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>checked</name><operator>++</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>checked</name> <operator>&gt;=</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>multiple_server_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_prepared</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prepare_stmt_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: con:%p, set prepare_stmt_count 0"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK_PENDING_EVENT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>server_conn_refresh_time</name></name> <operator>&lt;=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>create_time</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: add conn fd:%d to pool:%p "</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_pool_add_idle_conn</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: old connection for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>complement_conn_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p, backend ndx:%d:connected_clients sub, clients:%d"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>mysqld_con_reserved_connections_add</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backend_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><name>MAX_SERVER_NUM_FOR_PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* current sock index = 0 */</comment>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set st-&gt;backend_ndx:%d ndx array 1"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>=</operator> <call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* current sock index = 0 */</comment>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>multiple_server_mode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* TODO: redundant var */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name>backend_idx</name></expr>]</index></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set backend_ndx:%d ndx array:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>backend_idx</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>network_socket</name> <modifier>*</modifier></type>
<name>mysqld_con_reserved_connections_get</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backend_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: backend_idx:%d backend_ndx_array value:%d for con:%p"</literal></expr></argument>,
                            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>backend_idx</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name>backend_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>conn_idx</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name>backend_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>conn_idx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>conn_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>sock</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * swap the server connection with a connection from
 * the connection pool , only RW-edition
 *
 * we can only switch backends if we have an authed connection in the pool.
 *
 * @return NULL if swapping failed
 *         the new backend on success
 */</comment>
<function><type><name>network_socket</name> <modifier>*</modifier></type>
<name>network_connection_pool_swap</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backend_ndx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * we can only change to another backend if the backend is already
     * in the connection pool and connected
     */</comment>
    <expr_stmt><expr><name>backend</name> <operator>=</operator> <call><name>network_backends_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>backend</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check server switch for conn:%p, prep_stmt_cnt:%d, orig ndx:%d, now:%d"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>prepare_stmt_count</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" format="doxygen">/**
     * TODO only valid for successful prepare statements, not valid for data partition
     */</comment>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>server_switch_need_add</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>prepare_stmt_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name> <operator>!=</operator> <name>backend_ndx</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RW</name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>use_slave_forced</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>server_switch_need_add</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server switch is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: use orig server"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="block">/* first try reserved connections, before query the pool */</comment>
        <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>mysqld_con_reserved_connections_get</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sock</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>sock</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" format="doxygen">/**
     * get a connection from the pool which matches our basic requirements
     * - username has to match
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>is_robbed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name></type> <name>empty_name</name> <init>= <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name></name></expr> ?</condition><then> <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>empty_name</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>network_connection_pool_get</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_robbed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>server_switch_need_add</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:retrieve master conn failed, but still hold read server"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>network_pool_add_conn</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: move the curr conn back into the pool failed:%p"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>rob_other_conn</name></name> <operator>=</operator> <name>is_robbed</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>server_switch_need_add</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mysqld_con_reserved_connections_add</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>network_pool_add_conn</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: take and move the current backend into the pool failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: take and move the current backend into the pool"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* connect to the new backend */</comment>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name> <operator>=</operator> <name>backend_ndx</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p, backend ndx:%d:connected_clients add, clients:%d, sock:%p"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></function>
</unit>
