<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/cetus-users.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-users.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-config.h"</cpp:file></cpp:include>

<struct>struct <name>pwd_pair_t</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>pwd_pair_t</name></name> <modifier>*</modifier></type>
<name>pwd_pair_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pwd_pair_t</name></name> <modifier>*</modifier></type><name>pwd</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>pwd_pair_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pwd</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pwd</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>pwd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pwd_pair_set_pwd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pwd_pair_t</name></name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_pass</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cetus_pwd_type</name></name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CETUS_CLIENT_PWD</name></expr>:</case>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pwd</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>new_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>CETUS_SERVER_PWD</name></expr>:</case>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pwd</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>new_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>pwd_pair_same_pwd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pwd_pair_t</name></name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_pass</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cetus_pwd_type</name></name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CETUS_CLIENT_PWD</name></expr>:</case>
        <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>new_pass</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    <case>case <expr><name>CETUS_SERVER_PWD</name></expr>:</case>
        <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>new_pass</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    <default>default:</default>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pwd_pair_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pwd_pair_t</name></name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pwd</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>cetus_users_t</name> <modifier>*</modifier></type>
<name>cetus_users_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>cetus_users_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name> <operator>=</operator> <call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>, <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>pwd_pair_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>users</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cetus_users_free</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>users</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>users</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_users_set_records</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>, <parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>new_records</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name> <operator>=</operator> <name>new_records</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>cetus_users_parse_json</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">":json syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>success</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>user_records</name> <init>= <expr><call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>,
                                                     <argument><expr><name>g_free</name></expr></argument>, <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>pwd_pair_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>users_node</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"users"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>user_node</name> <init>= <expr><ternary><condition><expr><name>users_node</name></expr> ?</condition><then> <expr><name><name>users_node</name><operator>-&gt;</operator><name>child</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>user_node</name></expr>;</condition> <incr><expr><name>user_node</name> <operator>=</operator> <name><name>user_node</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>username</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>user_node</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>username</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">":user conf error, no username"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>client_pwd</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>user_node</name></expr></argument>, <argument><expr><literal type="string">"client_pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>server_pwd</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>user_node</name></expr></argument>, <argument><expr><literal type="string">"server_pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>client_pwd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>server_pwd</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">":user conf error, at least one of client/server is needed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>client_pwd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>server_pwd</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>server_pwd</name> <operator>=</operator> <name>client_pwd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>client_pwd</name> <operator>&amp;&amp;</operator> <name>server_pwd</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>client_pwd</name> <operator>=</operator> <name>server_pwd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>user_records</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>username</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>pwd_pair_new</name><argument_list>(<argument><expr><name><name>client_pwd</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><name><name>server_pwd</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>success</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
  <label><name>out</name>:</label>
    <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_users_set_records</name><argument_list>(<argument><expr><name>users</name></expr></argument>, <argument><expr><name>user_records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name>user_records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>cetus_users_read_json</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>, <parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>refresh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>users</name><operator>-&gt;</operator><name>conf_manager</name></name> <operator>=</operator> <name>conf</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>chassis_config_query_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"users"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>refresh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>success</name> <init>= <expr><call><name>cetus_users_parse_json</name><argument_list>(<argument><expr><name>users</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"read %d users"</literal></expr></argument>, <argument><expr><call><name>g_hash_table_size</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>cetus_users_update_record</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cetus_pwd_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pwd_pair_t</name></name> <modifier>*</modifier></type><name>pwd</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pwd</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>pwd_pair_same_pwd</name><argument_list>(<argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pwd_pair_set_pwd</name><argument_list>(<argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pwd_pair_new</name><argument_list>(<argument><expr><name>pass</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"update user: %s"</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>cetus_users_delete_record</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>found</name> <init>= <expr><call><name>g_hash_table_remove</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"delete user: %s"</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>cetus_users_write_json</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>users_node</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>users_node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">":users_node is nil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pwd_pair_t</name></name> <modifier>*</modifier></type><name>pwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_hash_table_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>g_hash_table_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name>username</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name>pwd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"client_pwd"</literal></expr></argument>, <argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"server_pwd"</literal></expr></argument>, <argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>users_node</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"users"</literal></expr></argument>, <argument><expr><name>users_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>json_str</name> <init>= <expr><call><name>cJSON_Print</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>chassis_config_write_object</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>conf_manager</name></name></expr></argument>, <argument><expr><literal type="string">"users"</literal></expr></argument>, <argument><expr><name>json_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>json_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>json_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>cetus_users_authenticate_client</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>,
                                <parameter><decl><type><name>network_mysqld_auth_challenge</name> <modifier>*</modifier></type><name>challenge</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_auth_response</name> <modifier>*</modifier></type><name>response</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user_name</name> <init>= <expr><name><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>pwd_pair_t</name></name> <modifier>*</modifier></type><name>pwd</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"pwd is null for user:%s"</literal></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* term 2: user_name and password must in frontend users/passwords */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pwd</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>sha1_pwd</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_password_hash</name><argument_list>(<argument><expr><name>sha1_pwd</name></expr></argument>, <argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>expected_response</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_password_scramble</name><argument_list>(<argument><expr><name>expected_response</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>challenge</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>sha1_pwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>response</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><name>expected_response</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>expected_response</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>sha1_pwd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>expected_response</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>sha1_pwd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cetus_users_get_hashed_pwd</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cetus_pwd_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>sha1pwd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CETUS_CLIENT_PWD</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_users_get_hashed_client_pwd</name><argument_list>(<argument><expr><name>users</name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>, <argument><expr><name>sha1pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>CETUS_SERVER_PWD</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_users_get_hashed_server_pwd</name><argument_list>(<argument><expr><name>users</name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>, <argument><expr><name>sha1pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cetus_users_get_hashed_client_pwd</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>sha1_pwd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pwd_pair_t</name></name> <modifier>*</modifier></type><name>pwd</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pwd</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_proto_password_hash</name><argument_list>(<argument><expr><name>sha1_pwd</name></expr></argument>, <argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cetus_users_get_hashed_server_pwd</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>sha1_pwd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pwd_pair_t</name></name> <modifier>*</modifier></type><name>pwd</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pwd</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_proto_password_hash</name><argument_list>(<argument><expr><name>sha1_pwd</name></expr></argument>, <argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cetus_users_get_server_pwd</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>res_pwd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pwd_pair_t</name></name> <modifier>*</modifier></type><name>pwd</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pwd</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name>res_pwd</name></expr></argument>, <argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>cetus_users_contains</name><parameter_list>(<parameter><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><ternary><condition><expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

</unit>
