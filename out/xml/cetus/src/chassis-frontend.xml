<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/chassis-frontend.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNISTD_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gmodule.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-frontend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-plugin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-keyfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-filemode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options-utils.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * initialize the basic components of the chassis
 */</comment>
<function><type><name>int</name></type>
<name>chassis_frontend_init_glib</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>check_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    g_mem_set_vtable(glib_mem_profiler_table);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GLIB_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"the glib header is too old, need at least 2.6.0, got: %d.%d.%d"</literal></expr></argument>,
                   <argument><expr><name>GLIB_MAJOR_VERSION</name></expr></argument>, <argument><expr><name>GLIB_MINOR_VERSION</name></expr></argument>, <argument><expr><name>GLIB_MICRO_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>check_str</name> <operator>=</operator> <call><name>glib_check_version</name><argument_list>(<argument><expr><name>GLIB_MAJOR_VERSION</name></expr></argument>, <argument><expr><name>GLIB_MINOR_VERSION</name></expr></argument>, <argument><expr><name>GLIB_MICRO_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>check_str</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s, got: lib=%d.%d.%d, headers=%d.%d.%d"</literal></expr></argument>,
                   <argument><expr><name>check_str</name></expr></argument>,
                   <argument><expr><name>glib_major_version</name></expr></argument>, <argument><expr><name>glib_minor_version</name></expr></argument>, <argument><expr><name>glib_micro_version</name></expr></argument>,
                   <argument><expr><name>GLIB_MAJOR_VERSION</name></expr></argument>, <argument><expr><name>GLIB_MINOR_VERSION</name></expr></argument>, <argument><expr><name>GLIB_MICRO_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_module_supported</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"loading modules is not supported on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GLIB_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">32</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* GLIB below 2.32 must call thread_init */</comment>
    <expr_stmt><expr><call><name>g_thread_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * setup and check the basedir if nessesary
 */</comment>
<function><type><name>int</name></type>
<name>chassis_frontend_init_basedir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prg_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_base_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base_dir</name> <init>= <expr><operator>*</operator><name>_base_dir</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>base_dir</name></expr>)</condition> <block>{<block_content>             <comment type="block">/* basedir is already known, check if it is absolute */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_path_is_absolute</name><argument_list>(<argument><expr><name>base_dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: --basedir option must be an absolute path, but was %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* find our installation directory if no basedir was given
     * this is necessary for finding files when we daemonize
     */</comment>
    <expr_stmt><expr><name>base_dir</name> <operator>=</operator> <call><name>chassis_get_basedir</name><argument_list>(<argument><expr><name>prg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>base_dir</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to get base directory"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>_base_dir</name> <operator>=</operator> <name>base_dir</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>
<name>chassis_frontend_init_plugin_dir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_plugin_dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>plugin_dir</name> <init>= <expr><operator>*</operator><name>_plugin_dir</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>plugin_dir</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>plugin_dir</name> <operator>=</operator> <call><name>g_build_filename</name><argument_list>(<argument><expr><name>base_dir</name></expr></argument>, <argument><expr><literal type="string">"lib"</literal></expr></argument>, <argument><expr><name>PACKAGE</name></expr></argument>, <argument><expr><literal type="string">"plugins"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>_plugin_dir</name> <operator>=</operator> <name>plugin_dir</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>chassis_frontend_load_plugins</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>plugins</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>plugin_dir</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>plugin_names</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* load the plugins */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plugin_names</name> <operator>&amp;&amp;</operator> <name><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G_MODULE_PREFIX</name></cpp:macro> <cpp:value>"lib"</cpp:value></cpp:define>
        <comment type="block">/* we have to hack around some glib distributions that
         * don't set the correct G_MODULE_SUFFIX, notably MacPorts
         */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHARED_LIBRARY_SUFFIX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARED_LIBRARY_SUFFIX</name></cpp:macro> <cpp:value>G_MODULE_SUFFIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>plugin_filename</name></decl>;</decl_stmt>
        <comment type="block">/* skip trying to load a plugin when the parameter was --plugins=
           that will never work...
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>plugin_filename</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s%c%s%s.%s"</literal></expr></argument>,
                                          <argument><expr><name>plugin_dir</name></expr></argument>,
                                          <argument><expr><name>G_DIR_SEPARATOR</name></expr></argument>, <argument><expr><name>G_MODULE_PREFIX</name></expr></argument>, <argument><expr><name><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>SHARED_LIBRARY_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>chassis_plugin_load</name><argument_list>(<argument><expr><name>plugin_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>plugin_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"setting --plugin-dir=&lt;dir&gt; might help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>option_grp_name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>plugins</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>chassis_frontend_init_plugins</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>plugins</name></decl></parameter>,
                              <parameter><decl><type><name>chassis_options_t</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>config_manager</name></decl></parameter>,
                              <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc_p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv_p</name></decl></parameter>,
                              <parameter><decl><type><name>GKeyFile</name> <modifier>*</modifier></type><name>keyfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyfile_section_name</name></decl></parameter>, <parameter><decl><type><name>GError</name> <modifier>*</modifier><modifier>*</modifier></type><name>gerr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>plugins</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>config_entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>plugins</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>config_entries</name> <operator>=</operator> <call><name>chassis_plugin_get_options</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>chassis_options_add_options</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>config_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>FALSE</name> <operator>==</operator> <call><name>chassis_options_parse_cmdline</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>argc_p</name></expr></argument>, <argument><expr><name>argv_p</name></expr></argument>, <argument><expr><name>gerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* parse the new options */</comment>
            <if_stmt><if>if <condition>(<expr><name>keyfile</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>FALSE</name> <operator>==</operator> <call><name>chassis_keyfile_to_options_with_error</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>keyfile_section_name</name></expr></argument>, <argument><expr><name>config_entries</name></expr></argument>, <argument><expr><name>gerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* Load from remote config first */</comment>
            <if_stmt><if>if <condition>(<expr><name>config_manager</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>chassis_config_parse_options</name><argument_list>(<argument><expr><name>config_manager</name></expr></argument>, <argument><expr><name>config_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>chassis_frontend_init_base_options</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc_p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv_p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>print_version</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>config_file</name></decl></parameter>, <parameter><decl><type><name>GError</name> <modifier>*</modifier><modifier>*</modifier></type><name>gerr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_options_t</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>chassis_options_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>chassis_options_set_cmdline_only_options</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>print_version</name></expr></argument>, <argument><expr><name>config_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>ignore_unknown</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>FALSE</name> <operator>==</operator> <call><name>chassis_options_parse_cmdline</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>argc_p</name></expr></argument>, <argument><expr><name>argv_p</name></expr></argument>, <argument><expr><name>gerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>chassis_options_free</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GKeyFile</name> <modifier>*</modifier></type>
<name>chassis_frontend_open_config_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>GError</name> <modifier>*</modifier><modifier>*</modifier></type><name>gerr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GKeyFile</name> <modifier>*</modifier></type><name>keyfile</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>chassis_filemode_check_full</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>CHASSIS_FILEMODE_SECURE_MASK</name></expr></argument>, <argument><expr><name>gerr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>keyfile</name> <operator>=</operator> <call><name>g_key_file_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_key_file_set_list_separator</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>FALSE</name> <operator>==</operator> <call><name>g_key_file_load_from_file</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>G_KEY_FILE_NONE</name></expr></argument>, <argument><expr><name>gerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_key_file_free</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>keyfile</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * setup the options that can only appear on the command-line
 */</comment>
<function><type><name>int</name></type>
<name>chassis_options_set_cmdline_only_options</name><parameter_list>(<parameter><decl><type><name>chassis_options_t</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>print_version</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>config_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><name>print_version</name></expr></argument>, <argument><expr><literal type="string">"Show version"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"defaults-file"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><name>config_file</name></expr></argument>, <argument><expr><literal type="string">"configuration file"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;file&gt;"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>chassis_frontend_print_version</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * allow to pass down a build-tag at build-time
     * which gets hard-coded into the binary
     */</comment>
    <expr_stmt><expr><call><name>g_print</name><argument_list>(<argument><expr><literal type="string">"  %s\n"</literal></expr></argument>, <argument><expr><name>PACKAGE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHASSIS_BUILD_TAG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>g_print</name><argument_list>(<argument><expr><literal type="string">"  build: %s\n"</literal></expr></argument>, <argument><expr><name>CHASSIS_BUILD_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>g_print</name><argument_list>(<argument><expr><literal type="string">"  glib2: %d.%d.%d\n"</literal></expr></argument>, <argument><expr><name>GLIB_MAJOR_VERSION</name></expr></argument>, <argument><expr><name>GLIB_MINOR_VERSION</name></expr></argument>, <argument><expr><name>GLIB_MICRO_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_print</name><argument_list>(<argument><expr><literal type="string">"  libevent: %s\n"</literal></expr></argument>, <argument><expr><call><name>event_get_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>chassis_frontend_print_plugin_versions</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>plugins</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_print</name><argument_list>(<argument><expr><literal type="string">"-- modules\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>plugins</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>plugins</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>g_print</name><argument_list>(<argument><expr><literal type="string">"  %s: %s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * log the versions of the initialized plugins
 */</comment>
<function><type><name>int</name></type>
<name>chassis_frontend_log_plugin_versions</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>plugins</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>plugins</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>plugins</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"plugin %s %s started"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>chassis_frontend_write_pidfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pid_file</name></decl></parameter>, <parameter><decl><type><name>GError</name> <modifier>*</modifier><modifier>*</modifier></type><name>gerr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>pid_str</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * write the PID file
     */</comment>

    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>pid_file</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>,
                    <argument><expr><name>G_FILE_ERROR</name></expr></argument>,
                    <argument><expr><call><name>g_file_error_from_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s: open(%s) failed: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>pid_file</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pid_str</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>pid_str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pid_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>,
                    <argument><expr><name>G_FILE_ERROR</name></expr></argument>,
                    <argument><expr><call><name>g_file_error_from_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"%s: write(%s) of %s failed: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>pid_file</name></expr></argument>, <argument><expr><name>pid_str</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>pid_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
