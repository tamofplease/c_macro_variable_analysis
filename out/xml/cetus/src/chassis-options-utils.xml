<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/chassis-options-utils.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-timings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options-utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-plugin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-sql-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-backend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib-ext.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_verbose_shutdown</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>verbose_shutdown</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>verbose_shutdown</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type> <name>show_daemon_mode</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>daemon_mode</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>daemon_mode</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_user</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>user</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>user</name></name></expr></then><else>:<expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_basedir</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>base_dir</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>base_dir</name></name></expr></then><else>:<expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>base_dir</name></name></expr>)</condition> <block>{<block_content>
           <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>base_dir</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_confdir</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>conf_dir</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>conf_dir</name></name></expr></then><else>:<expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>conf_dir</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>conf_dir</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_pidfile</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>pid_file</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>pid_file</name></name></expr></then><else>:<expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>pid_file</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>pid_file</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_plugindir</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>plugin_dir</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>plugin_dir</name></name></expr></then><else>:<expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>plugin_dir</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>plugin_dir</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_plugins</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>free_str</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>srv</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr> ?</condition><then> <expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>free_str</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>srv</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_log_level</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>log_level</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>log_level</name></name></expr></then><else>:<expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>log_level</name></name></expr>)</condition> <block>{<block_content>
             <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>log_level</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_log_level</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>chassis_log_set_level</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>log_level</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>log_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>log_level</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_log_file</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>log_filename</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>log_filename</name></name></expr></then><else>:<expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>log_filename</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>log_filename</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_log_xa_file</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>log_xa_filename</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr></then><else>:<expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_log_backtrace_on_crash</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>invoke_dbg_on_crash</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr></then><else>:<expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SIGACTION</name></cpp:ifdef>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>invoke_dbg_on_crash</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr></then><else>:<expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>invoke_dbg_on_crash</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>NULL</name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_max_open_files</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_files_number</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>max_files_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_files_number</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_default_charset</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_default_charset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_default_username</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_default_username</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>gint</name></type> <name>count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>gint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>backend</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_username</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_username</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_default_db</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>default_db</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_default_db</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>default_db</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>gint</name></type> <name>count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>gint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>backend</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_ifname</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>ifname</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>ifname</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>ifname</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>ifname</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_ifname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>ifname</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>ifname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>ifname</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_default_pool_size</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name> <operator>==</operator> <name>DEFAULT_POOL_SIZE</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_default_pool_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>DEFAULT_POOL_SIZE</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>value</name> <operator>=</operator> <name>DEFAULT_POOL_SIZE</name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>back_num</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>loop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;</operator> <name>back_num</name></expr>;</condition> <incr><expr><name>loop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>mid_idle_connections</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name></expr>;</expr_stmt>
                        </block_content>}</block></for>
                        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_max_pool_size</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_idle_connections</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>==</operator> <name><name>srv</name><operator>-&gt;</operator><name>max_idle_connections</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_idle_connections</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_max_pool_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>max_idle_connections</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>max_idle_connections</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>back_num</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>loop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;</operator> <name>back_num</name></expr>;</condition> <incr><expr><name>loop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>max_idle_connections</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>max_idle_connections</name></name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_worker_processes</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_worker_processes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>MAX_WORK_PROCESSES</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name> <operator>=</operator> <name>MAX_WORK_PROCESSES</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_max_resp_len</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_resp_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>==</operator> <name><name>srv</name><operator>-&gt;</operator><name>max_resp_len</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_resp_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_max_resp_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>max_resp_len</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_max_alive_time</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d (s)"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_alive_time</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>max_alive_time</name></name> <operator>==</operator> <name>DEFAULT_LIVE_TIME</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_alive_time</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_max_alive_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>max_alive_time</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_merged_output_size</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>merged_output_size</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>merged_output_size</name></name> <operator>==</operator> <literal type="number">8192</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>merged_output_size</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_merged_output_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>merged_output_size</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>compressed_merged_output_size</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>merged_output_size</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_max_header_size</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_header_size</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>max_header_size</name></name> <operator>==</operator> <literal type="number">65536</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_header_size</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_max_header_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>max_header_size</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_worker_id</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>guid_state</name><operator>.</operator><name>worker_id</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>guid_state</name><operator>.</operator><name>worker_id</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_disable_threads</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>disable_threads</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>disable_threads</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_enable_back_compress</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>is_back_compressed</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>is_back_compressed</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_enable_client_compress</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>compress_support</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>compress_support</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_check_slave_delay</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>check_slave_delay</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>srv</name><operator>-&gt;</operator><name>check_slave_delay</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_slave_delay_down</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf (s)"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_slave_delay_down</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gdouble</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_double_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_slave_delay_recover</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf (s)"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>==</operator> <name><name>srv</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_slave_delay_recover</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gdouble</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_double_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>&lt;</operator> <name><name>srv</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name></expr> ?</condition><then> <expr><name>value</name></expr></then><else>:<expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name></expr></else></ternary></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_default_query_cache_timeout</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d (ms)"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_query_cache_timeout</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>default_query_cache_timeout</name></name> <operator>==</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_query_cache_timeout</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_default_query_cache_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>default_query_cache_timeout</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_default_maintained_client_idle_timeout</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d (s)"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>maintained_client_idle_timeout</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>maintained_client_idle_timeout</name></name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>maintained_client_idle_timeout</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_default_maintained_client_idle_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>maintained_client_idle_timeout</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_default_client_idle_timeout</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d (s)"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>client_idle_timeout</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>client_idle_timeout</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>*</operator> <name>HOURS</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>client_idle_timeout</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_default_incomplete_tran_idle_timeout</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d (s)"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>incomplete_tran_idle_timeout</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>incomplete_tran_idle_timeout</name></name> <operator>==</operator> <literal type="number">3600</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>incomplete_tran_idle_timeout</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_default_client_idle_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>client_idle_timeout</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_default_incomplete_tran_idle_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>incomplete_tran_idle_timeout</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>gchar</name><modifier>*</modifier></type> <name>show_long_query_time</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d (ms)"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>long_query_time</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>long_query_time</name></name> <operator>==</operator> <name>MAX_QUERY_TIME</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>long_query_time</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_long_query_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>long_query_time</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_enable_client_found_rows</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>client_found_rows</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>client_found_rows</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_reduce_connections</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>is_reduce_conns</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>is_reduce_conns</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_enable_query_cache</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>query_cache_enabled</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>query_cache_enabled</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_enable_fast_stream</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>is_fast_stream_enabled</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>is_fast_stream_enabled</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_enable_partition</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_check_sql_loosely</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>check_sql_loosely</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>check_sql_loosely</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_enable_sql_special_processed</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>is_sql_special_processed</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>is_sql_special_processed</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_enable_tcp_stream</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>is_tcp_stream_enabled</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>is_tcp_stream_enabled</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_log_xa_in_detail</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>xa_log_detailed</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>xa_log_detailed</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_disable_dns_cache</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>disable_dns_cache</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>disable_dns_cache</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_master_preferred</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>master_preferred</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>master_preferred</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_max_allowed_packet</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>cetus_max_allowed_packet</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>cetus_max_allowed_packet</name></name> <operator>==</operator> <name>MAX_ALLOWED_PACKET_DEFAULT</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>cetus_max_allowed_packet</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_max_allowed_packet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>cetus_max_allowed_packet</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_remote_conf_url</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>remote_config_url</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>remote_config_url</name></name></expr></then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_trx_isolation_level</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>srv</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr></then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_group_replication_mode</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>group_replication_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>group_replication_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>group_replication_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_group_replication</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>value</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>group_replication_mode</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>chassis_options_save</name><parameter_list>(<parameter><decl><type><name>GKeyFile</name> <modifier>*</modifier></type><name>keyfile</name></decl></parameter>, <parameter><decl><type><name>chassis_options_t</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>chassis</name>  <modifier>*</modifier></type><name>chas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>effected_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>node</name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>options</name></name></expr>;</init> <condition><expr><name>node</name></expr>;</condition> <incr><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_option_t</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>show_hook</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>opt_property</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>external_param</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name> <operator>=</operator> <name>SAVE_OPTS_PROPERTY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name> <operator>=</operator> <name>chas</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>show_hook</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>opt</name><operator>-&gt;</operator><name>show_hook</name></name><argument_list>(<argument><expr><name>opt_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_key_file_set_value</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><literal type="string">"cetus"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>effected_rows</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>opt_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>effected_rows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_sql_log_bufsize</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_bufsize</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_sql_log_switch</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>ON</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>REALTIME</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"REALTIME"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"OFF"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_sql_log_switch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_VALUE_INVALID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><literal type="string">"REALTIME"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>=</operator> <name>REALTIME</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><literal type="string">"OFF"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type> <name>show_sql_log_prefix</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_prefix</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_prefix</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CHASSIS_API</name> <name>gchar</name><modifier>*</modifier></type> <name>show_sql_log_path</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_path</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type> <name>show_sql_log_maxsize</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%u M"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_maxsize</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_maxsize</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type> <name>show_sql_log_mode</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>==</operator> <name>CLIENT</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"CLIENT"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>==</operator> <name>BACKEND</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"BACKEND"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>==</operator> <name>ALL</name></expr>)</condition><block>{<block_content>
            <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>==</operator> <name>CONNECT</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"CONNECT"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>==</operator> <name>FRONT</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"FRONT"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_sql_log_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_VALUE_INVALID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><literal type="string">"CLIENT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>=</operator> <name>CLIENT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><literal type="string">"BACKEND"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>=</operator> <name>BACKEND</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>=</operator> <name>ALL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><literal type="string">"CONNECT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>=</operator> <name>CONNECT</name></expr>;</expr_stmt>
            <return>return <expr><name>ASSIGN_OK</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><literal type="string">"FRONT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>=</operator> <name>FRONT</name></expr>;</expr_stmt>
            <return>return <expr><name>ASSIGN_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_sql_log_idletime</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%u (ms)"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_idletime</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_idletime</name></name> <operator>==</operator> <name>SQL_LOG_DEF_IDLETIME</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_idletime</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_sql_log_idletime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>guint</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_idletime</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_sql_log_maxnum</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_maxnum</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_maxnum</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_maxnum</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>assign_sql_log_maxnum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_maxnum</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_check_dns</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>check_dns</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>check_dns</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_ssl</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>ssl</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
