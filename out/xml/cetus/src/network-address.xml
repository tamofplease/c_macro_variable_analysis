<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/network-address.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_TYPES_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include> <comment type="block" format="doxygen">/** inet_ntoa */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>

<function><type><name>network_address</name> <modifier>*</modifier></type>
<name>network_address_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_address</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_address</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: create socket name %p successful for add:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_address_free</name><parameter_list>(<parameter><decl><type><name>network_address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * if the name we're freeing starts with a '/', we're
     * looking at a unix socket which needs to be removed
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>can_unlink_socket</name></name> <operator>==</operator> <name>TRUE</name> <operator>&amp;&amp;</operator> <name><name>addr</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>g_remove</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: removing socket %s successful"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EPERM</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EACCES</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: removing socket %s failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_address_reset</name><parameter_list>(<parameter><decl><type><name>network_address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>network_address_set_address_ip</name><parameter_list>(<parameter><decl><type><name>network_address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>port</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: illegal value %u for port, only 1 ... 65535 allowed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>address</name> <operator>||</operator> <name><name>address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* no ip */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
        <comment type="block">/* disabled as it breaks the default behaviour on FreeBSD and windows
         *
         * FreeBSD doesn't do IPv6+IPv4 sockets by default, other unixes do.
         * while we could change that to with setsockopt(..., IPV6_V6ONLY, ...)
         * it should be fixed by adding support for multiple sockets instead.
         */</comment>
        struct in6_addr addr6 = IN6ADDR_ANY_INIT;

        memset(&amp;addr-&gt;addr.ipv6, 0, sizeof(struct sockaddr_in6));

        addr-&gt;addr.ipv6.sin6_addr = addr6;
        addr-&gt;addr.ipv6.sin6_family = AF_INET6;
        addr-&gt;addr.ipv6.sin6_port = htons(port);
        addr-&gt;len = sizeof(struct sockaddr_in6);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>INADDR_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>   <comment type="block">/* "default" family */</comment>
        <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* that's any IPv4 address, so bind to IPv4-any only */</comment>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>INADDR_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>   <comment type="block">/* "default" family */</comment>
        <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_GETADDRINFO</name></cpp:ifdef>
        <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>first_ai</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hint</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

        <comment type="block">/* AI_ADDRCONFIG filters out ::1 and link-local addresses if there is no
         * global IPv6 address assigned to the local interfaces
         *
         * 1) try to resolve with ADDRCONFIG
         * 2) if 1) fails, try without ADDRCONFIG
         *
         * this should handle DNS problems where
         * - only IPv4 is configured, but DNS returns IPv6 records + IPv4 and 
         *   we would pick IPv6 (and fail)
         * - 
         */</comment>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_ADDRCONFIG</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first_ai</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(
                   <comment type="block">/* FreeBSD doesn't provide EAI_ADDRFAMILY (since 2003) */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EAI_ADDRFAMILY</name></cpp:ifdef>
                   <expr><name>EAI_ADDRFAMILY</name> <operator>==</operator> <name>ret</name> <operator>||</operator> <comment type="block">/* AI_ADDRCONFIG with a non-global address */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                   <name>EAI_BADFLAGS</name> <operator>==</operator> <name>ret</name></expr>)</condition> <block>{<block_content>   <comment type="block">/* AI_ADDRCONFIG isn't supported */</comment>
                <if_stmt><if>if <condition>(<expr><name>first_ai</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>first_ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>first_ai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AI_ADDRCONFIG</name></expr>;</expr_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first_ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"getaddrinfo(\"%s\") failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                <comment type="block">/* bogus, just to make it explicit */</comment>

        <for>for <control>(<init><expr><name>ai</name> <operator>=</operator> <name>first_ai</name></expr>;</init> <condition><expr><name>ai</name></expr>;</condition> <incr><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>PF_INET6</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv6</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

                <break>break;</break>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>family</name> <operator>==</operator> <name>PF_INET</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>ai</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* no matching address-info found */</comment>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: %s:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>first_ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>he</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>he</name><operator>-&gt;</operator><name>h_addrtype</name></name> <operator>==</operator> <name>AF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>he</name><operator>-&gt;</operator><name>h_length</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>h_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_GETADDRINFO */</comment>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>network_address_refresh_name</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>network_address_set_address_un</name><parameter_list>(<parameter><decl><type><name>network_address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"unix-path is too long: %s"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>un</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_address_refresh_name</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * translate a address-string into a network_address structure
 *
 * - if the address contains a colon we assume IPv4, 
 *   - ":3306" -&gt; (tcp) "0.0.0.0:3306"
 * - if it starts with a / it is a unix-domain socket 
 *   - "/tmp/socket" -&gt; (unix) "/tmp/socket"
 *
 * @param addr     the address-struct
 * @param address  the address string
 * @return 0 on success, -1 otherwise
 */</comment>
<function><type><name>gint</name></type>
<name>network_address_set_address</name><parameter_list>(<parameter><decl><type><name>network_address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>port_part</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ip_part</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* split the address:port */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>network_address_set_address_un</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>s</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>address</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* may be NULL for strdup(..., 0) */</comment>
        <expr_stmt><expr><name>ip_part</name> <operator>=</operator> <call><name>g_strndup</name><argument_list>(<argument><expr><name>address</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name> <operator>-</operator> <operator>(</operator><name>address</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>port_part</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>port_part</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* may be NULL for strdup(..., 0) */</comment>
        <expr_stmt><expr><name>ip_part</name> <operator>=</operator> <call><name>g_strndup</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port_part</name> <operator>-</operator> <name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>port_part</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ip_part</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* if there is a colon, there should be a port number */</comment>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>port_part</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint</name></type> <name>port</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>port_part</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port_err</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>port_part</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: IP-addr in the form [&lt;ip&gt;][:&lt;port&gt;], is '%s'. No port"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>port_err</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: IP-addr in the form [&lt;ip&gt;][:&lt;port&gt;], is '%s'. port at '%s'"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>port_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_address_set_address_ip</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ip_part</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* perhaps it is a plain IP address, lets add the default-port */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_address_set_address_ip</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ip_part</name></expr></argument>, <argument><expr><literal type="number">3306</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>ip_part</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ip_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GQuark</name></type>
<name>network_address_error</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>g_quark_from_static_string</name><argument_list>(<argument><expr><literal type="string">"network-address-error"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INET_NTOP</name></cpp:ifdef>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type>
<name>network_address_tostring_inet_ntop</name><parameter_list>(<parameter><decl><type><name>network_address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>gsize</name> <modifier>*</modifier></type><name>dst_len</name></decl></parameter>, <parameter><decl><type><name>GError</name> <modifier>*</modifier><modifier>*</modifier></type><name>gerr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr_str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gsize</name></type> <name>initial_dst_len</name> <init>= <expr><operator>*</operator><name>dst_len</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* resolve the peer-addr if we haven't done so yet */</comment>
    <switch>switch <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>AF_INET</name></expr>:</case>
        <expr_stmt><expr><name>addr_str</name> <operator>=</operator> <call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>dst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>addr_str</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ENOSPC</name> <operator>==</operator> <name>errno</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>,
                            <argument><expr><name>NETWORK_ADDRESS_ERROR</name></expr></argument>,
                            <argument><expr><name>NETWORK_ADDRESS_ERROR_DST_TOO_SMALL</name></expr></argument>,
                            <argument><expr><literal type="string">"inet_ntop() failed: %s (%d)"</literal></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>,
                            <argument><expr><name>NETWORK_ADDRESS_ERROR</name></expr></argument>,
                            <argument><expr><name>NETWORK_ADDRESS_ERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"inet_ntop() failed: %s (%d)"</literal></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>dst_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>addr_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>addr_str</name></expr>;</return>
    <case>case <expr><name>AF_INET6</name></expr>:</case>
        <expr_stmt><expr><name>addr_str</name> <operator>=</operator> <call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>dst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>addr_str</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ENOSPC</name> <operator>==</operator> <name>errno</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>,
                            <argument><expr><name>NETWORK_ADDRESS_ERROR</name></expr></argument>,
                            <argument><expr><name>NETWORK_ADDRESS_ERROR_DST_TOO_SMALL</name></expr></argument>,
                            <argument><expr><literal type="string">"inet_ntop() failed: %s (%d)"</literal></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>,
                            <argument><expr><name>NETWORK_ADDRESS_ERROR</name></expr></argument>,
                            <argument><expr><name>NETWORK_ADDRESS_ERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"inet_ntop() failed: %s (%d)"</literal></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>dst_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>addr_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <return>return <expr><name>addr_str</name></expr>;</return>
    <case>case <expr><name>AF_UNIX</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><name>dst_len</name> <operator>=</operator> <call><name>g_strlcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><operator>*</operator><name>dst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dst_len</name> <operator>&gt;=</operator> <name>initial_dst_len</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* g_strlcpy() got overrun */</comment>
            <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>, <argument><expr><name>NETWORK_ADDRESS_ERROR</name></expr></argument>, <argument><expr><name>NETWORK_ADDRESS_ERROR_DST_TOO_SMALL</name></expr></argument>, <argument><expr><literal type="string">"dst too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* g_strlcpy() returns the size without \0, we return the size with \0 */</comment>
        <expr_stmt><expr><operator>*</operator><name>dst_len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <return>return <expr><name>dst</name></expr>;</return>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>,
                    <argument><expr><name>NETWORK_ADDRESS_ERROR</name></expr></argument>,
                    <argument><expr><name>NETWORK_ADDRESS_ERROR_INVALID_ADDRESS_FAMILY</name></expr></argument>,
                    <argument><expr><literal type="string">"can't convert a address of family '%d' into a string"</literal></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block" format="doxygen">/**
 * resolve a struct sockaddr into a string 
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type>
<name>network_address_tostring_inet_ntoa</name><parameter_list>(<parameter><decl><type><name>network_address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>gsize</name> <modifier>*</modifier></type><name>dst_len</name></decl></parameter>, <parameter><decl><type><name>GError</name> <modifier>*</modifier><modifier>*</modifier></type><name>gerr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr_str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gsize</name></type> <name>initial_dst_len</name> <init>= <expr><operator>*</operator><name>dst_len</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* resolve the peer-addr if we haven't done so yet */</comment>
    <switch>switch <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>AF_INET</name></expr>:</case>
        <expr_stmt><expr><name>addr_str</name> <operator>=</operator> <call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>addr_str</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>, <argument><expr><name>NETWORK_ADDRESS_ERROR</name></expr></argument>, <argument><expr><name>NETWORK_ADDRESS_ERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"inet_ntoa() failed: %d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>dst_len</name> <operator>=</operator> <call><name>g_strlcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>addr_str</name></expr></argument>, <argument><expr><operator>*</operator><name>dst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>dst</name></expr>;</return>
    <case>case <expr><name>AF_UNIX</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><name>dst_len</name> <operator>=</operator> <call><name>g_strlcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><operator>*</operator><name>dst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dst_len</name> <operator>&gt;=</operator> <name>initial_dst_len</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* g_strlcpy() got overrun */</comment>
            <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>, <argument><expr><name>NETWORK_ADDRESS_ERROR</name></expr></argument>, <argument><expr><name>NETWORK_ADDRESS_ERROR_DST_TOO_SMALL</name></expr></argument>, <argument><expr><literal type="string">"dst too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* g_strlcpy() returns the size without \0, we return the size with \0 */</comment>
        <expr_stmt><expr><operator>*</operator><name>dst_len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <return>return <expr><name>dst</name></expr>;</return>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>,
                    <argument><expr><name>NETWORK_ADDRESS_ERROR</name></expr></argument>,
                    <argument><expr><name>NETWORK_ADDRESS_ERROR_INVALID_ADDRESS_FAMILY</name></expr></argument>,
                    <argument><expr><literal type="string">"can't convert a address of family '%d' into a string"</literal></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>network_address_tostring</name><parameter_list>(<parameter><decl><type><name>network_address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>gsize</name> <modifier>*</modifier></type><name>dst_len</name></decl></parameter>, <parameter><decl><type><name>GError</name> <modifier>*</modifier><modifier>*</modifier></type><name>gerr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr_str</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>, <argument><expr><name>NETWORK_ADDRESS_ERROR</name></expr></argument>, <argument><expr><name>NETWORK_ADDRESS_ERROR_INVALID</name></expr></argument>, <argument><expr><literal type="string">"dst is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dst_len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>, <argument><expr><name>NETWORK_ADDRESS_ERROR</name></expr></argument>, <argument><expr><name>NETWORK_ADDRESS_ERROR_INVALID</name></expr></argument>, <argument><expr><literal type="string">"dst_len is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INET_NTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>addr_str</name> <operator>=</operator> <call><name>network_address_tostring_inet_ntop</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_len</name></expr></argument>, <argument><expr><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>addr_str</name> <operator>=</operator> <call><name>network_address_tostring_inet_ntoa</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_len</name></expr></argument>, <argument><expr><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>addr_str</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* gerr is already set, just return NULL */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>network_address_refresh_name</name><parameter_list>(<parameter><decl><type><name>network_address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>gerr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gsize</name></type> <name>buf_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>network_address_tostring</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>gerr</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"[%s]:%d"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv6</name><operator>.</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_address</name> <modifier>*</modifier></type>
<name>network_address_copy</name><parameter_list>(<parameter><decl><type><name>network_address</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>network_address</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>network_address_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>
</unit>
