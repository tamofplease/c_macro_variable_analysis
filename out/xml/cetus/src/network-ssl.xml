<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/network-ssl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/conf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<enum>enum <name>network_ssl_error_t</name> <block>{
    <decl><name>SSL_OK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>SSL_RBIO_BUFFER_FULL</name> <init>= <expr><operator>-</operator><literal type="number">10</literal></expr></init></decl>,
}</block>;</enum>
<struct>struct <name>network_ssl_connection_s</name> <block>{
    <decl_stmt><decl><type><name>SSL</name><modifier>*</modifier></type> <name>ssl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>enum</name> <name>network_ssl_error_t</name></name></type> <name>error</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>SSL_CTX</name> <modifier>*</modifier></type><name>g_ssl_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>network_ssl_info_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSL</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>w</name><operator>=</operator><name>where</name><operator>&amp;</operator> <operator>~</operator><name>SSL_ST_MASK</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>w</name> <operator>&amp;</operator> <name>SSL_ST_CONNECT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>str</name><operator>=</operator><literal type="string">"SSL_connect"</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>w</name> <operator>&amp;</operator> <name>SSL_ST_ACCEPT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>str</name><operator>=</operator><literal type="string">"SSL_accept"</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>str</name><operator>=</operator><literal type="string">"undefined"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>where</name> <operator>&amp;</operator> <name>SSL_CB_LOOP</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><call><name>SSL_state_string_long</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>where</name> <operator>&amp;</operator> <name>SSL_CB_ALERT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>str</name><operator>=</operator><ternary><condition><expr><operator>(</operator><name>where</name> <operator>&amp;</operator> <name>SSL_CB_READ</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">"read"</literal></expr></then><else>:<expr><literal type="string">"write"</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"SSL3 alert %s:%s:%s"</literal></expr></argument>,
                   <argument><expr><name>str</name></expr></argument>,
                   <argument><expr><call><name>SSL_alert_type_string_long</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>SSL_alert_desc_string_long</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>where</name> <operator>&amp;</operator> <name>SSL_CB_EXIT</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:failed in %s"</literal></expr></argument>,
                       <argument><expr><name>str</name></expr></argument>,<argument><expr><call><name>SSL_state_string_long</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:error in %s"</literal></expr></argument>,
                       <argument><expr><name>str</name></expr></argument>,<argument><expr><call><name>SSL_state_string_long</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>network_ssl_clear_error</name><parameter_list>(<parameter><decl><type><name>network_ssl_connection_t</name><modifier>*</modifier></type> <name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while <condition>(<expr><call><name>ERR_peek_error</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"ignoring stale global SSL error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>network_ssl_create_context</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>conf_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>ret</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>g_ssl_context</name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>TLSv1_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>g_ssl_context</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" SSL_CTX_new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* server side options */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><name>SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_MSIE_SSLV2_RSA_PADDING</name></cpp:ifdef>
    <comment type="block">/* this option allow a potential SSL 2.0 rollback (CAN-2005-2969) */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><name>SSL_OP_MSIE_SSLV2_RSA_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_SSLEAY_080_CLIENT_DH_BUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><name>SSL_OP_SSLEAY_080_CLIENT_DH_BUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_TLS_D5_BUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><name>SSL_OP_TLS_D5_BUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_TLS_BLOCK_PADDING_BUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><name>SSL_OP_TLS_BLOCK_PADDING_BUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><name>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_CTRL_CLEAR_OPTIONS</name></cpp:ifdef>
    <comment type="block">/* only in 0.9.8m+ */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_clear_options</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>,
                          <argument><expr><name>SSL_OP_NO_SSLv2</name><operator>|</operator><name>SSL_OP_NO_SSLv3</name><operator>|</operator><name>SSL_OP_NO_TLSv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_NO_COMPRESSION</name></cpp:ifdef>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><name>SSL_OP_NO_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_MODE_RELEASE_BUFFERS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>SSL_CTX_set_mode</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><name>SSL_MODE_RELEASE_BUFFERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_MODE_NO_AUTO_CHAIN</name></cpp:ifdef>
    <expr_stmt><expr><call><name>SSL_CTX_set_mode</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><name>SSL_MODE_NO_AUTO_CHAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>SSL_CTX_set_read_ahead</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* SSL_read clear data on the wire */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><name>SSL_OP_SINGLE_DH_USE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    SSL_CTX_set_info_callback(g_ssl_context, network_ssl_info_callback);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>cert</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>conf_dir</name></expr></argument>, <argument><expr><literal type="string">"server-cert.pem"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>conf_dir</name></expr></argument>, <argument><expr><literal type="string">"server-key.pem"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>SSL_CTX_use_certificate_file</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><name>cert</name></expr></argument> , <argument><expr><name>SSL_FILETYPE_PEM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"server-cert.pem open error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>SSL_CTX_use_PrivateKey_file</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>SSL_FILETYPE_PEM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"server-key.pem open error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g_ssl_context</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>network_ssl_init</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>conf_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100003L</literal></expr></cpp:if>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: OPENSSL_VERSION_NUMBER:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,  <argument><expr><name>OPENSSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>OPENSSL_init_ssl</name><argument_list>(<argument><expr><name>OPENSSL_INIT_LOAD_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" OPENSSL_init_ssl() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * OPENSSL_init_ssl() may leave errors in the error queue
     * while returning success
     */</comment>

    <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: call old ssl fun"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OPENSSL_config</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SSL_library_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_load_error_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>OpenSSL_add_all_algorithms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><call><name>network_ssl_create_context</name><argument_list>(<argument><expr><name>conf_dir</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>network_ssl_create_connection</name><parameter_list>(<parameter><decl><type><name>network_socket</name><modifier>*</modifier></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_ssl_connection_t</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>network_ssl_connection_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSL</name><modifier>*</modifier></type> <name>connection</name> <init>= <expr><call><name>SSL_new</name><argument_list>(<argument><expr><name>g_ssl_context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>connection</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" SSL_new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>BIO</name><modifier>*</modifier></type> <name>rbio</name> <init>= <expr><call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rbio</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" BIO_new() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>BIO</name><modifier>*</modifier></type> <name>wbio</name> <init>= <expr><call><name>BIO_new_fd</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wbio</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" BIO_new_fd() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>SSL_set_bio</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>rbio</name></expr></argument>, <argument><expr><name>wbio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NETWORK_SSL_CLIENT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SSL_set_connect_state</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>SSL_set_accept_state</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <name>connection</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>network_ssl_free_connection</name><parameter_list>(<parameter><decl><type><name>network_socket</name><modifier>*</modifier></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>SSL_writev</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>vector</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <comment type="block">/* Find the total number of bytes to be written.  */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* Allocate a temporary buffer to hold the data.  */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>g_malloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Copy the data into BUFFER.  */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>to_copy</name> <init>= <expr><name>bytes</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>copy</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>, <argument><expr><name>to_copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>bp</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>copy</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>to_copy</name> <operator>-=</operator> <name>copy</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>to_copy</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name> <init>= <expr><call><name>SSL_write</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>written</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_socket_retval_t</name></type>
<name>network_ssl_write</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>send_chunks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>send_chunks</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>network_queue</name><modifier>*</modifier></type> <name>send_queue</name> <init>= <expr><ternary><condition><expr><name><name>sock</name><operator>-&gt;</operator><name>do_compress</name></name></expr> ?</condition><then>
        <expr><name><name>sock</name><operator>-&gt;</operator><name>send_queue_compressed</name></name></expr> </then><else>: <expr><name><name>sock</name><operator>-&gt;</operator><name>send_queue</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gint</name></type> <name>chunk_count</name> <init>= <expr><ternary><condition><expr><name>send_chunks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>send_chunks</name></expr> </then><else>: <expr><operator>(</operator><name>gint</name><operator>)</operator><name><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>chunk_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>gint</name></type> <name>max_chunk_count</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt> <comment type="block">/*IOV_MAX*/</comment>

    <expr_stmt><expr><name>chunk_count</name> <operator>=</operator> <ternary><condition><expr><name>chunk_count</name> <operator>&gt;</operator> <name>max_chunk_count</name></expr> ?</condition><then> <expr><name>max_chunk_count</name></expr> </then><else>: <expr><name>chunk_count</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name>chunk_count</name></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* make sure it is never negative */</comment>

    <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>iovec</name></expr></argument>, <argument><expr><name>chunk_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>chunk_id</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>chunk</name> <operator>=</operator> <name><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr><operator>,</operator> <expr><name>chunk_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
         <condition><expr><name>chunk</name> <operator>&amp;&amp;</operator> <name>chunk_id</name> <operator>&lt;</operator> <name>chunk_count</name></expr>;</condition> <incr><expr><name>chunk_id</name><operator>++</operator></expr><operator>,</operator> <expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>chunk_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>iov</name><index>[<expr><name>chunk_id</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>iov</name><index>[<expr><name>chunk_id</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>iov</name><index>[<expr><name>chunk_id</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>iov</name><index>[<expr><name>chunk_id</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: s-&gt;len is zero"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>gssize</name></type> <name>len</name> <init>= <expr><call><name>SSL_writev</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>chunk_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>iov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>sslerr</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_WANT_WRITE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" SSL_write() WANT_WRITE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_WANT_READ</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" peer started SSL renegotiation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return> <comment type="block">/* TODO: read event */</comment>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" SSL_write() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>sslerr</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" SSL_write() failed: %d"</literal></expr></argument>, <argument><expr><name>sslerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>send_queue</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

    <comment type="block">/* check all the chunks which we have sent out */</comment>
    <for>for <control>(<init><expr><name>chunk</name> <operator>=</operator> <name><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>chunk</name></expr>;</condition><incr/>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: s-&gt;len is zero"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NETWORK_DEBUG_TRACE_IO</name></expr></cpp:if>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:output for sock:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sock</name><operator>-&gt;</operator><name>do_query_cache</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>sock</name><operator>-&gt;</operator><name>cache_queue</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>MAX_QUERY_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sock</name><operator>-&gt;</operator><name>query_cache_too_long</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:too long for cache queue:%p, len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>query_cache_too_long</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:append packet to cache queue:%p, len:%d, total:%d"</literal></expr></argument>,
                            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>cache_queue</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>g_queue_delete_link</name><argument_list>(<argument><expr><name><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:wait for event"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>network_ssl_write_to_rbio</name><parameter_list>(<parameter><decl><type><name>network_socket</name><modifier>*</modifier></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>network_ssl_clear_error</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>BIO</name><modifier>*</modifier></type> <name>rbio</name> <init>= <expr><call><name>SSL_get_rbio</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_queue</name><modifier>*</modifier></type> <name>queue</name> <init>= <expr><name><name>sock</name><operator>-&gt;</operator><name>recv_queue_raw</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bytes_written</name> <init>= <expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>chunk</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>chunk</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>chunk</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>buf_len</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>queue</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf_len</name>  <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>queue</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf_len</name>  <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>BIO_write</name><argument_list>(<argument><expr><name>rbio</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>buf_len</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>SSL_RBIO_BUFFER_FULL</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <name>bytes_written</name> <operator>-</operator> <name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <comment type="block">/* delete used chunks, adjust offset */</comment>
    <for>for <control>(<init><expr><name>chunk</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>chunk</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_queue_delete_link</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"write_to_rbio have residual"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>bytes_written</name></expr>;</return> <comment type="block">/* have some residual */</comment>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>bytes_written</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
   [sock-&gt;recv_queue_raw] === SSL decrypt ===&gt; [sock-&gt;recv_queue_decrypted_raw]
*/</comment>
<function><type><name>gboolean</name></type> <name>network_ssl_decrypt_packet</name><parameter_list>(<parameter><decl><type><name>network_socket</name><modifier>*</modifier></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<comment type="block">/* TODO: the raw packet is very likely a complete SSL record
   better solution: write one-packet to rbio and SSL_read one-packet */</comment>
    <expr_stmt><expr><call><name>network_ssl_clear_error</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal><operator>*</operator><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt><comment type="block">/*TODO: size? */</comment>
    <while>while <condition>(<expr><name>TRUE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>written</name> <init>= <expr><call><name>network_ssl_write_to_rbio</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <while>while <condition>(<expr><name>TRUE</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>SSL_read</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>sslerr</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_WANT_WRITE</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" peer started SSL renegotiation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>TRUE</name></expr>;</return> <comment type="block">/*TODO: how to renegotiate? */</comment>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_WANT_READ</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" SSL_read() WANT_READ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>TRUE</name></expr>;</return> <comment type="block">/* TODO: read event */</comment>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" SSL_read() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_SYSCALL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>sslerr</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" SSL_read() failed: %d"</literal></expr></argument>, <argument><expr><name>sslerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>recv_queue_decrypted_raw</name></name></expr></argument>, <argument><expr><call><name>g_string_new_len</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>network_socket_retval_t</name></type> <name>network_ssl_handshake</name><parameter_list>(<parameter><decl><type><name>network_socket</name><modifier>*</modifier></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>network_ssl_clear_error</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>TRUE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>network_ssl_write_to_rbio</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>SSL_do_handshake</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>sslerr</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" SSL_get_error: %d"</literal></expr></argument>, <argument><expr><name>sslerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_WANT_WRITE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" handshake continuation WANT_WRITE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_WANT_READ</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" handshake continuation WANT_READ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" handshake success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_OPENSSL */</comment>
</unit>
