<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/network-compress.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-compress.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>cetus_compress_init</name><parameter_list>(<parameter><decl><type><name>z_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* allocate deflate state */</comment>
    <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>zalloc</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>zfree</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name>Z_DEFAULT_COMPRESSION</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>deflateInit</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cetus_compress_end</name><parameter_list>(<parameter><decl><type><name>z_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>deflateEnd</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cetus_compress</name><parameter_list>(<parameter><decl><type><name>z_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>flush</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><name>CHUNK</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name>src_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flush</name> <operator>=</operator> <ternary><condition><expr><name>end</name></expr> ?</condition><then> <expr><name>Z_FINISH</name></expr> </then><else>: <expr><name>Z_NO_FLUSH</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator> <name>src</name></expr>;</expr_stmt>

    <comment type="block">/* run deflate() on input until output buffer not full, finish
       compression if all of source has been read in */</comment>
    <do>do <block>{<block_content>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name>CHUNK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>deflate</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* no bad return value */</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>have</name> <init>= <expr><name>CHUNK</name> <operator>-</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>have</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>, <argument><expr><name>have</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>

    <return>return <expr><name>Z_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cetus_uncompress_init</name><parameter_list>(<parameter><decl><type><name>z_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* allocate inflate state */</comment>
    <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>zalloc</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>zfree</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>

    <return>return <expr><call><name>inflateInit</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_uncompress_end</name><parameter_list>(<parameter><decl><type><name>z_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>inflateEnd</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cetus_uncompress</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>uncompressed_packet</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_stream</name></type> <name>strm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><name>CHUNK</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>cetus_uncompress_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* decompress until deflate stream ends or end of file */</comment>
    <expr_stmt><expr><name><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>strm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

    <comment type="block">/* run inflate() on input until output buffer not full */</comment>
    <do>do <block>{<block_content>
        <expr_stmt><expr><name><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>CHUNK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strm</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>Z_NEED_DICT</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Z_DATA_ERROR</name></expr>;</expr_stmt> <comment type="block">/* and fall through */</comment>
        <case>case <expr><name>Z_DATA_ERROR</name></expr>:</case>
        <case>case <expr><name>Z_MEM_ERROR</name></expr>:</case>
            <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>ret</name></expr>;</return>
        </block_content>}</block></switch>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>have</name> <init>= <expr><name>CHUNK</name> <operator>-</operator> <name><name>strm</name><operator>.</operator><name>avail_out</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>uncompressed_packet</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>, <argument><expr><name>have</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition>(<expr><name><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>

    <expr_stmt><expr><call><name>cetus_uncompress_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <name>Z_STREAM_END</name></expr> ?</condition><then> <expr><name>Z_OK</name></expr> </then><else>: <expr><name>Z_DATA_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
