<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/network-conn-pool.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-conn-pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys-pedantic.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @file
 * connection pools
 *
 * in the pool we manage idle connections
 * - keep them up as long as possible
 * - make sure we don't run out of seconds
 * - if the client is authed, we have to pick connection with the same user
 * - ...  
 */</comment>

<comment type="block" format="doxygen">/**
 * create a empty connection pool entry
 *
 * @return a connection pool entry
 */</comment>
<function><type><name>network_connection_pool_entry</name> <modifier>*</modifier></type>
<name>network_connection_pool_entry_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_connection_pool_entry</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_connection_pool_entry</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * free a conn pool entry
 *
 * @param e the pool entry to free
 * @param free_sock if true, the attached server-socket will be freed too
 */</comment>
<function><type><name>void</name></type>
<name>network_connection_pool_entry_free</name><parameter_list>(<parameter><decl><type><name>network_connection_pool_entry</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>free_sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>sock</name></name> <operator>&amp;&amp;</operator> <name>free_sock</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>sock</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * free all pool entries of the queue
 *
 * used as GDestroyFunc in the user-hash of the pool
 *
 * @param q a GQueue to free
 *
 * @see network_connection_pool_new
 * @see GDestroyFunc
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>g_queue_free_all</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_connection_pool_entry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_connection_pool_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>g_queue_free</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * init a connection pool
 */</comment>
<function><type><name>network_connection_pool</name> <modifier>*</modifier></type>
<name>network_connection_pool_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_connection_pool</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>max_idle_connections</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>mid_idle_connections</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>min_idle_connections</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>users</name></name> <operator>=</operator> <call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><name>g_hash_table_string_hash</name></expr></argument>,
                                        <argument><expr><name>g_hash_table_string_equal</name></expr></argument>, <argument><expr><name>g_hash_table_string_free</name></expr></argument>, <argument><expr><name>g_queue_free_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>pool</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * free all entries of the pool
 *
 */</comment>
<function><type><name>void</name></type>
<name>network_connection_pool_free</name><parameter_list>(<parameter><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_hash_table_foreach_remove</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>g_hash_table_true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>users</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * find the entry which has more than max_idle connections idling
 * 
 * @return TRUE for the first entry having more than _user_data idling connections
 * @see network_connection_pool_get_conns 
 */</comment>
<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>find_idle_conns</name><parameter_list>(<parameter><function_decl><type><name>gpointer</name></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>_key</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>_val</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>_user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>idle_conns_threshold</name> <init>= <expr><operator>*</operator><operator>(</operator><name>gint</name> <operator>*</operator><operator>)</operator><name>_user_data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>conns</name> <init>= <expr><name>_val</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: conns length:%d, idle_conns_threshold:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conns</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>idle_conns_threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name><name>conns</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <name>idle_conns_threshold</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>GQueue</name> <modifier>*</modifier></type>
<name>network_connection_pool_get_conns</name><parameter_list>(<parameter><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>username</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_robbed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>conns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>username</name> <operator>&amp;&amp;</operator> <name><name>username</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>conns</name> <operator>=</operator> <call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" format="doxygen">/**
         * if we know this use, return a authed connection 
         */</comment>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: get user-specific idling connection for '%s' -&gt; %p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conns</name> <operator>&amp;&amp;</operator> <name><name>conns</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>conns</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" format="doxygen">/**
     * we don't have a entry yet, check the others if we have more than 
     * min_idle waiting
     */</comment>

    <expr_stmt><expr><name>conns</name> <operator>=</operator> <call><name>g_hash_table_find</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>find_idle_conns</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>min_idle_connections</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: (get_conns) try to find max-idling conns for user '%s' -&gt; %p"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><name><name>username</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>conns</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>is_robbed</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>is_robbed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>conns</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a connection from the pool
 *
 * make sure we have at least &lt;min-conns&gt; for each user
 * if we have more, reuse a connect to reauth it to another user
 *
 * @param pool connection pool to get the connection from
 * @param username (optional) name of the auth connection
 * @param default_db (unused) unused name of the default-db
 */</comment>
<function><type><name>network_socket</name> <modifier>*</modifier></type>
<name>network_connection_pool_get</name><parameter_list>(<parameter><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>username</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_robbed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_connection_pool_entry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>conns</name> <init>= <expr><call><name>network_connection_pool_get_conns</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>is_robbed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>conns</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>conns</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: (get) entry for user '%s' -&gt; %p"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><name><name>username</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: conns length is zero for user '%s'"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><name><name>username</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: conns is null for user '%s'"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><name><name>username</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: (get) no entry for user '%s' -&gt; %p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><name><name>username</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>sock</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: server recv queue not empty"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: recv queue length:%d, sock:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_connection_pool_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:event del, ev:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sock</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* remove the idle handler from the socket */</comment>
    <expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sock</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: (get) got socket for user '%s' -&gt; %p, charset:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><name><name>username</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>is_in_sess_context</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: conn is in sess context for user:'%s'"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><name><name>username</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cur_idle_connections sub:%d for sock:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * add a connection to the connection pool
 */</comment>
<function><type><name>network_connection_pool_entry</name> <modifier>*</modifier></type>
<name>network_connection_pool_add</name><parameter_list>(<parameter><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_queue_is_empty</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: server recv queue not empty"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_queue_is_empty</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>recv_queue_raw</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: server recv queue raw not empty"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>recv_queue_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>network_connection_pool_entry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>network_connection_pool_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>is_authed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: (add) adding socket to pool for user '%s' -&gt; %p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>conns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>conns</name> <operator>=</operator> <call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>conns</name> <operator>=</operator> <call><name>g_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><call><name>g_string_dup</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>conns</name></name> <operator>=</operator> <name>conns</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_queue_push_head</name><argument_list>(<argument><expr><name>conns</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name><name>conns</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: add cur_idle_connections:%d for sock:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * remove the connection referenced by entry from the pool 
 */</comment>
<function><type><name>void</name></type>
<name>network_connection_pool_remove</name><parameter_list>(<parameter><decl><type><name>network_connection_pool_entry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_queue_delete_link</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_connection_pool_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>network_conn_pool_do_reduce_conns_verdict</name><parameter_list>(<parameter><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>connected_clients</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>mid_idle_connections</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>connected_clients</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_connection_pool_total_conns_count</name><parameter_list>(<parameter><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>users</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>users</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>users</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_hash_table_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>users</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* count all users' pooled connections */</comment>
        <while>while <condition>(<expr><call><name>g_hash_table_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>queue</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name> <operator>!=</operator> <name>total</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: pool cur idle connections stat error:%d, total:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name> <operator>=</operator> <name>total</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>
</unit>
