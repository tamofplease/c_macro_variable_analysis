<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/cetus-util.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>

<function><type><name>gboolean</name></type>
<name>try_get_int_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>option_value</name></decl></parameter>, <parameter><decl><type><name>gint</name> <modifier>*</modifier></type><name>return_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>option_value</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>return_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>try_get_long_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>option_value</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>return_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>option_value</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>return_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>try_get_double_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>option_value</name></decl></parameter>, <parameter><decl><type><name>gdouble</name> <modifier>*</modifier></type><name>return_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>option_value</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name>return_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>make_iso8601_timestamp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>utime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>  <name>my_tm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>       <name><name>tzinfo</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><init>=<expr><literal type="string">"Z"</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// max 6 chars plus \0</comment>
    <decl_stmt><decl><type><name>size_t</name></type>     <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>     <name>seconds</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>seconds</name><operator>=</operator> <name>utime</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>utime</name> <operator>=</operator> <name>utime</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seconds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>tim</name><init>= <expr><name>timezone</name></expr></init></decl>;</decl_stmt> <comment type="line">// seconds West of UTC.</comment>
        <decl_stmt><decl><type><name>char</name></type> <name>dir</name><init>= <expr><literal type="char">'-'</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>tim</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dir</name><operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tim</name><operator>=</operator> <operator>-</operator><name>tim</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%c%02d:%02d"</literal></expr></argument>,
                    <argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>tim</name> <operator>/</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tim</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"%04d-%02d-%02dT%02d:%02d:%02d.%06lu%s"</literal></expr></argument>,
                     <argument><expr><name><name>my_tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>,
                     <argument><expr><name><name>my_tm</name><operator>.</operator><name>tm_mon</name></name>  <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                     <argument><expr><name><name>my_tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>,
                     <argument><expr><name><name>my_tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>,
                     <argument><expr><name><name>my_tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>,
                     <argument><expr><name><name>my_tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>,
                     <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>utime</name></expr></argument>,
                     <argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>guint64</name></type> <name>get_timer_microseconds</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>guint64</name></type> <name>last_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>last_value</name> <operator>=</operator> <operator>(</operator><name>guint64</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <operator>(</operator><name>guint64</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>last_value</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>last_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bytes_to_hex_str</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>hex</name> <init>= <expr><literal type="string">"0123456789ABCDEF"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pout</name><operator>++</operator> <operator>=</operator> <name><name>hex</name><index>[<expr><operator>(</operator><operator>*</operator><name>pin</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xF</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pout</name><operator>++</operator> <operator>=</operator> <name><name>hex</name><index>[<expr><operator>(</operator><operator>*</operator><name>pin</name><operator>++</operator><operator>)</operator><operator>&amp;</operator><literal type="number">0xF</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><operator>*</operator><name>pout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
