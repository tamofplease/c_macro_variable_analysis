<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/chassis-filemode.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gmodule.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-filemode.h"</cpp:file></cpp:include>

<comment type="block">/*
 * check whether the given filename points to a file the permissions
 * of which are 0 for group and other (ie read/writable only by owner).
 * return 0 for "OK", -1 of the file cannot be accessed or is the wrong
 * type of file, and 1 if permissions are wrong
 *
 *
 * FIXME? this function currently ignores ACLs
 */</comment>
<function><type><name>int</name></type>
<name>chassis_filemode_check_full</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>required_filemask</name></decl></parameter>, <parameter><decl><type><name>GError</name> <modifier>*</modifier><modifier>*</modifier></type><name>gerr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stbuf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mode_t</name></type> <name>fmode</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>, <argument><expr><name>G_FILE_ERROR</name></expr></argument>, <argument><expr><call><name>g_file_error_from_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"cannot stat(%s): %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>fmode</name> <operator>=</operator> <name><name>stbuf</name><operator>.</operator><name>st_mode</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmode</name> <operator>&amp;</operator> <name>S_IFMT</name><operator>)</operator> <operator>!=</operator> <name>S_IFREG</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>, <argument><expr><name>G_FILE_ERROR</name></expr></argument>, <argument><expr><name>G_FILE_ERROR_INVAL</name></expr></argument>, <argument><expr><literal type="string">"%s isn't a regular file"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmode</name> <operator>&amp;</operator> <name>required_filemask</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>, <argument><expr><name>G_FILE_ERROR</name></expr></argument>, <argument><expr><name>G_FILE_ERROR_PERM</name></expr></argument>,
                    <argument><expr><literal type="string">"permissions of %s aren't secure (0660 or stricter required)"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MASK</name></cpp:undef>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
