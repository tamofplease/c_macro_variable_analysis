<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/resultset_merge.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_GNU_SOURCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysqld_error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys-pedantic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resultset_merge.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shard-plugin-con.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server-session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sharding-query-plan.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>EPOCH</name><index>[]</index></name> <init>= <expr><literal type="string">"1970-01-01 00:00:00"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>type_name</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"FIELD_TYPE_DECIMAL"</literal></expr>,       <comment type="line">//0x00   </comment>
    <expr><literal type="string">"FIELD_TYPE_TINY"</literal></expr>,          <comment type="line">//0x01   </comment>
    <expr><literal type="string">"FIELD_TYPE_SHORT"</literal></expr>,         <comment type="line">//0x02 </comment>
    <expr><literal type="string">"FIELD_TYPE_LONG"</literal></expr>,          <comment type="line">//0x03 </comment>
    <expr><literal type="string">"FIELD_TYPE_FLOAT"</literal></expr>,         <comment type="line">//0x04    </comment>
    <expr><literal type="string">"FIELD_TYPE_DOUBLE"</literal></expr>,        <comment type="line">//0x05 </comment>
    <expr><literal type="string">"FIELD_TYPE_NULL"</literal></expr>,          <comment type="line">//0x06 </comment>
    <expr><literal type="string">"FIELD_TYPE_TIMESTAMP"</literal></expr>,     <comment type="line">//0x07 </comment>
    <expr><literal type="string">"FIELD_TYPE_LONGLONG"</literal></expr>,      <comment type="line">//0x08   </comment>
    <expr><literal type="string">"FIELD_TYPE_INT24"</literal></expr>,         <comment type="line">//0x09   </comment>
    <expr><literal type="string">"FIELD_TYPE_DATE"</literal></expr>,          <comment type="line">//0x0a  </comment>
    <expr><literal type="string">"FIELD_TYPE_TIME"</literal></expr>,          <comment type="line">//0x0b   </comment>
    <expr><literal type="string">"FIELD_TYPE_DATETIME"</literal></expr>,      <comment type="line">//0x0c   </comment>
    <expr><literal type="string">"FIELD_TYPE_YEAR"</literal></expr>,          <comment type="line">//0x0d   </comment>
    <expr><literal type="string">"FIELD_TYPE_NEWDATE"</literal></expr>,       <comment type="line">//0x0e   </comment>
    <expr><literal type="string">"FIELD_TYPE_VARCHAR"</literal></expr>,       <comment type="line">//0x0f </comment>
    <expr><literal type="string">"FIELD_TYPE_BIT"</literal></expr>,           <comment type="line">//0x10 </comment>
    <expr><literal type="string">"FIELD_TYPE_NEWDECIMAL"</literal></expr>,    <comment type="line">//0xf6 </comment>
    <expr><literal type="string">"FIELD_TYPE_ENUM"</literal></expr>,          <comment type="line">//0xf7   </comment>
    <expr><literal type="string">"FIELD_TYPE_SET"</literal></expr>,           <comment type="line">//0xf8   </comment>
    <expr><literal type="string">"FIELD_TYPE_TINY_BLOB"</literal></expr>,     <comment type="line">//0xf9   </comment>
    <expr><literal type="string">"FIELD_TYPE_MEDIUM_BLOB"</literal></expr>,   <comment type="line">//0xfa   </comment>
    <expr><literal type="string">"FIELD_TYPE_LONG_BLOB"</literal></expr>,     <comment type="line">//0xfb   </comment>
    <expr><literal type="string">"FIELD_TYPE_BLOB"</literal></expr>,          <comment type="line">//0xfc   </comment>
    <expr><literal type="string">"FIELD_TYPE_VAR_STRING"</literal></expr>,    <comment type="line">//0xfd   </comment>
    <expr><literal type="string">"FIELD_TYPE_STRING"</literal></expr>,        <comment type="line">//0xfe  </comment>
    <expr><literal type="string">"FIELD_TYPE_GEOMETRY"</literal></expr>       <comment type="line">//0xff   </comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PACK_LEN</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_COL_VALUE_LEN</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIOR_TO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_REL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>cetus_result_t</name> <block>{
    <decl_stmt><decl><type><name>network_mysqld_proto_fielddefs_t</name> <modifier>*</modifier></type><name>fielddefs</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * if fielddefs != NULL, field_count equals fielddefs-&gt;len
     * sometime no need to parse fielddefs, we only want field_count
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>field_count</name></decl>;</decl_stmt>
}</block></struct></type> <name>cetus_result_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_result_destroy</name><parameter_list>(<parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>fielddefs</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>fielddefs</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>fielddefs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compare_records_from_column</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_str_num_supported</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>is_valid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dot_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dot_cnt</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name>end</name> <operator>||</operator> <name>dot_cnt</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>is_valid</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_str_pos_num</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>compare_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_str_num_supported</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: str num is not supported:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>compare_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_str_num_supported</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: str num is not supported:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>compare_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>s1_int_len</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s1_int_len</name> <operator>=</operator> <name>len1</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>s1_int_len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>s1</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>s2_int_len</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s2_int_len</name> <operator>=</operator> <name>len2</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>s2_int_len</name> <operator>=</operator> <name>q</name> <operator>-</operator> <name>s2</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>s1</name> <operator>+</operator> <name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>s1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>s1</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s1_int_len</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>len1</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>s2</name> <operator>+</operator> <name>len2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>s2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>s2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>s2</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s2_int_len</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>s2</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>len2</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>s1_int_len</name> <operator>&gt;</operator> <name>s2_int_len</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s1_int_len</name> <operator>&lt;</operator> <name>s2_int_len</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>s1_int_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>short1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>short2</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>short2</name> <operator>=</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>short2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>short2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>short2</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>q</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>short1</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>short1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>short1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>short1</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>short1</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>short2</name> <operator>=</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>short_len</name> <init>= <expr><name>len1</name> <operator>-</operator> <name>s1_int_len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>short_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>short1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>short2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>short1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>short2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_str_num</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>compare_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>len1</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s len in cmp_str_num is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos_s1</name> <init>= <expr><name>s1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pos_s2</name> <init>= <expr><name>s2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos_len1</name> <init>= <expr><name>len1</name></expr></init></decl>, <decl><type ref="prev"/><name>pos_len2</name> <init>= <expr><name>len2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>neg_s1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>neg_s2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pos_len1</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos_s1</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>neg_s1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pos_len1</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos_s1</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pos_len2</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos_s2</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>neg_s2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pos_len2</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos_s2</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>neg_s1</name> <operator>&amp;&amp;</operator> <name>neg_s2</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cmp_str_pos_num</name><argument_list>(<argument><expr><name>pos_s1</name></expr></argument>, <argument><expr><name>pos_len1</name></expr></argument>, <argument><expr><name>pos_s2</name></expr></argument>, <argument><expr><name>pos_len2</name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>neg_s1</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>neg_s2</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>cmp_str_pos_num</name><argument_list>(<argument><expr><name>pos_s1</name></expr></argument>, <argument><expr><name>pos_len1</name></expr></argument>, <argument><expr><name>pos_s2</name></expr></argument>, <argument><expr><name>pos_len2</name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>padding_zero</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_len1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_len2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><operator>*</operator><name>p_len1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><operator>*</operator><name>p_len2</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>len1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p_len1</name> <operator>=</operator> <name>len1</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>len2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>s2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>len2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p_len2</name> <operator>=</operator> <name>len2</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>s1_int_len</name></decl>, <decl><type ref="prev"/><name>s2_int_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>short_len1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>short_len2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>short1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>short2</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s1_int_len</name> <operator>=</operator> <name>len1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s1</name><index>[<expr><name>len1</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p_len1</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p_len1</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>short1</name> <operator>=</operator> <name>s1</name> <operator>+</operator> <name>len1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>s1_int_len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>s1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>short1</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>short_len1</name> <operator>=</operator> <name>len1</name> <operator>-</operator> <name>s1_int_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s2_int_len</name> <operator>=</operator> <name>len2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s2</name><index>[<expr><name>len2</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p_len2</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p_len2</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>short2</name> <operator>=</operator> <name>s2</name> <operator>+</operator> <name>len2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>s2_int_len</name> <operator>=</operator> <name>q</name> <operator>-</operator> <name>s2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>short2</name> <operator>=</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>short_len2</name> <operator>=</operator> <name>len2</name> <operator>-</operator> <name>s2_int_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>padding</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pad_len</name></decl>, <decl><type ref="prev"/><name>new_str_len</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>short_len1</name> <operator>==</operator> <name>short_len2</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>short_len1</name> <operator>&lt;</operator> <name>short_len2</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>padding</name> <operator>=</operator> <name>short1</name> <operator>+</operator> <name>short_len1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pad_len</name> <operator>=</operator> <name>short_len2</name> <operator>-</operator> <name>short_len1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>new_str_len</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p_len1</name><operator>)</operator> <operator>+</operator> <name>pad_len</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>new_str_len</name> <operator>&gt;=</operator> <name>size1</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>p_len1</name> <operator>=</operator> <name>new_str_len</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>padding</name> <operator>=</operator> <name>short2</name> <operator>+</operator> <name>short_len2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pad_len</name> <operator>=</operator> <name>short_len1</name> <operator>-</operator> <name>short_len2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>new_str_len</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p_len2</name><operator>)</operator> <operator>+</operator> <name>pad_len</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>new_str_len</name> <operator>&gt;=</operator> <name>size2</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>p_len2</name> <operator>=</operator> <name>new_str_len</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pad_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>padding</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_str_num_value</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>com_type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>compare_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>padding_zero</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len1</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>compare_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>cmp_str_num</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:string str1:%s, str2:%s, cmp result:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>desc</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>desc</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>desc</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>desc</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>com_type</name> <operator>==</operator> <name>PRIOR_TO</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: reach the unreachable place"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_date</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>com_type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>str1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>EPOCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>str2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str2</name></expr></argument>, <argument><expr><name>EPOCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:data1:%s, data2:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strptime</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strptime</name><argument_list>(<argument><expr><name>str2</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name><name>diff</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_year</name></name> <operator>-</operator> <name><name>tm2</name><operator>.</operator><name>tm_year</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_mon</name></name> <operator>-</operator> <name><name>tm2</name><operator>.</operator><name>tm_mon</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>diff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_mday</name></name> <operator>-</operator> <name><name>tm2</name><operator>.</operator><name>tm_mday</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:diff0:%d, diff1:%d, diff2:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>diff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>desc</name> <operator>&amp;&amp;</operator> <name><name>diff</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>desc</name> <operator>&amp;&amp;</operator> <name><name>diff</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>desc</name> <operator>&amp;&amp;</operator> <name><name>diff</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>desc</name> <operator>&amp;&amp;</operator> <name><name>diff</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>com_type</name> <operator>==</operator> <name>PRIOR_TO</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_time</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>com_type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>str1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>EPOCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>str2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str2</name></expr></argument>, <argument><expr><name>EPOCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>strptime</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strptime</name><argument_list>(<argument><expr><name>str2</name></expr></argument>, <argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name><name>diff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_hour</name></name> <operator>-</operator> <name><name>tm2</name><operator>.</operator><name>tm_hour</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_min</name></name> <operator>-</operator> <name><name>tm2</name><operator>.</operator><name>tm_min</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>diff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_sec</name></name> <operator>-</operator> <name><name>tm2</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>desc</name> <operator>&amp;&amp;</operator> <name><name>diff</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>desc</name> <operator>&amp;&amp;</operator> <name><name>diff</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>desc</name> <operator>&amp;&amp;</operator> <name><name>diff</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>desc</name> <operator>&amp;&amp;</operator> <name><name>diff</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>com_type</name> <operator>==</operator> <name>PRIOR_TO</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_year</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>com_type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>str1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>EPOCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>str2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str2</name></expr></argument>, <argument><expr><name>EPOCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>y1</name> <init>= <expr><call><name>atol</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>y2</name> <init>= <expr><call><name>atol</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>y1</name> <operator>==</operator> <name>y2</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>y1</name> <operator>&gt;</operator> <name>y2</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>y1</name> <operator>&lt;</operator> <name>y2</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>com_type</name> <operator>!=</operator> <name>PRIOR_TO</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* skip some column (lenenc_str or NULL) */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>gint</name></type>
<name>skip_field</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>skip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>iter</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>skip</name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>guint8</name></type> <name>first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_peek_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>MYSQLD_PACKET_NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_skip_lenenc_str</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ORDER_BY_ITEMS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
 * @breif For all ORDER-BY columns, get their offsets inside Row-Packet
 * @return At most 4 offset values embedded in a 64-bit integer: 4 * int16_t --&gt; int64_t
 */</comment>
<function><type><specifier>static</specifier> <name>guint64</name></type>
<name>get_field_offsets</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>ORDER_BY</name></type> <name><name>order_array</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order_array_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>max_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>orderby_count</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>order_array_size</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>orderby_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>order_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>&gt;</operator> <name>max_pos</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>max_pos</name> <operator>=</operator> <name><name>order_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>max_pos</name> <operator>&gt;</operator> <name>MAX_ORDER_BY_ITEMS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>map</name><index>[<expr><name>MAX_ORDER_BY_ITEMS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>  <comment type="block">/* field pos ==&gt; order by pos */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>orderby_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="block">/* hack: add 1 for existence probing */</comment>
        <expr_stmt><expr><name><name>map</name><index>[<expr><name><name>order_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>guint64</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>max_pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>guint</name></type> <name>iter</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>max_pos</name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>char</name><operator>)</operator><name>MYSQLD_PACKET_NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_skip_lenenc_str</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>next_iter</name> <init>= <expr><name>iter</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>next_iter</name> <operator>&lt;</operator> <name>MAX_ORDER_BY_ITEMS</name> <operator>&amp;&amp;</operator> <name><name>map</name><index>[<expr><name>next_iter</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>seq</name> <init>= <expr><name><name>map</name><index>[<expr><name>next_iter</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>guint64</name></type> <name>new_value</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"offset value:%ld, seq=%d, iter=%d %p"</literal></expr></argument>, <argument><expr><name>new_value</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>new_value</name> <operator>&lt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>seq</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name>new_value</name> <operator>=</operator> <name>new_value</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                </block_content>}</block></for>

                <expr_stmt><expr><name>value</name> <operator>+=</operator> <name>new_value</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"part all value set:%ld for %p"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 *      OK Packet                   0x00
 *      Error Packet                0xff  255
 *      Result Set Packet           1-250 (first byte of Length-Coded Binary)
 *      Field Packet                1-250 ("")
 *      Row Data Packet             1-250 ("")
 *      EOF Packet                  0xfe  254
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>guchar</name></type>
<name>get_pkt_type</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>NET_HEADER_SIZE</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>retrieve_aggr_value</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>skip_field</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_get_column</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>str_int_add</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>merged_int</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>carry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>large</name> <init>= <expr><name>s2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>len1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_len</name> <init>= <expr><name>len2</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len1</name> <operator>&gt;</operator> <name>len2</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>max_len</name> <operator>=</operator> <name>len1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>large</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s1</name> <operator>+</operator> <name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>s2</name> <operator>+</operator> <name>len2</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>merged_int</name> <operator>+</operator> <name>max_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>carry</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>*</operator><name>q</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>tmp</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>q</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>dest</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>max_len</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>large</name> <operator>=</operator> <name>large</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <operator>*</operator><name>large</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>tmp</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>large</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>dest</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>merged_int</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>str_int_sub</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>merged_int</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>borrow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s1</name> <operator>+</operator> <name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>s2</name> <operator>+</operator> <name>len2</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>merged_int</name> <operator>+</operator> <name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>*</operator><name>q</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>q</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>dest</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>len1</name> <operator>-</operator> <name>len2</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>large</name> <init>= <expr><name>s1</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>large</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>large</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>dest</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>merged_int</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>str_decimal_add</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>merged_value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>s1_int_len</name> <init>= <expr><name>p</name> <operator>-</operator> <name>s1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>s2_int_len</name> <init>= <expr><name>q</name> <operator>-</operator> <name>s2</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>int_len</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>s1_int_len</name> <operator>&lt;</operator> <name>s2_int_len</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>int_len</name> <operator>=</operator> <name>s2_int_len</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>int_len</name> <operator>=</operator> <name>s1_int_len</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>short1</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>short2</name> <init>= <expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>merged_short</name> <init>= <expr><name>merged_value</name> <operator>+</operator> <name>int_len</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>merged_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>merged_short</name><operator>++</operator></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>short_len</name> <init>= <expr><name>len1</name> <operator>-</operator> <name>s1_int_len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>short_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>short1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <name><name>short2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_short</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>str_int_add</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s1_int_len</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s2_int_len</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>str_int_add</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>merged_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>str_decimal_sub</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>merged_value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>s1_int_len</name> <init>= <expr><name>p</name> <operator>-</operator> <name>s1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>s2_int_len</name> <init>= <expr><name>q</name> <operator>-</operator> <name>s2</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>int_len</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>s1_int_len</name> <operator>&lt;</operator> <name>s2_int_len</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>int_len</name> <operator>=</operator> <name>s2_int_len</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>int_len</name> <operator>=</operator> <name>s1_int_len</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>short1</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>short2</name> <init>= <expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>merged_short</name> <init>= <expr><name>merged_value</name> <operator>+</operator> <name>int_len</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>merged_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>merged_short</name><operator>++</operator></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>short_len</name> <init>= <expr><name>len1</name> <operator>-</operator> <name>s1_int_len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>borrow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>short_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><operator>(</operator><name><name>short1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>short2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>merged_short</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>str_int_sub</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s1_int_len</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s2_int_len</name></expr></argument>, <argument><expr><name>borrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>str_int_sub</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>merged_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>trim_zero</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>q</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dispose_sign_add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is_integer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>merged_value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>supported</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>s2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>is_integer</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>str_int_add</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>str_decimal_add</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>trim_zero</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>s2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>is_integer</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>str_int_add</name><argument_list>(<argument><expr><name>merged_value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>str_decimal_add</name><argument_list>(<argument><expr><name>merged_value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>trim_zero</name><argument_list>(<argument><expr><name>merged_value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>merged_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>cmp_str_num</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>supported</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>is_integer</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>str_int_sub</name><argument_list>(<argument><expr><name>merged_value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>str_decimal_sub</name><argument_list>(<argument><expr><name>merged_value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>trim_zero</name><argument_list>(<argument><expr><name>merged_value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>is_integer</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>str_int_sub</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>s1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>str_decimal_sub</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>s1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>trim_zero</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>merged_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>cmp_str_num</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>s2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>supported</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>is_integer</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>str_int_sub</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>s1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>str_decimal_sub</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>s2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>trim_zero</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>is_integer</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>str_int_sub</name><argument_list>(<argument><expr><name>merged_value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>str_decimal_sub</name><argument_list>(<argument><expr><name>merged_value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>trim_zero</name><argument_list>(<argument><expr><name>merged_value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>merged_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>str_add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>merged_value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>merge_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>is_result_padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_integer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_need_check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FIELD_TYPE_TINY</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_SHORT</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_LONG</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_LONGLONG</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_INT24</name></expr>:</case>
        <expr_stmt><expr><name>is_integer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>FIELD_TYPE_DOUBLE</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_FLOAT</name></expr>:</case>
        <expr_stmt><expr><name>is_need_check</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>FIELD_TYPE_NEWDECIMAL</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_DECIMAL</name></expr>:</case>
        <expr_stmt><expr><name>is_result_padding</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: unknown type for add:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>merge_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_integer</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>is_need_check</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_str_num_supported</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: str num is not supported:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>merge_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_str_num_supported</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: str num is not supported:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>merge_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>padding_zero</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len1</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>merge_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>dispose_sign_add</name><argument_list>(<argument><expr><name>is_integer</name></expr></argument>, <argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>,
                                  <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>merge_failed</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>result</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>is_result_padding</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>merged_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>padding_zero</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merged_len</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>MAX_COL_VALUE_LEN</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>merge_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>merged_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>merge_aggr_value</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fun_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>merged_value</name></decl></parameter>,
                 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>merge_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>len1</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>len1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_value</name><index>[<expr><name>len2</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_value</name><index>[<expr><name>len1</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>is_str_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FIELD_TYPE_TIME</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_TIMESTAMP</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_DATETIME</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_YEAR</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_NEWDATE</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_DATE</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_VAR_STRING</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_STRING</name></expr>:</case>
        <expr_stmt><expr><name>is_str_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <switch>switch <condition>(<expr><name>fun_type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FT_SUM</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>str_add</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>FT_MAX</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>is_str_type</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>merged_value</name><index>[<expr><name>len2</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>cmp_str_num</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>merged_value</name><index>[<expr><name>len2</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><name>FT_MIN</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>is_str_type</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>merged_value</name><index>[<expr><name>len2</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>cmp_str_num</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>merged_value</name><index>[<expr><name>len2</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><name>FT_COUNT</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>str_add</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>modify_record</name><parameter_list>(<parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>cand1</name></decl></parameter>, <parameter><decl><type><name>group_aggr_t</name> <modifier>*</modifier></type> <name>aggr</name></decl></parameter>,
              <parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet1</name></decl></parameter>, <parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>orig_packet_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>merge_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str1</name><index>[<expr><name>MAX_COL_VALUE_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str2</name><index>[<expr><name>MAX_COL_VALUE_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>merged_value</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MAX_COL_VALUE_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>before</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hit</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>after</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>pkt1</name> <init>= <expr><name><name>packet1</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>before</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pkt1</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>packet1</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>skip_field</name><argument_list>(<argument><expr><name>packet1</name></expr></argument>, <argument><expr><name><name>aggr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>skip_field</name><argument_list>(<argument><expr><name>packet2</name></expr></argument>, <argument><expr><name><name>aggr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>hit</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pkt1</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>packet1</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_get_column</name><argument_list>(<argument><expr><name>packet1</name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_get_column</name><argument_list>(<argument><expr><name>packet2</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>after</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pkt1</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>packet1</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_PACK_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf_pos</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>hit</name> <operator>-</operator> <name>before</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf_pos</name></expr></argument>, <argument><expr><name>before</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf_pos</name> <operator>=</operator> <name>buf_pos</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>merge_aggr_value</name><argument_list>(<argument><expr><name><name>aggr</name><operator>-&gt;</operator><name>fun_type</name></name></expr></argument>, <argument><expr><name><name>aggr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>aggr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FIELD_TYPE_DOUBLE</name> <operator>||</operator> <name><name>aggr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FIELD_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>merged_value</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>merged_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>

            <if_stmt><if>if <condition>(<expr><name><name>merged_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>len1</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hit</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>packet_len</name> <init>= <expr><operator>(</operator><operator>*</operator><name>orig_packet_len</name><operator>)</operator> <operator>-</operator> <name>len1</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>packet_len</name> <operator>&gt;</operator> <name>MAX_PACK_LEN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>merge_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf_pos</name></expr></argument>, <argument><expr><name>merged_value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>buf_pos</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buf_pos</name> <operator>=</operator> <name>buf_pos</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf_pos</name></expr></argument>, <argument><expr><name>after</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>orig_packet_len</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>after</name> <operator>-</operator> <name>before</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>orig_packet_len</name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>NET_HEADER_SIZE</name> <operator>+</operator> <name>packet_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>cand1</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cand1</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet1</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>combine_aggr_record</name><parameter_list>(<parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>cand1</name></decl></parameter>, <parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>cand2</name></decl></parameter>, <parameter><decl><type><name>aggr_by_group_para_t</name> <modifier>*</modifier></type><name>para</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>merge_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>packet1</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>cand1</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet2</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>cand2</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>orig_packet_len</name> <init>= <expr><call><name>network_mysqld_proto_get_packet_len</name><argument_list>(<argument><expr><name><name>packet1</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>orig_packet_len</name> <operator>&gt;=</operator> <name>MAX_PACK_LEN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s record too long for group by"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>merge_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>short</name></type> <name>aggr_num</name> <init>= <expr><name><name>para</name><operator>-&gt;</operator><name>aggr_num</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>aggr_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>group_aggr_t</name> <modifier>*</modifier></type><name>aggr</name> <init>= <expr><name><name>para</name><operator>-&gt;</operator><name>aggr_array</name></name> <operator>+</operator> <operator>(</operator><name>aggr_num</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>packet1</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet2</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>

        <comment type="block">/* if equal, combined */</comment>
        <switch>switch <condition>(<expr><name><name>aggr</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>FIELD_TYPE_TINY</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_SHORT</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_LONG</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_LONGLONG</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_INT24</name></expr>:</case>
            <expr_stmt><expr><call><name>modify_record</name><argument_list>(<argument><expr><name>cand1</name></expr></argument>, <argument><expr><name>aggr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_packet_len</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELD_TYPE_NEWDECIMAL</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_DECIMAL</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_FLOAT</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_DOUBLE</name></expr>:</case>
            <expr_stmt><expr><call><name>modify_record</name><argument_list>(<argument><expr><name>cand1</name></expr></argument>, <argument><expr><name>aggr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_packet_len</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELD_TYPE_TIME</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_TIMESTAMP</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_DATETIME</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_YEAR</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_NEWDATE</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_DATE</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_VAR_STRING</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_STRING</name></expr>:</case>
            <switch>switch <condition>(<expr><name><name>aggr</name><operator>-&gt;</operator><name>fun_type</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>FT_MAX</name></expr>:</case>
            <case>case <expr><name>FT_MIN</name></expr>:</case>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: string is not valid for aggr fun:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>aggr</name><operator>-&gt;</operator><name>fun_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>merge_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></switch>

            <expr_stmt><expr><call><name>modify_record</name><argument_list>(<argument><expr><name>cand1</name></expr></argument>, <argument><expr><name>aggr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_packet_len</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><operator>*</operator><name>merge_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:unknown Field Type: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>para</name><operator>-&gt;</operator><name>group_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>cal_aggr_rec_rel</name><parameter_list>(<parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>cand1</name></decl></parameter>, <parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>cand2</name></decl></parameter>, <parameter><decl><type><name>aggr_by_group_para_t</name> <modifier>*</modifier></type><name>para</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>merge_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>disp_flag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str1</name><index>[<expr><name>MAX_COL_VALUE_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str2</name><index>[<expr><name>MAX_COL_VALUE_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>packet1</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>cand1</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet2</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>cand2</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>group_by_t</name> <modifier>*</modifier></type><name>group_array</name> <init>= <expr><name><name>para</name><operator>-&gt;</operator><name>group_array</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>para</name><operator>-&gt;</operator><name>group_array_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>disp_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>packet1</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet2</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>skip_field</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet1</name></expr></argument>, <argument><expr><name><name>group_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>skip_field</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet2</name></expr></argument>, <argument><expr><name><name>group_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_mysqld_proto_get_column</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet1</name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_get_column</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet2</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch>switch <condition>(<expr><name><name>group_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>FIELD_TYPE_DATE</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_date</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>NOR_REL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>, <argument><expr><name><name>group_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>disp_flag</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELD_TYPE_TIME</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_time</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>NOR_REL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>, <argument><expr><name><name>group_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>disp_flag</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELD_TYPE_YEAR</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_year</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>NOR_REL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>, <argument><expr><name><name>group_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>disp_flag</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELD_TYPE_NEWDATE</name></expr>:</case>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
            <comment type="block">/* case FIELD_TYPE_VARCHAR: */</comment>
        <case>case <expr><name>FIELD_TYPE_VAR_STRING</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_TIMESTAMP</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_DATETIME</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_STRING</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_records_from_column</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>NOR_REL</name></expr></argument>, <argument><expr><name><name>group_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>disp_flag</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        <case>case <expr><name>FIELD_TYPE_TINY</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_SHORT</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_LONG</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_LONGLONG</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_INT24</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_DOUBLE</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_NEWDECIMAL</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_DECIMAL</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_FLOAT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_str_num_value</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>NOR_REL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>, <argument><expr><name><name>group_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>disp_flag</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:unknown Field Type: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>group_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>merge_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></for>
    <return>return <expr><call><name>combine_aggr_record</name><argument_list>(<argument><expr><name>cand1</name></expr></argument>, <argument><expr><name>cand2</name></expr></argument>, <argument><expr><name>para</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>heap_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_value_from_records</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet1</name></decl></parameter>, <parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet2</name></decl></parameter>,
                           <parameter><decl><type><name>ORDER_BY</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>compare_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str1</name><index>[<expr><name>MAX_COL_VALUE_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str2</name><index>[<expr><name>MAX_COL_VALUE_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>skip_field</name><argument_list>(<argument><expr><name>packet1</name></expr></argument>, <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>skip_field</name><argument_list>(<argument><expr><name>packet2</name></expr></argument>, <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_get_column</name><argument_list>(<argument><expr><name>packet1</name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_get_column</name><argument_list>(<argument><expr><name>packet2</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FIELD_TYPE_LONG</name></expr>:</case>
    <case>case <expr><name>FIELD_TYPE_DOUBLE</name></expr>:</case>
        <return>return <expr><call><name>compare_str_num_value</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>PRIOR_TO</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>FIELD_TYPE_DATE</name></expr>:</case>
        <return>return <expr><call><name>compare_date</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>PRIOR_TO</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>FIELD_TYPE_TIME</name></expr>:</case>
        <return>return <expr><call><name>compare_time</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>PRIOR_TO</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>FIELD_TYPE_YEAR</name></expr>:</case>
        <return>return <expr><call><name>compare_year</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>PRIOR_TO</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_records_from_column</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>com_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: str1:%s, str2:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>str1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>str2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>str1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>str2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>str1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>str2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>desc</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>desc</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>desc</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>desc</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>com_type</name> <operator>==</operator> <name>PRIOR_TO</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: reach the unreachable place"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* short means 16-bit integer */</comment>
<function><type><specifier>static</specifier> <name>guint16</name></type> <name>get_nth_short</name><parameter_list>(<parameter><decl><type><name>guint64</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint64</name></type> <name>mask</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>mask</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>guint64</name></type> <name>value</name> <init>= <expr><name>mask</name> <operator>&amp;</operator> <name>base</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_records_by_str</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet1</name></decl></parameter>, <parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet2</name></decl></parameter>,
                       <parameter><decl><type><name>order_by_para_t</name> <modifier>*</modifier></type><name>para</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pkt1_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pkt2_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str1</name><index>[<expr><name>MAX_COL_VALUE_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str2</name><index>[<expr><name>MAX_COL_VALUE_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ORDER_BY</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>para</name><operator>-&gt;</operator><name>order_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>offsets_1</name></decl>, <decl><type ref="prev"/><name>offsets_2</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>para</name><operator>-&gt;</operator><name>field_offsets_cache</name><index>[<expr><name>pkt1_index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offsets_1</name> <operator>=</operator> <name><name>para</name><operator>-&gt;</operator><name>field_offsets_cache</name><index>[<expr><name>pkt1_index</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>offsets_1</name> <operator>=</operator> <call><name>get_field_offsets</name><argument_list>(<argument><expr><name>packet1</name></expr></argument>, <argument><expr><name><name>para</name><operator>-&gt;</operator><name>order_array</name></name></expr></argument>, <argument><expr><name><name>para</name><operator>-&gt;</operator><name>order_array_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>para</name><operator>-&gt;</operator><name>field_offsets_cache</name><index>[<expr><name>pkt1_index</name></expr>]</index></name> <operator>=</operator> <name>offsets_1</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>guint</name></type> <name>offset</name> <init>= <expr><call><name>get_nth_short</name><argument_list>(<argument><expr><name>offsets_1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>packet1</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>para</name><operator>-&gt;</operator><name>field_offsets_cache</name><index>[<expr><name>pkt2_index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offsets_2</name> <operator>=</operator> <name><name>para</name><operator>-&gt;</operator><name>field_offsets_cache</name><index>[<expr><name>pkt2_index</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>offsets_2</name> <operator>=</operator> <call><name>get_field_offsets</name><argument_list>(<argument><expr><name>packet2</name></expr></argument>, <argument><expr><name><name>para</name><operator>-&gt;</operator><name>order_array</name></name></expr></argument>, <argument><expr><name><name>para</name><operator>-&gt;</operator><name>order_array_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>para</name><operator>-&gt;</operator><name>field_offsets_cache</name><index>[<expr><name>pkt2_index</name></expr>]</index></name> <operator>=</operator> <name>offsets_2</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>get_nth_short</name><argument_list>(<argument><expr><name>offsets_2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>packet2</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_get_column</name><argument_list>(<argument><expr><name>packet1</name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_get_column</name><argument_list>(<argument><expr><name>packet2</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>MAX_COL_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>compare_records_from_column</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>PRIOR_TO</name></expr></argument>, <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 *  is_prior_to Relation(record_A *record_B) defined ORDER BY
 *  return 1 if record A is prior to record B  else 0
 */</comment>
<function><type><specifier>static</specifier> <name>gint</name></type>
<name>is_prior_to</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>pkt1</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>pkt2</name></decl></parameter>, <parameter><decl><type><name>order_by_para_t</name> <modifier>*</modifier></type><name>para</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>pkt1_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pkt2_index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_record_equal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>compare_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>equal_field_cnt</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet2</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>packet1</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>pkt1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet2</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>pkt2</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>equal_field_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call is_prior_to, index1:%d, index2:%d, count:%d, pkt1:%p, pkt2:%p"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>pkt1_index</name></expr></argument>, <argument><expr><name>pkt2_index</name></expr></argument>, <argument><expr><operator>++</operator><name>heap_count</name></expr></argument>, <argument><expr><name>pkt1</name></expr></argument>, <argument><expr><name>pkt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>para</name><operator>-&gt;</operator><name>order_array_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet1</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet2</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ORDER_BY</name> <modifier>*</modifier></type><name>order</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>para</name><operator>-&gt;</operator><name>order_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name><name>order</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>FIELD_TYPE_TINY</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_SHORT</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_LONG</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_LONGLONG</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_INT24</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_value_from_records</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet2</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>FIELD_TYPE_LONG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>equal_field_cnt</name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELD_TYPE_NEWDECIMAL</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_DECIMAL</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_FLOAT</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_DOUBLE</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_value_from_records</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet2</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>FIELD_TYPE_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>equal_field_cnt</name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELD_TYPE_DATE</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_value_from_records</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet2</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>FIELD_TYPE_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>equal_field_cnt</name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELD_TYPE_TIME</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_value_from_records</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet2</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>FIELD_TYPE_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>equal_field_cnt</name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELD_TYPE_YEAR</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_value_from_records</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet2</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>FIELD_TYPE_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>equal_field_cnt</name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELD_TYPE_NEWDATE</name></expr>:</case>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
            <comment type="block">/* case FIELD_TYPE_VARCHAR: */</comment>
        <case>case <expr><name>FIELD_TYPE_TIMESTAMP</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_DATETIME</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_VAR_STRING</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_STRING</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_records_by_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet2</name></expr></argument>, <argument><expr><name>para</name></expr></argument>, <argument><expr><name>pkt1_index</name></expr></argument>, <argument><expr><name>pkt2_index</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>equal_field_cnt</name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELD_TYPE_NULL</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_BIT</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_ENUM</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_SET</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_TINY_BLOB</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_MEDIUM_BLOB</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_LONG_BLOB</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_BLOB</name></expr>:</case>
        <case>case <expr><name>FIELD_TYPE_GEOMETRY</name></expr>:</case>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        <default>default:</default>
            <expr_stmt><expr><operator>*</operator><name>compare_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:unknown Field Type: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>order</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>equal_field_cnt</name> <operator>==</operator> <name><name>para</name><operator>-&gt;</operator><name>order_array_size</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>is_record_equal</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>is_record_equal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* find index of field by name, the name might be an alias */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cetus_result_find_fielddef</name><parameter_list>(<parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>fielddefs</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_mysqld_proto_fielddef_t</name> <modifier>*</modifier></type><name>fdef</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>fielddefs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>&amp;&amp;</operator> <name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdef</name><operator>-&gt;</operator><name>table</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>fdef</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
                <operator>||</operator> <operator>(</operator><name><name>fdef</name><operator>-&gt;</operator><name>org_table</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>fdef</name><operator>-&gt;</operator><name>org_table</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdef</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>fdef</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
                    <operator>||</operator> <operator>(</operator><name><name>fdef</name><operator>-&gt;</operator><name>org_name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>fdef</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdef</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>fdef</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
                <operator>||</operator> <operator>(</operator><name><name>fdef</name><operator>-&gt;</operator><name>org_name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>fdef</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>cetus_result_parse_fielddefs</name><parameter_list>(<parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res_merge</name></decl></parameter>, <parameter><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>res_merge</name><operator>-&gt;</operator><name>field_count</name></name> <operator>&gt;=</operator> <name><name>input</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: res_merge-&gt;field_count:%d, queue length:%d"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>res_merge</name><operator>-&gt;</operator><name>field_count</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>res_merge</name><operator>-&gt;</operator><name>fielddefs</name></name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator><name>network_mysqld_proto_fielddef_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>res_merge</name><operator>-&gt;</operator><name>field_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <comment type="block">/* TODO g_queue_peek_nth is not efficient*/</comment>
        <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>g_queue_peek_nth</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_skip_network_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>network_mysqld_proto_fielddef_t</name> <modifier>*</modifier></type><name>fdef</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>fdef</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>network_mysqld_proto_get_fielddef</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>fdef</name></expr></argument>, <argument><expr><name>CLIENT_PROTOCOL_41</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_proto_fielddef_free</name><argument_list>(<argument><expr><name>fdef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>res_merge</name><operator>-&gt;</operator><name>fielddefs</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>res_merge</name><operator>-&gt;</operator><name>fielddefs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>res_merge</name><operator>-&gt;</operator><name>fielddefs</name></name></expr></argument>, <argument><expr><name>fdef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>cetus_result_retrieve_field_count</name><parameter_list>(<parameter><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>guint64</name> <modifier>*</modifier></type><name>p_field_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call cetus_result_retrieve_field_count"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>packet_count</name> <init>= <expr><call><name>g_queue_get_length</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Number-of-Field packet */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>network_mysqld_proto_skip_network_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint64</name></type> <name>field_count</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>network_mysqld_proto_get_lenenc_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>||</operator> <name>field_count</name> <operator>&gt;=</operator> <name>packet_count</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p_field_count</name> <operator>=</operator> <name>field_count</name></expr>;</expr_stmt>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Get order_array.pos, order_array.type
 */</comment>
<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>get_order_by_fields</name><parameter_list>(<parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res_merge</name></decl></parameter>, <parameter><decl><type><name>ORDER_BY</name> <modifier>*</modifier></type><name>order_array</name></decl></parameter>,
                    <parameter><decl><type><name>guint</name></type> <name>order_array_size</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order_array_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>ORDER_BY</name> <modifier>*</modifier></type><name>orderby</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>order_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>orderby</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>cetus_result_find_fielddef</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>,
                                                   <argument><expr><name><name>orderby</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>, <argument><expr><name><name>orderby</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"order by:no %s in field list"</literal></expr></argument>, <argument><expr><name><name>orderby</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>detail</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>orderby</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>network_mysqld_proto_fielddef_t</name> <modifier>*</modifier></type><name>fdef</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>res_merge</name><operator>-&gt;</operator><name>fielddefs</name></name></expr></argument>, <argument><expr><name><name>orderby</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>orderby</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>fdef</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>get_group_by_fields</name><parameter_list>(<parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res_merge</name></decl></parameter>, <parameter><decl><type><name>group_by_t</name> <modifier>*</modifier></type><name>group_array</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>group_array_size</name></decl></parameter>,
                    <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>group_array_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>group_by_t</name> <modifier>*</modifier></type><name>groupby</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>group_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>groupby</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>cetus_result_find_fielddef</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>,
                                                   <argument><expr><name><name>groupby</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>, <argument><expr><name><name>groupby</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"group by: no %s in field list"</literal></expr></argument>, <argument><expr><name><name>groupby</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>detail</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>groupby</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>network_mysqld_proto_fielddef_t</name> <modifier>*</modifier></type><name>fdef</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>res_merge</name><operator>-&gt;</operator><name>fielddefs</name></name></expr></argument>, <argument><expr><name><name>groupby</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>groupby</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>fdef</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>fulfill_condi</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aggr_value</name></decl></parameter>, <parameter><decl><type><name>having_condition_t</name> <modifier>*</modifier></type><name>hav_condi</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>is_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>hav_condi</name><operator>-&gt;</operator><name>data_type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TK_INTEGER</name></expr>:</case>
        <expr_stmt><expr><name>is_num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_FLOAT</name></expr>:</case>
        <expr_stmt><expr><name>is_num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>aggr_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>hav_condi</name><operator>-&gt;</operator><name>condition_value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_num</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>len2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>len1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>num_unsupported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cmp_str_num</name><argument_list>(<argument><expr><name>aggr_value</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name><name>hav_condi</name><operator>-&gt;</operator><name>condition_value</name></name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_unsupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>num_unsupported</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:merge_failed,num_unsupported"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>aggr_value</name></expr></argument>, <argument><expr><name><name>hav_condi</name><operator>-&gt;</operator><name>condition_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <switch>switch <condition>(<expr><name><name>hav_condi</name><operator>-&gt;</operator><name>rel_type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TK_LE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_GE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_LT</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_GT</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_EQ</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_NE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aggr_by_group</name><parameter_list>(<parameter><decl><type><name>aggr_by_group_para_t</name> <modifier>*</modifier></type><name>para</name></decl></parameter>, <parameter><decl><type><name>GList</name> <modifier>*</modifier><modifier>*</modifier></type><name>candidates</name></decl></parameter>, <parameter><decl><type><name>guint</name> <modifier>*</modifier></type><name>pkt_count</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>cand_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>candidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>row_cnter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>off_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>iter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name> <init>= <expr><name><name>para</name><operator>-&gt;</operator><name>recv_queues</name></name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>row_cnter</name> <operator>&lt;</operator> <name><name>para</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>row_count</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>candidate</name> <operator>||</operator> <call><name>get_pkt_type</name><argument_list>(<argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>get_pkt_type</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>cand_index</name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>candidate</name> <operator>=</operator> <name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* if candidate is still NULL, all possible candidates have been exhausted */</comment>
        <if_stmt><if>if <condition>(<expr><name>candidate</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>get_pkt_type</name><argument_list>(<argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* to obtain candidate ptr and its index in recv_queues by scanning candidates once */</comment>
        <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="block">/* don't compare with itself */</comment>
            <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>cand_index</name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>tmp_list</name> <init>= <expr><name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <comment type="block">/* some recv_queue may be shorter than others */</comment>
                <if_stmt><if>if <condition>(<expr><name>tmp_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>get_pkt_type</name><argument_list>(<argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>tmp_list</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* 1, output; 0, wait; -1, change index */</comment>

                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"record1:%p, record2:%p"</literal></expr></argument>, <argument><expr><name>candidate</name></expr></argument>, <argument><expr><name>tmp_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>merge_failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>cal_aggr_rec_rel</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>, <argument><expr><name>tmp_list</name></expr></argument>, <argument><expr><name>para</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge_failed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>merge_failed</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:merge_failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>candidate</name> <operator>=</operator> <name>tmp_list</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cand_index</name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name> <operator>=</operator> <name><name>tmp_list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"candidate:%p, off_pos:%d, para-&gt;limit-&gt;offset:%d"</literal></expr></argument>,
                <argument><expr><name>candidate</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>off_pos</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>para</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>off_pos</name> <operator>&lt;</operator> <name><name>para</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>off_pos</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>candidates</name><index>[<expr><name>cand_index</name></expr>]</index></name> <operator>=</operator> <name><name>candidate</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>candidate</name> <operator>=</operator> <name><name>candidate</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name><name>aggr_value</name><index>[<expr><name>MAX_COL_VALUE_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>retrieve_aggr_value</name><argument_list>(<argument><expr><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>para</name><operator>-&gt;</operator><name>hav_condi</name><operator>-&gt;</operator><name>column_index</name></name></expr></argument>, <argument><expr><name>aggr_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>para</name><operator>-&gt;</operator><name>hav_condi</name><operator>-&gt;</operator><name>rel_type</name></name> <operator>||</operator> <call><name>fulfill_condi</name><argument_list>(<argument><expr><name>aggr_value</name></expr></argument>, <argument><expr><name><name>para</name><operator>-&gt;</operator><name>hav_condi</name></name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pkt_count</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>pkt_count</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>row_cnter</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>para</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name><name>candidates</name><index>[<expr><name>cand_index</name></expr>]</index></name> <operator>=</operator> <name><name>candidate</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>ptr_to_unlink</name> <init>= <expr><name>candidate</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>candidate</name> <operator>=</operator> <name><name>candidate</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>recv_queue</name> <init>= <expr><name><name>recv_queues</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>cand_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_queue_delete_link</name><argument_list>(<argument><expr><name><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>ptr_to_unlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>heap_adjust</name><parameter_list>(<parameter><decl><type><name>heap_type</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>compare_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call heap_adjust, s:%d, m:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>heap_element</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>is_dup</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>is_over</name> <operator>&amp;&amp;</operator> <name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>is_over</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: in adjust, break here:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>is_over</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>is_over</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>refreshed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>refreshed</name> <operator>&amp;&amp;</operator> <name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>is_prior_to</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>is_dup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>k</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_prior_to</name><argument_list>(<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>record</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
                                     <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>record</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>heap</name><operator>-&gt;</operator><name>order_para</name></name><operator>)</operator></expr></argument>,
                                     <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_dup</name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>is_prior_to</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>is_dup</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>is_dup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                        </block_content>}</block></else></if_stmt>

                        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>is_prior_to</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>

                    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name>refreshed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>refreshed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>is_over</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call over here, break j:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rc</name><operator>-&gt;</operator><name>is_over</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>is_dup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>is_prior_to</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>record</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>record</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>heap</name><operator>-&gt;</operator><name>order_para</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_dup</name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>is_dup</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>is_dup</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>s</name></expr>]</index></name><operator>-&gt;</operator><name>is_dup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>is_dup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>

                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>s</name></expr>]</index></name><operator>-&gt;</operator><name>refreshed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>s</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>s</name></expr>]</index></name><operator>-&gt;</operator><name>refreshed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_server_sess_wait_for_event</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ss_index</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>ev_type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ss_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ss_index</name> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_read_finished</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_waiting</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ss %d is waiting"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ss %d is not read finished, read pending:%d, fd:%d, ss index:%d"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>ev_type</name></expr></argument>, <argument><expr><name>server_session_con_handler</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call chassis_event_add_with_timeout"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_waiting</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ss %d is read finished"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_after_limit</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_finished</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>recv_queues</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier><modifier>*</modifier></type><name>candidates</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>candidates</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>is_more_to_read</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>candidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>iter</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call check_after_limit"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>gboolean</name></type> <name>is_over</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><name>candidate</name> <operator>=</operator> <name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>candidate</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>candidate</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>is_more_to_read</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: item is nil, index:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>guchar</name></type> <name>pkt_type</name> <init>= <expr><call><name>get_pkt_type</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name> <operator>||</operator> <name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: is over true:%d, pkt type:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pkt_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>is_over</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name> <operator>=</operator> <name><name>candidate</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: free packet addr:%p, iter:%d, pkt_type:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                    <argument><expr><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pkt_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>recv_queue</name> <init>= <expr><name><name>recv_queues</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>iter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_queue_delete_link</name><argument_list>(<argument><expr><name><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><operator>!</operator><name>is_over</name></expr>)</condition>;</do>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>is_finished</name> <operator>&amp;&amp;</operator> <name>is_more_to_read</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: finished reading, but needs more read:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><name>is_finished</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>is_more_to_read</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: not finished reading, but is_more_to_read false:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_more_to_read</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: need more reading for:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check_server_sess_wait_for_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_simple_merge</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_finished</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>send_queue</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>send_queue</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>recv_queues</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier><modifier>*</modifier></type><name>candidates</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>candidates</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>limit_t</name> <modifier>*</modifier></type><name>limit</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>limit</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>row_cnter</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>row_cnter</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>off_pos</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>off_pos</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>candidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>iter</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>heap_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>merged_output_size</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>merged_output_size</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_client_compressed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>merged_output_size</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>compressed_merged_output_size</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call do_simple_merge"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>shortaged</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>candidate</name> <operator>=</operator> <name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>recv_queue</name> <init>= <expr><name><name>recv_queues</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>iter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>candidate</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: candidate data is nil:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>row_cnter</name><operator>)</operator> <operator>==</operator> <name><name>limit</name><operator>-&gt;</operator><name>row_count</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: reach limit:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>guchar</name></type> <name>pkt_type</name> <init>= <expr><call><name>get_pkt_type</name><argument_list>(<argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: MYSQLD_PACKET_EOF here:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_pack_err</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name></name> <operator>=</operator> <name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: MYSQLD_PACKET_ERR here:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>off_pos</name><operator>)</operator> <operator>&lt;</operator> <name><name>limit</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>off_pos</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>

                <decl_stmt><decl><type><name>int</name></type> <name>packet_len</name> <init>= <expr><call><name>network_mysqld_proto_get_packet_len</name><argument_list>(<argument><expr><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name> <operator>+=</operator> <name>packet_len</name></expr>;</expr_stmt>

                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name> <operator>&gt;=</operator> <name>merged_output_size</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: send_part_content_to_client:%d, iter:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>send_part_content_to_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>row_cnter</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name> <operator>=</operator> <name><name>candidate</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_queue_delete_link</name><argument_list>(<argument><expr><name><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>candidate</name> <operator>=</operator> <name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><name>candidate</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>candidate</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_waiting</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: is_waiting true:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: candidate is nil for i:%d, recv_queues:%p"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iter</name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>shortaged</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: return part of responses"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>shortaged</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: need more reading for:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name> <operator>&gt;=</operator> <name>merged_output_size</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>send_part_content_to_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>check_server_sess_wait_for_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_finished</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check limit for:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>limit</name><operator>-&gt;</operator><name>row_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>row_cnter</name><operator>)</operator> <operator>&gt;=</operator> <name><name>limit</name><operator>-&gt;</operator><name>row_count</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: do call check_after_limit for:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>check_after_limit</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>is_finished</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call check_after_limit over for:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_sort_merge</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_finished</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>compare_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>send_queue</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>send_queue</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>recv_queues</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier><modifier>*</modifier></type><name>candidates</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>candidates</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>limit_t</name> <modifier>*</modifier></type><name>limit</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>limit</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>heap_type</name> <modifier>*</modifier></type><name>heap</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>heap</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>row_cnter</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>row_cnter</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>off_pos</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>off_pos</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>field_offsets</name> <init>= <expr><name><name>heap</name><operator>-&gt;</operator><name>order_para</name><operator>.</operator><name>field_offsets_cache</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>candidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>merged_output_size</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>merged_output_size</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_client_compressed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>merged_output_size</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>compressed_merged_output_size</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>last_output_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>row_cnter</name><operator>)</operator> <operator>&lt;</operator> <name><name>limit</name><operator>-&gt;</operator><name>row_count</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>is_over</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>is_err</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_pack_err</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>cand_index</name> <init>= <expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>record</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>candidates</name><index>[<expr><name>cand_index</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cand_index:%d is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cand_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>check_server_sess_wait_for_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cand_index</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>record</name> <operator>=</operator> <name><name>candidates</name><index>[<expr><name>cand_index</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: record:%p for index:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>record</name></expr></argument>, <argument><expr><name>cand_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>heap_adjust</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>compare_failed</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>cand_index</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>candidate</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>record</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>field_offsets</name><index>[<expr><name>cand_index</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: row counter:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>row_cnter</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>is_distinct</name></name> <operator>&amp;&amp;</operator> <name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>is_dup</name> <operator>&amp;&amp;</operator> <name>cand_index</name> <operator>!=</operator> <name>last_output_index</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: dup element at:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cand_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>off_pos</name><operator>)</operator> <operator>&lt;</operator> <name><name>limit</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>off_pos</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: off pos here:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>off_pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>

            <decl_stmt><decl><type><name>int</name></type> <name>packet_len</name> <init>= <expr><call><name>network_mysqld_proto_get_packet_len</name><argument_list>(<argument><expr><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name> <operator>+=</operator> <name>packet_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>candidate</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>row_cnter</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_output_index</name> <operator>=</operator> <name>cand_index</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name> <operator>&gt;=</operator> <name>merged_output_size</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: send_part_content_to_client:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>send_part_content_to_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>is_dup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>is_err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>refreshed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>is_prior_to</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>record</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>record</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>candidates</name><index>[<expr><name>cand_index</name></expr>]</index></name> <operator>=</operator> <name><name>candidate</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>recv_queue</name> <init>= <expr><name><name>recv_queues</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>cand_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: remove candidate:%p for queue:%p, ss:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>candidate</name></expr></argument>, <argument><expr><name>recv_queue</name></expr></argument>, <argument><expr><name>cand_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_queue_delete_link</name><argument_list>(<argument><expr><name><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>candidates</name><index>[<expr><name>cand_index</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>candidates</name><index>[<expr><name>cand_index</name></expr>]</index></name><operator>-&gt;</operator><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: item is nil, index:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cand_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name> <operator>&gt;=</operator> <name>merged_output_size</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>send_part_content_to_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: send_part_content_to_client:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>aggr_output_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>check_server_sess_wait_for_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cand_index</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>candidates</name><index>[<expr><name>cand_index</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guchar</name></type> <name>pkt_type</name> <init>= <expr><call><name>get_pkt_type</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name> <operator>||</operator> <name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: index is over:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cand_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>is_over</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>is_err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>is_err</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>is_over</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: candidate:%p for queue:%p, ss:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>candidates</name><index>[<expr><name>cand_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>recv_queue</name></expr></argument>, <argument><expr><name>cand_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>heap_adjust</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>compare_failed</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name><name>limit</name><operator>-&gt;</operator><name>row_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>row_cnter</name><operator>)</operator> <operator>&gt;=</operator> <name><name>limit</name><operator>-&gt;</operator><name>row_count</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>check_after_limit</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>is_finished</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_heap_for_merge_sort</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>compare_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier><modifier>*</modifier></type><name>candidates</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>candidates</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>heap_type</name> <modifier>*</modifier></type><name>heap</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>heap</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>iter</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name><name>heap</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>is_dup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>is_err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>refreshed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>is_prior_to</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>guchar</name></type> <name>pkt_type</name> <init>= <expr><call><name>get_pkt_type</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name> <operator>||</operator> <name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>is_over</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>is_err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>is_err</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>record</name> <operator>=</operator> <name><name>candidates</name><index>[<expr><name>iter</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>is_over</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>check_server_sess_wait_for_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>len</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>iter</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>heap_adjust</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>compare_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>compare_failed</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: create heap over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>callback_merge</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_finished</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>merge_failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>send_queue</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>send_queue</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>heap_type</name> <modifier>*</modifier></type><name>heap</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>heap</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>order_array_size</name> <init>= <expr><name><name>heap</name><operator>-&gt;</operator><name>order_para</name><operator>.</operator><name>order_array_size</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>order_array_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>do_sort_merge</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>is_finished</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge_failed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>merge_failed</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>RM_FAIL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>RM_SUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_simple_merge</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>is_finished</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>RM_SUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_finished</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: finished is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>is_pack_err</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: packet err while p is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>RM_FAIL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pack_err_met</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name><operator>)</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>guchar</name></type> <name>pkt_type</name> <init>= <expr><call><name>get_pkt_type</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: Add err packet to send queue"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: Add non err packet info to send queue when err pack is met"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>new_err_pack</name> <init>= <expr><call><name>g_string_new_len</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>new_err_pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* TODO if in trans, then needs to set 'in transaction' flag ? */</comment>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>eof_pkt</name> <init>= <expr><call><name>g_string_new_len</name><argument_list>(<argument><expr><literal type="string">"\x05\x00\x00\x07\xfe\x00\x00\x02\x00"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>eof_pkt</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>eof_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: send queue len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>RM_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_merge</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>merge_failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>heap_type</name> <modifier>*</modifier></type><name>heap</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>heap</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_finished</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>order_para</name><operator>.</operator><name>order_array_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>create_heap_for_merge_sort</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_sort_merge</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>is_finished</name></expr></argument>, <argument><expr><name>merge_failed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_simple_merge</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>is_finished</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>is_pack_err</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: packet err while p is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pack_err_met</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name><operator>)</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>guchar</name></type> <name>pkt_type</name> <init>= <expr><call><name>get_pkt_type</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: Add err packet to send queue"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: Add non err packet info to send queue when err pack is met"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>new_err_pack</name> <init>= <expr><call><name>g_string_new_len</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>err_pack</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name>new_err_pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type>
<name>check_dist_tran_resultset</name><parameter_list>(<parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>recv_queue</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* only check the first packet in each recv_queue */</comment>
    <if_stmt><if>if <condition>(<expr><name>pkt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>len</name> <operator>&gt;</operator> <name>NET_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>guchar</name></type> <name>pkt_type</name> <init>= <expr><call><name>get_pkt_type</name><argument_list>(<argument><expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pkt type:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>pkt_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type><name>err_packet</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>err_packet</name> <operator>=</operator> <call><name>network_mysqld_err_packet_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>network_mysqld_proto_get_err_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>checked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><name><name>err_packet</name><operator>-&gt;</operator><name>errcode</name></name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>ER_XA_RBROLLBACK</name></expr>:</case>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: ER_XA_RBROLLBACK for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>ER_XA_RBDEADLOCK</name></expr>:</case>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: ER_XA_RBDEADLOCK for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>ER_XA_RBTIMEOUT</name></expr>:</case>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: ER_XA_RBTIMEOUT for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>ER_LOCK_DEADLOCK</name></expr>:</case>
                <case>case <expr><name>ER_LOCK_WAIT_TIMEOUT</name></expr>:</case>
                    <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>ER_DUP_ENTRY</name></expr>:</case>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: ER_DUP_ENTRY here:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_resp_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>last_resp_num</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></switch>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>checked</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>sqlstate</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"XA"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: network_mysqld_proto_get_err_packet err"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>network_mysqld_err_packet_free</name><argument_list>(<argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>merge_for_modify</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>send_queue</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name></decl></parameter>,
                 <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res_merge</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* INSERT/UPDATE/DELETE expecting OK packet */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>total_affected_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>total_warnings</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>recv_q</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>recv_q</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/* only check the first packet in each recv_queue */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name> <operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <name>NET_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:pkt is wrong"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>guchar</name></type> <name>pkt_type</name> <init>= <expr><call><name>get_pkt_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>pkt_type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case><block>{<block_content>
            <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name> <init>= <expr><block>{ <expr><name>pkt</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>network_mysqld_ok_packet_t</name></type> <name>one_ok</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>network_mysqld_proto_skip_network_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>network_mysqld_proto_get_ok_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one_ok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>total_affected_rows</name> <operator>+=</operator> <name><name>one_ok</name><operator>.</operator><name>affected_rows</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>total_warnings</name> <operator>+=</operator> <name><name>one_ok</name><operator>.</operator><name>warnings</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>MYSQLD_PACKET_EOF</name></expr>:</case>
            <break>break;</break>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
            <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_queue_remove</name><argument_list>(<argument><expr><name><name>recv_q</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:MYSQLD_PACKET_ERR is met"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>total_affected_rows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_record_updated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>table_type</name></name> <operator>==</operator> <name>GLOBAL_TABLE</name> <operator>&amp;&amp;</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>total_affected_rows</name> <operator>/=</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>candidate_config_changed</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>total_affected_rows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_changed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>total_affected_rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>, <argument><expr><name>total_warnings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>disp_orderby_info</name><parameter_list>(<parameter><decl><type><name>sql_column_list_t</name> <modifier>*</modifier></type><name>sel_orderby</name></decl></parameter>, <parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res_merge</name></decl></parameter>,
                  <parameter><decl><type><name>ORDER_BY</name> <modifier>*</modifier></type><name>order_array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order_array_size</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sel_orderby</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_column_t</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>sel_orderby</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name><name>col</name><operator>-&gt;</operator><name>expr</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ORDER_BY</name> <modifier>*</modifier></type><name>ord_col</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>order_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ord_col</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>      <comment type="block">/* initial invalid value: -1 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_ID</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ord_col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name>MAX_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_INTEGER</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint64</name></type> <name>v</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sql_expr_get_int</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ord_col</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>v</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name><name>res_merge</name><operator>-&gt;</operator><name>field_count</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_FUNCTION</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ord_col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>expr</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_DOT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ord_col</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name>MAX_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ord_col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name>MAX_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"order by name error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>ord_col</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <operator>(</operator><name><name>col</name><operator>-&gt;</operator><name>sort_order</name></name> <operator>==</operator> <name>SQL_SO_DESC</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_order_by_fields</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>, <argument><expr><name>order_array</name></expr></argument>, <argument><expr><name>order_array_size</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>disp_groupby_info</name><parameter_list>(<parameter><decl><type><name>sql_column_list_t</name> <modifier>*</modifier></type><name>sel_groupby</name></decl></parameter>, <parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res_merge</name></decl></parameter>,
                  <parameter><decl><type><name>group_by_t</name> <modifier>*</modifier></type><name>group_array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group_array_size</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sel_groupby</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>sel_groupby</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>group_by_t</name> <modifier>*</modifier></type><name>group_col</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>group_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>group_col</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>    <comment type="block">/* initial invalid value: -1 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_ID</name></expr>)</condition> <block>{<block_content>    <comment type="block">/* TODO: wrap sql_expr_t in list */</comment>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>group_col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name>MAX_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_DOT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sql_expr_get_dotted_names</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                      <argument><expr><name><name>group_col</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>, <argument><expr><name>MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
                                      <argument><expr><name><name>group_col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_INTEGER</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint64</name></type> <name>v</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sql_expr_get_int</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>group_col</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>v</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name><name>res_merge</name><operator>-&gt;</operator><name>field_count</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_FUNCTION</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>group_col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>expr</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"group by name error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_group_by_fields</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>, <argument><expr><name>group_array</name></expr></argument>, <argument><expr><name>group_array_size</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>retrieve_orderby_info_from_groupby_info</name><parameter_list>(<parameter><decl><type><name>sql_column_list_t</name> <modifier>*</modifier></type><name>sel_groupby</name></decl></parameter>, <parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res_merge</name></decl></parameter>,
                                        <parameter><decl><type><name>ORDER_BY</name> <modifier>*</modifier></type><name>order_array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order_array_size</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sel_groupby</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>sel_groupby</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ORDER_BY</name> <modifier>*</modifier></type><name>ord_col</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>order_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ord_col</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>      <comment type="block">/* initial invalid value: -1 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_ID</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ord_col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name>MAX_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_INTEGER</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint64</name></type> <name>v</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sql_expr_get_int</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ord_col</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>v</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name><name>res_merge</name><operator>-&gt;</operator><name>field_count</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_FUNCTION</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ord_col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>expr</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_DOT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sql_expr_get_dotted_names</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                      <argument><expr><name><name>ord_col</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>, <argument><expr><name>MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
                                      <argument><expr><name><name>ord_col</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"order by name error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_order_by_fields</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>, <argument><expr><name>order_array</name></expr></argument>, <argument><expr><name>order_array_size</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_network_packet_err</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>GList</name> <modifier>*</modifier><modifier>*</modifier></type><name>candidates</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name></decl></parameter>,
                         <parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>send_queue</name></decl></parameter>, <parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res_merge</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name><name>candidates</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>
        <comment type="block">/* only check the first packet in incoming row packets */</comment>
        <if_stmt><if>if <condition>(<expr><name>pkt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>NET_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>guchar</name></type> <name>pkt_type</name> <init>= <expr><call><name>get_pkt_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>recv_queue</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_queue_remove</name><argument_list>(<argument><expr><name><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:MYSQLD_PACKET_ERR met, num_pending_servers:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_SUCCESS</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:pkt is wrong"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_field_count_consistant</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>, <parameter><decl><type><name>guint64</name> <modifier>*</modifier></type><name>field_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint64</name></type> <name>last_field_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>cetus_result_retrieve_field_count</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>field_count</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:cetus_result_retrieve_field_count failure"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>last_field_count</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>last_field_count</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><name>field_count</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:field count different, field_count1:%d, field_count2:%d"</literal></expr></argument>,
                          <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>last_field_count</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>field_count</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>last_field_count</name> <operator>=</operator> <operator>*</operator><name>field_count</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>prepare_for_row_process</name><parameter_list>(<parameter><decl><type><name>GList</name> <modifier>*</modifier><modifier>*</modifier></type><name>candidates</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name></decl></parameter>, <parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>send_queue</name></decl></parameter>,
                        <parameter><decl><type><name>guint</name></type> <name>pkt_count</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>candidate_iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* insert 'ROW packets' to candidates */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>recv_q</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>rows_start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pkt_count:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>pkt_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <comment type="block">/* sending result header, field-defs and EOF once */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>pkt_count</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>recv_q</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>packet</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:packet null, enlarge max_header_size, pkt cnt:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>pkt_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/* check if the last packet is field EOF packet */</comment>
        </block_content>}</block></for>

        <expr_stmt><expr><name>rows_start</name> <operator>=</operator> <call><name>g_queue_peek_head_link</name><argument_list>(<argument><expr><name><name>recv_q</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>rows_start</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>candidates</name><index>[<expr><name>candidate_iter</name></expr>]</index></name> <operator>=</operator> <name>rows_start</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>candidate_iter</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:rows start null, enlarge max_header_size, pkt cnt:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>pkt_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>merge_for_show_warnings</name><parameter_list>(<parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>send_queue</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name></decl></parameter>,
                        <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res_merge</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint64</name></type> <name>field_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_field_count_consistant</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_count</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>res_merge</name><operator>-&gt;</operator><name>field_count</name></name> <operator>=</operator> <name>field_count</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier><modifier>*</modifier></type><name>candidates</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>GList</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/* field-count-packet + eof-packet */</comment>
    <decl_stmt><decl><type><name>guint</name></type> <name>pkt_count</name> <init>= <expr><name><name>res_merge</name><operator>-&gt;</operator><name>field_count</name></name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prepare_for_row_process</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>pkt_count</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:prepare_for_row_process failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_network_packet_err</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>candidates</name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>res_merge</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:packet err is met"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>merge_parameters_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>=</operator> <name>send_queue</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>recv_queues</name></name> <operator>=</operator> <name>recv_queues</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>candidates</name></name> <operator>=</operator> <name>candidates</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name> <operator>=</operator> <name>pkt_count</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>row_count</name></name> <operator>=</operator> <name>G_MAXINT32</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pack_err_met</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_simple_merge</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:merge failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pkt_count</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name></expr>;</expr_stmt>

    <comment type="block">/* after adding all packets we don't need candidate list anymore */</comment>

    <comment type="block">/* need to append EOF after all Row Data Packets?? Yes
     * update packet number in header 
     */</comment>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: append here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* TODO if in trans, then needs to set 'in transaction' flag ? */</comment>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>eof_pkt</name> <init>= <expr><call><name>g_string_new_len</name><argument_list>(<argument><expr><literal type="string">"\x05\x00\x00\x07\xfe\x00\x00\x02\x00"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>eof_pkt</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>pkt_count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>eof_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>merge_for_admin</name><parameter_list>(<parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>send_queue</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name></decl></parameter>,
        <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res_merge</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>recv_q</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>recv_q</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/* only check the first packet in each recv_queue */</comment>
        <if_stmt><if>if <condition>(<expr><name>pkt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>NET_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>guchar</name></type> <name>pkt_type</name> <init>= <expr><call><name>get_pkt_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name> <operator>||</operator> <name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>recv_q</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>guint64</name></type> <name>field_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_field_count_consistant</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_count</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>res_merge</name><operator>-&gt;</operator><name>field_count</name></name> <operator>=</operator> <name>field_count</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier><modifier>*</modifier></type><name>candidates</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>GList</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/* field-count-packet + eof-packet */</comment>
    <decl_stmt><decl><type><name>guint</name></type> <name>pkt_count</name> <init>= <expr><name><name>res_merge</name><operator>-&gt;</operator><name>field_count</name></name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prepare_for_row_process</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>pkt_count</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:prepare_for_row_process failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>merge_parameters_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>=</operator> <name>send_queue</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>recv_queues</name></name> <operator>=</operator> <name>recv_queues</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>candidates</name></name> <operator>=</operator> <name>candidates</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name> <operator>=</operator> <name>pkt_count</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>row_count</name></name> <operator>=</operator> <name>G_MAXINT32</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pack_err_met</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_simple_merge</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:merge failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pkt_count</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name></expr>;</expr_stmt>

    <comment type="block">/* after adding all packets we don't need candidate list anymore */</comment>

    <comment type="block">/* need to append EOF after all Row Data Packets?? Yes
     * update packet number in header 
     */</comment>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: append here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* TODO if in trans, then needs to set 'in transaction' flag ? */</comment>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>eof_pkt</name> <init>= <expr><call><name>g_string_new_len</name><argument_list>(<argument><expr><literal type="string">"\x05\x00\x00\x07\xfe\x00\x00\x02\x00"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>eof_pkt</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>pkt_count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>eof_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_fail_met</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>send_queue</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name></decl></parameter>,
               <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>uniq_id</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>orig_sql</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>recv_q</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>recv_q</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/* only check the first packet in each recv_queue */</comment>
        <if_stmt><if>if <condition>(<expr><name>pkt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>NET_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>guchar</name></type> <name>pkt_type</name> <init>= <expr><call><name>get_pkt_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name> <operator>||</operator> <name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: failed query:%s, server:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>orig_sql</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>recv_q</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_DDL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: failed ddl query:%s, server:%s"</literal></expr></argument>,
                            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>orig_sql</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: merge failed for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>admin_resultset_merge</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>send_queue</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name></decl></parameter>,
        <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cetus_result_t</name></type> <name>res_merge</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call merge_for_admin"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>merge_for_admin</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_merge</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call merge_for_modify"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>merge_for_modify</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_merge</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_SUCCESS</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>merge_for_select</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>send_queue</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name></decl></parameter>,
                 <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>cetus_result_t</name> <modifier>*</modifier></type><name>res_merge</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><operator>(</operator><name>sql_select_t</name> <operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>guint64</name></type> <name>field_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_field_count_consistant</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_count</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>res_merge</name><operator>-&gt;</operator><name>field_count</name></name> <operator>=</operator> <name>field_count</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>group_aggr_t</name></type> <name><name>aggr_array</name><index>[<expr><name>MAX_AGGR_FUNS</name></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>aggr_num</name> <init>= <expr><call><name>sql_expr_list_find_aggregates</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><name>aggr_array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sql_column_list_t</name> <modifier>*</modifier></type><name>sel_orderby</name> <init>= <expr><name><name>select</name><operator>-&gt;</operator><name>orderby_clause</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>sel_groupby</name> <init>= <expr><name><name>select</name><operator>-&gt;</operator><name>groupby_clause</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sel_orderby</name> <operator>||</operator> <name>sel_groupby</name> <operator>||</operator> <name>aggr_num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>first_queue</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><call><name>cetus_result_parse_fielddefs</name><argument_list>(<argument><expr><name>res_merge</name></expr></argument>, <argument><expr><name><name>first_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:parse_fielddefs failed:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>ORDER_BY</name></type> <name><name>order_array</name><index>[<expr><name>MAX_ORDER_COLS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>order_array_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* number of ORDER_BY Columns */</comment>
    <if_stmt><if>if <condition>(<expr><name>sel_orderby</name> <operator>&amp;&amp;</operator> <name><name>sel_orderby</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>order_array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ORDER_BY</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ORDER_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>order_array_size</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>MAX_ORDER_COLS</name></expr></argument>, <argument><expr><name><name>sel_orderby</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>disp_orderby_info</name><argument_list>(<argument><expr><name>sel_orderby</name></expr></argument>, <argument><expr><name>res_merge</name></expr></argument>, <argument><expr><name>order_array</name></expr></argument>, <argument><expr><name>order_array_size</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:disp_orderby_info failed:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>group_by_t</name></type> <name><name>group_array</name><index>[<expr><name>MAX_GROUP_COLS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>group_array_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* number of group_by_t Columns */</comment>
    <if_stmt><if>if <condition>(<expr><name>sel_groupby</name> <operator>&amp;&amp;</operator> <name><name>sel_groupby</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>group_array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>group_by_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_GROUP_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>group_array_size</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>MAX_GROUP_COLS</name></expr></argument>, <argument><expr><name><name>sel_groupby</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>disp_groupby_info</name><argument_list>(<argument><expr><name>sel_groupby</name></expr></argument>, <argument><expr><name>res_merge</name></expr></argument>, <argument><expr><name>group_array</name></expr></argument>, <argument><expr><name>group_array_size</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:disp_groupby_info failed:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>sel_orderby</name> <operator>&amp;&amp;</operator> <name><name>sel_orderby</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* if order by &amp; group by both appears, it's guaranteed they have
               only one same column */</comment>
            <expr_stmt><expr><name><name>group_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>desc</name> <operator>=</operator> <name><name>order_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>desc</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>field_count</name> <operator>==</operator> <name>group_array_size</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>order_array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ORDER_BY</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ORDER_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>order_array_size</name> <operator>=</operator> <name>group_array_size</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>retrieve_orderby_info_from_groupby_info</name><argument_list>(<argument><expr><name>sel_groupby</name></expr></argument>, <argument><expr><name>res_merge</name></expr></argument>,
                                                             <argument><expr><name>order_array</name></expr></argument>, <argument><expr><name>order_array_size</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:disp_orderby_info from group by failed:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>aggr_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_mysqld_proto_fielddef_t</name> <modifier>*</modifier></type><name>fdef</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>res_merge</name><operator>-&gt;</operator><name>fielddefs</name></name></expr></argument>, <argument><expr><name><name>aggr_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>aggr_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>fdef</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier><modifier>*</modifier></type><name>candidates</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>GList</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/* field-count-packet + eof-packet */</comment>
    <decl_stmt><decl><type><name>guint</name></type> <name>pkt_count</name> <init>= <expr><name><name>res_merge</name><operator>-&gt;</operator><name>field_count</name></name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prepare_for_row_process</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>pkt_count</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:prepare_for_row_process failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_network_packet_err</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>candidates</name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>res_merge</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:packet err is met"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>limit_t</name></type> <name>limit</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>limit</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>limit</name><operator>.</operator><name>row_count</name></name> <operator>=</operator> <name>G_MAXINT32</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_expr_get_int</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>limit</name><operator>.</operator><name>row_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_expr_get_int</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>limit</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pack_err_met</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>having_condition_t</name> <modifier>*</modifier></type><name>hav_condi</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>hav_condi</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>aggr_num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>aggr_by_group_para_t</name></type> <name>para</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>para</name><operator>.</operator><name>send_queue</name></name> <operator>=</operator> <name>send_queue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>para</name><operator>.</operator><name>recv_queues</name></name> <operator>=</operator> <name>recv_queues</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>para</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <operator>&amp;</operator><name>limit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>para</name><operator>.</operator><name>group_array</name></name> <operator>=</operator> <name>group_array</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>para</name><operator>.</operator><name>aggr_array</name></name> <operator>=</operator> <name>aggr_array</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>para</name><operator>.</operator><name>hav_condi</name></name> <operator>=</operator> <name>hav_condi</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>para</name><operator>.</operator><name>group_array_size</name></name> <operator>=</operator> <name>group_array_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>para</name><operator>.</operator><name>aggr_num</name></name> <operator>=</operator> <name>aggr_num</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aggr_by_group</name><argument_list>(<argument><expr><operator>&amp;</operator><name>para</name></expr></argument>, <argument><expr><name>candidates</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt_count</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:aggr_by_group error"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>merge_parameters_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>heap_type</name> <modifier>*</modifier></type><name>heap</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>heap_type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <name>heap</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>heap_element</name> <modifier>*</modifier></type><name>elements</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>heap_element</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <name>elements</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>iter</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name> <operator>=</operator> <name>elements</name> <operator>+</operator> <name>iter</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>is_dup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>is_err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>refreshed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>iter</name></expr>]</index></name><operator>-&gt;</operator><name>is_prior_to</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>=</operator> <name>send_queue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>recv_queues</name></name> <operator>=</operator> <name>recv_queues</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>candidates</name></name> <operator>=</operator> <name>candidates</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name> <operator>=</operator> <name>pkt_count</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>limit</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>row_count</name></name> <operator>=</operator> <name><name>limit</name><operator>.</operator><name>row_count</name></name></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>order_array_size</name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name><name>heap</name><operator>-&gt;</operator><name>order_para</name></name><operator>)</operator><operator>.</operator><name>order_array</name> <operator>+</operator> <name>iter</name></expr></argument>, <argument><expr><name>order_array</name> <operator>+</operator> <name>iter</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ORDER_BY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pack_err_met</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>order_para</name><operator>.</operator><name>order_array_size</name></name> <operator>=</operator> <name>order_array_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <name>heap</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>select</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SF_DISTINCT</name><operator>)</operator> <operator>||</operator> <name>field_count</name> <operator>==</operator> <name>group_array_size</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_distinct</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>merge_failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>do_merge</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge_failed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>merge_failed</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:merge failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:result is zero"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>pkt_count</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pack_err_met</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pack_err_met</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* after adding all packets we don't need candidate list anymore */</comment>

    <comment type="block">/* need to append EOF after all Row Data Packets?? Yes
     * update packet number in header 
     */</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pack_err_met</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: append here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* TODO if in trans, then needs to set 'in transaction' flag ? */</comment>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>eof_pkt</name> <init>= <expr><call><name>g_string_new_len</name><argument_list>(<argument><expr><literal type="string">"\x05\x00\x00\x07\xfe\x00\x00\x02\x00"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>eof_pkt</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>pkt_count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>eof_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: err packet is met"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>resultset_merge</name><parameter_list>(<parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>send_queue</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name></decl></parameter>,
                <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>uniq_id</name></decl></parameter>, <parameter><decl><type><name>result_merge_t</name> <modifier>*</modifier></type><name>merged_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>cetus_result_t</name></type> <name>res_merge</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>send_queue</name> <operator>||</operator> <operator>!</operator><name>recv_queues</name> <operator>||</operator> <name><name>recv_queues</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>context</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: packet-&gt;str[NET_HEADER_SIZE] != MYSQLD_PACKET_EOF"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_FAIL</name></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_fail_met</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>uniq_id</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>explain</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>first_q</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>first_q</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>first_q</name><operator>-&gt;</operator><name>chunks</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>first_q</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_SUCCESS</name></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>STMT_SHOW_WARNINGS</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>merge_for_show_warnings</name><argument_list>(<argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_merge</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>STMT_SELECT</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>merge_for_select</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_merge</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>STMT_INSERT</name></expr>:</case>
    <case>case <expr><name>STMT_UPDATE</name></expr>:</case>
    <case>case <expr><name>STMT_DELETE</name></expr>:</case>
    <case>case <expr><name>STMT_SET</name></expr>:</case>
    <case>case <expr><name>STMT_START</name></expr>:</case>
    <case>case <expr><name>STMT_COMMIT</name></expr>:</case>
    <case>case <expr><name>STMT_ROLLBACK</name></expr>:</case>
    <default>default:</default>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>merge_for_modify</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>send_queue</name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_merge</name></expr></argument>, <argument><expr><name>merged_result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>cetus_result_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>merged_result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RM_SUCCESS</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
