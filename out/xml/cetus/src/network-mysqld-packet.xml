<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/network-mysqld-packet.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<comment type="block" format="doxygen">/**
 * codec's for the MySQL client protocol
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>

<function><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type>
<name>network_mysqld_com_query_result_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>com_query</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>com_query</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_mysqld_com_query_result_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>com_query</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>
    <comment type="block">/* 
     * can have 3 values: NULL for unknown, OK for a OK packet, 
     * ERR for a error-packet
     */</comment>
    <expr_stmt><expr><name><name>com_query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>=</operator> <name>MYSQLD_PACKET_NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>com_query</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_com_query_result_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>udata</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>udata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @return -1 on error
 *         0  on success and done
 *         1  on success and need more
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_com_query_result</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,
                                          <parameter><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>use_binary_row_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>is_finished</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint8</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_eof_packet_t</name> <modifier>*</modifier></type><name>eof_packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_ok_packet_t</name> <modifier>*</modifier></type><name>ok_packet</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * if we get a OK in the first packet there will be no result-set
     */</comment>
    <switch>switch <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PARSE_COM_QUERY_INIT</name></expr>:</case>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>network_mysqld_proto_peek_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: status error, query state:%d, status:%d, packet offset:%d"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>=</operator> <name>MYSQLD_PACKET_ERR</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case> <comment type="block">/* e.g. DELETE FROM tbl */</comment>
            <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>=</operator> <name>MYSQLD_PACKET_OK</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>ok_packet</name> <operator>=</operator> <call><name>network_mysqld_ok_packet_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>network_mysqld_proto_get_ok_packet</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>ok_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ok_packet</name><operator>-&gt;</operator><name>server_status</name></name> <operator>&amp;</operator> <name>SERVER_MORE_RESULTS_EXISTS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>server_status</name></name> <operator>=</operator> <name><name>ok_packet</name><operator>-&gt;</operator><name>server_status</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server status in ok packet, got: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>server_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>warning_count</name></name> <operator>=</operator> <name><name>ok_packet</name><operator>-&gt;</operator><name>warnings</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>affected_rows</name></name> <operator>=</operator> <name><name>ok_packet</name><operator>-&gt;</operator><name>affected_rows</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>insert_id</name></name> <operator>=</operator> <name><name>ok_packet</name><operator>-&gt;</operator><name>insert_id</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>was_resultset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>binary_encoded</name></name> <operator>=</operator> <name>use_binary_row_data</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>network_mysqld_ok_packet_free</name><argument_list>(<argument><expr><name>ok_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MYSQLD_PACKET_NULL</name></expr>:</case>
            <comment type="block">/* OH NO, LOAD DATA INFILE :) */</comment>
            <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_LOCAL_INFILE_DATA</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MYSQLD_PACKET_EOF</name></expr>:</case>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: COM_QUERY should not be (EOF), got: 0x%02x"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>=</operator> <name>MYSQLD_PACKET_OK</name></expr>;</expr_stmt>
            <comment type="block">/* looks like a result */</comment>
            <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_FIELD</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
        <break>break;</break>
    <case>case <expr><name>PARSE_COM_QUERY_FIELD</name></expr>:</case>

        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_peek_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
        <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
        <case>case <expr><name>MYSQLD_PACKET_NULL</name></expr>:</case>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: COM_QUERY !=(OK|NULL|ERR), got: 0x%02x"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <break>break;</break>
        <case>case <expr><name>MYSQLD_PACKET_EOF</name></expr>:</case>
                    <comment type="block" format="doxygen">/**
                     * in 5.0 we have CURSORs
                     *
                     * COM_STMT_EXECUTE would have _CURSOR_EXISTS set in 
                     * the EOF and no resultset
                     * COM_STMT_FETCH would be executed afterwards to 
                     * fetch the rows from the cursor
                     *
                     * Other commands may have that flag set too, 
                     * with no special meaning
                     * 
                     */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>eof_packet</name> <operator>=</operator> <call><name>network_mysqld_eof_packet_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>network_mysqld_proto_get_eof_packet</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>eof_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MYSQL_VERSION_ID</name> <operator>&gt;=</operator> <literal type="number">50000</literal></expr></cpp:if>
                    <comment type="block">/* 5.5 may send a SERVER_MORE_RESULTS_EXISTS as part of the first 
                     * EOF together with SERVER_STATUS_CURSOR_EXISTS. In that case,
                     * we aren't finished. (#61998)
                     *
                     * Only if _CURSOR_EXISTS is set alone AND this is COM_STMT_EXECUTE,
                     * we have a field-definition-only resultset
                     *
                     * CURSOR_EXISTS indications that COM_STMT_FETCH should be used to
                     * fetch data for this cursor, but can only be don't if we have 
                     * a prepared statement
                     */</comment>
                    <if_stmt><if>if <condition>(<expr><name>use_binary_row_data</name> <operator>&amp;&amp;</operator>
                        <name><name>eof_packet</name><operator>-&gt;</operator><name>server_status</name></name> <operator>&amp;</operator> <name>SERVER_STATUS_CURSOR_EXISTS</name> <operator>&amp;&amp;</operator>
                        <operator>!</operator><operator>(</operator><name><name>eof_packet</name><operator>-&gt;</operator><name>server_status</name></name> <operator>&amp;</operator> <name>SERVER_MORE_RESULTS_EXISTS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: is_finished here without PARSE_COM_QUERY_RESULT"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_RESULT</name></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_RESULT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set query state:%d for parse.data:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block">/* track the server_status of the 1st EOF packet */</comment>
                    <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>server_status</name></name> <operator>=</operator> <name><name>eof_packet</name><operator>-&gt;</operator><name>server_status</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server status in eof packet, got: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>eof_packet</name><operator>-&gt;</operator><name>server_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>network_mysqld_eof_packet_free</name><argument_list>(<argument><expr><name>eof_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_RESULT</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set query state:%d for parse.data:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>
        <break>break;</break>
    <case>case <expr><name>PARSE_COM_QUERY_RESULT</name></expr>:</case>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_peek_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_EOF</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>eof_packet</name> <operator>=</operator> <call><name>network_mysqld_eof_packet_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_eof_packet</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>eof_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>was_resultset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SERVER_PS_OUT_PARAMS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_PS_OUT_PARAMS</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <comment type="block" format="doxygen">/**
                             * a PS_OUT_PARAMS is set if a COM_STMT_EXECUTE executes 
                             * a CALL sp(?) where sp is a PROCEDURE with OUT params 
                             *
                             * ...
                             * 05 00 00 12 fe 00 00 0a 10 -- end column-def 
                             * (auto-commit, more-results, ps-out-params)
                             * ...
                             * 05 00 00 14 fe 00 00 02 00 -- end of rows (auto-commit), 
                             * see the missing (more-results, ps-out-params)
                             * 07 00 00 15 00 00 00 02 00 00 00 -- OK for the CALL
                             *
                             * for all other resultsets we trust the status-flags of 
                             * the 2nd EOF packet
                             */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>query</name><operator>-&gt;</operator><name>server_status</name></name> <operator>&amp;</operator> <name>SERVER_PS_OUT_PARAMS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>server_status</name></name> <operator>=</operator> <name><name>eof_packet</name><operator>-&gt;</operator><name>server_status</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>warning_count</name></name> <operator>=</operator> <name><name>eof_packet</name><operator>-&gt;</operator><name>warnings</name></name></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>server_status</name></name> <operator>&amp;</operator> <name>SERVER_MORE_RESULTS_EXISTS</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: here query state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: here query state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>network_mysqld_eof_packet_free</name><argument_list>(<argument><expr><name>eof_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
            <comment type="block">/* like 
             * 
             * EXPLAIN SELECT *FROM dual; returns an error
             * 
             * EXPLAIN SELECT 1 FROM dual; returns a result-set
             * */</comment>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
        <case>case <expr><name>MYSQLD_PACKET_NULL</name></expr>:</case>
        <default>default:</default>
            <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>rows</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
        <break>break;</break>
    <case>case <expr><name>PARSE_COM_QUERY_LOCAL_INFILE_DATA</name></expr>:</case>
        <comment type="block">/* we will receive a empty packet if we are done */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_LOCAL_INFILE_RESULT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>PARSE_COM_QUERY_LOCAL_INFILE_RESULT</name></expr>:</case>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MYSQLD_PACKET_NULL</name></expr>:</case>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
        <case>case <expr><name>MYSQLD_PACKET_EOF</name></expr>:</case>
        <default>default:</default>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: COM_QUERY,should be (OK), got: 0x%02x"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <break>break;</break>
        </block_content>}</block></switch>

        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>is_finished</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_mysqld_com_stmt_prep_result_t</name> <modifier>*</modifier></type>
<name>network_mysqld_com_stmt_prepare_result_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_com_stmt_prep_result_t</name> <modifier>*</modifier></type><name>udata</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>udata</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_mysqld_com_stmt_prep_result_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>udata</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

    <return>return <expr><name>udata</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_com_stmt_prepare_result_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_com_stmt_prep_result_t</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>udata</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>udata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_get_com_stmt_prep_result</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_com_stmt_prep_result_t</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint8</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_finished</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>udata</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>udata</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
            <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">12</literal> <operator>+</operator> <name>NET_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* the header contains the number of EOFs we expect to see
             * - no params -&gt; 0
             * - params | fields -&gt; 1
             * - params + fields -&gt; 2 
             */</comment>
            <expr_stmt><expr><name><name>udata</name><operator>-&gt;</operator><name>want_eofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>udata</name><operator>-&gt;</operator><name>want_eofs</name></name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>udata</name><operator>-&gt;</operator><name>want_eofs</name></name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>udata</name><operator>-&gt;</operator><name>want_eofs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: want_eofs value:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>udata</name><operator>-&gt;</operator><name>want_eofs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>udata</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: network_mysqld_proto_get_com_stmt_prep_rs get packet err:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>udata</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"%s: COM_STMT_PREPARE should either get a (OK|ERR), got %02x"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
        <case>case <expr><name>MYSQLD_PACKET_NULL</name></expr>:</case>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
            <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"%s: COM_STMT_PREPARE should not be (OK|ERR|NULL), got: %02x"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MYSQLD_PACKET_EOF</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>udata</name><operator>-&gt;</operator><name>want_eofs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: other want_eofs value:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>udata</name><operator>-&gt;</operator><name>want_eofs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>is_finished</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_mysqld_com_init_db_result_t</name> <modifier>*</modifier></type>
<name>network_mysqld_com_init_db_result_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_com_init_db_result_t</name> <modifier>*</modifier></type><name>udata</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>udata</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_mysqld_com_init_db_result_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>udata</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_com_init_db_result_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_com_init_db_result_t</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>udata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_com_init_db_result_track_state</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_com_init_db_result_t</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>network_mysqld_proto_skip_network_header</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_mysqld_proto_get_gstr_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_get_com_init_db</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,
                                     <parameter><decl><type><name>network_mysqld_com_init_db_result_t</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint8</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_finished</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * in case we have a init-db statement we track the db-change on the server-side
     * connection
     */</comment>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: COM_INIT_DB got %02x"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
        <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_err_met</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name></name> <operator>&amp;&amp;</operator> <name><name>udata</name><operator>-&gt;</operator><name>db_name</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: COM_INIT_DB failed, want db:%s, client default db still:%s"</literal></expr></argument>,
                      <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: COM_INIT_DB failed, client default db still:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
            <comment type="block" format="doxygen">/**
             * track the change of the init_db */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name></name> <operator>&amp;&amp;</operator> <name><name>udata</name><operator>-&gt;</operator><name>db_name</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

            <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set server default db:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>udata</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: COM_INIT_DB set default db success:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: COM_INIT_DB should be (ERR|OK), got %02x"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_err_met</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>is_finished</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * init the tracking of the sub-states of the protocol
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_con_command_states_init</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint8</name></type> <name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_skip_network_header</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: reset command:%d "</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>         <comment type="block">/* reset the offset again for the next functions */</comment>

    <comment type="block">/* init the parser for the commands */</comment>
    <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>COM_QUERY</name></expr>:</case>
    <case>case <expr><name>COM_PROCESS_INFO</name></expr>:</case>
    <case>case <expr><name>COM_STMT_EXECUTE</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>network_mysqld_com_query_result_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data_free</name></name> <operator>=</operator> <operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>network_mysqld_com_query_result_free</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>COM_STMT_PREPARE</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>network_mysqld_com_stmt_prepare_result_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data_free</name></name> <operator>=</operator> <operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>network_mysqld_com_stmt_prepare_result_free</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>COM_INIT_DB</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>network_mysqld_com_init_db_result_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data_free</name></name> <operator>=</operator> <operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>network_mysqld_com_init_db_result_free</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_com_init_db_result_track_state</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <break>break;</break>
    <case>case <expr><name>COM_QUIT</name></expr>:</case>
        <comment type="block">/* track COM_QUIT going to the server, to be able to tell if the server
         * a) simply went away or
         * b) closed the connection because the client asked it to
         * If b) we should not print a message at the next EV_READ event from the server fd
         */</comment>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>com_quit_seen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @param packet the current packet that is passing by
 *
 *
 * @return -1 on invalid packet, 
 *          0 need more packets, 
 *          1 for the last packet 
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_query_result</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint8</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_finished</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_skip_network_header</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: skip header error, command:%d."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* forward the response to the client */</comment>
    <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>COM_RESET_CONNECTION</name></expr>:</case>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_changed_user_failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>g_debug_hexdump</name><argument_list>(<argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: got a 0x%02x packet for COM_[0%02x], expected only (ERR|EOF)"</literal></expr></argument>,
                      <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></argument>, <argument><expr><operator>(</operator><name>guint8</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></switch>

        <break>break;</break>

    <case>case <expr><name>COM_CHANGE_USER</name></expr>:</case>
            <comment type="block" format="doxygen">/**
             * - OK
             * - ERR
             * - EOF for auth switch TODO
             */</comment>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_changed_user_failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type><name>err_packet</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>err_packet</name> <operator>=</operator> <call><name>network_mysqld_err_packet_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>network_mysqld_proto_get_err_packet</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:error code:%d,errmsg:%s,sqlstate:%s"</literal></expr></argument>,
                          <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>err_packet</name><operator>-&gt;</operator><name>errcode</name></name></expr></argument>, <argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errmsg</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>sqlstate</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: change user failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>network_mysqld_err_packet_free</name><argument_list>(<argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
            <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: save username for server, con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set server default db:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MYSQLD_PACKET_EOF</name></expr>:</case>
            <comment type="block">/* TODO:
             * - added extra states to the state-engine in network-mysqld.c to 
             *   track the packets that are sent back and forth
             *   to switch the auth-method in COM_CHANGE_USER
             */</comment>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: COM_CHANGE_USER's auth-method-switch not supported."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        <default>default:</default>
            <expr_stmt><expr><call><name>g_debug_hexdump</name><argument_list>(<argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: got a 0x%02x packet for COM_[0%02x], expected only (ERR|OK)"</literal></expr></argument>,
                      <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></argument>, <argument><expr><operator>(</operator><name>guint8</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></switch>
        <break>break;</break>
    <case>case <expr><name>COM_INIT_DB</name></expr>:</case>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: COM_INIT_DB finish check."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <call><name>network_mysqld_proto_get_com_init_db</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break>break;</break>
    <case>case <expr><name>COM_REFRESH</name></expr>:</case>
    <case>case <expr><name>COM_STMT_RESET</name></expr>:</case>
    <case>case <expr><name>COM_PING</name></expr>:</case>
    <case>case <expr><name>COM_TIME</name></expr>:</case>
    <case>case <expr><name>COM_REGISTER_SLAVE</name></expr>:</case>
    <case>case <expr><name>COM_PROCESS_KILL</name></expr>:</case>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
        <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>g_debug_hexdump</name><argument_list>(<argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: got a 0x%02x packet for COM_[0%02x],expected only (ERR|OK)"</literal></expr></argument>,
                      <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></argument>, <argument><expr><operator>(</operator><name>guint8</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></switch>
        <break>break;</break>
    <case>case <expr><name>COM_DEBUG</name></expr>:</case>
    <case>case <expr><name>COM_SET_OPTION</name></expr>:</case>
    <case>case <expr><name>COM_SHUTDOWN</name></expr>:</case>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>    <comment type="block">/* COM_DEBUG may not have the right permissions */</comment>
        <case>case <expr><name>MYSQLD_PACKET_EOF</name></expr>:</case>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>g_debug_hexdump</name><argument_list>(<argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: got a 0x%02x packet for COM_[0%02x], expected only (ERR|EOF)"</literal></expr></argument>,
                      <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></argument>, <argument><expr><operator>(</operator><name>guint8</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></switch>
        <break>break;</break>

    <case>case <expr><name>COM_FIELD_LIST</name></expr>:</case>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* we transfer some data and wait for the EOF */</comment>
        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
        <case>case <expr><name>MYSQLD_PACKET_EOF</name></expr>:</case>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MYSQLD_PACKET_NULL</name></expr>:</case>
        <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
            <expr_stmt><expr><call><name>g_debug_hexdump</name><argument_list>(<argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: got a 0x%02x for COM_[0%02x], expected ERR, EOF or field data"</literal></expr></argument>,
                      <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></argument>, <argument><expr><operator>(</operator><name>guint8</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>
        <break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MYSQL_VERSION_ID</name> <operator>&gt;=</operator> <literal type="number">50000</literal></expr></cpp:if>
    <case>case <expr><name>COM_STMT_FETCH</name></expr>:</case>
        <comment type="block">/*  */</comment>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_peek_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>MYSQLD_PACKET_EOF</name></expr>:</case><block>{<block_content>
            <decl_stmt><decl><type><name>network_mysqld_eof_packet_t</name> <modifier>*</modifier></type><name>eof_packet</name> <init>= <expr><call><name>network_mysqld_eof_packet_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_eof_packet</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>eof_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>eof_packet</name><operator>-&gt;</operator><name>server_status</name></name> <operator>&amp;</operator> <name>SERVER_STATUS_LAST_ROW_SENT</name><operator>)</operator> <operator>||</operator>
                    <operator>(</operator><name><name>eof_packet</name><operator>-&gt;</operator><name>server_status</name></name> <operator>&amp;</operator> <name>SERVER_STATUS_CURSOR_EXISTS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>network_mysqld_eof_packet_free</name><argument_list>(<argument><expr><name>eof_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
            <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <case>case <expr><name>COM_QUIT</name></expr>:</case>             <comment type="block">/* sometimes we get a packet before the connection closes */</comment>
    <case>case <expr><name>COM_STATISTICS</name></expr>:</case>
        <comment type="block">/* just one packet, no EOF */</comment>
        <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <break>break;</break>
    <case>case <expr><name>COM_STMT_PREPARE</name></expr>:</case>
        <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <call><name>network_mysqld_proto_get_com_stmt_prep_result</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>COM_STMT_EXECUTE</name></expr>:</case>
        <comment type="block">/* COM_STMT_EXECUTE result packets are basically the same as COM_QUERY ones,
         * the only difference is the encoding of the actual data - fields are in there, too.
         */</comment>
        <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <call><name>network_mysqld_proto_get_com_query_result</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>COM_PROCESS_INFO</name></expr>:</case>
    <case>case <expr><name>COM_QUERY</name></expr>:</case>
        <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <call><name>network_mysqld_proto_get_com_query_result</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>COM_BINLOG_DUMP</name></expr>:</case>
        <comment type="block" format="doxygen">/**
         * the binlog-dump event stops, forward all packets as we see them
         * and keep the command active
         */</comment>
        <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>is_finished</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_get_fielddef</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_proto_fielddef_t</name> <modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>guint32</name></type> <name>capabilities</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>capabilities</name> <operator>&amp;</operator> <name>CLIENT_PROTOCOL_41</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>guint16</name></type> <name>field_charsetnr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint32</name></type> <name>field_length</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint8</name></type> <name>field_type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint16</name></type> <name>field_flags</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint8</name></type> <name>field_decimals</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_lenenc_str</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>catalog</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_lenenc_str</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_lenenc_str</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_lenenc_str</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>org_table</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_lenenc_str</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_lenenc_str</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* filler */</comment>

        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_charsetnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int32</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_decimals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* filler */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>charsetnr</name></name> <operator>=</operator> <name>field_charsetnr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>field_length</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>field_type</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>field_flags</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>decimals</name></name> <operator>=</operator> <name>field_decimals</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>guint8</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint32</name></type> <name>field_length</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint8</name></type> <name>field_type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint8</name></type> <name>field_decimals</name></decl>;</decl_stmt>

        <comment type="block">/* see protocol.cc Protocol::send_fields */</comment>

        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_lenenc_str</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_lenenc_str</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <operator>(</operator><name>len</name> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int24</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <operator>(</operator><name>len</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>         <comment type="block">/* the CLIENT_LONG_FLAG is set */</comment>
            <decl_stmt><decl><type><name>guint16</name></type> <name>field_flags</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>field_flags</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>guint8</name></type> <name>field_flags</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>field_flags</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_decimals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>charsetnr</name></name> <operator>=</operator> <literal type="number">0x08</literal></expr> <comment type="block">/* latin1_swedish_ci */</comment> ;</expr_stmt>
            <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>field_length</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>field_type</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>decimals</name></name> <operator>=</operator> <name>field_decimals</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_mysqld_ok_packet_t</name> <modifier>*</modifier></type>
<name>network_mysqld_ok_packet_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_ok_packet_t</name> <modifier>*</modifier></type><name>ok_packet</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ok_packet</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_mysqld_ok_packet_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ok_packet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_ok_packet_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_ok_packet_t</name> <modifier>*</modifier></type><name>ok_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok_packet</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ok_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * decode a OK packet from the network packet
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_ok_packet</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_ok_packet_t</name> <modifier>*</modifier></type><name>ok_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint8</name></type> <name>field_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint64</name></type> <name>affected</name></decl>, <decl><type ref="prev"/><name>insert_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint16</name></type> <name>server_status</name></decl>, <decl><type ref="prev"/><name>warning_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint32</name></type> <name>capabilities</name> <init>= <expr><name>CLIENT_PROTOCOL_41</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>field_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: expected the first byte to be 0, got %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>field_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_lenenc_int</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_lenenc_int</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>insert_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>capabilities</name> <operator>&amp;</operator> <name>CLIENT_PROTOCOL_41</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>warning_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>affected_rows</name></name> <operator>=</operator> <name>affected</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>insert_id</name></name> <operator>=</operator> <name>insert_id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>server_status</name></name> <operator>=</operator> <name>server_status</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>warnings</name></name> <operator>=</operator> <name>warning_count</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server status, got: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>server_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_append_ok_packet</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_ok_packet_t</name> <modifier>*</modifier></type><name>ok_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint32</name></type> <name>capabilities</name> <init>= <expr><name>CLIENT_PROTOCOL_41</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* no fields */</comment>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_lenenc_int</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>affected_rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_lenenc_int</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>insert_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>server_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* autocommit */</comment>
    <if_stmt><if>if <condition>(<expr><name>capabilities</name> <operator>&amp;</operator> <name>CLIENT_PROTOCOL_41</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>warnings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* no warnings */</comment>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type>
<name>network_mysqld_err_packet_new_full</name><parameter_list>(<parameter><decl><type><name>network_mysqld_protocol_t</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type><name>err_packet</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>err_packet</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_mysqld_err_packet_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>err_packet</name><operator>-&gt;</operator><name>sqlstate</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>err_packet</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>

    <return>return <expr><name>err_packet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type>
<name>network_mysqld_err_packet_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>network_mysqld_err_packet_new_full</name><argument_list>(<argument><expr><name>NETWORK_MYSQLD_PROTOCOL_VERSION_41</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_err_packet_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type><name>err_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err_packet</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * decode an ERR packet from the network packet
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_err_packet</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type><name>err_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint8</name></type> <name>field_count</name></decl>, <decl><type ref="prev"/><name>marker</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint16</name></type> <name>errcode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>sqlstate</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint32</name></type> <name>capabilities</name> <init>= <expr><name>CLIENT_PROTOCOL_41</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>field_count</name> <operator>!=</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: expected the first byte to be 0xff, got %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>field_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>capabilities</name> <operator>&amp;</operator> <name>CLIENT_PROTOCOL_41</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <operator>(</operator><name>marker</name> <operator>!=</operator> <literal type="char">'#'</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_str_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sqlstate</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_str_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errcode</name></name> <operator>=</operator> <name>errcode</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>, <argument><expr><name>sqlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>sqlstate</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * create a ERR packet
 *
 * @note the sqlstate has to match the SQL standard. 
 *  If no matching SQL state is known, leave it at NULL
 *
 * @param packet      network packet
 * @param err_packet  the error structure
 *
 * @return 0 on success
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_append_err_packet</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type><name>err_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>errmsg_len</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* ERR */</comment>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* errorcode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>err_packet</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>NETWORK_MYSQLD_PROTOCOL_VERSION_41</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>err_packet</name><operator>-&gt;</operator><name>sqlstate</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>err_packet</name><operator>-&gt;</operator><name>sqlstate</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>sqlstate</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"07000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>errmsg_len</name> <operator>=</operator> <name><name>err_packet</name><operator>-&gt;</operator><name>errmsg</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>errmsg_len</name> <operator>&gt;=</operator> <literal type="number">512</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>errmsg_len</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errmsg</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>errmsg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_mysqld_eof_packet_t</name> <modifier>*</modifier></type>
<name>network_mysqld_eof_packet_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_eof_packet_t</name> <modifier>*</modifier></type><name>eof_packet</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>eof_packet</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_mysqld_eof_packet_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>eof_packet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_eof_packet_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_eof_packet_t</name> <modifier>*</modifier></type><name>eof_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>eof_packet</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>eof_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * decode a OK packet from the network packet
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_eof_packet</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_eof_packet_t</name> <modifier>*</modifier></type><name>eof_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint8</name></type> <name>field_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint16</name></type> <name>server_status</name></decl>, <decl><type ref="prev"/><name>warning_count</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>field_count</name> <operator>!=</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: expected the first byte to be 0xfe, got %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>field_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>warning_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>eof_packet</name><operator>-&gt;</operator><name>server_status</name></name> <operator>=</operator> <name>server_status</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>eof_packet</name><operator>-&gt;</operator><name>warnings</name></name> <operator>=</operator> <name>warning_count</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server status, got: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>eof_packet</name><operator>-&gt;</operator><name>server_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_mysqld_auth_challenge</name> <modifier>*</modifier></type>
<name>network_mysqld_auth_challenge_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_auth_challenge</name> <modifier>*</modifier></type><name>shake</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>shake</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_mysqld_auth_challenge</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shake</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>=</operator> <name>CETUS_DEFAULT_FLAGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_name</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>shake</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_auth_challenge_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_auth_challenge</name> <modifier>*</modifier></type><name>shake</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>shake</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>server_version_str</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>server_version_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_name</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_name</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>shake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_auth_challenge_set_challenge</name><parameter_list>(<parameter><decl><type><name>network_mysqld_auth_challenge</name> <modifier>*</modifier></type><name>shake</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* 20 chars */</comment>

    <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="block">/* 33 - 127 are printable characters */</comment>
        <expr_stmt><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">94.0</literal> <operator>*</operator> <operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>RAND_MAX</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">33</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_name</name></name></expr></argument>, <argument><expr><literal type="string">"mysql_native_password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>network_mysqld_proto_append_auth_switch</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>method_name</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0xfe</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*TODO: different algorithms for methods */</comment>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>method_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>method_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>salt</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>salt</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_get_auth_challenge</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_auth_challenge</name> <modifier>*</modifier></type><name>shake</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>maj</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>patch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>auth_plugin_data_1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>auth_plugin_data_2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint16</name></type> <name>capabilities1</name></decl>, <decl><type ref="prev"/><name>capabilities2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint8</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint8</name></type> <name>auth_plugin_data_len</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0xff</literal></expr>:</case>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    <case>case <expr><literal type="number">0x0a</literal></expr>:</case>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unknown protocol %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_string</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>shake</name><operator>-&gt;</operator><name>server_version_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>shake</name><operator>-&gt;</operator><name>server_version_str</name></name><operator>)</operator></expr>;</expr_stmt>   <comment type="block">/* the server-version has to be set */</comment>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int32</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>shake</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * get the scramble buf
     *
     * 8 byte here and some the other 12 sometime later
     */</comment>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_str_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auth_plugin_data_1</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>capabilities1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>shake</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>shake</name><operator>-&gt;</operator><name>server_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* capabilities is extended in 5.5.x to carry 32bits to announce CLIENT_PLUGIN_AUTH */</comment>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>capabilities2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auth_plugin_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>shake</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>=</operator> <name>capabilities1</name> <operator>|</operator> <operator>(</operator><name>capabilities2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PLUGIN_AUTH</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>guint8</name></type> <name>auth_plugin_data2_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <comment type="block">/* CLIENT_PLUGIN_AUTH enforces auth_plugin_data_len
             *
             * we have at least 12 bytes */</comment>

            <if_stmt><if>if <condition>(<expr><name>auth_plugin_data_len</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>auth_plugin_data2_len</name> <operator>=</operator> <name>auth_plugin_data_len</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>network_mysqld_proto_get_str_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auth_plugin_data_2</name></expr></argument>, <argument><expr><name>auth_plugin_data2_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>-</operator> <call><name>MIN</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>auth_plugin_data2_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Bug#59453 ... MySQL 5.5.7-9 and 5.6.0-1 don't send a trailing \0
                 *
                 * if there is no trailing \0, get the rest of the packet
                 */</comment>
                <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>network_mysqld_proto_get_gstr</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_gstr_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>,
                                                                   <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
                                                                   <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_str_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auth_plugin_data_2</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* process the data */</comment>

        <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>!=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>server_version_str</name></name></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d%*s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>maj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/* can't parse the protocol */</comment>

            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: protocol 10, but version number not parsable"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" format="doxygen">/**
         * out of range 
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>min</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>min</name></expr></argument> &gt;</argument_list></name> <literal type="number">100</literal> <operator>||</operator> <name><name>patch</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>patch</name></expr></argument> &gt;</argument_list></name> <literal type="number">100</literal> <operator>||</operator> <name><name>maj</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>maj</name></expr></argument> &gt;</argument_list></name> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: protocol 10, but version number out of range"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>shake</name><operator>-&gt;</operator><name>server_version</name></name> <operator>=</operator> <name>maj</name> <operator>*</operator> <literal type="number">10000</literal> <operator>+</operator> <name>min</name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>patch</name></expr>;</expr_stmt>

        <comment type="block" format="doxygen">/**
         * build auth_plugin_data
         *
         * auth_plugin_data_1 + auth_plugin_data_2 == auth_plugin_data
         */</comment>
        <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PLUGIN_AUTH</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><name>auth_plugin_data_1</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>auth_plugin_data_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>auth_plugin_data_len</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><name>auth_plugin_data_2</name></expr></argument>, <argument><expr><name>auth_plugin_data_len</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><name>auth_plugin_data_1</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><name>auth_plugin_data_2</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* some final assertions */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PLUGIN_AUTH</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <name>auth_plugin_data_len</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>auth_plugin_data_1</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>auth_plugin_data_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>auth_plugin_data_2</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>auth_plugin_data_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_append_auth_challenge</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_auth_challenge</name> <modifier>*</modifier></type><name>shake</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>server_version_str</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>server_version_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>server_version</name></name> <operator>&gt;</operator> <literal type="number">30000</literal> <operator>&amp;&amp;</operator> <name><name>shake</name><operator>-&gt;</operator><name>server_version</name></name> <operator>&lt;</operator> <literal type="number">100000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"%d.%02d.%02d"</literal></expr></argument>,
                               <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>server_version</name></name> <operator>/</operator> <literal type="number">10000</literal></expr></argument>,
                               <argument><expr><operator>(</operator><name><name>shake</name><operator>-&gt;</operator><name>server_version</name></name> <operator>%</operator> <literal type="number">10000</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>server_version</name></name> <operator>%</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"5.0.99"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int32</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"01234567"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* filler */</comment>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>server_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name><name>shake</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PLUGIN_AUTH</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* add the fillers */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PLUGIN_AUTH</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* if we only have SECURE_CONNECTION it is 0-terminated */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>shake</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"890123456789"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_mysqld_auth_response</name> <modifier>*</modifier></type>
<name>network_mysqld_auth_response_new</name><parameter_list>(<parameter><decl><type><name>guint32</name></type> <name>server_capabilities</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_auth_response</name> <modifier>*</modifier></type><name>auth</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>auth</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_mysqld_auth_response</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* we have to make sure scramble-&gt;buf is not-NULL to get
     * the "empty string" and not a "NULL-string"
     */</comment>
    <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_name</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>=</operator> <name>CETUS_DEFAULT_FLAGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>server_capabilities</name></name> <operator>=</operator> <name>server_capabilities</name></expr>;</expr_stmt>

    <return>return <expr><name>auth</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_auth_response_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_auth_response</name> <modifier>*</modifier></type><name>auth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>auth</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_name</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_name</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>database</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_get_auth_response</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_auth_response</name> <modifier>*</modifier></type><name>auth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint16</name></type> <name>l_cap</name></decl>;</decl_stmt>
    <comment type="block">/* extract the default db from it */</comment>

    <comment type="block">/*
     * @\0\0\1
     *  \215\246\3\0 - client-flags
     *  \0\0\0\1     - max-packet-len
     *  \10          - charset-num
     *  \0\0\0\0
     *  \0\0\0\0
     *  \0\0\0\0
     *  \0\0\0\0
     *  \0\0\0\0
     *  \0\0\0       - fillers
     *  root\0       - username
     *  \24          - len of the scrambled buf
     *    ~    \272 \361 \346
     *    \211 \353 D    \351
     *    \24  \243 \223 \257
     *    \0   ^    \n   \254
     *    t    \347 \365 \244
     *  
     *  world\0
     */</comment>

    <comment type="block">/* 4.0 uses 2 byte, 4.1+ uses 4 bytes, but the proto-flag is in the lower 2 bytes */</comment>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_peek_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l_cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>l_cap</name> <operator>&amp;</operator> <name>CLIENT_PROTOCOL_41</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int32</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int32</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>auth</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>auth</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal>
            <operator>&amp;&amp;</operator> <operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_SSL</name><operator>)</operator>
            <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <comment type="block">/* this is a SSLRequest */</comment>
        <block>{<block_content>
            <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>ssl_request</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_gstr</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>guint8</name></type> <name>len</name></decl>;</decl_stmt>
        <comment type="block">/* new auth is 1-byte-len + data */</comment>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_gstr_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>server_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_CONNECT_WITH_DB</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_CONNECT_WITH_DB</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_gstr</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>server_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PLUGIN_AUTH</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PLUGIN_AUTH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_gstr</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l_cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int24</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>auth</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_gstr</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* if there is more, it is the password without a terminating \0 */</comment>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_gstr_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>,
                                                           <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>=</operator> <name>l_cap</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * append the auth struct to the mysqld packet
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_append_auth_response</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_auth_response</name> <modifier>*</modifier></type><name>auth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PROTOCOL_41</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int24</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* max-allowed-packet */</comment>

        <if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* trailing \0 */</comment>

        <if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* no trailing \0 */</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int32</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int32</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* max-allowed-packet */</comment>

        <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* charset */</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">23</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* filler */</comment>
            <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* trailing \0 */</comment>

        <comment type="block">/* scrambled password */</comment>

        <comment type="block">/* server supports the secure-auth (4.1+) which is 255 bytes max
         *
         * if -&gt;len is longer than 255, wrap around ... should be reported back
         * to the upper layers
         */</comment>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>server_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_CONNECT_WITH_DB</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* trailing \0 */</comment>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PLUGIN_AUTH</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>server_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PLUGIN_AUTH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* trailing \0 */</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_get_stmt_id</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint32</name> <modifier>*</modifier></type><name>stmt_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint8</name></type> <name>packet_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>COM_STMT_EXECUTE</name> <operator>!=</operator> <name>packet_type</name> <operator>&amp;&amp;</operator> <name>COM_STMT_CLOSE</name> <operator>!=</operator> <name>packet_type</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: expected the first byte to be %02x or %02x, got %02x"</literal></expr></argument>,
                   <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>COM_STMT_EXECUTE</name></expr></argument>, <argument><expr><name>COM_STMT_CLOSE</name></expr></argument>, <argument><expr><name>packet_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int32</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_change_stmt_id_from_ok_packet</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>server_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint8</name></type> <name>packet_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0x00</literal> <operator>!=</operator> <name>packet_type</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: expected the first byte to be %02x, got %02x"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>packet_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name></name><operator>)</operator> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* if (*p &gt; MAX_STMT_ID) {
       } */</comment>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: stmt id:%d, server index:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>server_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x00007fff</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>|</operator> <operator>(</operator><name>server_index</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: new stmt id:%d, server index:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>server_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_change_stmt_id_from_clt_stmt</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint8</name></type> <name>packet_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>COM_STMT_EXECUTE</name> <operator>!=</operator> <name>packet_type</name> <operator>&amp;&amp;</operator> <name>COM_STMT_CLOSE</name> <operator>!=</operator> <name>packet_type</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: expected the first byte to be %02x or %02x, got %02x"</literal></expr></argument>,
                   <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>COM_STMT_EXECUTE</name></expr></argument>, <argument><expr><name>COM_STMT_CLOSE</name></expr></argument>, <argument><expr><name>packet_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name></name><operator>)</operator> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x00007fff</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_append_query_packet</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mysqld_proto_append_change_user_packet</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>mysqld_change_user_packet_t</name> <modifier>*</modifier></type><name>chuser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>COM_CHANGE_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* user name as string.NUL */</comment>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>chuser</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>chuser</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chuser</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>auth_response</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_password_scramble</name><argument_list>(<argument><expr><name>auth_response</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>chuser</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>chuser</name><operator>-&gt;</operator><name>hashed_pwd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* auth response length as int&lt;1&gt; */</comment>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>auth_response</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* auth response as string.var_len */</comment>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>auth_response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>auth_response</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* schema name as string.NUL */</comment>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>chuser</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>chuser</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* charset as int&lt;2&gt; */</comment>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_int16</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>chuser</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
