<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/network-queue.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-queue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>

<function><type><name>network_queue</name> <modifier>*</modifier></type>
<name>network_queue_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_queue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name> <operator>=</operator> <call><name>g_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>queue</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_queue_free</name><parameter_list>(<parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>queue</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>g_queue_free</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_queue_clear</name><parameter_list>(<parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>queue</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_queue_append</name><parameter_list>(<parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: packet len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>PACKET_LEN_MAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: packet len:%d is too long"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a string from the head of the queue and leave the queue unchanged 
 *
 * @param  queue the queue to read from
 * @param  peek_len  bytes to collect
 * @param  dest      GString to write it. If NULL, we allow a new one and return it
 * @return NULL if not enough data
 *         if dest is not NULL, dest, otherwise a new GString containing the data
 */</comment>
<function><type><name>GString</name> <modifier>*</modifier></type>
<name>network_queue_peek_str</name><parameter_list>(<parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>peek_len</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gsize</name></type> <name>we_want</name> <init>= <expr><name>peek_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

    <comment type="block">/* 
     * TODO: convert to DTrace probe
     * g_debug("[%s] looking for %d bytes, queue has %d", G_STRLOC, peek_len, queue-&gt;len);
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>peek_len</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* no define */</comment>
        <expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>peek_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>allocated_len</name></name></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><name>peek_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>node</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>node</name> <operator>&amp;&amp;</operator> <name>we_want</name></expr>;</condition> <incr><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name><name>queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gsize</name></type> <name>we_have</name> <init>= <expr><ternary><condition><expr><name>we_want</name> <operator>&lt;</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>queue</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>we_want</name></expr> </then><else>: <expr><operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>queue</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>queue</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>we_have</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>we_want</name> <operator>-=</operator> <name>we_have</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>gsize</name></type> <name>we_have</name> <init>= <expr><ternary><condition><expr><name>we_want</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr> ?</condition><then> <expr><name>we_want</name></expr> </then><else>: <expr><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>we_have</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>we_want</name> <operator>-=</operator> <name>we_have</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a string from the head of the queue and remove the chunks from the queue 
 */</comment>
<function><type><name>GString</name> <modifier>*</modifier></type>
<name>network_queue_pop_str</name><parameter_list>(<parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>steal_len</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gsize</name></type> <name>we_want</name> <init>= <expr><name>steal_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>steal_len</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>chunk</name> <operator>=</operator> <call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gsize</name></type> <name>we_have</name> <init>= <expr><ternary><condition><expr><name>we_want</name> <operator>&lt;</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>queue</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>we_want</name></expr> </then><else>: <expr><operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>queue</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>steal_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <comment type="block">/* optimize the common case that we want to have to full chunk
             *
             * if dest is null, we can remove the GString from the queue and
             * return it directly without copying it
             */</comment>
            <expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>we_have</name></expr>;</expr_stmt>
            <return>return <expr><name>dest</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* if we don't have a dest-buffer yet, create one */</comment>
            <expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>steal_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>queue</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>we_have</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>we_have</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>we_have</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>we_want</name> <operator>-=</operator> <name>we_have</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>queue</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* the chunk is done, remove it */</comment>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>
</unit>
