<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/plugin-common.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_GNU_SOURCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_FILIO_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/filio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_SOCKLEN_T</name></cpp:ifndef>
<typedef>typedef <type><name>int</name></type> <name>socklen_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysqld_error.h&gt;</cpp:file></cpp:include> <comment type="block" format="doxygen">/** for ER_UNKNOWN_ERROR */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-conn-pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-conn-pool-wrap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys-pedantic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-injection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-backend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-filter-variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-timings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"character-set.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-users.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plugin-common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-sql-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-acl.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CACHED_ITEMS</name></cpp:macro> <cpp:value>65536</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>      <name>cetus_last_process</name></decl>;</decl_stmt>

<comment type="block">/* judge if client_ip_with_username is in allow or deny ip_table*/</comment>
<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>client_ip_table_lookup</name><parameter_list>(<parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>ip_table</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>client_ip_with_username</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>ip_range</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>wildcard</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>client_user</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>client_ip</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>client_ip_with_username</name></expr></argument>, <argument><expr><literal type="string">"%64[a-zA-Z]@%64[0-9.]"</literal></expr></argument>, <argument><expr><name>client_user</name></expr></argument>, <argument><expr><name>client_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>ip_range_table</name> <init>= <expr><call><name>g_hash_table_get_keys</name><argument_list>(<argument><expr><name>ip_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>ip_range_table</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>address</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%64[a-zA-Z@0-9.]"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strrchr</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="string">"%64[0-9.].%s"</literal></expr></argument>, <argument><expr><name>ip_range</name></expr></argument>, <argument><expr><name>wildcard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>strcasestr</name><argument_list>(<argument><expr><name>client_ip</name></expr></argument>, <argument><expr><name>ip_range</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>pos</name> <operator>==</operator> <name>client_ip</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>TRUE</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="string">"%64[a-zA-Z@0-9.].%s"</literal></expr></argument>, <argument><expr><name>ip_range</name></expr></argument>, <argument><expr><name>wildcard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>strcasestr</name><argument_list>(<argument><expr><name>client_ip_with_username</name></expr></argument>, <argument><expr><name>ip_range</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>pos</name> <operator>==</operator> <name>client_ip_with_username</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>TRUE</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_socket_retval_t</name></type>
<name>do_read_auth</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* read auth from client */</comment>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_auth_response</name> <modifier>*</modifier></type><name>auth</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>recv_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>g_queue_peek_tail</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_skip_network_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* assume that we may get called twice:
     *
     * 1. for the initial packet
     * 2. in case auth switch happened, for the auth switch response
     *
     * this is detected by con-&gt;client-&gt;response being NULL
     */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>log_sql_connect</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="string">"client's challenge is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>guint32</name></type> <name>capabilities</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>capabilities</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>auth</name> <operator>=</operator> <call><name>network_mysqld_auth_response_new</name><argument_list>(<argument><expr><name>capabilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>network_mysqld_proto_get_auth_response</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_auth_response_free</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log_sql_connect</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="string">"get auth response failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>ssl</name></name> <operator>&amp;&amp;</operator> <name><name>auth</name><operator>-&gt;</operator><name>ssl_request</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>network_ssl_create_connection</name><argument_list>(<argument><expr><name>recv_sock</name></expr></argument>, <argument><expr><name>NETWORK_SSL_SERVER</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"SSL server failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1045</literal></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_auth_response_free</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><call><name>g_queue_pop_tail</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: client-recv-queue-len = %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_FRONT_SSL_HANDSHAKE</name></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PROTOCOL_41</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <comment type="block">/* should use packet-id 0 */</comment>
            <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>,
                                        <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"\xff\xd7\x07"</literal> <literal type="string">"4.0 protocol is not supported"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_auth_response_free</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log_sql_connect</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="string">"4.0 protocol is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_COMPRESS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_client_compressed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: client compressed for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI_STATEMENTS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <name>auth</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PLUGIN_AUTH</name><operator>)</operator>
            <operator>&amp;&amp;</operator> <operator>(</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"mysql_native_password"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>network_mysqld_proto_append_auth_switch</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"mysql_native_password"</literal></expr></argument>,
                <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_AUTH_RESULT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>auth_result_state</name></name> <operator>=</operator> <name>AUTH_SWITCH</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><call><name>g_queue_pop_tail</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:1nd round auth and set default db:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* auth switch response */</comment>
        <decl_stmt><decl><type><name>gsize</name></type> <name>auth_data_len</name> <init>= <expr><name><name>packet</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>NET_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>auth_data</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>auth_data_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_get_gstr_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>auth_data_len</name></expr></argument>, <argument><expr><name>auth_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>auth_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>auth_data</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>auth</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"sock:%p, 2nd round auth"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>client_addr_arr</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_ip</name> <init>= <expr><name><name>client_addr_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_username</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>can_pass</name> <init>= <expr><call><name>cetus_acl_verify</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>client_username</name></expr></argument>, <argument><expr><name>client_ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>can_pass</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip_err_msg</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"Access denied for user '%s@%s'"</literal></expr></argument>,
                                           <argument><expr><name>client_username</name></expr></argument>, <argument><expr><name>client_ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name>recv_sock</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>ip_err_msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1045</literal></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log_sql_connect</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ip_err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ip_err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>client_addr_arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>client_addr_arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_charset</name> <init>= <expr><call><name>charset_get_name</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>client_charset</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: client charset is nil, orig charset num:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"client charset is not supported"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name>recv_sock</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1045</literal></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log_sql_connect</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>charset_code</name></name> <operator>=</operator> <name><name>auth</name><operator>-&gt;</operator><name>charset</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name>client_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>charset_client</name></name></expr></argument>, <argument><expr><name>client_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>charset_results</name></name></expr></argument>, <argument><expr><name>client_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>charset_connection</name></name></expr></argument>, <argument><expr><name>client_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>users</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_auth_challenge</name> <modifier>*</modifier></type><name>challenge</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_auth_response</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>cetus_users_authenticate_client</name><argument_list>(<argument><expr><name>users</name></expr></argument>, <argument><expr><name>challenge</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_AUTH_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name>recv_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>\
        <expr_stmt><expr><call><name>log_sql_connect</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                 <argument><expr><literal type="string">"Access denied for user '%s'@'%s' (using password: YES)"</literal></expr></argument>,
                 <argument><expr><name><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_ACCESS_DENIED_ERROR</name></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log_sql_connect</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><call><name>g_queue_pop_tail</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: client-recv-queue-len = %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_c_connect_server</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_backend_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_backend</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_backend_ndx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>config</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s, config is null for back ndx:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><call><name>network_backend_conns_count</name><argument_list>(<argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>connected_clts</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cur_idle</name> <init>= <expr><name>total</name> <operator>-</operator> <name>connected_clts</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>max_idle_conns</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>max_conn_pool</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, ndx:%d, total:%d, connected:%d, idle:%d, max:%d"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>connected_clts</name></expr></argument>, <argument><expr><name>cur_idle</name></expr></argument>, <argument><expr><name>max_idle_conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>cur_idle</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>total</name> <operator>&lt;=</operator> <name>max_idle_conns</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>p_backend_ndx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>p_backend</name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>num</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s, service unavailable for con:%p, back ndx:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>*</operator><name>p_backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* no backend server */</comment>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"(proxy) service unavailable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>PROXY_IGNORE_RESULT</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_socket_retval_t</name></type>
<name>do_connect_cetus</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_backend_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>backend</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>backend_ndx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>backend</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>backend_ndx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* Disable backend check
     * Conflict to backend state active check.
     */</comment>
    <decl_stmt><decl><type><name>guint</name></type> <name>disable_threads</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>disable_threads</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>disable_threads</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_backends_check</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>network_mysqld_stmt_ret</name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>proxy_c_connect_server</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PROXY_SEND_RESULT</name></expr>:</case>
        <comment type="block">/* we answered directly ... like denial ...
         *
         * for sure we have something in the send-queue
         *
         */</comment>

        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    <case>case <expr><name>PROXY_NO_DECISION</name></expr>:</case>
        <comment type="block">/* just go on */</comment>

        <break>break;</break>
    <case>case <expr><name>PROXY_IGNORE_RESULT</name></expr>:</case>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"%s: ... "</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <comment type="block">/* protect the typecast below */</comment>
    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&lt;</operator></expr></argument>, <argument><expr><name>G_MAXINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * if the current backend is down, ignore it
     */</comment>
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>network_backends_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><operator>*</operator><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_DOWN</name> <operator>||</operator> <name><name>cur</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_MAINTAINING</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>backend_ndx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>backend_ndx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block" format="doxygen">/**
         * we can choose between different back addresses
         *
         * prefer SQF (shorted queue first) to load all backends equally
         */</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>min_connected_clients</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>backends_count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>backends_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>network_backends_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" format="doxygen">/**
             * skip backends which are down or not writable
             */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_DOWN</name> <operator>||</operator>
                <name><name>cur</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_MAINTAINING</name> <operator>||</operator> <name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>connected_clients</name></name> <operator>&lt;</operator> <name>min_connected_clients</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>backend_ndx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>min_connected_clients</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>connected_clients</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>network_backends_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><operator>*</operator><name>backend_ndx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>backend</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>backend</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>network_backends_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><operator>*</operator><name>backend_ndx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>backend</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>backend</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"(proxy) all backends are down"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_AUTH_RESULT</name></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: Cannot connect, all backends are down."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* create a "mysql_native_password" handshake packet */</comment>
    <decl_stmt><decl><type><name>network_mysqld_auth_challenge</name> <modifier>*</modifier></type><name>challenge</name> <init>= <expr><call><name>network_mysqld_auth_challenge_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>|=</operator> <name>CLIENT_SSL</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_SSL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>compress_support</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>|=</operator> <name>CLIENT_COMPRESS</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_auth_challenge_set_challenge</name><argument_list>(<argument><expr><name>challenge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>server_status</name></name> <operator>|=</operator> <name>SERVER_STATUS_AUTOCOMMIT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>charset</name></name> <operator>=</operator> <call><name>charset_get_number</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>version</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>network_backends_server_version</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>server_version_str</name></name> <operator>=</operator> <name><name>version</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>thread_id</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: generate thread id:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>thread_id</name></name> <operator>&gt;</operator> <name><name>g</name><operator>-&gt;</operator><name>max_thread_id</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>thread_id</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>cetus_last_process</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: rewind first thread id:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>auth_packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_auth_challenge</name><argument_list>(<argument><expr><name>auth_packet</name></expr></argument>, <argument><expr><name>challenge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>auth_packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>auth_packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name></name> <operator>=</operator> <name>challenge</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_HANDSHAKE</name></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * connect_clients is already incremented
     */</comment>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_socket_retval_t</name></type>
<name>plugin_add_backends</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>backend_addresses</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>read_only_backend_addresses</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>backends_arr</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>backend_addresses</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>BACKEND_OPERATE_SUCCESS</name> <operator>!=</operator> <call><name>network_backends_add</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name><name>backend_addresses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RW</name></expr></argument>, <argument><expr><name>BACKEND_STATE_UNKNOWN</name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"add rw node: %s failed."</literal></expr></argument>, <argument><expr><name><name>backend_addresses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_backend_init_extra</name><argument_list>(<argument><expr><name><name>backends_arr</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name><name>backends_arr</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>read_only_backend_addresses</name> <operator>&amp;&amp;</operator> <name><name>read_only_backend_addresses</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>BACKEND_OPERATE_SUCCESS</name> <operator>!=</operator> <call><name>network_backends_add</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>,
                                       <argument><expr><name><name>read_only_backend_addresses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RO</name></expr></argument>, <argument><expr><name>BACKEND_STATE_UNKNOWN</name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"add ro node: %s failed."</literal></expr></argument>, <argument><expr><name><name>read_only_backend_addresses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* set conn-pool config */</comment>
        <expr_stmt><expr><call><name>network_backend_init_extra</name><argument_list>(<argument><expr><name><name>backends_arr</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name><name>backends_arr</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s, ro server num:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>do_check_qeury_cache</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_client_compressed</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>query_cache_judged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>resp_recv_time</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>resp_recv_time</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>req_recv_time</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>diff</name> <operator>+=</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>resp_recv_time</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>req_recv_time</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:req time:%d, min:%d for cache"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>min_req_time_for_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>min_req_time_for_cache</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>g_hash_table_size</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_cache_table</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MAX_CACHED_ITEMS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>do_query_cache</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>cache_queue</name></name> <operator>=</operator> <call><name>network_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: candidate for query cache"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: too many cached items"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: not cached for sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>try_to_get_resp_from_query_cache</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>md5_key</name> <init>= <expr><call><name>g_compute_checksum_for_string</name><argument_list>(<argument><expr><name>G_CHECKSUM_MD5</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:visit try_to_get_resp_from_query_cache:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>access_ms</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>access_ms</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>req_recv_time</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>con</name><operator>-&gt;</operator><name>req_recv_time</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <comment type="block">/* purge first */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>last_cache_purge_time</name></name> <operator>!=</operator> <name>access_ms</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>srv</name><operator>-&gt;</operator><name>cache_index</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>query_cache_index_item</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>cache_index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>expire_ms</name></name> <operator>&gt;</operator> <name>access_ms</name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:drop content from cache:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_hash_table_remove</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_cache_table</name></name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>cache_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>cache_index</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>last_cache_purge_time</name></name> <operator>=</operator> <name>access_ms</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>query_cache_item</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_cache_table</name></name></expr></argument>, <argument><expr><name>md5_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>md5_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="block">/* TODO g_queue_peek_nth is not efficient*/</comment>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_queue_peek_nth</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>dup_packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>dup_packet</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name>dup_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:read packet len:%d from cache"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dup_packet</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>do_query_cache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:read content from cache:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:no cached item for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>proxy_put_shard_conn_to_pool</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_reduced</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><operator>(</operator><name>server_session_t</name> <operator>*</operator><operator>)</operator><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ss</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>is_put_to_pool_allowed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_put_to_pool_allowed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: con server_to_be_closed is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>alive_time</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>current_time</name></name> <operator>-</operator> <name><name>server</name><operator>-&gt;</operator><name>create_time</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>alive_time</name> <operator>&gt;</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>max_alive_time</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: reach max_alive_time"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>is_put_to_pool_allowed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>is_put_to_pool_allowed</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>-&gt;</operator><name>is_closed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_put_to_pool_allowed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server is_closed is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>is_put_to_pool_allowed</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>-&gt;</operator><name>is_in_tran_context</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_put_to_pool_allowed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: is_in_tran_context is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>is_put_to_pool_allowed</name> <operator>&amp;&amp;</operator> <name><name>ss</name><operator>-&gt;</operator><name>is_in_xa</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>is_xa_over</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_put_to_pool_allowed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: xa is not over yet"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>is_put_to_pool_allowed</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: server recv queue not empty, sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>is_put_to_pool_allowed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>resp_too_long</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: resp too long for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>is_reduced</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_reduce_conns</name></name> <operator>&amp;&amp;</operator> <name>is_put_to_pool_allowed</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>network_conn_pool_do_reduce_conns_verdict</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>is_reduced</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>is_put_to_pool_allowed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>is_put_to_pool_allowed</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>server_conn_refresh_time</name></name> <operator>&gt;</operator> <name><name>server</name><operator>-&gt;</operator><name>create_time</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_put_to_pool_allowed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: old connection for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>CHECK_PENDING_EVENT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>is_put_to_pool_allowed</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: is_put_to_pool_allowed true here, server:%p, con:%p, num:%d"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_pool_add_idle_conn</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: is_put_to_pool_allowed false here, server:%p, con:%p, num:%d"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_reduced</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>complement_conn_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: conn clients sub, total len:%d, backend:%p, value:%d con:%p"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: con server is not NULL when having freed servers"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>=</operator> <name>ATTR_START</name></expr>;</expr_stmt>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>remove_mul_server_recv_packets</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iter</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: con servers is NULL"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: remove packets for server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>packet</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>truncate_default_db_when_drop_database</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>schema_name</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
