<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/network-mysqld.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_FILIO_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/filio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include> <comment type="block" format="doxygen">/** inet_ntoa */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SIGNAL_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_UIO_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysqld_error.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-conn-pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-mainloop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resultset_merge.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-conn-pool-wrap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sharding-query-plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server-session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-users.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-monitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-variable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plugin-common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-sql-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-acl.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_WRITEV</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_BUFFERED_NETIO</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_BUFFERED_NETIO</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XA_BUF_LEN</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_CONNRESET</name></cpp:macro> <cpp:value>ECONNRESET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_CONNABORTED</name></cpp:macro> <cpp:value>ECONNABORTED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_INPROGRESS</name></cpp:macro> <cpp:value>EINPROGRESS</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EWOULDBLOCK</name> <operator>==</operator> <name>EAGAIN</name></expr></cpp:if>
<comment type="block" format="doxygen">/**
 * some system make EAGAIN == EWOULDBLOCK which would lead to a 
 * error in the case handling
 *
 * set it to -1 as this error should never happen
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_WOULDBLOCK</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_WOULDBLOCK</name></cpp:macro> <cpp:value>EWOULDBLOCK</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>      <name>cetus_last_process</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>network_mysqld_self_con_handle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>network_socket_retval_t</name></type> <name>network_mysqld_process_select_resp</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, 
        <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>finish_flag</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>char</name> <modifier>*</modifier></type><name>generate_or_retrieve_xid_str</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_generate_new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>need_generate_new</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>xa_id</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>dist_tran_id</name></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name>XID_LEN</name></expr></argument>, <argument><expr><literal type="string">"'%s_%02d_%llu'"</literal></expr></argument>,
                        <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>dist_tran_prefix</name></name></expr></argument>, <argument><expr><call><name>tc_get_log_hour</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xa_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>internal_xa_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>xa_id</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>internal_xa_id</name></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name>XID_LEN</name></expr></argument>, <argument><expr><literal type="string">"'%s_%02d_%llu@%llu'"</literal></expr></argument>, 
                        <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>dist_tran_prefix</name></name></expr></argument>, <argument><expr><call><name>tc_get_log_hour</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xa_id</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>xa_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>server</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>server</name><operator>-&gt;</operator><name>xid_str</name></name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>need_generate_new</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>xa_id</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>dist_tran_id</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name>XID_LEN</name></expr></argument>, <argument><expr><literal type="string">"'%s_%02d_%llu'"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>dist_tran_prefix</name></name></expr></argument>, <argument><expr><call><name>tc_get_log_hour</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xa_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * call the cleanup callback for the current connection
 *
 * @param srv    global context
 * @param con    connection context
 *
 * @return       NETWORK_SOCKET_SUCCESS on success
 */</comment>
<function><type><name>network_socket_retval_t</name></type>
<name>plugin_call_cleanup</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>NETWORK_MYSQLD_PLUGIN_FUNC</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_socket_retval_t</name></type> <name>retval</name> <init>= <expr><name>NETWORK_SOCKET_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>proxy_state</name></name> <operator>==</operator> <name>ST_PROXY_QUIT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_cleanup</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>) <argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * call the timeout callback for the current connection
 *
 * @param srv    global context
 * @param con    connection context
 *
 * @return       NETWORK_SOCKET_SUCCESS on success
 */</comment>
<function><type><specifier>static</specifier> <name>network_socket_retval_t</name></type>
<name>plugin_call_timeout</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>NETWORK_MYSQLD_PLUGIN_FUNC</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_socket_retval_t</name></type> <name>retval</name> <init>= <expr><name>NETWORK_SOCKET_ERROR</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_timeout</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* default implementation */</comment>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connection between %s and %s timed out. closing it"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr> ?</condition><then> <expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">"(server)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>proxy_state</name></name> <operator>==</operator> <name>ST_PROXY_QUIT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: %p quit because of proxy state"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>) <argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>chassis_private</name> <modifier>*</modifier></type>
<name>network_mysqld_priv_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is_partition_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>priv</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>chassis_private</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>cons</name></name> <operator>=</operator> <call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>backends</name></name> <operator>=</operator> <call><name>network_backends_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>is_partition_mode</name></name> <operator>=</operator> <name>is_partition_mode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>users</name></name> <operator>=</operator> <call><name>cetus_users_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>monitor</name></name> <operator>=</operator> <call><name>cetus_monitor_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>acl</name></name> <operator>=</operator> <call><name>cetus_acl_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>thread_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <return>return <expr><name>priv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_priv_shutdown</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>priv</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cons</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>plugin_call_cleanup</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>proxy_state</name></name> <operator>=</operator> <name>ST_PROXY_QUIT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: %p set proxy state ST_PROXY_QUIT"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_priv_finally_free_shared</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>priv</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cons</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: %p finally release, total:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_priv_free</name><parameter_list>(<parameter><decl><type><name>chassis</name> <name>G_GNUC_UNUSED</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>priv</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cons</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_backends_free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cetus_users_free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>users</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>stats_variables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cetus_monitor_free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cetus_acl_free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_init</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>priv_free</name></name> <operator>=</operator> <name>network_mysqld_priv_free</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>priv_shutdown</name></name> <operator>=</operator> <name>network_mysqld_priv_shutdown</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>priv_finally_free_shared</name></name> <operator>=</operator> <name>network_mysqld_priv_finally_free_shared</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <call><name>network_mysqld_priv_init</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>cetus_users_read_json</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><call><name>network_ssl_init</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>conf_dir</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"SSL init error, not using secure connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"ssl is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * create a connection 
 *
 * @return       a connection context
 */</comment>
<function><type><name>network_mysqld_con</name> <modifier>*</modifier></type>
<name>network_mysqld_con_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_mysqld_con</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>max_retry_serv_cnt</name></name> <operator>=</operator> <literal type="number">72</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>auth_switch_to_method</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>SECONDS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>MINUTES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>write_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>MINUTES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>write_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>wait_clt_next_sql</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>wait_clt_next_sql</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <return>return <expr><name>con</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_add_connection</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>listen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name> <operator>=</operator> <name>srv</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>cons</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>listen</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>listen_conns</name></name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>listen_conns</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>network_mysqld_kill_connection</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name>guint32</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>cons</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>client</name></name> <operator>||</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s network_mysqld_kill_connection, id:%d, thread id:%d"</literal></expr></argument>, 
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_connection_pool_create_conn_and_kill_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_clean_conn_data</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>heap</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>candidates</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>candidates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>recv_queues</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>recv_queues</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * free a connection 
 *
 * closes the client and server sockets 
 *
 * @param con    connection context
 */</comment>
<function><type><name>void</name></type>
<name>network_mysqld_con_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>con</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connections total: %d, free con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data_free</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data_free</name></name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: servers are not null for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>network_socket_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>hav_condi</name><operator>.</operator><name>condition_value</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>hav_condi</name><operator>.</operator><name>condition_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>hav_condi</name><operator>.</operator><name>condition_value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_clean_conn_data</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>auth_switch_to_method</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* we are still in the conns-array */</comment>

    <expr_stmt><expr><call><name>g_ptr_array_remove_fast</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>cons</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>listen_conns</name></name> <operator>=</operator> <call><name>g_list_remove</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>listen_conns</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>allow_new_conns</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type>
<name>network_mysqld_con_retry_timeout</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     *retry count   1  2  3  4...  8  9  10 11 12 ...
     *timeout (ms)  20 30 40 50... 90 10 10 10 10 ...
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>min_interval</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal></expr> }</block></expr></init></decl>;</decl_stmt>  <comment type="block">/* 10ms */</comment>

    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><name>min_interval</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>+=</operator> <name>cnt</name> <operator>*</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>timeout</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>network_mysqld_con_clear_xa_env_when_not_expected</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_start_tran_command</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_start_tran_command</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_need_q_peek_exec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_queue_reset</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>packet_id_is_reset</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * appends a raw MySQL packet to the queue 
 *
 * the packet is append the queue directly and shouldn't be used by the caller 
 * afterwards anymore and has to by in the MySQL Packet format
 *
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_queue_append_raw</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint32</name></type> <name>packet_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint8</name></type> <name>packet_id</name></decl>;</decl_stmt>

    <comment type="block">/* check that the length header is valid */</comment>
    <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>!=</operator> <name><name>sock</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>&amp;&amp;</operator> <name>queue</name> <operator>!=</operator> <name><name>sock</name><operator>-&gt;</operator><name>recv_queue</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: queue = %p doesn't belong to sock %p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>queue</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&gt;=</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>network_mysqld_proto_get_packet_len</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>packet_id</name> <operator>=</operator> <call><name>network_mysqld_proto_get_packet_id</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name>packet_len</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>packet_id_is_reset</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* the -&gt;last_packet_id is undefined, accept what we get */</comment>
        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>=</operator> <name>packet_id</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set server pack id: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>packet_id_is_reset</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>packet_id</name> <operator>!=</operator> <operator>(</operator><name>guint8</name><operator>)</operator><operator>(</operator><name><name>sock</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>last_packet_id</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server pack id ++: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
        <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>last_packet_id</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server pack id ++: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * appends a payload to the queue
 *
 * the packet is copied and prepended with the mysql packet header 
 * before it is appended to the queue if neccesary the payload is
 * spread over multiple mysql packets
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_queue_append</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>packet_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gsize</name></type> <name>packet_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <do>do <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gsize</name></type> <name>cur_packet_len</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>packet_len</name></expr></argument>, <argument><expr><name>PACKET_LEN_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>packet_len</name> <operator>+</operator> <name>NET_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>packet_id_is_reset</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>packet_id_is_reset</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
            <comment type="block" format="doxygen">/** the ++last_packet_id will make sure we send a 0 */</comment>
            <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>network_mysqld_proto_append_packet_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cur_packet_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_packet_id</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>++</operator><name><name>sock</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>packet_offset</name></expr></argument>, <argument><expr><name>cur_packet_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>packet_len</name> <operator>==</operator> <name>PACKET_LEN_MAX</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>g_string_sized_new</name><argument_list>(<argument><expr><name>NET_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>network_mysqld_proto_append_packet_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_proto_append_packet_id</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>++</operator><name><name>sock</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server pack id ++: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>packet_len</name> <operator>-=</operator> <name>cur_packet_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>packet_offset</name> <operator>+=</operator> <name>cur_packet_len</name></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>packet_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * create a OK packet and append it to the send-queue
 *
 * @param con             a client socket 
 * @param affected_rows   affected rows 
 * @param insert_id       insert_id 
 * @param server_status   server_status (bitfield of SERVER_STATUS_*) 
 * @param warnings        number of warnings to fetch with SHOW WARNINGS 
 * @return 0
 *
 * @todo move to network_mysqld_proto
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_con_send_ok_full</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>guint64</name></type> <name>affected_rows</name></decl></parameter>,
                                <parameter><decl><type><name>guint64</name></type> <name>insert_id</name></decl></parameter>, <parameter><decl><type><name>guint16</name></type> <name>server_status</name></decl></parameter>, <parameter><decl><type><name>guint16</name></type> <name>warnings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_ok_packet_t</name> <modifier>*</modifier></type><name>ok_packet</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ok_packet</name> <operator>=</operator> <call><name>network_mysqld_ok_packet_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>affected_rows</name></name> <operator>=</operator> <name>affected_rows</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>insert_id</name></name> <operator>=</operator> <name>insert_id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>server_status</name></name> <operator>=</operator> <name>server_status</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server status: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>server_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ok_packet</name><operator>-&gt;</operator><name>warnings</name></name> <operator>=</operator> <name>warnings</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_append_ok_packet</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>ok_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_ok_packet_free</name><argument_list>(<argument><expr><name>ok_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * send a simple OK packet
 *
 * - no affected rows
 * - no insert-id
 * - AUTOCOMMIT
 * - no warnings
 *
 * @param con             a client socket 
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_con_send_ok</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>network_mysqld_con_send_error_full_all</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>con</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>errmsg_len</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>errorcode</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>sqlstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type><name>err_packet</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><literal type="number">10</literal> <operator>+</operator> <name>errmsg_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err_packet</name> <operator>=</operator> <call><name>network_mysqld_err_packet_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errcode</name></name> <operator>=</operator> <name>errorcode</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><name>errmsg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>sqlstate</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>, <argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_append_err_packet</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_err_packet_free</name><argument_list>(<argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * send a error packet to the client connection
 *
 * @note the sqlstate has to match the SQL standard. 
 * If no matching SQL state is known, leave it at NULL
 *
 * @param con         the client connection
 * @param errmsg      the error message
 * @param errmsg_len  byte-len of the error-message
 * @param errorcode   mysql error-code we want to send
 * @param sqlstate    if none-NULL, 5-char SQL state to send, 
 *                    if NULL, default SQL state is used
 *
 * @return 0 on success
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_con_send_error_full</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>,
                                   <parameter><decl><type><name>gsize</name></type> <name>errmsg_len</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>errorcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>sqlstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>network_mysqld_con_send_error_full_all</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><name>errmsg_len</name></expr></argument>, <argument><expr><name>errorcode</name></expr></argument>, <argument><expr><name>sqlstate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * send a error-packet to the client connection
 *
 * errorcode is 1000, sqlstate is NULL
 *
 * @param con         the client connection
 * @param errmsg      the error message
 * @param errmsg_len  byte-len of the error-message
 *
 * @see network_mysqld_con_send_error_full
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_con_send_error</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>errmsg_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><name>errmsg_len</name></expr></argument>, <argument><expr><name>ER_UNKNOWN_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a full packet from the raw queue and move it to the packet queue 
 */</comment>
<function><type><name>network_socket_retval_t</name></type>
<name>network_mysqld_con_get_packet</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name></type> <name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>header_str</name><index>[<expr><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint32</name></type> <name>packet_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint8</name></type> <name>packet_id</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>recv_queue_raw</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>do_compress</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:queue from recv_queue_uncompress_raw:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>recv_queue_raw</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>recv_queue_uncompress_raw</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>recv_queue_raw</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>recv_queue_decrypted_raw</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>recv_queue_raw</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>recv_queue_raw</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block" format="doxygen">/** 
     * read the packet header (4 bytes)
     */</comment>
    <expr_stmt><expr><name><name>header</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>header_str</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><operator>.</operator><name>allocated_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header_str</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:queue_len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>recv_queue_raw</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* read the packet len if the leading packet */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>network_queue_peek_str</name><argument_list>(<argument><expr><name>recv_queue_raw</name></expr></argument>, <argument><expr><name>NET_HEADER_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:wait for event"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* too small */</comment>
        <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>network_mysqld_proto_get_packet_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>packet_len</name> <operator>&gt;</operator> <name><name>chas</name><operator>-&gt;</operator><name>cetus_max_allowed_packet</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"packet len: %d excess max_allowed_packet: %d"</literal></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>cetus_max_allowed_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>packet_id</name> <operator>=</operator> <call><name>network_mysqld_proto_get_packet_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* move the packet from the raw queue to the recv-queue */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>network_queue_pop_str</name><argument_list>(<argument><expr><name>recv_queue_raw</name></expr></argument>, <argument><expr><name>packet_len</name> <operator>+</operator> <name>NET_HEADER_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NETWORK_DEBUG_TRACE_IO</name></expr></cpp:if>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:output for sock:%p, packet id:%d, packet_len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>packet_id</name></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* to trace the data we received from the socket, enable this */</comment>
        <expr_stmt><expr><call><name>g_debug_hexdump</name><argument_list>(<argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>packet_id_is_reset</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>=</operator> <name>packet_id</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>packet_id_is_reset</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>packet_id</name> <operator>!=</operator> <operator>(</operator><name>guint8</name><operator>)</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: recv pack-id %d, but expected %d ... out of sync"</literal></expr></argument>,
                      <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>packet_id</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>=</operator> <name>packet_id</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:wait for event"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GString</name><modifier>*</modifier></type> <name>network_mysqld_get_compressed_packet</name><parameter_list>(<parameter><decl><type><name>network_socket</name><modifier>*</modifier></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_queue</name><modifier>*</modifier></type> <name>queue</name> <init>= <expr><name><name>sock</name><operator>-&gt;</operator><name>send_queue</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_queue_get_length</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>compressed_packet</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_packet_len</name><argument_list>(<argument><expr><name>compressed_packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>compressed_packet_id</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_packet_id</name><argument_list>(<argument><expr><name>compressed_packet</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>compressed_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_packet_len</name><argument_list>(<argument><expr><name>compressed_packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>z_stream</name></type> <name>strm</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cetus_compress_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>uncompressed_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flush</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>chunk_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>chunk</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>chunk</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr><operator>,</operator> <expr><name>chunk_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
         <condition><expr><name>chunk</name></expr>;</condition> <incr><expr><name>chunk_id</name><operator>++</operator></expr><operator>,</operator> <expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>buf_len</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>chunk_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>queue</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf_len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>queue</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf_len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>uncompressed_len</name> <operator>+=</operator> <name>buf_len</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>uncompressed_len</name> <operator>&gt;</operator> <name>PACKET_LEN_MAX</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>flush</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>uncompressed_len</name> <operator>-=</operator> <name>buf_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf_len</name> <operator>=</operator> <name>PACKET_LEN_MAX</name> <operator>-</operator> <name>uncompressed_len</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>buf_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>uncompressed_len</name> <operator>=</operator> <name>PACKET_LEN_MAX</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cetus_compress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>compressed_packet</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cetus_compress_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>flush</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>chunk</name> <operator>==</operator> <name><name>queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>tail</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cetus_compress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>compressed_packet</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>cetus_compress_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>buf_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>total_output</name></name> <operator>+=</operator> <name>buf_len</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>flush</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* delete used chunks, adjust offset */</comment>
    <for>for <control>(<init><expr><name>chunk</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>chunk</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_queue_delete_link</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <break>break;</break> <comment type="block">/* have some residual */</comment>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>compressed_len</name> <init>= <expr><name><name>compressed_packet</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>NET_HEADER_SIZE</name> <operator>-</operator> <name>COMP_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_set_compressed_packet_len</name><argument_list>(<argument><expr><name>compressed_packet</name></expr></argument>,
                                                   <argument><expr><name>compressed_len</name></expr></argument>, <argument><expr><name>uncompressed_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>compressed_packet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>network_mysqld_con_compress_all_packets</name><parameter_list>(<parameter><decl><type><name>network_socket</name><modifier>*</modifier></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name><modifier>*</modifier></type> <name>packet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>packet</name> <operator>=</operator> <call><name>network_mysqld_get_compressed_packet</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>send_queue_compressed</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_socket_retval_t</name></type>
<name>network_mysqld_con_get_uncompressed_packet</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name></type> <name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>header_str</name><index>[<expr><name>NET_HEADER_SIZE</name> <operator>+</operator> <name>COMP_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint32</name></type> <name>packet_len</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>header_length</name> <init>= <expr><name>NET_HEADER_SIZE</name> <operator>+</operator> <name>COMP_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** 
     * read the packet header (4 bytes)
     */</comment>
    <expr_stmt><expr><name><name>header</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>header_str</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><operator>.</operator><name>allocated_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header_str</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>src_queue</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>recv_queue_raw</name></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>src_queue</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>recv_queue_decrypted_raw</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <while>while<condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name><name>header</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <comment type="block">/* read the packet len if the leading packet */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>network_queue_peek_str</name><argument_list>(<argument><expr><name>src_queue</name></expr></argument>, <argument><expr><name>header_length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/* too small */</comment>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:network_queue_peek_str wait for event for sock:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>network_mysqld_proto_get_packet_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>packet_len</name> <operator>&gt;</operator> <name><name>chas</name><operator>-&gt;</operator><name>cetus_max_allowed_packet</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"packet len: %d excess max_allowed_packet: %d"</literal></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>cetus_max_allowed_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* move the packet from the raw queue to the recv-queue */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>network_queue_pop_str</name><argument_list>(<argument><expr><name>src_queue</name></expr></argument>, <argument><expr><name>packet_len</name> <operator>+</operator> <name>NET_HEADER_SIZE</name> <operator>+</operator> <name>COMP_HEADER_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NETWORK_DEBUG_TRACE_IO</name></expr></cpp:if>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:output for sock:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* to trace the data we received from the socket, enable this */</comment>
            <expr_stmt><expr><call><name>g_debug_hexdump</name><argument_list>(<argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>packet</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name>NET_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>uncompressed_len</name> <init>= <expr><operator>(</operator><name><name>info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>compressed_packet_id</name></name> <operator>=</operator> <name><name>info</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: do uncompress here, com len:%d, uncompress len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>, <argument><expr><name>uncompressed_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>uncompressed_packet</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>uncompressed_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>uncompressed_len</name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>uncompressed_packet</name> <operator>=</operator> <call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>uncompressed_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>uncompressed_packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>info</name> <operator>+</operator> <name>COMP_HEADER_SIZE</name><operator>)</operator></expr></argument>, <argument><expr><name>uncompressed_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>uncompressed_packet</name> <operator>=</operator> <call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>uncompressed_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>cetus_uncompress</name><argument_list>(<argument><expr><name>uncompressed_packet</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>packet</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name>header_length</name></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:cetus_uncompress error for con:%p, ret:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call cetus_uncompress for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>recv_queue_uncompress_raw</name></name></expr></argument>, <argument><expr><name>uncompressed_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>disp_err_packet</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type><name>err_packet</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err_packet</name> <operator>=</operator> <call><name>network_mysqld_err_packet_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_err_met</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>network_mysqld_proto_get_err_packet</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: dst:%s, sql:%s, errmsg:%s"</literal></expr></argument>,
                  <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errmsg</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>checked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name><name>err_packet</name><operator>-&gt;</operator><name>errcode</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>ER_XA_RBROLLBACK</name></expr>:</case>
            <case>case <expr><name>ER_XA_RBDEADLOCK</name></expr>:</case>
            <case>case <expr><name>ER_XA_RBTIMEOUT</name></expr>:</case>
            <case>case <expr><name>ER_LOCK_WAIT_TIMEOUT</name></expr>:</case>
            <case>case <expr><name>ER_LOCK_DEADLOCK</name></expr>:</case>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: errcode for con:%p, xid:%s, errcode:%d"</literal></expr></argument>,
                          <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>ER_DUP_ENTRY</name></expr>:</case>
                <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>ER_XAER_DUPID</name></expr>:</case>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: dup xid for con:%p, xid:%s, xa state:%d"</literal></expr></argument>,
                           <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: errcode for con:%p, xid:%s, errcode:%d"</literal></expr></argument>,
                          <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>checked</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>sqlstate</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"XA"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: query status error, xid:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:clt:%s,src:%s,dst:%s,db:%s,%s"</literal></expr></argument>,
                  <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,
                  <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,
                  <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_err_packet_free</name><argument_list>(<argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

    <return>return;</return>
</block_content>}</block></function>

<function><type><name>network_socket_retval_t</name></type>
<name>network_mysqld_read_mul_packets</name><parameter_list>(<parameter><decl><type><name>chassis</name> <name>G_GNUC_UNUSED</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>,
                                <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_finished</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket_retval_t</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>is_finished</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: allready finished for server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>is_finished</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:server to read:%d, packet id:%d for con:%p"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>server</name><operator>-&gt;</operator><name>to_read</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>off_t</name></type> <name>to_read</name> <init>= <expr><name><name>server</name><operator>-&gt;</operator><name>to_read</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>max_header_size_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><call><name>network_socket_read</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
        <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
    <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
        <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"NETWORK_SOCKET_ERROR_RETRY wasn't expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>is_waiting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>resp_len</name></name> <operator>+=</operator> <name>to_read</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: befre checking network_mysqld_process_select_resp, resp len:%d, to read:%d"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>server</name><operator>-&gt;</operator><name>resp_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>candidate_fast_streamed</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>num_servers_visited</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>server</name><operator>-&gt;</operator><name>do_compress</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: visit network_mysqld_process_select_resp"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>network_socket_retval_t</name></type> <name>result</name> <init>= <expr><call><name>network_mysqld_process_select_resp</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name>is_finished</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>is_finished</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: is finished true here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>enum</name> <name>enum_server_command</name></name></type> <name>orig_command</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>==</operator> <name>ATTR_DIF_CHANGE_USER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>COM_CHANGE_USER</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set command COM_CHANGE_USER, attr adj:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>==</operator> <name>ATTR_DIF_DEFAULT_DB</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>COM_INIT_DB</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set command COM_INIT_DB"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>==</operator> <name>ATTR_DIF_SET_OPTION</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>COM_SET_OPTION</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>orig_server</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>==</operator> <name>COM_QUERY</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>com_query</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>qs_state</name> <init>= <expr><name><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>com_query</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>qs_state</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>do_compress</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_get_uncompressed_packet</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_mysqld_con_get_packet</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_mysqld_con_get_packet</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <while>while <condition>(<expr><name>ret</name> <operator>==</operator> <name>NETWORK_SOCKET_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>server</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>is_finished</name> <operator>=</operator> <call><name>network_mysqld_proto_get_query_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>is_finished</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:packets read finished:%d, default db:%s, server db:%s"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>==</operator> <name>COM_QUERY</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>query</name> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>disp_err_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>warning_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s warning flag from server:%s is met:%s"</literal></expr></argument>,
                              <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_mysqld_con_get_packet</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>==</operator> <name>COM_QUERY</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>com_query</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name> <operator>=</operator> <name><name>com_query</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>resp_len</name></name> <operator>&gt;</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>max_header_size</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>max_header_size_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: reach max header size"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:after mul read, state:%d, ret:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>orig_command</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>is_finished</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <name>NETWORK_SOCKET_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: not finished for server:%p, orig server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>orig_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>orig_server</name></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * read a MySQL packet from the socket
 *
 * the packet is added to the con-&gt;recv_queue and contains a full mysql packet
 * with packet-header and everything 
 */</comment>
<function><type><name>network_socket_retval_t</name></type>
<name>network_mysqld_read</name><parameter_list>(<parameter><decl><type><name>chassis</name> <name>G_GNUC_UNUSED</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><call><name>network_socket_read</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
        <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
    <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
        <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"NETWORK_SOCKET_ERROR_RETRY wasn't expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>network_ssl_decrypt_packet</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>do_compress</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_get_uncompressed_packet</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>network_mysqld_con_get_packet</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_socket_retval_t</name></type>
<name>network_mysqld_write</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>do_compress</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sock</name><operator>-&gt;</operator><name>write_uncomplete</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_compress_all_packets</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>network_socket_retval_t</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_ssl_write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_socket_write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * call the hooks of the plugins for each state
 *
 * if the plugin doesn't implement a hook, we provide a default operation
 *
 * @param srv      the global context
 * @param con      the connection context
 * @param state    state to handle
 * @return         NETWORK_SOCKET_SUCCESS on success
 */</comment>
<function><type><name>network_socket_retval_t</name></type>
<name>plugin_call</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket_retval_t</name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NETWORK_MYSQLD_PLUGIN_FUNC</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>proxy_state</name></name> <operator>==</operator> <name>ST_PROXY_QUIT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: %p quit because of proxy state not zero"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ST_INIT</name></expr>:</case>
        <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_init</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CONNECT_SERVER</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>ST_CONNECT_SERVER</name></expr>:</case>
        <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_connect_server</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>ST_SEND_HANDSHAKE</name></expr>:</case>
        <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_send_handshake</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_AUTH</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <break>break;</break>
    <case>case <expr><name>ST_READ_AUTH</name></expr>:</case>
        <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_auth</name></name></expr>;</expr_stmt>

        <break>break;</break>
    <case>case <expr><name>ST_SEND_AUTH_RESULT</name></expr>:</case>
        <comment type="block">/* called after the auth data is sent to the client */</comment>
        <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_send_auth_result</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/*
             * figure out what to do next:
             * - switch to 'read command from client'
             * - close connection
             * - read auth-data from client
             * - read another auth-result packet from server
             */</comment>
            <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>auth_result_state</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
                <comment type="block">/*
                 * OK, delivered to client,
                 * switch to command phase
                 */</comment>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_QUERY</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_client_compressed</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>do_compress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_socket_set_send_buffer_size</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>COMPRESS_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
                <comment type="block">/* ERR delivered to client, close the conn now */</comment>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:state is set ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AUTH_SWITCH</name></expr>:</case>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>auth_result_state</name></name> <operator>=</operator> <name>MYSQLD_PACKET_OK</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_AUTH</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unexpected st for SEND_AUTH_RESULT: %02x"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>auth_result_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>ST_READ_QUERY</name></expr>:</case>
        <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_query</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>ST_GET_SERVER_CONNECTION_LIST</name></expr>:</case>
        <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_get_server_conn_list</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>ST_READ_QUERY_RESULT</name></expr>:</case>
        <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_query_result</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>ST_SEND_QUERY_RESULT</name></expr>:</case>
        <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_send_query_result</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>resp_too_long</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: strange here for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_QUERY</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set ST_READ_QUERY for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLOSE_SERVER</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set ST_CLOSE_SERVER for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>

    <case>case <expr><name>ST_ERROR</name></expr>:</case>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: not executing plugin func in state ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"%s: unhandled state: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>proxy_state</name></name> <operator>==</operator> <name>ST_PROXY_QUIT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: %p quit because of proxy state not zero"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>) <argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * reset the command-response parsing
 *
 * some commands needs state information and we have to 
 * reset the parsing as soon as we add a new command to the send-queue
 */</comment>
<function><type><name>void</name></type>
<name>network_mysqld_con_reset_command_response_state</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data_free</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data_free</name></name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data_free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * reset per-query states
 */</comment>
<function><type><name>void</name></type>
<name>network_mysqld_con_reset_query_state</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sql_modified</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>hav_condi</name><operator>.</operator><name>rel_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>hav_condi</name><operator>.</operator><name>condition_value</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>hav_condi</name><operator>.</operator><name>condition_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>hav_condi</name><operator>.</operator><name>condition_value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>modified_sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>is_modified</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get the name of a connection state
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>network_mysqld_con_st_name</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con_state_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ST_INIT</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_INIT"</literal></expr>;</return>
    <case>case <expr><name>ST_CONNECT_SERVER</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_CONNECT_SERVER"</literal></expr>;</return>
    <case>case <expr><name>ST_SEND_HANDSHAKE</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_SEND_HANDSHAKE"</literal></expr>;</return>
    <case>case <expr><name>ST_READ_AUTH</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_READ_AUTH"</literal></expr>;</return>
    <case>case <expr><name>ST_SEND_AUTH_RESULT</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_SEND_AUTH_RESULT"</literal></expr>;</return>
    <case>case <expr><name>ST_READ_QUERY</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_READ_QUERY"</literal></expr>;</return>
    <case>case <expr><name>ST_GET_SERVER_CONNECTION_LIST</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_GET_SERVER_CONNECTION_LIST"</literal></expr>;</return>
    <case>case <expr><name>ST_READ_M_QUERY_RESULT</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_READ_M_QUERY_RESULT"</literal></expr>;</return>
    <case>case <expr><name>ST_SEND_QUERY</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_SEND_QUERY"</literal></expr>;</return>
    <case>case <expr><name>ST_READ_QUERY_RESULT</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_READ_QUERY_RESULT"</literal></expr>;</return>
    <case>case <expr><name>ST_SEND_QUERY_RESULT</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_SEND_QUERY_RESULT"</literal></expr>;</return>

    <case>case <expr><name>ST_CLIENT_QUIT</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_CLIENT_QUIT"</literal></expr>;</return>
    <case>case <expr><name>ST_CLOSE_CLIENT</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_CLOSE_CLIENT"</literal></expr>;</return>
    <case>case <expr><name>ST_CLOSE_SERVER</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_CLOSE_SERVER"</literal></expr>;</return>
    <case>case <expr><name>ST_ERROR</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_ERROR"</literal></expr>;</return>
    <case>case <expr><name>ST_SEND_ERROR</name></expr>:</case>
        <return>return <expr><literal type="string">"ST_SEND_ERROR"</literal></expr>;</return>
    </block_content>}</block></switch>

    <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_query_status</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>com_query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: visit check_query_status:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>com_query</name> <operator>||</operator> <name><name>com_query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>!=</operator><name>MYSQLD_PACKET_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: no check for query status"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>com_query</name><operator>-&gt;</operator><name>server_status</name></name> <operator>&amp;</operator> <name>SERVER_STATUS_IN_TRANS</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>-&gt;</operator><name>is_read_only</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>is_in_tran_context</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_in_transaction true for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: SERVER_STATUS_IN_TRANS true from read server"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>is_in_tran_context</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_in_transaction false:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_in_transaction true here:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_prepared</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_in_sess_context</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_server_conn_reserved false:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_server_conn_reserved true:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: is_in_transaction true here:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>com_query</name><operator>-&gt;</operator><name>insert_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_insert_id</name></name> <operator>=</operator> <name><name>com_query</name><operator>-&gt;</operator><name>insert_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set last insert id:%llu"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>con</name><operator>-&gt;</operator><name>last_insert_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>set_conn_attr</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>enum</name> <name>enum_server_command</name></name></type> <name>cur_command</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>==</operator> <name>ATTR_DIF_CHANGE_USER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cur_command</name> <operator>=</operator> <name>COM_CHANGE_USER</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>==</operator> <name>ATTR_DIF_DEFAULT_DB</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cur_command</name> <operator>=</operator> <name>COM_INIT_DB</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>==</operator> <name>ATTR_DIF_SET_OPTION</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cur_command</name> <operator>=</operator> <name>COM_SET_OPTION</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>cur_command</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>COM_QUERY</name></expr>:</case>
        <expr_stmt><expr><call><name>check_query_status</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>COM_CHANGE_USER</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: save username for server:%p, con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>COM_INIT_DB</name></expr>:</case>
        <comment type="block">/* TODO: make sure we get OK result packet */</comment>
        <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>COM_SET_OPTION</name></expr>:</case>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: unknown command:%d, con:%p, sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cur_command</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>record_xa_log_for_mending</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NEXT_ST_XA_START</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>NEXT_ST_XA_QUERY</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>NEXT_ST_XA_END</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>NEXT_ST_XA_PREPARE</name></expr>:</case>
        <expr_stmt><expr><call><name>tc_log_info</name><argument_list>(<argument><expr><name>LOG_WARN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"XA END %s %s@%u failed"</literal></expr></argument>,
                    <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>NEXT_ST_XA_COMMIT</name></expr>:</case>
        <expr_stmt><expr><call><name>tc_log_info</name><argument_list>(<argument><expr><name>LOG_WARN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"XA PREPARE %s %s@%u failed"</literal></expr></argument>,
                    <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>NEXT_ST_XA_ROLLBACK</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>NEXT_ST_XA_CANDIDATE_OVER</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tc_log_info</name><argument_list>(<argument><expr><name>LOG_WARN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"XA ROLLBACK %s %s@%u failed"</literal></expr></argument>,
                        <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>write_server_num</name></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator>
                <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>partition_dist_tran</name></name><operator>)</operator><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>tc_log_info</name><argument_list>(<argument><expr><name>LOG_WARN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                            <argument><expr><literal type="string">"XA COMMIT %s %s@%u ONE PHASE failed"</literal></expr></argument>,
                            <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>tc_log_info</name><argument_list>(<argument><expr><name>LOG_WARN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"XA COMMIT %s %s@%u failed"</literal></expr></argument>,
                            <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&lt;=</operator> <name>NEXT_ST_XA_START</name></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&gt;=</operator> <name>NEXT_ST_XA_CANDIDATE_OVER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:xa tran, could not recv response:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:xa tran, set failed here:%p, xa state:%d, xid:%s"</literal></expr></argument>,
                  <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>shard_set_autocommit</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set autocommit here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>attr_consistent</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><literal type="string">"start transaction"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_start_trans_buffered</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_start_trans_buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: start transaction for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit_trans_buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>shard_set_multi_stmt_consistant</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>enum</name> <name>enum_server_command</name></name></type> <name>command</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>command</name> <operator>==</operator> <name>COM_SET_OPTION</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>result</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>attr_consistent</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ss</name><operator>-&gt;</operator><name>attr_diff</name></name> <operator>&amp;</operator> <name>ATTR_DIF_SET_OPTION</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name> <operator>!=</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>new_packet</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>new_packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_SET_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_len</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>new_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: adjust multi stmt"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:set option adjust warning:not consistant"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>shard_set_charset_consistant</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>attr_consistent</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ss</name><operator>-&gt;</operator><name>attr_diff</name></name> <operator>&amp;</operator> <name>ATTR_DIF_CHARSET</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><literal type="string">"SET NAMES "</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: client charset is empty:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"''"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: adjust default charset for server, clt:%s, srv:%s"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>shard_set_default_db_consistant</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>enum</name> <name>enum_server_command</name></name></type> <name>command</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>command</name> <operator>==</operator> <name>COM_INIT_DB</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>result</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>attr_consistent</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ss</name><operator>-&gt;</operator><name>attr_diff</name></name> <operator>&amp;</operator> <name>ATTR_DIF_DEFAULT_DB</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>clt_default_db</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>srv_default_db</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>clt_default_db</name> <operator>&amp;&amp;</operator> <name><name>clt_default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_string_equal</name><argument_list>(<argument><expr><name>clt_default_db</name></expr></argument>, <argument><expr><name>srv_default_db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>clt_default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>new_packet</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>new_packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_INIT_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>clt_default_db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_len</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>clt_default_db</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>new_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: adjust default db for server, clt:%s, srv:%s"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>clt_default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>srv_default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name><operator>++</operator></expr>;</expr_stmt>

                <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:default db adjust warning:not consistant"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:client default db is empty "</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>session_attr_flags_t</name></type>
<name>next_attribute</name><parameter_list>(<parameter><decl><type><name>session_attr_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>session_attr_flags_t</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><name>attr</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <name>flags</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>a</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>ATTR_DIF_SET_AUTOCOMMIT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>ATTR_START</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>build_attr_statements</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:build_attr_statements here, attr state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>=</operator> <call><name>next_attribute</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>unmatched_attribute</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>==</operator> <name>ATTR_DIF_SET_AUTOCOMMIT</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>delay_send_auto_commit</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>delay_send_auto_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:need to set autocommit for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>=</operator> <name>ATTR_START</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ATTR_DIF_DEFAULT_DB</name></expr>:</case>
        <expr_stmt><expr><call><name>shard_set_default_db_consistant</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>ATTR_DIF_CHARSET</name></expr>:</case>
        <expr_stmt><expr><call><name>shard_set_charset_consistant</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>ATTR_DIF_SET_OPTION</name></expr>:</case>
        <expr_stmt><expr><call><name>shard_set_multi_stmt_consistant</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>ATTR_DIF_SET_AUTOCOMMIT</name></expr>:</case>
        <expr_stmt><expr><call><name>shard_set_autocommit</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>ATTR_START</name></expr>:</case>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:strange attr adj state:%d, conn:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>=</operator> <name>ATTR_START</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: expected num:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: attr adj state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>&gt;</operator> <name>ATTR_START</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>shard_build_xa_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>chunk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:chunk is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:packet id:%d when get server"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>==</operator> <name>COM_QUERY</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>payload</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_query_packet</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>g_string_new_len</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_NONE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_xa_query_sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>write_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>has_xa_write</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>build_xa_command</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer_log</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>XA_CMD_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xid_str</name> <init>= <expr><call><name>generate_or_retrieve_xid_str</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NEXT_ST_XA_END</name></expr>:</case>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>XA_CMD_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"XA END %s"</literal></expr></argument>, <argument><expr><name>xid_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_ROLLBACK</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_commit_or_rollback when xa end"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_PREPARE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:XA END %s, server:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>xid_str</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break>break;</break>
    <case>case <expr><name>NEXT_ST_XA_PREPARE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>write_server_num</name></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator>
                <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>partition_dist_tran</name></name><operator>)</operator><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>XA_CMD_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"XA COMMIT %s ONE PHASE"</literal></expr></argument>, <argument><expr><name>xid_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_CANDIDATE_OVER</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>XA_CMD_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"XA PREPARE %s"</literal></expr></argument>, <argument><expr><name>xid_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_COMMIT</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>buffer_log</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buffer_log</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>NEXT_ST_XA_COMMIT</name></expr>:</case>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>XA_CMD_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"XA COMMIT %s"</literal></expr></argument>, <argument><expr><name>xid_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_CANDIDATE_OVER</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>buffer_log</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buffer_log</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer_log</name></expr></argument>, <argument><expr><name>XA_CMD_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"XA COMMIT %s"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>NEXT_ST_XA_ROLLBACK</name></expr>:</case>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>XA_CMD_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"XA ROLLBACK %s"</literal></expr></argument>, <argument><expr><name>xid_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>buffer_log</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buffer_log</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer_log</name></expr></argument>, <argument><expr><name>XA_CMD_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"XA COMMIT %s"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_CANDIDATE_OVER</name></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_OVER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>is_xa_over</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_participated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_OVER</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set dist_tran_state NEXT_ST_XA_OVER for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_start_tran_command</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_start_tran_command</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_need_q_peek_exec true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: is_start_tran_command false"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return;</return>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set con dist_tran_state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>unavailable</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:packet id:%d when get server"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>srv_packet</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>srv_packet</name> <operator>=</operator> <call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv_packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>srv_packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>srv_packet</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_len</name><argument_list>(<argument><expr><name>srv_packet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>srv_packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>srv_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_NONE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>disp_xa_abnormal_resultset</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>,
                           <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_xa_cmd_met</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&lt;=</operator> <name>NEXT_ST_XA_QUERY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_END</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>build_xa_command</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&lt;=</operator> <name>NEXT_ST_XA_COMMIT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_ROLLBACK</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>is_xa_cmd_met</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>build_xa_command</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>is_xa_cmd_met</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>build_xa_command</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>p_buffer</name> <operator>=</operator> <operator>*</operator><name>p_buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>, <argument><expr><name>XA_BUF_LEN</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>p_buffer</name> <operator>-</operator> <name>buffer</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%s@%d"</literal></expr></argument>,
                 <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p_buffer</name> <operator>=</operator> <operator>*</operator><name>p_buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&lt;=</operator> <name>NEXT_ST_XA_ROLLBACK</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:adjust ss dist state:%d to %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>is_xa_cmd_met</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>build_xa_command</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>is_xa_cmd_met</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>build_xa_command</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>p_buffer</name> <operator>=</operator> <operator>*</operator><name>p_buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>, <argument><expr><name>XA_BUF_LEN</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>p_buffer</name> <operator>-</operator> <name>buffer</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%s@%d"</literal></expr></argument>,
                 <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p_buffer</name> <operator>=</operator> <operator>*</operator><name>p_buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&lt;=</operator> <name>NEXT_ST_XA_CANDIDATE_OVER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>build_xa_command</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>disp_xa_according_state</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>,
                        <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_xa_cmd_met</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_xa_query</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>==</operator> <name>NEXT_ST_XA_QUERY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>xa_start_already_sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>is_xa_cmd_met</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>is_xa_cmd_met</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>, <argument><expr><name>XA_BUF_LEN</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>p_buffer</name> <operator>-</operator> <name>buffer</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%s@%d"</literal></expr></argument>,
                 <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p_buffer</name> <operator>=</operator> <operator>*</operator><name>p_buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>shard_build_xa_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:shard_build_xa_query failed for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>is_xa_query</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set is xa query true for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_END</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NEXT_ST_XA_PREPARE</name></expr>:</case>
        <case>case <expr><name>NEXT_ST_XA_COMMIT</name></expr>:</case>
        <case>case <expr><name>NEXT_ST_XA_ROLLBACK</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>is_xa_cmd_met</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>build_xa_command</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>is_xa_cmd_met</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>build_xa_command</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>p_buffer</name> <operator>=</operator> <operator>*</operator><name>p_buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>, <argument><expr><name>XA_BUF_LEN</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>p_buffer</name> <operator>-</operator> <name>buffer</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%s@%d"</literal></expr></argument>,
                     <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>p_buffer</name> <operator>=</operator> <operator>*</operator><name>p_buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>build_xa_command</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>build_xa_statements</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call build_xa_statements:%d, server num:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_resp_num</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>xa_start_phase</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>iter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>workers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_xa_query</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_xa_cmd_met</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_con_dist_tran_state_t</name></type> <name>global_xa_state</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>XA_BUF_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>write_server_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>has_xa_write</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>write_server_num</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ss %d, xa state:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: stop processing for this server:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_participated</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>unavailable</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: server unavailable and stop processing here:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>workers</name><operator>++</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>iter</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>check_dist_tran_resultset</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>check_dist_tran_resultset</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: query status not ok, xid:%llu"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xa_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>disp_xa_abnormal_resultset</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_xa_cmd_met</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_buffer</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>disp_xa_according_state</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_xa_cmd_met</name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name>is_xa_query</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_buffer</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_OVER</name></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>global_xa_state</name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>workers</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_OVER</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>global_xa_state</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>global_xa_state</name> <operator>!=</operator> <name>NEXT_ST_XA_OVER</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>is_xa_query</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set is xa query true for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>xa_log_detailed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tc_log_info</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"XA QUERY %s %s %s"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_xa_cmd_met</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>xa_log_detailed</name></name> <operator>||</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>write_server_num</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
                        <operator>(</operator><operator>(</operator><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name><operator>)</operator> <operator>||</operator>  <name>len</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:xa sql:%s for con:%p, server num:%d, write num:%d, partition_dist_tran:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, 
                        <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>write_server_num</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>partition_dist_tran</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>tc_log_info</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>retrieve_error_info_for_xa_trans</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>packet</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: retrieve null server packet"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <while>while <condition>(<expr><name>packet</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: retrieve mul server packet:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <break>break;</break>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>retrieve_one_resp_for_xa_trans</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>iter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>unavailable</name></name> <operator>||</operator> <operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: retrieve packets for server:%p, index:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>packet</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: retrieve server packet null"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><name>packet</name></expr>)</condition>;</do>
            <break>break;</break>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>normal_result_merge</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name> <init>= <expr><call><name>g_ptr_array_sized_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* get all participants' receive queues */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>uniq_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>result_merge_t</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call resultset_merge"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>RM_SUCCESS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>detail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>resultset_merge</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uniq_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>result</name><operator>.</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>RM_FAIL</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>is_timeout</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: tcp streamed resultset_merge failed for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>detail</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>detail</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_RESULT_MERGE</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>detail</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: merge failed for sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_timeout</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"proxy timeout when merging"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_RESULT_MERGE</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"merge failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_RESULT_MERGE</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISP_STOP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISP_CONTINUE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAIT_FOR_EVENT</name><parameter_list>(<parameter><type><name>ev_struct</name></type></parameter>, <parameter><type><name>ev_type</name></type></parameter>, <parameter><type><name>timeout</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>event_set(&amp;(ev_struct-&gt;event), ev_struct-&gt;fd, ev_type, network_mysqld_con_handle, con); \
    g_debug("%s:call WAIT_FOR_EVENT, ev:%p", G_STRLOC, &amp;(ev_struct-&gt;event)); \
    chassis_event_add_with_timeout(con-&gt;srv, &amp;(ev_struct-&gt;event), timeout);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>disp_query_after_consistant_attr</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_attr_adjust</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran_xa_start_generated</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* append xa query to send queue */</comment>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_QUERY</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xid_str</name> <init>= <expr><call><name>generate_or_retrieve_xid_str</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:xa start:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>xid_str</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_xa_start_generated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_start_trans_buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit_trans_buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:packet id:%d when get server, ss state:%d"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>xa_start_already_sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>==</operator> <name>NEXT_ST_XA_START</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xid_str</name> <init>= <expr><call><name>generate_or_retrieve_xid_str</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_xa_start_generated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_mysqld_send_xa_start</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>xid_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: %s, server:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>xid_str</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>network_mysqld_send_xa_start</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: %s, server:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_QUERY</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>xa_start_already_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>xa_start_phase</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>==</operator> <name>COM_QUERY</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>payload</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>network_mysqld_proto_append_query_packet</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>g_string_new_len</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_queue_delete_link</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>log_slowquery</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>interval_ms</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>usec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>usec</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>t</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <name><name>t</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>time_str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>make_iso8601_timestamp</name><argument_list>(<argument><expr><name>time_str</name></expr></argument>, <argument><expr><name>usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>interval</name> <init>= <expr><name>interval_ms</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_log</name><argument_list>(<argument><expr><literal type="string">"slowquery"</literal></expr></argument>, <argument><expr><name>G_LOG_LEVEL_MESSAGE</name></expr></argument>,
          <argument><expr><literal type="string">"# Time: %s\n"</literal>
          <literal type="string">"# User@Host: %s[%s] @ %s[%s] Id: 0\n"</literal>
          <literal type="string">"# Query_time: %f Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n"</literal>
          <literal type="string">"SET timestamp=%ld;\n%s;\n"</literal></expr></argument>, <argument><expr><name>time_str</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><ternary><condition><expr><name>domain</name> <operator>==</operator> <name>NULL</name></expr>?</condition><then> <expr><literal type="string">" "</literal></expr></then><else>:<expr><name>domain</name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>ip</name> <operator>==</operator> <name>NULL</name></expr>?</condition><then> <expr><literal type="string">" "</literal></expr></then><else>:<expr><name>ip</name></expr></else></ternary></expr></argument>, <argument><expr><name>interval</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_query_time_stats</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>resp_send_time</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>req_recv_time</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>diff</name> <operator>+=</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>resp_send_time</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>req_recv_time</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>long_query_time</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>g_strsplit_set</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log_slowquery</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                      <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>long_query_time</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name><operator>.</operator><name>query_time_table</name><index>[<expr><name>diff</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_query_wait_stats</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>cur</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name><name>cur</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>req_recv_time</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>diff</name> <operator>+=</operator> <operator>(</operator><name><name>cur</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>req_recv_time</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>diff</name> <operator>&gt;=</operator> <name>MAX_WAIT_TIME</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: query waits too long:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>MAX_WAIT_TIME</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name><operator>.</operator><name>query_wait_table</name><index>[<expr><name>diff</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_service_unavailable</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: service unavailable for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server num :%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>fresh</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>CHECK_PENDING_EVENT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>server_conn_refresh_time</name></name> <operator>&lt;=</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>create_time</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>network_pool_add_idle_conn</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: old connection for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>complement_conn_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: connected_clients sub:%d, %d ndx for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                          <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_ptr_array_remove</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>server_session_free</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: global update/insert is not fullfiled for con:%p, sql:%s"</literal></expr></argument>, 
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: global update/insert is not fullfiled for con:%p"</literal></expr></argument>, 
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_clear_xa_env_when_not_expected</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"service unavailable"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_TOO_MANY_USER_CONNECTIONS</name></expr></argument>, <argument><expr><literal type="string">"42000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_wait_server</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>handle_read_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con_state_t</name></type> <name>ostate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>last_packet</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>recv_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>total_output</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>compressed_packet_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>do_strict_compress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>do_query_cache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>query_cache_too_long</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>query_cache_judged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_read_ro_server_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>req_recv_time</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_wait_server</name></name></expr>)</condition> <block>{<block_content>
        <do>do <block>{<block_content>
            <switch>switch <condition>(<expr><call><name>network_mysqld_read</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>recv_sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <break>break;</break>
            <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_start_tran_command</name></name></expr>)</condition> <block>{<block_content>   <comment type="block">/* is prev sql START */</comment>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_start_tran_command</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_need_q_peek_exec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_need_q_peek_exec true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_need_q_peek_exec</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>wait_clt_next_sql</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_need_q_peek_exec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set a short timeout:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>maintain_close_mode</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_admin_client</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>maintained_client_idle_timeout</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set a maintained client timeout:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>client_idle_timeout</name></name></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>incomplete_tran_idle_timeout</name></name></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set a long timeout:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><name>DISP_STOP</name></expr>;</return>
            <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
            <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: network_mysqld_read error"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
                <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
            </block_content>}</block></switch>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ostate</name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>chunks</name> <init>= <expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>last_packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>g_queue_peek_tail</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name><name>last_packet</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <operator>(</operator><name>PACKET_LEN_MAX</name> <operator>+</operator> <name>NET_HEADER_SIZE</name><operator>)</operator></expr>)</condition>;</do>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:wait server."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_too_long</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* check for tracing some problems and it will be removed later */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:client recv queue head is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call read query"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_socket_retval_t</name></type> <name>ret</name> <init>= <expr><call><name>plugin_call</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
        <return>return <expr><name>DISP_STOP</name></expr>;</return>
    <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>is_wait_server</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: wait successful:%d, con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>handle_query_wait_stats</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_wait_server</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>max_retry_serv_cnt</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_connection_pool_create_conn</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_wait_server</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>network_mysqld_con_retry_timeout</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">": wait again:%d, con:%p, l:%d"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>DISP_STOP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* fall through */</comment>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: wait failed and no server backend for user:%s, ret:%d"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>handle_query_wait_stats</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>process_service_unavailable</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <comment type="block" format="doxygen">/**
     * there should be 3 possible next states from here:
     *
     * - ST_ERROR 
     *   (if something went wrong and we want to 
     *   close the connection
     * - ST_SEND_QUERY 
     *   (if we want to send data to the con-&gt;server)
     * - ST_SEND_QUERY_RESULT (if we want to send data 
     *   to the con-&gt;client)
     *
     * @todo verify this with a clean switch ()
     */</comment>

    <comment type="block">/* reset the tracked command
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_SEND_QUERY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_reset_command_response_state</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call reset_command_response_state for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_write_to_server</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>write_wait</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket_retval_t</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_write_pending</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_mysqld_write</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
       <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
          <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_servers_visited</name></name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:num_read_pending:%d, ss-&gt;index:%d, reset 0 for con:%p"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_write_pending</name></name><operator>--</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_READ</name></expr>;</expr_stmt>
          <break>break;</break>
       <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
          <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_WRITE</name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:write waits for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>server_sess_wait_for_event</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>write_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><operator>*</operator><name>write_wait</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <break>break;</break>

       <default>default:</default>
          <block>{<block_content>
             <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><literal type="string">"write error"</literal></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
             <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
             <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
             <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_client_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
             <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:write error for con:%p, ret:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_NET_ERROR_ON_WRITE</name></expr></argument>, <argument><expr><literal type="string">"08S01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <break>break;</break>
          </block_content>}</block>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_shard_write</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>COM_STMT_SEND_LONG_DATA</name></expr>:</case>
    <case>case <expr><name>COM_STMT_CLOSE</name></expr>:</case>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set ST_READ_QUERY for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_QUERY</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>COM_QUERY</name></expr>:</case>
    <default>default:</default>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_M_QUERY_RESULT</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_servers_visited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_write_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>write_wait</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>fresh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>compressed_packet_id</name></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>resp_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_read_finished</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_waiting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>unavailable</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:not participated or unavailable:%d for con%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>!=</operator> <name>ATTR_START</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:skip here for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_NONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>resp_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_queue_is_empty</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:recv queue still has contents for server, con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_queue_is_empty</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>process_write_to_server</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>                           <comment type="block">/* for each server */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_READ_M_QUERY_RESULT</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>write_wait</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_STOP</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name> <operator>!=</operator> <name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:expected resp num:%d, pending:%d, con:%p"</literal></expr></argument>,
                       <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_rw_write</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con_state_t</name></type> <name>ostate</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>do_compress</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>write_uncomplete</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: conn:%p, server charset code:%d, charset:%s, client charset code:%d, charset:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>,
                <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_code</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_code</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Add check for abnormal response processing */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_fast_stream_enabled</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>do_compress</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue_raw</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: server raw recv queue has contents:%d for con:%p when writing sql to server"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue_raw</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* only parse the packets once */</comment>
            <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>chunks</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_con_command_states_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: track mysql proto states failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>

                <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>resp_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>compressed_packet_id</name></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: last packet id:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: client-send-queue-len = %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt> 

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>write_uncomplete</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><call><name>network_mysqld_write</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>write_uncomplete</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:write wait for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>write_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_STOP</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
    <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:write(SEND_QUERY) error"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" format="doxygen">/**
             * write() failed, close the connections
             */</comment>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ostate</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_CONTINUE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* some statements don't have a server response */</comment>
    <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>COM_STMT_SEND_LONG_DATA</name></expr>:</case>  <comment type="block">/* not acked */</comment>
    <case>case <expr><name>COM_STMT_CLOSE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set ST_READ_QUERY for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_QUERY</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set ST_CLOSE_SERVER for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLOSE_SERVER</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>prepare_stmt_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prepare_stmt_count</name></name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: prepare_stmt_count is zero for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: conn:%p, sub, now prepare_stmt_count:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>prepare_stmt_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>prepare_stmt_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>network_pool_add_conn</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s,con:%p:-&gt;pool failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_QUERY_RESULT</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>handle_send_query_to_servers</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con_state_t</name></type> <name>ostate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>disp_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_last_met</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>fast_stream_last_exec_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>fast_stream_need_more</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>partically_record_left_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_err_met</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* 
     * send the query to the server
     * this state will loop until all the packets
     * from the send-queue are flushed 
     */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_shard_write</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>disp_flag</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_rw_write</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ostate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>disp_flag</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>shard_read_response</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>resp_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>to_read</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><call><name>network_socket_to_read</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>to_read</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_READ</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:read wait here for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>server_sess_wait_for_event</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:use dist_tran_decided_read_timeout for con:%p"</literal></expr></argument>,
                            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>server_sess_wait_for_event</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:read not success"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>DISP_STOP</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_cache_enabled</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check if query can be cached, attr state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_read_ro_server_allowed</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>==</operator> <name>ATTR_START</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>query_cache_judged</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>do_check_qeury_cache</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>is_finished</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket_retval_t</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>network_mysqld_read_mul_packets</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>is_finished</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:read finished for server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name><operator>--</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>set_conn_attr</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_FINISHED</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_read_finished</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_waiting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>ON</name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>REALTIME</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>ts_read_query_result_last</name></name> <operator>=</operator> <call><name>get_timer_microseconds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>query</name> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>query_status</name></name> <operator>=</operator> <name>MYSQLD_PACKET_ERR</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>log_sql_backend_sharding</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_READ</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:server_sess_wait_for_event for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>server_sess_wait_for_event</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:use dist_tran_decided_read_timeout for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>server_sess_wait_for_event</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:num_read_pending:%d, ss-&gt;index:%d for con:%p"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></else></if_stmt>
    <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>max_header_size_reached</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_READ</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>server_sess_wait_for_event</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_servers_visited</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_PART_FINISHED</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:num read pending:%d for fd:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>set_conn_attr</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: here, we send_part_content_to_client"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>send_part_content_to_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_READ</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:num_read_pending:%d, ss-&gt;index:%d for con:%p"</literal></expr></argument>,
                            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>server_sess_wait_for_event</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_READ</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:num_read_pending:%d for fd:%d, ss-&gt;index:%d"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>server_sess_wait_for_event</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:use dist_tran_decided_read_timeout for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>server_sess_wait_for_event</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:network_mysqld_read_mul_packets error for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
    </block_content>}</block></switch>

    <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>handle_dist_tran_after_read_mul_resp</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result_reserve</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>skip</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: con dist tran here:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_timeout</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>||</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_xa_query_sent</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call before, con dist tan state:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>build_xa_statements</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call after, con dist tan state:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>!=</operator> <name>NEXT_ST_XA_PREPARE</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_SEND_QUERY</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: visit here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>==</operator> <name>NEXT_ST_XA_ROLLBACK</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: visit here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>retrieve_error_info_for_xa_trans</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>retrieve_one_resp_for_xa_trans</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_CONTINUE</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>==</operator> <name>NEXT_ST_XA_OVER</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>skip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: service unavailable for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
                                                           <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"service unavailable"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_SERVER_SHUTDOWN</name></expr></argument>, <argument><expr><literal type="string">"08S01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>!=</operator> <name>NEXT_ST_XA_OVER</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: dist state not NEXT_ST_XA_OVER for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_OVER</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set dist_tran_state NEXT_ST_XA_OVER for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_timeout</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: send ok to client when timeout:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>retrieve_one_resp_for_xa_trans</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_timeout</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: no packets sent to client for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call here for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set dist tran 0:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call here for con:%p, xa state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Record affected rows */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>result_reserve</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_server_resp</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>||</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>xa_start_phase</name></name> <operator>&amp;&amp;</operator> <name><name>ss</name><operator>-&gt;</operator><name>xa_start_already_sent</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server not participated"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>unavailable</name></name> <operator>||</operator> <name><name>server</name><operator>-&gt;</operator><name>is_waiting</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: omit here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>&gt;=</operator> <name>ATTR_DIF_CHANGE_USER</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>attr_consistent</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server attr consistent, adj state:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>NET_RW_STATE_FINISHED</name> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>NET_RW_STATE_WRITE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: omit here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>NET_RW_STATE_ERROR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: read server error"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>record_xa_log_for_mending</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>unavailable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: fail at %d server"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if> <else>else <block>{<block_content>

                <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"server error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: set ST_READ_QUERY for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_QUERY</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: set ST_CLOSE_SERVER for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLOSE_SERVER</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_STOP</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>shard_read_response</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DISP_STOP</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_STOP</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_ERROR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_CONTINUE</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_server_status</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>srv_down_count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>srv_response_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server:%d is not participated for con:%p"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>unavailable</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server:%d is unavailable for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>srv_down_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>&gt;=</operator> <name>ATTR_DIF_CHANGE_USER</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>attr_consistent</name></name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>NET_RW_STATE_FINISHED</name> <operator>&amp;&amp;</operator> <name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>NET_RW_STATE_PART_FINISHED</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>NET_RW_STATE_ERROR</name></expr>)</condition> <block>{<block_content>
                <while>while <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>g_ptr_array_remove_index_fast</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>server_session_free</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>

                <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"server error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_QUERY</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set ST_READ_QUERY for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLOSE_SERVER</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set ST_CLOSE_SERVER for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>g_queue_is_empty</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"fd(%d) multi resp, no data in queue"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"fd(%d) srv_response_count added"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>srv_response_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>                           <comment type="block">/* for each ss server */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>disp_no_workers</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_OVER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>process_service_unavailable</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>disp_resp_workers_not_matched</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: not recv all resp:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_STOP</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check dist tran query status:%d, dist tran state:%d, attr state:%d"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: dist tran query status error:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_attr_adjust</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: attr adj met problems here for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_timeout</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: server timeout for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&lt;</operator> <name>NEXT_ST_XA_CANDIDATE_OVER</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: build xa stmt for failure, dist state:%d"</literal></expr></argument>,
                                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>build_xa_statements</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>!=</operator> <name>NEXT_ST_XA_OVER</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_CONTINUE</name></expr>;</expr_stmt>
                            <return>return <expr><literal type="number">0</literal></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: dist state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>!=</operator> <name>NEXT_ST_XA_OVER</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: dist state not NEXT_ST_XA_OVER for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set dist_tran_state NEXT_ST_XA_OVER for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_OVER</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>process_service_unavailable</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_CONTINUE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: we will stop for a while:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_STOP</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: we will stop for a while:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_STOP</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>disp_single_resp</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iter</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>candidate_ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>candidate_ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>candidate_ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>unavailable</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ss</name> <operator>=</operator> <name>candidate_ss</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>ss</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>packet</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: not recv resp for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>disp_not_skipped</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srv_response_count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>single_response</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>COM_STMT_EXECUTE</name></expr>:</case>
    <case>case <expr><name>COM_QUERY</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>srv_response_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>normal_result_merge</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:partially_merged here:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>srv_response_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_STOP</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:part read here for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_STOP</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>single_response</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><operator>*</operator><name>single_response</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>disp_result_not_reserved</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>in</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:needs to check xa recover"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:send queue empty when sending result to client"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"server error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_UNKNOWN_ERROR</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_OVER</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set send result to client"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>disp_attr</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srv_down_count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: not recv all resp:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_STOP</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>&lt;=</operator> <name>ATTR_DIF_SET_AUTOCOMMIT</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>srv_down_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_OVER</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"MySQL server down"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_SERVER_SHUTDOWN</name></expr></argument>, <argument><expr><literal type="string">"08S01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_CONTINUE</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>resp_err_met</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"adjust connection attribute failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: adjust connection attribute failed for con:%p, attr state:%d, src:%s"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_CONTINUE</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>build_attr_statements</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: continue here:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_CONTINUE</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>==</operator> <name>ATTR_START</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: before disp_query_after_consistant_attr:%d, expected resp:%d"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* now the attrs of all server connections are the same */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>could_be_tcp_streamed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>could_be_fast_streamed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>candidate_fast_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>disp_query_after_consistant_attr</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: disp_query_after_consistant_attr:%d, expected resp:%d"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_CONTINUE</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>disp_after_resp</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srv_down_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srv_response_count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>result_reserve</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: att adj state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>&gt;=</operator> <name>ATTR_DIF_CHANGE_USER</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>disp_attr</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>srv_down_count</name></expr></argument>, <argument><expr><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>handle_dist_tran_after_read_mul_resp</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result_reserve</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skip</name></expr></argument>, <argument><expr><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>single_response</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>disp_not_skipped</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>srv_response_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>single_response</name></expr></argument>, <argument><expr><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>single_response</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>disp_single_resp</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result_reserve</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>disp_result_not_reserved</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>handle_read_mul_servers_resp</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: visit handle_read_mul_servers_resp for con:%p, num pending:%d"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>disp_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>srv_down_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>srv_response_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_server_resp</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>disp_flag</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>check_server_status</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srv_down_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srv_response_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>srv_down_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: server down num:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>srv_down_count</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&lt;=</operator> <name>NEXT_ST_XA_QUERY</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: send server error to client, state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"MySQL server prematurely closed connection"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:resp count:%d, server num:%d, num pending:%d, state:%d for con:%p"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>srv_response_count</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>workers</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>srv_down_count</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>workers</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>disp_no_workers</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_READ_QUERY</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>srv_response_count</name> <operator>!=</operator> <name>workers</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>disp_resp_workers_not_matched</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>disp_flag</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>srv_response_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>disp_after_resp</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>srv_down_count</name></expr></argument>, <argument><expr><name>srv_response_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>disp_flag</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ST_READ_QUERY</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: stop here for con state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>DISP_STOP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>send_part_content_to_client</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call send_part_content_to_client, and queue len:%llu, con client:%p"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><call><name>network_mysqld_write</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: write wait for event"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
    <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:state is set ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call send_part_content_to_client over, and queue len:%llu, con client:%p"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_single_tran_confliction</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: single tran but visit multiple servers for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: server num :%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, 
            <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"not distributed tran but visit multiple servers"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_NOT_SUPPORTED</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_wait_server</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_client_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>send_result_to_client</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con_state_t</name></type> <name>ostate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>

    <comment type="block">/* only for sharding */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: send server result to client"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" format="doxygen">/**
     * send the query result-set to the client 
     */</comment>
    <switch>switch <condition>(<expr><call><name>network_mysqld_write</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: write wait and add event"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>write_timeout</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>DISP_STOP</name></expr>;</return>
    <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
    <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
            <comment type="block" format="doxygen">/**
             * client is gone away
             *
             * close the connection and clean up
             */</comment>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: client is gone away for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <comment type="block">/* if the write failed, don't call the plugin handlers */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ostate</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><call><name>plugin_call</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:state is set ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_clean_conn_data</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>resp_send_time</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>handle_query_time_stats</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>do_query_cache</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>query_cache_too_long</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_queue_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>cache_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>cache_queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:key for cache:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>md5_key</name> <init>= <expr><call><name>g_compute_checksum_for_string</name><argument_list>(<argument><expr><name>G_CHECKSUM_MD5</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>query_cache_item</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>query_cache_table</name></name></expr></argument>, <argument><expr><name>md5_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:key for cache exists:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>md5_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_hash_table_remove</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>query_cache_table</name></name></expr></argument>, <argument><expr><name>md5_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_queue_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>cache_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>md5_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:put content to cache:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>md5_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>query_cache_item</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>query_cache_table</name></name></expr></argument>, <argument><expr><name>md5_key</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>dup_key</name> <init>= <expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>md5_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>query_cache_index_item</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>query_cache_index_item</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>dup_key</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>access_ms</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>access_ms</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>resp_send_time</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>con</name><operator>-&gt;</operator><name>resp_send_time</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>expire_ms</name></name> <operator>=</operator> <name>access_ms</name> <operator>+</operator> <name><name>srv</name><operator>-&gt;</operator><name>default_query_cache_timeout</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>cache_index</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>cache_queue</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>cache_queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>update_time</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>current_time</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_admin_client</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_need_q_peek_exec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_need_q_peek_exec true, state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_need_q_peek_exec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_need_q_peek_exec false"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>slave_conn_shortaged</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>last_check_conn_supplement_time</name></name> <operator>!=</operator> <name><name>srv</name><operator>-&gt;</operator><name>current_time</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: slave conn shortaged, try to add more conns "</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_connection_pool_create_conn</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_check_conn_supplement_time</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>current_time</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: slave conn shortaged, but time is the same"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>fast_analyze_stream</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>send_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>total_output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name>         <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type>       <name>need_more</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue_raw</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fast_analyze_stream here:%d for con:%p, con-&gt;partically_record_left_cnt:%d"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>partically_record_left_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>last_eof_cnt</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>last_payload</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>chunk</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>chunk</name></expr>;</condition> <incr><expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>last_payload</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>partically_record_left_cnt</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>partically_record_left_cnt</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: continue  here:%d for con:%p, s-&gt;len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>fast_stream_last_exec_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>packet_len</name> <init>= <expr><name>NET_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>header</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>complete_record_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guchar</name></type> <name>last_packet_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>aggr_packet_len</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>aggr_packet_len</name> <operator>&lt;</operator> <name>NET_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload</name></name> <operator>+</operator> <name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: padding here:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>fast_stream_last_exec_index</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>guchar</name></type> <name>pkt_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="number">1</literal></expr>:</case>
                    <expr_stmt><expr><name>packet_len</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>last_payload</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>last_packet_id</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>pkt_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><literal type="number">2</literal></expr>:</case>
                    <expr_stmt><expr><name>packet_len</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>last_payload</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>last_payload</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>last_packet_id</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>pkt_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><literal type="number">3</literal></expr>:</case>
                    <expr_stmt><expr><name>packet_len</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>last_payload</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>last_payload</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>last_payload</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>last_packet_id</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>pkt_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><literal type="number">4</literal></expr>:</case>
                    <expr_stmt><expr><name>packet_len</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>last_payload</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>last_payload</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>last_payload</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>last_packet_id</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>last_payload</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>pkt_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: not expected here:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>

            <expr_stmt><expr><name>header</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>-</operator> <name>diff</name> <operator>+</operator> <name>packet_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>header</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>complete_record_len</name>  <operator>=</operator> <name>packet_len</name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name> <operator>+=</operator> <name>packet_len</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:continue here:%d for con:%p, packet_len:%d, s-&gt;len:%d, cur_resp_len:%d,analysis_next_pos:%d"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
                        <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>fast_stream_last_exec_index</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:  packet len:%d, last_payload_len:%d, diff:%d for con:%p"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>, <argument><expr><name>diff</name></expr></argument>,  <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>header</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name>diff</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>header</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:continue here:%d for con:%p, cur_resp_len:%d, analysis_next_pos:%d, s-&gt;len:%d"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>fast_stream_last_exec_index</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>header</name> <operator>&gt;=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>NET_HEADER_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>header</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: not enough info, analysis_next_pos:%d, header:%p, end:%p for con:%p, last_payload_len:%d"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>packet_len</name> <operator>=</operator> <name>NET_HEADER_SIZE</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_packet_id</name> <operator>=</operator> <name><name>header</name><index>[<expr><name>NET_HEADER_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>header</name><index>[<expr><name>NET_HEADER_SIZE</name></expr>]</index></name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else  if <condition>(<expr><name><name>header</name><index>[<expr><name>NET_HEADER_SIZE</name></expr>]</index></name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>header</name> <operator>=</operator> <name>header</name> <operator>+</operator> <name>packet_len</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>header</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>complete_record_len</name> <operator>=</operator> <name>diff</name> <operator>+</operator> <name>packet_len</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name> <operator>+=</operator> <name>packet_len</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:continue here:%d for con:%p, s-&gt;len:%d, packet_len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>fast_stream_last_exec_index</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name> <operator>+=</operator> <name>packet_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: complete_record_len:%d for con:%p "</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>complete_record_len</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>header</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>header</name> <operator>&lt;</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>NET_HEADER_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>packet_len</name> <operator>=</operator> <name>NET_HEADER_SIZE</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>last_packet_id</name> <operator>=</operator> <name><name>header</name><index>[<expr><name>NET_HEADER_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>header</name><index>[<expr><name>NET_HEADER_SIZE</name></expr>]</index></name> <operator>==</operator> <name>MYSQLD_PACKET_EOF</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>header</name><index>[<expr><name>NET_HEADER_SIZE</name></expr>]</index></name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>header</name> <operator>=</operator> <name>header</name> <operator>+</operator> <name>packet_len</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name> <operator>+=</operator> <name>packet_len</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>header</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>=</operator> <name>last_packet_id</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>complete_record_len</name> <operator>+=</operator> <name>packet_len</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>header</name> <operator>==</operator> <name>end</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>=</operator> <name>last_packet_id</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>complete_record_len</name> <operator>+=</operator> <name>packet_len</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <break>break;</break>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>header</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: not enough info, analysis_next_pos:%d, header:%p, end:%p for con:%p, last_payload_len:%d"</literal></expr></argument>,
                            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block> while <condition>(<expr><name>TRUE</name></expr>)</condition>;</do>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>header</name> <operator>==</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>=</operator> <name>last_packet_id</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>total_output</name> <operator>+=</operator> <name>complete_record_len</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cur resp len:%d, analysis_next_pos:%d, packet len:%d, s-&gt;len:%d for con:%p"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name></expr></argument>,  <argument><expr><name>packet_len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name> <operator>!=</operator> <name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>need_more</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>fast_stream_need_more</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>RECORD_PACKET_LEN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>record_last_payload</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>RECORD_PACKET_LEN</name></expr></argument>, <argument><expr><name>RECORD_PACKET_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_record_payload_len</name></name> <operator>=</operator> <name>RECORD_PACKET_LEN</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>record_last_payload</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_record_payload_len</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>int</name></type>  <name>partially_diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>complete_record_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>partially_diff</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>complete_record_len</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: partially_diff:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>partially_diff</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>remainder</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>partially_diff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name>complete_record_len</name></expr></argument>, <argument><expr><name>partially_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>complete_record_len</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>partially_diff</name></expr>;</expr_stmt> 
                <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>raw_packet</name> <init>= <expr><call><name>g_queue_pop_tail</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name><name>raw_packet</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>, <argument><expr><name>raw_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>partically_record_left_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: wait more response, analysis_next_pos:%d, cur_resp_len:%d, diff:%d, complete_record_len:%d for con:%p"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name></expr></argument>, <argument><expr><name>partially_diff</name></expr></argument>, <argument><expr><name>complete_record_len</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>fast_stream_last_exec_index</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>fast_stream_last_exec_index</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name> <operator>!=</operator> <name>last_eof_cnt</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>eof_last_met</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_more</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>last_payload</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>RECORD_PACKET_LEN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>record_last_payload</name></name></expr></argument>, <argument><expr><name><name>last_payload</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>last_payload</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>RECORD_PACKET_LEN</name></expr></argument>, <argument><expr><name>RECORD_PACKET_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_record_payload_len</name></name> <operator>=</operator> <name>RECORD_PACKET_LEN</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>record_last_payload</name></name></expr></argument>, <argument><expr><name><name>last_payload</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>last_payload</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_record_payload_len</name></name> <operator>=</operator> <name><name>last_payload</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>chunk</name> <operator>&amp;&amp;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: still has packets, execute here for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_queue_unlink</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>packet</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>chunk</name></expr>)</condition>;</do>

        <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: execute here, last_payload_len:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>total_output</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>send_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>partically_record_left_cnt</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: partically_record_left_cnt:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>partically_record_left_cnt</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>need_more</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: finished true for con:%p, eof_met_cnt:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>network_socket_retval_t</name></type>
<name>network_mysqld_process_select_resp</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>finish_flag</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>send_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>is_finished</name> <init>= <expr><call><name>fast_analyze_stream</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>send_flag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_queue_is_empty</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>raw_packet</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>raw_packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue_raw</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>raw_packet</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>raw_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue_raw</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: append raw packets to send queue for con:%p, len:%d, queue len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>reserved_queue</name> <init>= <expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue_raw</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue_raw</name></name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name> <operator>=</operator> <name>reserved_queue</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>reserved_queue</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>recv_queue_raw</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue_raw</name></name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name> <operator>=</operator> <name>reserved_queue</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>is_finished</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>finish_flag</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>finish_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue_raw</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: server raw recv queue still has contents:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                    <argument><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue_raw</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_calc_found_rows</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_server_conn_reserved true for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_prepared</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_in_sess_context</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_server_conn_reserved false"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_server_conn_reserved true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_injection_queue_reset</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>disp_flag</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_CONTINUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>resp_len</name></name> <operator>&gt;</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>max_resp_len</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>send_flag</name></expr>)</condition>  <block>{<block_content>
                <expr_stmt><expr><call><name>send_part_content_to_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>disp_flag</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>DISP_STOP</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><name>is_finished</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: we come true, packet id:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>finish_flag</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>finish_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>resp_len</name></name> <operator>&gt;</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>max_resp_len</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>network_socket_retval_t</name></type>
<name>network_mysqld_read_rw_resp</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>read_len</name> <init>= <expr><name><name>server</name><operator>-&gt;</operator><name>to_read</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>network_socket_retval_t</name></type> <name>ret</name> <init>= <expr><call><name>network_socket_read</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
        <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
    <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
        <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"NETWORK_SOCKET_ERROR_RETRY wasn't expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>resp_len</name></name> <operator>+=</operator> <name>read_len</name></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>-&gt;</operator><name>do_compress</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>read_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>resultset_is_needed</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>candidate_fast_streamed</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: visit network_mysqld_process_select_resp for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>network_mysqld_process_select_resp</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>disp_flag</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_mysqld_con_get_packet</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_get_uncompressed_packet</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_mysqld_con_get_packet</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <while>while <condition>(<expr><name>ret</name> <operator>==</operator> <name>NETWORK_SOCKET_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>is_finished</name> <init>= <expr><call><name>network_mysqld_proto_get_query_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>is_finished</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:packets read finished, default db:%s, server db:%s"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>==</operator> <name>COM_QUERY</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>query</name> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>disp_err_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>query</name> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>warning_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s warning flag from server:%s is met:%s"</literal></expr></argument>,
                              <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_mysqld_con_get_packet</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>normal_read_query_result</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con_state_t</name></type> <name>ostate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* read all packets of the resultset 
     *
     * depending on the backend we may forward the data 
     * to the client right away
     */</comment>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>recv_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>recv_sock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:state is set ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <do>do <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call network_mysqld_read_rw_resp:%d, to read:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>recv_sock</name><operator>-&gt;</operator><name>resp_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>recv_sock</name><operator>-&gt;</operator><name>to_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>resp_len</name> <init>= <expr><name><name>recv_sock</name><operator>-&gt;</operator><name>resp_len</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>query_cache_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>recv_sock</name><operator>-&gt;</operator><name>to_read</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check if query can be cached"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_read_ro_server_allowed</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>query_cache_judged</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>do_check_qeury_cache</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>disp_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name>network_mysqld_read_rw_resp</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>recv_sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: network_mysqld_read_rw_resp return success:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>recv_sock</name><operator>-&gt;</operator><name>resp_len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>disp_flag</name> <operator>==</operator> <name>DISP_STOP</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>DISP_STOP</name></expr>;</return>
            </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>(<expr><name>disp_flag</name> <operator>==</operator> <name>DISP_CONTINUE</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
        <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
            <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set read query timeout, already read:%d, sql len:%d for con:%p"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>recv_sock</name><operator>-&gt;</operator><name>resp_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>resp_len</name> <operator>!=</operator> <name><name>recv_sock</name><operator>-&gt;</operator><name>resp_len</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>g_queue_is_empty</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: exchange queue:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name> <operator>=</operator> <name>queue</name></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_queue_peek_tail</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>packet</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>=</operator> <call><name>network_mysqld_proto_get_packet_id</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: client send queue is not empty for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
                    <while>while <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>network_mysqld_queue_append_raw</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>
                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>g_queue_is_empty</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: send_part_content_to_client:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>send_part_content_to_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>DISP_STOP</name></expr>;</return>
        <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
        <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: read(READ_QUERY_RESULT) error:%p, sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>

        <switch>switch <condition>(<expr><call><name>plugin_call</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
            <break>break;</break>
        <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
            <comment type="block">/* 
             * something nasty happend, 
             * let's close the connection
             */</comment>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:state is set ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: ..."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:state is set ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block> while <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_READ_QUERY_RESULT</name></expr>)</condition>;</do>

    <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_query_result_for_sharding</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con_state_t</name></type> <name>ostate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: read query result"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>resp_too_long</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: recording resp too long:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: send server error to client, state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"MySQL server connection was closed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set ST_SEND_QUERY_RESULT here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>handle_read_mul_servers_resp</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DISP_STOP</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>DISP_STOP</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>DISP_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_read_event</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>event_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * check how much data there is to read
     *
     * ioctl()
     * - returns 0 if connection is closed
     * - or -1 and ECONNRESET on solaris
     *   or -1 and EPIPE on HP/UX
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"ioctl(%d, FIONREAD, ...) failed: %s"</literal></expr></argument>, <argument><expr><name>event_fd</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>event_fd</name> <operator>==</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>to_read</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:client to read:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>&amp;&amp;</operator> <name>event_fd</name> <operator>==</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>to_read</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:server to read:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"%s: neither nor"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>                    <comment type="block">/* Linux */</comment>
        <if_stmt><if>if <condition>(<expr><name>event_fd</name> <operator>==</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr>)</condition> <block>{<block_content>
            <comment type="block">/*
             * the client closed the connection, 
             * let's keep the server side open 
             */</comment>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLOSE_CLIENT</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:client needs to be closed for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>&amp;&amp;</operator> <name>event_fd</name> <operator>==</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>com_quit_seen</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLOSE_SERVER</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:server closed prematurely, op: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>network_mysqld_con_st_name</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"server closed prematurely"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_timeout_event</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_wait_server</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:now get a chance to get server connection"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* 
         * if we got a timeout on ST_CONNECT_SERVER 
         * we should pick another backend
         */</comment>
        <switch>switch <condition>(<expr><call><name>plugin_call_timeout</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
            <comment type="block">/* the plugin did set a reasonable next state */</comment>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:state is set ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * handle the different states of the MySQL protocol
 *
 * @param event_fd     fd on which the event was fired
 * @param events       the event that was fired
 * @param user_data    the connection handle
 */</comment>
<function><type><name>void</name></type>
<name>network_mysqld_con_handle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:visit network_mysqld_con_handle"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_mysqld_con_state_t</name></type> <name>ostate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>process_read_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>event_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>process_timeout_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" format="doxygen">/**
     * loop on the same connection as long as we don't end up in a stable state
     */</comment>

    <do>do <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>ostate</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NETWORK_DEBUG_TRACE_STATE_CHANGES</name></expr></cpp:if>
        <comment type="block">/*
         * if you need the state-change information without dtrace,
         * enable this
         */</comment>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: %s, con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>network_mysqld_con_st_name</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>ST_ERROR</name></expr>:</case>
            <comment type="block">/* we can't go on, close the connection */</comment>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>plugin_call_cleanup</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: client conn %p released"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        <case>case <expr><name>ST_CLOSE_CLIENT</name></expr>:</case>
        <case>case <expr><name>ST_CLIENT_QUIT</name></expr>:</case>
        <case>case <expr><name>ST_CLOSE_SERVER</name></expr>:</case>
            <comment type="block">/* FIXME: this comment has nothing to do with reality...
             * the server connection is still fine, 
             * let's keep it open for reuse */</comment>
            <expr_stmt><expr><call><name>plugin_call_cleanup</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: client conn %p released, state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>network_mysqld_con_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>con</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

            <return>return;</return>
        <case>case <expr><name>ST_INIT</name></expr>:</case>
            <comment type="block">/* 
             * if we are a proxy ask the remote server 
             * for the hand-shake packet 
             * if not, we generate one
             */</comment>
            <switch>switch <condition>(<expr><call><name>plugin_call</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <break>break;</break>
            <default>default:</default>
                <comment type="block" format="doxygen">/**
                 * no luck, let's close the connection
                 */</comment>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: ST_INIT not successful"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>

                <break>break;</break>
            </block_content>}</block></switch>

            <break>break;</break>
        <case>case <expr><name>ST_CONNECT_SERVER</name></expr>:</case>
            <switch>switch <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>plugin_call</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>

                <comment type="block" format="doxygen">/**
                 * hmm, if this is success and we have something 
                 * in the clients send-queue
                 * we just send it out ... who needs a server ?
                 */</comment>

                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <comment type="block">/* we want to send something to the client */</comment>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_HANDSHAKE</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: hook for CONNECT_SERVER invalid: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>

                <break>break;</break>
            </block_content>}</block></switch>

            <break>break;</break>
        <case>case <expr><name>ST_SEND_HANDSHAKE</name></expr>:</case>
            <comment type="block">/* send the hand-shake to the client and 
             * wait for a response
             */</comment>
            <switch>switch <condition>(<expr><call><name>network_mysqld_write</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <break>break;</break>
            <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
                <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>write_timeout</name></name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return;</return>
            <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
            <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
                <comment type="block" format="doxygen">/**
                 * writing failed, closing connection
                 */</comment>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:state is set ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ostate</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <switch>switch <condition>(<expr><call><name>plugin_call</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: plugin_call(SEND_HANDSHAKE) failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
            <break>break;</break>
        <case>case <expr><name>ST_READ_AUTH</name></expr>:</case><block>{<block_content>
            <comment type="block">/* read auth from client */</comment>
            <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>recv_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>events</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>event_fd</name> <operator>==</operator> <name><name>recv_sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch>switch <condition>(<expr><call><name>network_mysqld_read</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>recv_sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <break>break;</break>
            <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
                <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set read query timeout for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return;</return>
            <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
            <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: ST_READ_AUTH: read error for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ostate</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <switch>switch <condition>(<expr><call><name>plugin_call</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <break>break;</break>
            <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: plugin_call(READ_AUTH) failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
            <break>break;</break>
        </block_content>}</block>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL</name></cpp:ifdef>
        <case>case <expr><name>ST_FRONT_SSL_HANDSHAKE</name></expr>:</case>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" %p con_handle -&gt; ST_FRONT_SSL_HANDSHAKE"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><call><name>network_socket_read</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                    <break>break;</break>
                <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
                    <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
                <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: ST_FRONT_SSL_HANDSHAKE: read error con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></switch>
            </block_content>}</block></if></if_stmt>
            <switch>switch <condition>(<expr><call><name>network_ssl_handshake</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_AUTH</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
                <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" %p WAIT_FOR_EVENT, return"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_WRITABLE</name></expr>:</case>
                <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>write_timeout</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:state is set ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <case>case <expr><name>ST_SEND_AUTH_RESULT</name></expr>:</case>
            <switch>switch <condition>(<expr><call><name>network_mysqld_write</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <break>break;</break>
            <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
                <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>write_timeout</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
            <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: write(AUTH_RESULT) error"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ostate</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <switch>switch <condition>(<expr><call><name>plugin_call</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: ..."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>

            <break>break;</break>
        <case>case <expr><name>ST_GET_SERVER_CONNECTION_LIST</name></expr>:</case>
            <switch>switch <condition>(<expr><call><name>plugin_call</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>is_wait_server</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: wait successful:%d, con:%p, state:%d"</literal></expr></argument>,
                              <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_wait_server</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>max_retry_serv_cnt</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_wait_server</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>network_connection_pool_create_conn</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><call><name>network_mysqld_con_retry_timeout</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">": wait again:%d, con:%p, l:%d"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_wait_server</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>process_service_unavailable</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <break>break;</break>

            <default>default:</default>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>xa_tran_conflict</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>process_single_tran_confliction</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>xa_tran_conflict</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>process_service_unavailable</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
            <break>break;</break>
        <case>case <expr><name>ST_READ_QUERY</name></expr>:</case>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" %p con_handle -&gt; ST_READ_QUERY"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>CHECK_PENDING_EVENT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>events</name> <operator>!=</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" events:%d, unexpected events"</literal></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">"write events:%d, unexpected events"</literal></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>events</name> <operator>&amp;&amp;</operator> <name>events</name> <operator>!=</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">"not rw events:%d, unexpected events"</literal></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* TODO If config is reloaded, close all current cons */</comment>
            <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>events</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>event_fd</name> <operator>==</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>handle_read_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ostate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DISP_STOP</name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>ST_SEND_QUERY</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>handle_send_query_to_servers</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ostate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DISP_STOP</name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>ST_READ_QUERY_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>normal_read_query_result</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ostate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DISP_STOP</name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>ST_READ_M_QUERY_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>read_query_result_for_sharding</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ostate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DISP_STOP</name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>ST_SEND_QUERY_RESULT</name></expr>:</case>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: send query result for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>send_result_to_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ostate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DISP_STOP</name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>ST_SEND_ERROR</name></expr>:</case>
            <comment type="block" format="doxygen">/**
             * send error to the client
             * and close the connections afterwards
             */</comment>
            <switch>switch <condition>(<expr><call><name>network_mysqld_write</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <break>break;</break>
            <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
                <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>write_timeout</name></name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case>
            <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: write(SEND_ERROR) error"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>

            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLOSE_CLIENT</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:client needs to closed for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:state is set ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><name>event_fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>events</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>ostate</name> <operator>!=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>;</do>

    <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>update_accept_event</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>new_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>con</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>==</operator> <name>new_flags</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>new_flags</name></expr></argument>, <argument><expr><name>network_mysqld_con_accept</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>event_base_set</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>accept_new_conns</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gboolean</name></type> <name>do_accept</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>event</name></name></type> <name>maxconnsevent</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>maxconns_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>short</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>t</name> <init>= <expr><block>{<expr><operator>.</operator><name>tv_sec</name> <operator>=</operator> <literal type="number">0</literal></expr>,<expr><operator>.</operator><name>tv_usec</name> <operator>=</operator> <literal type="number">10000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">42</literal> <operator>||</operator> <name><name>chas</name><operator>-&gt;</operator><name>allow_new_conns</name></name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* reschedule in 10ms if we need to keep polling */</comment>
        <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>maxconnsevent</name></expr></argument>, <argument><expr><name>maxconns_handler</name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>event_base_set</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxconnsevent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>evtimer_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>maxconnsevent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>evtimer_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name>maxconnsevent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>accept_new_conns</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Got vacant fd, start accept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Sets whether we are listening for new connections or not.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>accept_new_conns</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gboolean</name></type> <name>do_accept</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>listen_conns</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>do_accept</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>update_accept_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"listen errno: %d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>update_accept_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"listen errno: %d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_accept</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>allow_new_conns</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maxconns_handler</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * accept a connection
 *
 * event handler for listening connections
 *
 * @param event_fd     fd on which the event was fired
 * @param events       the event that was fired
 * @param user_data    the listening connection handle
 * 
 */</comment>
<function><type><name>void</name></type>
<name>network_mysqld_con_accept</name><parameter_list>(<parameter><decl><type><name>int</name> <name>G_GNUC_UNUSED</name></type> <name>event_fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>listen_con</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>client_con</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>events</name> <operator>==</operator> <name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>listen_con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>reason</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>network_socket_accept</name><argument_list>(<argument><expr><name><name>listen_con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>client</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name>EMFILE</name></expr>)</condition> <block>{<block_content> <comment type="block">/* if reach max fd, stop accepting */</comment>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"EMFILE (Too many open files), stop accept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>accept_new_conns</name><argument_list>(<argument><expr><name><name>listen_con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* looks like we open a client connection */</comment>
    <expr_stmt><expr><name>client_con</name> <operator>=</operator> <call><name>network_mysqld_con_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client_con</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <name>client</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_add_connection</name><argument_list>(<argument><expr><name><name>listen_con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>client_con</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>client_con</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>client_con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sess_key</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: accept a new client connection"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * inherit the config to the new connection 
     */</comment>

    <expr_stmt><expr><name><name>client_con</name><operator>-&gt;</operator><name>plugins</name></name> <operator>=</operator> <name><name>listen_con</name><operator>-&gt;</operator><name>plugins</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client_con</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name><name>listen_con</name><operator>-&gt;</operator><name>config</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>client_con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @TODO move to network_mysqld_proto
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_con_send_resultset</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gsize</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>fields</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* - len = 99
     *  \1\0\0\1 
     *    \1 - one field
     *  \'\0\0\2 
     *    \3def 
     *    \0 
     *    \0 
     *    \0 
     *    \21@@version_comment 
     *    \0            - org-name
     *    \f            - filler
     *    \10\0         - charset
     *    \34\0\0\0     - length
     *    \375          - type 
     *    \1\0          - flags
     *    \37           - decimals
     *    \0\0          - filler 
     *  \5\0\0\3 
     *    \376\0\0\2\0
     *  \35\0\0\4
     *    \34MySQL Community Server (GPL)
     *  \5\0\0\5
     *    \376\0\0\2\0
     */</comment>

    <comment type="block">/* the field-count */</comment>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_lenenc_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>fields</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name><name>fields</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_mysqld_proto_append_lenenc_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>field</name><operator>-&gt;</operator><name>catalog</name></name></expr> ?</condition><then> <expr><name><name>field</name><operator>-&gt;</operator><name>catalog</name></name></expr> </then><else>: <expr><literal type="string">"def"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_lenenc_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>field</name><operator>-&gt;</operator><name>db</name></name></expr> ?</condition><then> <expr><name><name>field</name><operator>-&gt;</operator><name>db</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_lenenc_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>field</name><operator>-&gt;</operator><name>table</name></name></expr> ?</condition><then> <expr><name><name>field</name><operator>-&gt;</operator><name>table</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_lenenc_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>field</name><operator>-&gt;</operator><name>org_table</name></name></expr> ?</condition><then> <expr><name><name>field</name><operator>-&gt;</operator><name>org_table</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_lenenc_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_lenenc_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>field</name><operator>-&gt;</operator><name>org_name</name></name></expr> ?</condition><then> <expr><name><name>field</name><operator>-&gt;</operator><name>org_name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* length of the following block, 12 byte */</comment>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'\x0c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\x08\x00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* charset */</comment>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>field</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* len */</comment>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>field</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* len */</comment>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>field</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* len */</comment>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>field</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* len */</comment>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* type */</comment>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* flags */</comment>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>field</name><operator>-&gt;</operator><name>flags</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* flags */</comment>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* decimals */</comment>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* filler */</comment>
        <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* EOF */</comment>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\xfe"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* EOF */</comment>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* warning count */</comment>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\x02\x00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* flags */</comment>

    <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rows</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>rows</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>row</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_proto_append_lenenc_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>row</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* EOF */</comment>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\xfe"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* EOF */</comment>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* warning count */</comment>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\x02\x00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* flags */</comment>

    <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_con_send_current_date</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_VAR_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>tepoch</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tsep</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tepoch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_con_send_cetus_version</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network_mysqld_proto_fielddef_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"cetus version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_VAR_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>version</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHASSIS_BUILD_TAG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s (build:%s)"</literal></expr></argument>, <argument><expr><name>PACKAGE_STRING</name></expr></argument>, <argument><expr><name>CHASSIS_BUILD_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>PACKAGE_STRING</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_send_xa_start</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"XA START "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>retval_t</name></type>
<name>proxy_self_read_handshake</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* server_connection_state_t *con */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint8</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_auth_challenge</name> <modifier>*</modifier></type><name>challenge</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>recv_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>g_queue_peek_tail</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_skip_network_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>RET_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_peek_int8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>RET_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>RET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>challenge</name> <operator>=</operator> <call><name>network_mysqld_auth_challenge_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_get_auth_challenge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>challenge</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><call><name>g_queue_pop_tail</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_mysqld_auth_challenge_free</name><argument_list>(<argument><expr><name>challenge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>RET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server version:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>challenge</name><operator>-&gt;</operator><name>server_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>challenge</name><operator>-&gt;</operator><name>server_version</name></name> <operator>&gt;=</operator> <literal type="number">50700</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>is_reset_conn_supported</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>challenge</name><operator>-&gt;</operator><name>server_version</name></name> <operator>&gt;=</operator> <literal type="number">80000</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_groupby_need_reconstruct</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><name><name>challenge</name><operator>-&gt;</operator><name>server_version</name></name> <operator>&lt;</operator> <literal type="number">50707</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: for xa, server:%s, mysql version:%s is lower than 5.7.7"</literal></expr></argument>,
                  <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>challenge</name><operator>-&gt;</operator><name>server_version_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>client_found_rows</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLIENT_FOUND_ROWS</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>compress_support</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLIENT_COMPRESS</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>challenge</name></name> <operator>=</operator> <name>challenge</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>server_version</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>server_version</name></name></expr></argument>, <argument><expr><name><name>challenge</name><operator>-&gt;</operator><name>server_version_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>RET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>retval_t</name></type>
<name>proxy_self_create_kill_query</name><parameter_list>(<parameter><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"KILL QUERY %d"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>query_id_to_be_killed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>RET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>retval_t</name></type>
<name>proxy_self_create_auth</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>send_sock</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>network_mysqld_auth_challenge</name> <modifier>*</modifier></type><name>challenge</name> <init>= <expr><name><name>send_sock</name><operator>-&gt;</operator><name>challenge</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_auth_response</name> <modifier>*</modifier></type><name>auth</name> <init>= <expr><call><name>network_mysqld_auth_response_new</name><argument_list>(<argument><expr><name><name>challenge</name><operator>-&gt;</operator><name>capabilities</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>=</operator> <name>CETUS_DEFAULT_FLAGS</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>is_back_compressed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>|=</operator> <name>CLIENT_COMPRESS</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>send_sock</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_CONNECT_WITH_DB</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srv</name><operator>-&gt;</operator><name>client_found_rows</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_FOUND_ROWS</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_PLUGIN_AUTH</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>max_packet_size</name></name> <operator>=</operator> <literal type="number">0x01000000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auth</name><operator>-&gt;</operator><name>charset</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>charset_code</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set multi stmt true for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_password_scramble</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>challenge</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>hashed_pwd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>send_sock</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>send_sock</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:username: %s "</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>send_sock</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_auth_response</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>send_sock</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name>send_sock</name></expr></argument>, <argument><expr><name><name>send_sock</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>send_sock</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <name>auth</name></expr>;</expr_stmt>
    <return>return <expr><name>RET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>server_connection_state_t</name> <modifier>*</modifier></type>
<name>network_mysqld_self_con_init</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>server_connection_state_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name> <operator>=</operator> <name>srv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <call><name>network_socket_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_CONN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>hashed_pwd</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>con</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_self_con_free</name><parameter_list>(<parameter><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>con</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connection server free:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connections server is null:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>hashed_pwd</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connections free :%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASYNC_WAIT_FOR_EVENT</name><parameter_list>(<parameter><type><name>sock</name></type></parameter>, <parameter><type><name>ev_type</name></type></parameter>, <parameter><type><name>timeout</name></type></parameter>, <parameter><type><name>user_data</name></type></parameter>)</parameter_list></cpp:macro>         \
<cpp:value>event_set(&amp;(sock-&gt;event), sock-&gt;fd, ev_type, network_mysqld_self_con_handle, user_data); \
chassis_event_add_with_timeout(srv, &amp;(sock-&gt;event), timeout);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_self_event</name><parameter_list>(<parameter><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>event_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:events:%d, ev:%p, state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><operator>(</operator><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:EV_READ, ev:%p, state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"ioctl(%d, FIONREAD, ...) failed: %s"</literal></expr></argument>, <argument><expr><name>event_fd</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>to_read</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:ERROR EV_READ errno=%d error:%s, state:%d, con:%p, server:%p"</literal></expr></argument>,
                          <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:timeout, ev:%p, state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_ASYNC_CONN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: self conn timeout, state:%d, con:%p, server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>disable_threads</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BACKEND_STATE_DOWN</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_get_current_time</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state_since</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: set backend:%p down"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: get conn timeout from master"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_self_server_read</name><parameter_list>(<parameter><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name>network_mysqld_read</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:NETWORK_SOCKET_SUCCESS here:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case><block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:NETWORK_SOCKET_WAIT_FOR_EVENT:%d here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>retry_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>retry_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>query_id_to_be_killed</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>retry_cnt</name></name> <operator>&gt;=</operator> <name>MAX_TRY_NUM</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set timeout:%d for new conn:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* call us again when you have a event */</comment>
        <expr_stmt><expr><call><name>ASYNC_WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:plugin_call(ASYNC_READ_HANDSHAKE) error"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:unexpected state"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_self_read_auth_result</name><parameter_list>(<parameter><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_self_server_read</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_ASYNC_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: con:%p auth failed,crazy here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guchar</name></type> <name>type</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>NET_HEADER_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: error send AUTH_RESULT: %02x"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>NET_HEADER_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>MYSQLD_PACKET_EOF</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: the MySQL 4.0 hash in a MySQL 4.1+ connection"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default><block>{<block_content>
        <decl_stmt><decl><type><name>network_packet</name></type> <name>pkt</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type><name>err_packet</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>err_packet</name> <operator>=</operator> <call><name>network_mysqld_err_packet_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>network_mysqld_proto_get_err_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:READ_AUTH_RESULT:%d, server:%s, errinfo:%s"</literal></expr></argument>,
                      <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errmsg</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_err_packet_free</name><argument_list>(<argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ST_ASYNC_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connected_clients sub, now:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: backend:%s, new connection:%p, query id:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                <argument><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>query_id_to_be_killed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_back_compressed</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>do_compress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>CHECK_PENDING_EVENT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>query_id_to_be_killed</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_SEND_QUERY</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>server_conn_refresh_time</name></name> <operator>&lt;=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>create_time</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_pool_add_idle_conn</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>complement_conn_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: old connection for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>     <comment type="block">/* tell _self_con_free we succeed */</comment>
            <expr_stmt><expr><call><name>network_mysqld_self_con_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_self_read_query_result</name><parameter_list>(<parameter><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_self_server_read</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call process_self_server_read for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:after process_self_server_read for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guchar</name></type> <name>type</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>NET_HEADER_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>MYSQLD_PACKET_OK</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_OVER</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>MYSQLD_PACKET_ERR</name></expr>:</case>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: error read query result: %02x"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>NET_HEADER_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>MYSQLD_PACKET_EOF</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: the MySQL 4.0 hash in a MySQL 4.1+ connection"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default><block>{<block_content>
        <decl_stmt><decl><type><name>network_packet</name></type> <name>pkt</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type><name>err_packet</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>err_packet</name> <operator>=</operator> <call><name>network_mysqld_err_packet_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>network_mysqld_proto_get_err_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:READ_AUTH_RESULT:%d, server:%s, errinfo:%s"</literal></expr></argument>,
                      <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errmsg</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_err_packet_free</name><argument_list>(<argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>network_mysqld_self_con_handle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:visit network_mysqld_self_con_handle"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ostate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><operator>(</operator><name>server_connection_state_t</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_self_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>event_fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <do>do <block>{<block_content>
        <expr_stmt><expr><name>ostate</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

        <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>ST_ASYNC_ERROR</name></expr>:</case>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: con:%p failed for server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connected_clients sub, now:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_self_con_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        <case>case <expr><name>ST_ASYNC_CONN</name></expr>:</case>
            <switch>switch <condition>(<expr><call><name>network_socket_connect_finish</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>disable_threads</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name> <operator>&amp;&amp;</operator> <name><name>srv</name><operator>-&gt;</operator><name>group_replication_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BACKEND_STATE_UP</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_get_current_time</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state_since</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">": set backend: %s (%p) up"</literal></expr></argument>, 
                                <argument><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_READ_HANDSHAKE</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>disable_threads</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BACKEND_STATE_DOWN</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_get_current_time</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state_since</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">": set backend: %s (%p) down"</literal></expr></argument>, 
                                <argument><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">": error when creating conn for backend: %s (%p)"</literal></expr></argument>,
                            <argument><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
            <break>break;</break>
        <case>case <expr><name>ST_ASYNC_READ_HANDSHAKE</name></expr>:</case>
            <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>events</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>event_fd</name> <operator>==</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ST_ASYNC_READ_HANDSHAKE for con:%p, connection %s and %s"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_self_server_read</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_ASYNC_ERROR</name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <switch>switch <condition>(<expr><call><name>proxy_self_read_handshake</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>RET_SUCCESS</name></expr>:</case>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: ..."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ST_ASYNC_ERROR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_SEND_AUTH</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>ST_ASYNC_SEND_AUTH</name></expr>:</case>
            <expr_stmt><expr><call><name>proxy_self_create_auth</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch>switch <condition>(<expr><call><name>network_mysqld_write</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_READ_AUTH_RESULT</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case><block>{<block_content>
                <expr_stmt><expr><call><name>ASYNC_WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block>
            <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:unexpected state"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
            <break>break;</break>
        <case>case <expr><name>ST_ASYNC_READ_AUTH_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_self_read_auth_result</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>ST_ASYNC_SEND_QUERY</name></expr>:</case>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call ST_ASYNC_SEND_QUERY for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>proxy_self_create_kill_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch>switch <condition>(<expr><call><name>network_mysqld_write</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_READ_QUERY_RESULT</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case><block>{<block_content>
                <expr_stmt><expr><call><name>ASYNC_WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block>
            <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:unexpected state"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>

            <break>break;</break>
        <case>case <expr><name>ST_ASYNC_READ_QUERY_RESULT</name></expr>:</case>
            <expr_stmt><expr><call><name>process_self_read_query_result</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ST_ASYNC_OVER</name></expr>:</case>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CHECK_PENDING_EVENT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connected_clients sub, now:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_self_con_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></switch>

        <expr_stmt><expr><name>event_fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>events</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>ostate</name> <operator>!=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>;</do>

    <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_connection_pool_create_conn_and_kill_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call network_connection_pool_create_conn"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>username</name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>username</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cetus_users_contains</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: hashed password is null for user:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>scs</name> <init>= <expr><call><name>network_mysqld_self_con_init</name><argument_list>(<argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>query_id_to_be_killed</name></name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: thread id:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>query_id_to_be_killed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>charset_code</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_code</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>disable_dns_cache</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_address_set_address</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>address</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>  <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>network_address_copy</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cetus_users_get_hashed_server_pwd</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>hashed_pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*  Avoid the event base's time cache problems */</comment>
        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set server default db:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connected_clients add, backend ndx:%d, for server:%p, faked con:%p"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block>{<block_content>
            <switch>switch <condition>(<expr><call><name>network_socket_connect</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case><block>{<block_content>
                <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_CONN</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set timeout:%d for new conn"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ASYNC_WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <expr_stmt><expr><call><name>ASYNC_WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_READ_HANDSHAKE</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_self_con_free</name><argument_list>(<argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block>
      </block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <return>return;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
      <return>return;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>scs</name> <init>= <expr><call><name>network_mysqld_self_con_init</name><argument_list>(<argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>query_id_to_be_killed</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: thread id:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>query_id_to_be_killed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>charset_code</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_code</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>disable_dns_cache</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>network_address_set_address</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>address</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>network_address_copy</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cetus_users_get_hashed_server_pwd</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>,
                                          <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>hashed_pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*  Avoid the event base's time cache problems */</comment>
        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>,
                          <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set server default db:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                  <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>++</operator></expr>;</expr_stmt>
        <block>{<block_content>
          <switch>switch <condition>(<expr><call><name>network_socket_connect</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case> <block>{<block_content>
              <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_CONN</name></expr>;</expr_stmt>
              <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name></name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set timeout:%d for new conn"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                      <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>ASYNC_WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
              <expr_stmt><expr><call><name>ASYNC_WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_READ_HANDSHAKE</name></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default>
              <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>network_mysqld_self_con_free</name><argument_list>(<argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
          </block_content>}</block></switch>
        </block_content>}</block>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>network_connection_pool_create_conn</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>maintain_close_mode</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call network_connection_pool_create_conn"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>username</name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>username</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cetus_users_contains</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: hashed password is null for user:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>time_t</name></type> <name>cur</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>backends_count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>backends_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>backend</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>last_check_time</name></name> <operator>==</operator> <name>cur</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: omit create, backend:%d state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>last_check_time</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name><name>backend</name><operator>-&gt;</operator><name>last_check_time</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>max_allowed_conn_num</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>max_idle_connections</name></name> <operator>&gt;</operator> <name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>max_conn_pool</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>max_conn_pool</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>max_idle_connections</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: set max conn pool size:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>max_conn_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>max_allowed_conn_num</name> <operator>=</operator> <name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>max_conn_pool</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>max_allowed_conn_num</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>max_idle_connections</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><call><name>network_backend_conns_count</name><argument_list>(<argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: backend ndx:%d total conn:%d, max allowed:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>max_allowed_conn_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>total</name> <operator>&gt;=</operator> <name>max_allowed_conn_num</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: backend ndx:%d reach max conn num:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>max_allowed_conn_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>last_check_time</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>total</name> <operator>&gt;=</operator> <name><name>pool</name><operator>-&gt;</operator><name>mid_idle_connections</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>idle_conn</name> <init>= <expr><name>total</name> <operator>-</operator> <name><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>idle_conn</name> <operator>&gt;</operator> <name><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: idle conn num is enough:%d, %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>idle_conn</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>is_need_to_create</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><name>BACKEND_TYPE_RW</name></expr>:</case>
                        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>master_conn_shortaged</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>is_need_to_create</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: master_conn_shortaged false"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <break>break;</break>
                    <case>case <expr><name>BACKEND_TYPE_RO</name></expr>:</case>
                        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>slave_conn_shortaged</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>is_need_to_create</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: slave_conn_shortaged false"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <break>break;</break>
                    <default>default:</default>
                        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: unknown type:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                </block_content>}</block></switch>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_need_to_create</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: is_need_to_create false"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>scs</name> <init>= <expr><call><name>network_mysqld_self_con_init</name><argument_list>(<argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: create %s connection for backend ndx:%d, ptr:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>charset_code</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_code</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>disable_dns_cache</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>network_address_set_address</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>address</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>network_address_copy</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cetus_users_get_hashed_server_pwd</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>hashed_pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*  Avoid the event base's time cache problems */</comment>
            <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set server default db:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connected_clients add, backend ndx:%d, for server:%p, faked con:%p"</literal></expr></argument>,
                      <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch>switch <condition>(<expr><call><name>network_socket_connect</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case><block>{<block_content>
                <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_CONN</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set timeout:%d for new conn"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ASYNC_WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name><name>scs</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>disable_threads</name></name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BACKEND_STATE_UP</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_get_current_time</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>state_since</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: set backend:%p, ndx:%d up"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>ASYNC_WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_READ_HANDSHAKE</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>scs</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>disable_threads</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BACKEND_STATE_DOWN</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: set backend ndx:%d down"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: error when creating conn for backend ndx:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><call><name>g_get_current_time</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>state_since</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>network_mysqld_self_con_free</name><argument_list>(<argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>network_connection_pool_create_conns</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>backends_count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>backends_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>backend</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>allowd_conn_num</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>mid_conn_pool</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name> <operator>+</operator> <name><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>total</name> <operator>&gt;=</operator> <name>allowd_conn_num</name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>allowd_conn_num</name> <operator>=</operator> <name>allowd_conn_num</name> <operator>-</operator> <name>total</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>allowd_conn_num</name> <operator>&gt;</operator> <name><name>srv</name><operator>-&gt;</operator><name>connections_created_per_time</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>allowd_conn_num</name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>connections_created_per_time</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>allowd_conn_num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>is_need_to_create_conns</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>allowd_conn_num</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>server_connection_state_t</name> <modifier>*</modifier></type><name>scs</name> <init>= <expr><call><name>network_mysqld_self_con_init</name><argument_list>(<argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>disable_dns_cache</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>network_address_set_address</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>address</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>network_address_copy</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>charset_code</name></name> <operator>=</operator> <name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>charset</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>cetus_users_get_hashed_server_pwd</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>hashed_pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name></name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set server default db:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connected_clients add, backend ndx:%d, for server:%p, faked con:%p, charset:%d"</literal></expr></argument>,
                          <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>scs</name></expr></argument>, <argument><expr><name><name>scs</name><operator>-&gt;</operator><name>charset_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>++</operator></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>create_err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                <switch>switch <condition>(<expr><call><name>network_socket_connect</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>:</case><block>{<block_content>
                    <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_CONN</name></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><name><name>scs</name><operator>-&gt;</operator><name>connect_timeout</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>ASYNC_WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><name><name>scs</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>disable_threads</name></name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BACKEND_STATE_UP</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: set backend:%p, ndx:%d up"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_get_current_time</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>state_since</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>ASYNC_WAIT_FOR_EVENT</name><argument_list>(<argument><expr><name><name>scs</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ASYNC_READ_HANDSHAKE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: set backend conn:%p read handshake"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <expr_stmt><expr><name>create_err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_mysqld_self_con_free</name><argument_list>(<argument><expr><name>scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>scs</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>disable_threads</name></name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>scs</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BACKEND_STATE_DOWN</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: set backend ndx:%d down, connected_clients sub"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: error when creating conn for backend ndx:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><call><name>g_get_current_time</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>state_since</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                </block_content>}</block></switch>

                <if_stmt><if>if <condition>(<expr><name>create_err</name></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>update_time_func</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name><modifier>*</modifier></type> <name>chas</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>current_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: update time"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>update_time_interval</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>update_timer_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>update_time_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_old_server_connection</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_connection_pool_entry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>network_connection_pool_remove</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: call check_old_server_connection"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>close_old_server_connetions</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>current_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>server_conn_refresh_time</name></name> <operator>=</operator> <name><name>chas</name><operator>-&gt;</operator><name>current_time</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>backends_count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>backends_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>backend</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>users</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>users</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>users</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_hash_table_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>users</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* count all users' pooled connections */</comment>
                <while>while <condition>(<expr><call><name>g_hash_table_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_queue_foreach</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>check_old_server_connection</name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>check_and_create_conns_func</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>need_to_refresh_server_connections</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>close_old_server_connetions</name><argument_list>(<argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>need_to_refresh_server_connections</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>is_need_to_create_conns</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chas</name><operator>-&gt;</operator><name>maintain_close_mode</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>is_need_to_create_conns</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>is_need_to_create_conns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_connection_pool_create_conns</name><argument_list>(<argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>complement_conn_flag</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_connection_pool_create_conns</name><argument_list>(<argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>complement_conn_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    chassis_private *priv = chas-&gt;priv;
    int len = priv-&gt;cons-&gt;len;
    int i;
    for (i = 0; i &lt; len; i++) {
        network_mysqld_con *con = priv-&gt;cons-&gt;pdata[i];
        if (!con-&gt;client) {
            continue;
        }
        int client_send_len, client_recv_len, client_recv_raw_len;
        client_send_len = con-&gt;client-&gt;send_queue-&gt;len;
        client_recv_len = con-&gt;client-&gt;recv_queue-&gt;len;
        client_recv_raw_len = con-&gt;client-&gt;recv_queue_raw-&gt;len;
        g_message("%s: client send:%d, recv :%d, raw:%d for con:%p", G_STRLOC, client_send_len, client_recv_len, client_recv_raw_len, con);
        if (con-&gt;servers) {
            int j;
            for (j = 0; j &lt; con-&gt;servers-&gt;len; j++) {
                server_session_t *ss = g_ptr_array_index(con-&gt;servers, j);
                int server_send_len, server_recv_len, server_recv_raw_len;
                server_send_len = ss-&gt;server-&gt;send_queue-&gt;len;
                server_recv_raw_len = ss-&gt;server-&gt;recv_queue_raw-&gt;len;
                server_recv_len = ss-&gt;server-&gt;recv_queue-&gt;len;
                g_message("%s: server send:%d, recv:%d, raw:%d for server:%p and con:%p", G_STRLOC,
                        server_send_len, server_recv_len, server_recv_raw_len, ss-&gt;server, con);
            }
        }
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check_and_create_conns_func"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>auto_create_conns_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
