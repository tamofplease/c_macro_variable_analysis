<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/cetus-process-cycle.c"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_GNU_SOURCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sched.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-sql-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-monitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-channel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-process-cycle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-frontend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cetus_start_worker_processes</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cetus_pass_open_channel</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>cetus_channel_t</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cetus_signal_worker_processes</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>cetus_reap_children</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>cetus_check_children</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cetus_master_process_exit</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cetus_worker_process_cycle</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cetus_worker_process_init</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>worker</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cetus_admin_process_init</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cetus_worker_process_exit</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cetus_channel_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>    <name>cetus_process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>    <name>cetus_worker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cetus_pid_t</name></type>     <name>cetus_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cetus_pid_t</name></type>     <name>cetus_parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cetus_pid_t</name></type>     <name>cetus_new_binary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sig_atomic_t</name></type>  <name>cetus_reap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sig_atomic_t</name></type>  <name>cetus_terminate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sig_atomic_t</name></type>  <name>cetus_quit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>cetus_exiting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sig_atomic_t</name></type>  <name>cetus_change_binary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sig_atomic_t</name></type>  <name>cetus_noaccept</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>cetus_restart</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>u_char</name></type>  <name><name>master_process</name><index>[]</index></name> <init>= <expr><literal type="string">"master process"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>cetus_cycle_t</name></type>      <name>cetus_exit_cycle</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>open_plugins</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>      <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cycle</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>cycle</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: applying config of plugin %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"admin"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>enable_admin_listen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apply_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call apply_config"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>apply_config</name></name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: applying config of plugin %s failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>cetus_pid_t</name></type>
<name>cetus_exec_new_binary</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cetus_exec_ctx_t</name></type>     <name>ctx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"new binary process"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LD_LIBRARY_PATH"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>envp</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_env</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>new_env</name></expr></argument>, <argument><expr><literal type="string">"LD_LIBRARY_PATH=%s"</literal></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>envp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>new_env</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>envp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>old_pid_file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>pid_file_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>pid_file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>pid_file_len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CETUS_OLDPID_EXT</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>old_pid_file</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>old_pid_file</name></name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>pid_file</name></name></expr></argument>, <argument><expr><name>pid_file_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>cycle</name><operator>-&gt;</operator><name>old_pid_file</name></name> <operator>+</operator> <name>pid_file_len</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>CETUS_OLDPID_EXT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CETUS_OLDPID_EXT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>cetus_rename_file</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>pid_file</name></name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>old_pid_file</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: rename file from %s to %s failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>pid_file</name></name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>old_pid_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>cetus_execute</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>retrieve_user_from_remote</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><call><name>chassis_config_get_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"users"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if  <condition>(<expr><name>object</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>chassis_config_mysql_query_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">"users"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gpointer</name></type> <name>retrieve_remote_config_mainloop</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: retrieve_remote_config_mainloop visited"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name>chassis_is_shutdown</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <switch>switch <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>asynchronous_type</name></name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>ASYNCHRONOUS_RELOAD</name></expr>:</case>
                    <expr_stmt><expr><call><name>chassis_config_load_options_mysql</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>ASYNCHRONOUS_RELOAD_VARIABLES</name></expr>:</case>
                    <expr_stmt><expr><call><name>chassis_config_reload_variables</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"variables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>ASYNCHRONOUS_RELOAD_USER</name></expr>:</case>
                    <expr_stmt><expr><call><name>retrieve_user_from_remote</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>ASYNCHRONOUS_UPDATE_OR_DELETE_USER_PASSWORD</name></expr>:</case>
                    <expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>chassis_config_get_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"users"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>chassis_config_mysql_write_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">"users"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: ASYNCHRONOUS_UPDATE_OR_DELETE_USER_PASSWORD visited"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>ASYNCHRONOUS_CONFIG_REMOTE_SHARD</name></expr>:</case>
                    <expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>chassis_config_get_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"sharding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>chassis_config_mysql_write_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">"sharding"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>ASYNCHRONOUS_SET_CONFIG</name></expr>:</case>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: ASYNCHRONOUS_SET_CONFIG visited"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>chassis_config_set_remote_options</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>ASYNCHRONOUS_UPDATE_BACKENDS</name></expr>:</case>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: ASYNCHRONOUS_UPDATE_BACKENDS visited"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>chassis_config_set_remote_backends</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve1</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_remote_config_start_thread</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: cetus_remote_config_start_thread visited"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>new_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GLIB_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">32</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>new_thread</name> <operator>=</operator> <call><name>g_thread_create</name><argument_list>(<argument><expr><name>retrieve_remote_config_mainloop</name></expr></argument>, <argument><expr><name>chas</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_thread</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:Create thread error: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>new_thread</name> <operator>=</operator> <call><name>g_thread_new</name><argument_list>(<argument><expr><literal type="string">"remote-config-thread"</literal></expr></argument>, <argument><expr><name>retrieve_remote_config_mainloop</name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_thread</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:Create thread error."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>cetus_master_process_cycle</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                <name>try_cnt</name></decl>, <decl><type ref="prev"/><name>mutex_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>live</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cetus_pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>cpus</name></name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_NPROCESSORS_ONLN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>active_worker_processes</name></name> <operator>=</operator> <name><name>cycle</name><operator>-&gt;</operator><name>worker_processes</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>cetus_start_worker_processes</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>worker_processes</name></name></expr></argument>, <argument><expr><name>CETUS_PROCESS_RESPAWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>open_plugins</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>pid_file</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>gerr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>chassis_frontend_write_pidfile</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>pid_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>gerr</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>live</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>try_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>mutex_set</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for <control>( <init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cetus_terminate</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mutex_set</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>socketpair_mutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>chassis_event_loop_t</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>cycle</name><operator>-&gt;</operator><name>event_base</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>chassis_event_loop</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cycle</name><operator>-&gt;</operator><name>socketpair_mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>socketpair_mutex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>mutex_set</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>cetus_terminate</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: call cetus_check_children"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>live</name> <operator>=</operator> <call><name>cetus_check_children</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>try_cnt</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>cetus_reap</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>config_changed</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: config changed and no respawn process here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>active_worker_processes</name></name><operator>--</operator></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>active_worker_processes</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>cetus_change_binary</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: cetus_reap is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cetus_reap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>current_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>child_exit_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>child_exit_time</name></name> <operator>=</operator> <name><name>cycle</name><operator>-&gt;</operator><name>current_time</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>child_instant_exit_times</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>child_instant_exit_times</name></name><operator>++</operator></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name><name>cycle</name><operator>-&gt;</operator><name>current_time</name></name> <operator>-</operator> <name><name>cycle</name><operator>-&gt;</operator><name>child_exit_time</name></name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>child_exit_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: reset child_exit_time to zero"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>child_instant_exit_times</name></name> <operator>&gt;=</operator> <name>cetus_last_process</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>cetus_terminate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: set cetus_terminate is true:%d, workers:%d"</literal></expr></argument>,
                                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>child_instant_exit_times</name></name></expr></argument>, <argument><expr><name>cetus_last_process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cetus_terminate</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>live</name> <operator>=</operator> <call><name>cetus_reap_children</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>live</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cetus_terminate</name> <operator>||</operator> <name>cetus_quit</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cetus_master_process_exit</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>cetus_terminate</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>live</name> <operator>&amp;&amp;</operator> <name>try_cnt</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>try_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>worker_processes</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>cetus_signal_worker_processes</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>,
                            <argument><expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_TERMINATE_SIGNAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>cetus_quit</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>worker_processes</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>cetus_signal_worker_processes</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>,
                        <argument><expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_SHUTDOWN_SIGNAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>live</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>cetus_restart</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cetus_restart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cetus_start_worker_processes</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>worker_processes</name></name></expr></argument>, <argument><expr><name>CETUS_PROCESS_RESPAWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>open_plugins</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
            <expr_stmt><expr><name>live</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>cetus_noaccept</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: cetus_noaccept is set true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cetus_noaccept</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cycle</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>cycle</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>stop_listening</name></name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>worker_processes</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>cetus_signal_worker_processes</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_NOACCEPT_SIGNAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>cetus_change_binary</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: changing binary"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_REUSEPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>unix_socket_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>unix_socket_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>unix_socket_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>cetus_new_binary</name> <operator>=</operator> <call><name>cetus_exec_new_binary</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cetus_change_binary</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>active_worker_processes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: changing binary when active processes:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>active_worker_processes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>cetus_quit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_start_worker_processes</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>      <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cetus_channel_t</name></type>  <name>ch</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cetus_channel_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>CETUS_CMD_OPEN_CHANNEL</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: before call cetus_spawn_process"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cetus_spawn_process</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>cetus_worker_process_cycle</name></expr></argument>,
                          <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"worker process"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name>pid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name> <operator>=</operator> <name>cetus_process_slot</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call cetus_pass_open_channel, cetus_process_slot:%d, pid:%d, fd:%d"</literal></expr></argument>, 
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cetus_process_slot</name></expr></argument>, <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cetus_pass_open_channel</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_pass_open_channel</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>cetus_channel_t</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>  <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call cetus_pass_open_channel, cetus_last_process:%d"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cetus_last_process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cetus_last_process</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: i:%d,pid:%d,fd:%d "</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>cetus_process_slot</name>
            <operator>||</operator> <name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>
            <operator>||</operator> <name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: pass channel s:%i pid:%d fd:%d to s:%i pid:%d fd:%d, ev base:%p, ev:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>basics</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>basics</name><operator>.</operator><name>fd</name></name></expr></argument>,
                <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>,
                <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cetus_channel_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* TODO: AGAIN */</comment>
        <expr_stmt><expr><call><name>cetus_write_channel</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                          <argument><expr><name>ch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cetus_channel_mininum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_signal_worker_processes</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>      <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>      <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cetus_channel_t</name></type>  <name>ch</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cetus_channel_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>signo</name></expr>)</condition> <block>{<block_content>

    <case>case <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_SHUTDOWN_SIGNAL</name></expr></argument>)</argument_list></call></expr>:</case>
        <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>CETUS_CMD_QUIT</name></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_TERMINATE_SIGNAL</name></expr></argument>)</argument_list></call></expr>:</case>
        <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>CETUS_CMD_TERMINATE</name></expr>;</expr_stmt>
        <break>break;</break>

    <default>default:</default>
        <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>command</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></switch>


    <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cetus_last_process</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: child: %i %d e:%d t:%d d:%d r:%d j:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                <argument><expr><name>i</name></expr></argument>,
                <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>,
                <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exiting</name></expr></argument>,
                <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exited</name></expr></argument>,
                <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>detached</name></expr></argument>,
                <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>respawn</name></expr></argument>,
                <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>just_spawn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>detached</name> <operator>||</operator> <name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>just_spawn</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>just_spawn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exiting</name>
            <operator>&amp;&amp;</operator> <name>signo</name> <operator>==</operator> <call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_SHUTDOWN_SIGNAL</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>command</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call cetus_pass_open_channel"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>cetus_write_channel</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cetus_channel_mininum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
                <operator>==</operator> <name>NETWORK_SOCKET_SUCCESS</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exiting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: kill (%d, %d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>kill</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: kill (%d, %d) failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ESRCH</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exiting</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cycle</name><operator>-&gt;</operator><name>config_changed</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: set reap true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cetus_reap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>signo</name> <operator>!=</operator> <call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_REOPEN_SIGNAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exiting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>cetus_check_children</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>           <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>live</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>live</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cetus_last_process</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: child: %i %d e:%d t:%d d:%d r:%d j:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                       <argument><expr><name>i</name></expr></argument>,
                       <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>,
                       <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exiting</name></expr></argument>,
                       <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exited</name></expr></argument>,
                       <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>detached</name></expr></argument>,
                       <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>respawn</name></expr></argument>,
                       <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>just_spawn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exited</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exiting</name> <operator>||</operator> <operator>!</operator><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>detached</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>live</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>live</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>cetus_reap_children</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>         <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>        <name>live</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cetus_channel_t</name></type>     <name>ch</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cetus_channel_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>CETUS_CMD_CLOSE_CHANNEL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>live</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cetus_last_process</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: child: %i %d e:%d t:%d d:%d r:%d j:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                       <argument><expr><name>i</name></expr></argument>,
                       <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>,
                       <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exiting</name></expr></argument>,
                       <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exited</name></expr></argument>,
                       <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>detached</name></expr></argument>,
                       <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>respawn</name></expr></argument>,
                       <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>just_spawn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exited</name></expr>)</condition> <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>config_changed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>respawn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>detached</name> <operator>||</operator> <name><name>cycle</name><operator>-&gt;</operator><name>config_changed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>cetus_close_channel</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent_child_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

                <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>cetus_last_process</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>exited</name>
                        <operator>||</operator> <name><name>cetus_processes</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>
                        <operator>||</operator> <name><name>cetus_processes</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                    <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: pass close channel s:%i pid:%d to:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                                   <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block">/* TODO: AGAIN */</comment>
                    <expr_stmt><expr><call><name>cetus_write_channel</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                                      <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cetus_channel_mininum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>respawn</name>
                <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exiting</name>
                <operator>&amp;&amp;</operator> <operator>!</operator><name>cetus_terminate</name>
                <operator>&amp;&amp;</operator> <operator>!</operator><name>cetus_quit</name></expr>)</condition>
            <block>{<block_content>

                <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: before call cetus_spawn_process"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>cetus_spawn_process</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>proc</name></expr></argument>,
                                      <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,
                                      <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>
                    <operator>==</operator> <name>CETUS_INVALID_PID</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: could not respawn %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>


                <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>CETUS_CMD_OPEN_CHANNEL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name>pid</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name> <operator>=</operator> <name>cetus_process_slot</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call cetus_pass_open_channel, slot:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cetus_process_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>cetus_pass_open_channel</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>live</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>cetus_last_process</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: cetus_last_process sub,orig:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cetus_last_process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cetus_last_process</name><operator>--</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exiting</name> <operator>||</operator> <operator>!</operator><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>detached</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>live</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>live</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_master_process_exit</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_REUSEPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>unix_socket_name</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>unix_socket_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: exit"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_worker_process_cycle</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: call cetus_worker_process_cycle"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>worker</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cetus_process</name> <operator>=</operator> <name>CETUS_PROCESS_WORKER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cetus_worker</name> <operator>=</operator> <name>worker</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>cetus_worker_process_init</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cycle</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>cycle</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apply_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: call apply_config"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>apply_config</name></name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: applying config of plugin %s failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>thread_id</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>cetus_last_process</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>max_thread_id</name></name> <operator>=</operator> <operator>(</operator><name>cetus_last_process</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: first thread id:%d, max thread id:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
            <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>max_thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
    <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>dist_tran_id</name></name> <operator>=</operator> <call><name>g_random_int_range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>socket</name><argument_list>(<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: socket error:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>ifname</name></name></expr></argument>, <argument><expr><name>IFNAMSIZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SIOCGIFHWADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>mac</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mac</name></expr></argument>, <argument><expr><literal type="string">"%02x:%02x:%02x:%02x:%02x:%02x"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>buffer</name><operator>.</operator><name>ifr_hwaddr</name><operator>.</operator><name>sa_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
            <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>buffer</name><operator>.</operator><name>ifr_hwaddr</name><operator>.</operator><name>sa_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
            <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>buffer</name><operator>.</operator><name>ifr_hwaddr</name><operator>.</operator><name>sa_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
            <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>buffer</name><operator>.</operator><name>ifr_hwaddr</name><operator>.</operator><name>sa_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
            <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>buffer</name><operator>.</operator><name>ifr_hwaddr</name><operator>.</operator><name>sa_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
            <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>buffer</name><operator>.</operator><name>ifr_hwaddr</name><operator>.</operator><name>sa_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mac</name></expr></argument>, <argument><expr><literal type="string">"00:00:00:00:00:00"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>dist_tran_prefix</name></name></expr></argument>, <argument><expr><name>MAX_DIST_TRAN_PREFIX</name></expr></argument>, <argument><expr><literal type="string">"clt-%d-%s-%d"</literal></expr></argument>,
                <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>guid_state</name><operator>.</operator><name>worker_id</name></name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>proxy_address</name></name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"wrong inferface name:%s"</literal></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>ifname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>dist_tran_prefix</name></name></expr></argument>, <argument><expr><name>MAX_DIST_TRAN_PREFIX</name></expr></argument>, <argument><expr><literal type="string">"clt-%s-%s-%d"</literal></expr></argument>,
                <argument><expr><name>mac</name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>proxy_address</name></name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Initial dist_tran_id:%llu"</literal></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>dist_tran_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"dist_tran_prefix:%s, process id:%d"</literal></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>dist_tran_prefix</name></name></expr></argument>, <argument><expr><name>cetus_process_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>incremental_guid_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cycle</name><operator>-&gt;</operator><name>guid_state</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BPF_ENABLED</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>cpus</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>cpu_set_t</name></type> <name>cpu_set</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpu_set</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cpu_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cpu_ndx</name> <init>= <expr><name><name>cycle</name><operator>-&gt;</operator><name>guid_state</name><operator>.</operator><name>worker_id</name></name> <operator>%</operator> <name><name>cycle</name><operator>-&gt;</operator><name>cpus</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CPU_SET</name><argument_list>(<argument><expr><name>cpu_ndx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpu_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sched_setaffinity</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cpu_set</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpu_set</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: failed to pin to cpu:%s, cpu index:%d"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cpu_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>cetus_monitor_start_thread</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cetus_remote_config_start_thread</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cetus_sql_log_start_thread_once</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>sql_mgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <for>for <control>( <init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>cetus_exiting</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cetus_worker_process_exit</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>cetus_reap</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cetus_reap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: cetus reap is true for child"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: worker cycle"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* call main procedures for worker */</comment>
        <decl_stmt><decl><type><name>chassis_event_loop_t</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>cycle</name><operator>-&gt;</operator><name>event_base</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_loop</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>cetus_terminate</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: exiting"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cetus_worker_process_exit</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>cetus_noaccept</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: cetus_noaccept is set true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cetus_noaccept</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cycle</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>cycle</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>stop_listening</name></name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>maintain_close_mode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>cetus_quit</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cetus_quit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: gracefully shutting down"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cetus_exiting</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>cetus_exiting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <comment type="block">/* Call cetus shut down */</comment>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_worker_process_init</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>worker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sigset_t</name></type>           <name>set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: sigprocmask() failed, errno:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cetus_last_process:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cetus_last_process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>cetus_last_process</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>cetus_process_slot</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: close() channel one fd:%d, n:%d"</literal></expr></argument>, 
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: close() channel failed, err:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: close() channel zero fd:%d, n:%d"</literal></expr></argument>, 
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cetus_process_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: close() channel failed, strerr:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: channel fd for recving:%d, n:%d"</literal></expr></argument>, 
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cetus_process_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>chassis_event_loop_t</name> <modifier>*</modifier></type><name>mainloop</name> <init>= <expr><call><name>chassis_event_loop_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>cycle</name><operator>-&gt;</operator><name>event_base</name></name> <operator>=</operator> <name>mainloop</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cetus_channel_event</name></expr></argument>, <argument><expr><name>cetus_channel</name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>, <argument><expr><name>cetus_channel_handler</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_event_add</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cetus_channel_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cetus_channel:%d is waiting for read, event base:%p, ev:%p"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cetus_channel</name></expr></argument>, <argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cetus_channel_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_worker_process_exit</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>cetus_monitor_stop_thread</name><argument_list>(<argument><expr><name><name>cycle</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: exit"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>cetus_channel_t</name> <modifier>*</modifier></type><name>retrieve_admin_resp</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call retrieve_admin_resp"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>cetus_channel_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>int</name></type> <name>resp_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>chunk</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>chunk</name></expr>;</condition> <incr><expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>resp_len</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:s-&gt;len:%d, resp len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>resp_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>total</name> <operator>=</operator> <name>total</name> <operator>+</operator> <name>resp_len</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cetus_channel_t</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><operator>(</operator><name>cetus_channel_t</name> <operator>*</operator><operator>)</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>admin_sql_resp_len</name></name> <operator>=</operator> <name>resp_len</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ch</name><operator>-&gt;</operator><name>admin_sql_resp</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>chunk</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>chunk</name></expr>;</condition> <incr><expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call retrieve_admin_resp end"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>send_admin_resp</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>worker_processes</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call send_admin_resp, cetus_process_slot:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cetus_process_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>cetus_channel_t</name>  <modifier>*</modifier></type><name>ch</name> <init>= <expr><call><name>retrieve_admin_resp</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
        <expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>basics</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>CETUS_CMD_ADMIN_RESP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>basics</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name>pid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>basics</name><operator>.</operator><name>slot</name></name> <operator>=</operator> <name>cetus_process_slot</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>basics</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:send resp to admin, cetus_process_slot:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cetus_process_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pass sql resp channel s:%i pid:%d to:%d, fd:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>basics</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>,
                <argument><expr><name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* TODO: AGAIN */</comment>
        <expr_stmt><expr><call><name>cetus_write_channel</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
                <argument><expr><name>ch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ch</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>ch</name><operator>-&gt;</operator><name>admin_sql_resp_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:cetus_write_channel send:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ch</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>ch</name><operator>-&gt;</operator><name>admin_sql_resp_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_admin_sql</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>cetus_channel_t</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><call><name>network_mysqld_con_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>network_socket_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <name>client</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name> <operator>=</operator> <name>cycle</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>admin_sql</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>admin_sql</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call process_admin_sql"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cycle</name><operator>-&gt;</operator><name>admin_plugin</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call admin"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>network_socket_retval_t</name></type> <name>retval</name> <init>= <expr><name>NETWORK_SOCKET_SUCCESS</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NETWORK_MYSQLD_PLUGIN_FUNC</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>network_mysqld_hooks</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><name><name>cycle</name><operator>-&gt;</operator><name>admin_plugin</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>packet_id_is_reset</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>con_exectute_sql</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>) <argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call admin:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_channel_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cetus_channel_t</name></type>    <name>ch</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: channel handler, cetus_last_process:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cetus_last_process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do>do <block>{<block_content>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: before cetus_read_channel channel, fd:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>cetus_read_channel</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cetus_channel_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: after cetus_read_channel channel, fd:%d, ret:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NETWORK_SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: error, fd:%d, ret:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cetus_terminate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: wait for event, fd:%d, ret:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: channel command: %u"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch>switch <condition>(<expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>command</name></name></expr>)</condition> <block>{<block_content>

        <case>case <expr><name>CETUS_CMD_ADMIN</name></expr>:</case>
            <expr_stmt><expr><call><name>process_admin_sql</name><argument_list>(<argument><expr><name>user_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CETUS_CMD_QUIT</name></expr>:</case>
            <expr_stmt><expr><name>cetus_quit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>CETUS_CMD_TERMINATE</name></expr>:</case>
            <expr_stmt><expr><name>cetus_terminate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>CETUS_CMD_OPEN_CHANNEL</name></expr>:</case>

            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: get channel s:%i pid:%d fd:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, 
                    <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>pid</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>fd</name></name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>CETUS_CMD_CLOSE_CHANNEL</name></expr>:</case>

            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: close channel s:%i pid:%d our:%d fd:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, 
                    <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>,
                    <argument><expr><name><name>cetus_processes</name><index>[<expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: close() channel failed:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>chassis_is_shutdown</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

</unit>
