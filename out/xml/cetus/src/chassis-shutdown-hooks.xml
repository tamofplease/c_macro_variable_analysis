<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/chassis-shutdown-hooks.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-shutdown-hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>chassis_shutdown_hook_free</name><parameter_list>(<parameter><decl><type><name>chassis_shutdown_hook_t</name> <modifier>*</modifier></type><name>hook</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_slice_free</name><argument_list>(<argument><expr><name>chassis_shutdown_hook_t</name></expr></argument>, <argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>chassis_shutdown_hooks_t</name> <modifier>*</modifier></type>
<name>chassis_shutdown_hooks_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis_shutdown_hooks_t</name> <modifier>*</modifier></type><name>hooks</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>hooks</name> <operator>=</operator> <call><name>g_slice_new0</name><argument_list>(<argument><expr><name>chassis_shutdown_hooks_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hooks</name><operator>-&gt;</operator><name>hooks</name></name> <operator>=</operator> <call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><operator>(</operator><name>GHashFunc</name><operator>)</operator> <name>g_string_hash</name></expr></argument>,
                                         <argument><expr><operator>(</operator><name>GEqualFunc</name><operator>)</operator> <name>g_string_equal</name></expr></argument>,
                                         <argument><expr><name>g_string_true_free</name></expr></argument>, <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>chassis_shutdown_hook_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>hooks</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>chassis_shutdown_hooks_free</name><parameter_list>(<parameter><decl><type><name>chassis_shutdown_hooks_t</name> <modifier>*</modifier></type><name>hooks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name><name>hooks</name><operator>-&gt;</operator><name>hooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_slice_free</name><argument_list>(<argument><expr><name>chassis_shutdown_hooks_t</name></expr></argument>, <argument><expr><name>hooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>chassis_shutdown_hooks_call</name><parameter_list>(<parameter><decl><type><name>chassis_shutdown_hooks_t</name> <modifier>*</modifier></type><name>hooks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_shutdown_hook_t</name> <modifier>*</modifier></type><name>hook</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_hash_table_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name><name>hooks</name><operator>-&gt;</operator><name>hooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>g_hash_table_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hook</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>func</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>hook</name><operator>-&gt;</operator><name>is_called</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>hook</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>hook</name><operator>-&gt;</operator><name>udata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>is_called</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>
</unit>
