<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/chassis-mainloop.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_TIME_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>           <comment type="block">/* event.h need struct timeval */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_PWD_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>                <comment type="block">/* getpwnam() */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>         <comment type="block">/* for SOCK_STREAM and AF_UNIX/AF_INET */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-plugin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-mainloop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-timings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-process-cycle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-sql-log.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>signal_shutdown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>cetus_process_id</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * check if the libevent headers we built against match the
 * library we run against
 */</comment>
<function><type><name>int</name></type>
<name>chassis_check_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lib_version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hdr_version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>lib_maj</name></decl>, <decl><type ref="prev"/><name>lib_min</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hdr_maj</name></decl>, <decl><type ref="prev"/><name>hdr_min</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>scanned_fields</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <operator>(</operator><name>scanned_fields</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>lib_version</name></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lib_maj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lib_min</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: library version %s failed to parse: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>lib_version</name></expr></argument>, <argument><expr><name>scanned_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <operator>(</operator><name>scanned_fields</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>hdr_version</name></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr_maj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr_min</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: header version %s failed to parse: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>hdr_version</name></expr></argument>, <argument><expr><name>scanned_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>lib_maj</name> <operator>==</operator> <name>hdr_maj</name> <operator>&amp;&amp;</operator> <name>lib_min</name> <operator>==</operator> <name>hdr_min</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * create a global context
 */</comment>
<function><type><name>chassis</name> <modifier>*</modifier></type>
<name>chassis_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>chassis_check_version</name><argument_list>(<argument><expr><call><name>event_get_version</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_EVENT_VERSION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: chassis is built against libevent %s, but now runs against %s"</literal></expr></argument>,
                   <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>_EVENT_VERSION</name></expr></argument>, <argument><expr><call><name>event_get_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>chas</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>chassis</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>modules</name></name> <operator>=</operator> <call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>event_hdr_version</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>_EVENT_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>shutdown_hooks</name></name> <operator>=</operator> <call><name>chassis_shutdown_hooks_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>startup_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>pid_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>log_level</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>log_xa_filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>remote_config_url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>default_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>group_replication_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>sql_mgr</name></name> <operator>=</operator> <call><name>sql_log_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>chas</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>g_queue_free_cache_index</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>query_cache_index_item</name> <modifier>*</modifier></type><name>index</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>index</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>g_queue_free</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * free the global scope
 *
 * closes all open connections, cleans up all plugins
 *
 * @param chas      global context
 */</comment>
<function><type><name>void</name></type>
<name>chassis_free</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_EVENT_BASE_FREE</name></cpp:ifdef>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>chas</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* init the shutdown, without freeing share structures */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>priv_shutdown</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>chas</name><operator>-&gt;</operator><name>priv_shutdown</name></name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* call the destructor for all plugins */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chas</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>modules</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>destroy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* cleanup the global 3rd party stuff before we unload the modules */</comment>
    <expr_stmt><expr><call><name>chassis_shutdown_hooks_call</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>shutdown_hooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chas</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>chassis_plugin_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>modules</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>base_dir</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>base_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>conf_dir</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>conf_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>plugin_dir</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>plugin_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>default_db</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>ifname</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>ifname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>default_username</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>default_hashed_pwd</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>default_hashed_pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>query_cache_table</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>query_cache_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>cache_index</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_queue_free_cache_index</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>cache_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if  <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>unix_socket_name</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>unix_socket_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>default_charset</name></name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>default_charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>event_hdr_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_shutdown_hooks_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>shutdown_hooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>priv_finally_free_shared</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>chas</name><operator>-&gt;</operator><name>priv_finally_free_shared</name></name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* free the pointers _AFTER_ the modules are shutdown */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>priv_free</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>chas</name><operator>-&gt;</operator><name>priv_free</name></name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_EVENT_BASE_FREE</name></cpp:ifdef>
    <comment type="block">/* only recent versions have this call */</comment>

    <expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>event_get_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* libevent &lt; 1.3e doesn't cleanup its own fds from the event-queue in signal_init()
     * calling event_base_free() would cause a assert() on shutdown
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="string">"1.3e"</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>event_base</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>chassis_config_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>pid_file</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>pid_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>old_pid_file</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>old_pid_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>log_level</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>log_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>plugin_names</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>plugin_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>remote_config_url</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>remote_config_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>default_file</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>sql_mgr</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_log_free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>sql_mgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>argv</name></name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chas</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>chassis_set_shutdown_location</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>signal_shutdown</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Initiating shutdown, requested from %s"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>location</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>location</name></expr> </then><else>: <expr><literal type="string">"signal handler"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>signal_shutdown</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cetus_terminate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>chassis_is_shutdown</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><name>signal_shutdown</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>cetus_terminate</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * forward libevent messages to the glib error log
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>event_log_use_glib</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>libevent_log_level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* map libevent to glib log-levels */</comment>

    <decl_stmt><decl><type><name>GLogLevelFlags</name></type> <name>glib_log_level</name> <init>= <expr><name>G_LOG_LEVEL_DEBUG</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>libevent_log_level</name> <operator>==</operator> <name>_EVENT_LOG_DEBUG</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>glib_log_level</name> <operator>=</operator> <name>G_LOG_LEVEL_DEBUG</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>libevent_log_level</name> <operator>==</operator> <name>_EVENT_LOG_MSG</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>glib_log_level</name> <operator>=</operator> <name>G_LOG_LEVEL_MESSAGE</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>libevent_log_level</name> <operator>==</operator> <name>_EVENT_LOG_WARN</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>glib_log_level</name> <operator>=</operator> <name>G_LOG_LEVEL_WARNING</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>libevent_log_level</name> <operator>==</operator> <name>_EVENT_LOG_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>glib_log_level</name> <operator>=</operator> <name>G_LOG_LEVEL_CRITICAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_log</name><argument_list>(<argument><expr><name>G_LOG_DOMAIN</name></expr></argument>, <argument><expr><name>glib_log_level</name></expr></argument>, <argument><expr><literal type="string">"(libevent) %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>chassis_mainloop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_chas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name>_chas</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* redirect logging from libevent to glib */</comment>
    <expr_stmt><expr><call><name>event_set_log_callback</name><argument_list>(<argument><expr><name>event_log_use_glib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* add a event-handler for the "main" events */</comment>
    <decl_stmt><decl><type><name>chassis_event_loop_t</name> <modifier>*</modifier></type><name>mainloop</name> <init>= <expr><call><name>chassis_event_loop_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>event_base</name></name> <operator>=</operator> <name>mainloop</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * drop root privileges if requested
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>user_info</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uid_t</name></type> <name>user_id</name> <init>= <expr><call><name>geteuid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Don't bother if we aren't superuser */</comment>
        <if_stmt><if>if <condition>(<expr><name>user_id</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"can only use the --user switch if running as root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>user_info</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"unknown user: %s"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>log_filename</name></name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* chown logfile */</comment>
            <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>chown</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>log_filename</name></name></expr></argument>, <argument><expr><name><name>user_info</name><operator>-&gt;</operator><name>pw_uid</name></name></expr></argument>, <argument><expr><name><name>user_info</name><operator>-&gt;</operator><name>pw_gid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: chown(%s) failed: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>log</name><operator>-&gt;</operator><name>log_filename</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>setgid</name><argument_list>(<argument><expr><name><name>user_info</name><operator>-&gt;</operator><name>pw_gid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>setuid</name><argument_list>(<argument><expr><name><name>user_info</name><operator>-&gt;</operator><name>pw_uid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"now running as user: %s (%d/%d)"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>user_info</name><operator>-&gt;</operator><name>pw_uid</name></name></expr></argument>, <argument><expr><name><name>user_info</name><operator>-&gt;</operator><name>pw_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GLIB_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">32</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* GLIB below 2.32 must call thread_init if multi threads */</comment>
    <expr_stmt><expr><call><name>g_thread_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><call><name>cetus_init_signals</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>cetus_master_process_cycle</name><argument_list>(<argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
<function><type><name>uint64_t</name></type>
<name>incremental_guid_get_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>incremental_guid_state_t</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>uniq_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>SEQ_MASK</name> <init>= <expr><operator>(</operator><operator>-</operator><literal type="number">1L</literal> <operator>^</operator> <operator>(</operator><operator>-</operator><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">10L</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>msec</name> <init>= <expr><name><name>tp</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>cur_time</name> <init>= <expr><name><name>tp</name><operator>.</operator><name>tv_sec</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>uniq_id</name> <operator>=</operator> <name>cur_time</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>uniq_id</name> <operator>|=</operator> <operator>(</operator><name>msec</name> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>uniq_id</name> <operator>|=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>worker_id</name></name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>cur_time</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>last_sec</name></name> <operator>&amp;&amp;</operator> <name>msec</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>last_msec</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>SEQ_MASK</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:too many calls in one millisecond"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_sec</name></name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_msec</name></name> <operator>=</operator> <name>msec</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>uniq_id</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>seq_id</name></name></expr>;</expr_stmt>

    <return>return <expr><name>uniq_id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>incremental_guid_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>incremental_guid_state_t</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>worker_id</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>worker_id</name></name> <operator>&lt;&lt;</operator> <name>MAX_WORK_PROCESSES_SHIFT</name><operator>)</operator> <operator>+</operator> <name>cetus_process_id</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"internal worker id:%d"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>worker_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_sec</name></name> <operator>=</operator> <name><name>tp</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_msec</name></name> <operator>=</operator> <name><name>tp</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
