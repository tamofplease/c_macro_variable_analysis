<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/mysql-proxy-cli.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<comment type="block" format="doxygen">/** @file
 * the user-interface for the cetus @see main()
 *
 *  -  command-line handling
 *  -  config-file parsing
 *
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SIGNAL_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>       <comment type="block">/* for rusage in wait() */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gmodule.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options-utils.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_VALGRIND_VALGRIND_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valgrind/valgrind.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SIGACTION</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;execinfo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_VALGRIND_VALGRIND_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNNING_ON_VALGRIND</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys-pedantic.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-timings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-keyfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-mainloop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-limits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-filemode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-unix-daemon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-frontend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-monitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-sql-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/sql-expression.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETTEXT_PACKAGE</name></cpp:macro> <cpp:value>"cetus"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>pid_t</name></type>       <name>cetus_pid</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * options of the cetus frontend
 */</comment>
<struct>struct <name>chassis_frontend_t</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>print_version</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>verbose_shutdown</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>daemon_mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>set_client_found_rows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>default_pool_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_pool_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>worker_processes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>merged_output_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_header_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_alive_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>master_preferred</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
    <decl_stmt><decl><type><name>int</name></type> <name>worker_id</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>config_port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>disable_threads</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_tcp_stream_enabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_fast_stream_enabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_partition_mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>check_sql_loosely</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_sql_special_processed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_back_compressed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_client_compress_support</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>check_slave_delay</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_reduce_conns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>long_query_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>xa_log_detailed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cetus_max_allowed_packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>default_query_cache_timeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>client_idle_timeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>incomplete_tran_idle_timeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maintained_client_idle_timeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>query_cache_enabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>disable_dns_cache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>max_resp_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>slave_delay_down_threshold_sec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>slave_delay_recover_threshold_sec</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>guint</name></type> <name>invoke_dbg_on_crash</name></decl>;</decl_stmt>
    <comment type="block">/* the --keepalive option isn't available on Unix */</comment>
    <decl_stmt><decl><type><name>gint</name></type> <name>max_files_number</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>base_dir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>conf_dir</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>default_file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GKeyFile</name> <modifier>*</modifier></type><name>keyfile</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GOptionEntry</name> <modifier>*</modifier></type><name>config_entries</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>pid_file</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>plugin_dir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>plugin_names</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>log_level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>log_filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>log_xa_filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_username</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_charset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ifname</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>remote_config_url</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>trx_isolation_level</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gint</name></type> <name>group_replication_mode</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>guint</name></type> <name>sql_log_bufsize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>sql_log_switch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>sql_log_prefix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>sql_log_path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>sql_log_maxsize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>sql_log_mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint</name></type> <name>sql_log_idletime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>sql_log_maxnum</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gint</name></type> <name>ssl</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>check_dns</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/**
 * create a new the frontend for the chassis
 */</comment>
<function><type><name><name>struct</name> <name>chassis_frontend_t</name></name> <modifier>*</modifier></type>
<name>chassis_frontend_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>chassis_frontend_t</name></name> <modifier>*</modifier></type><name>frontend</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>frontend</name> <operator>=</operator> <call><name>g_slice_new0</name><argument_list>(<argument><expr>struct <name>chassis_frontend_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>max_files_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>disable_threads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>is_back_compressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>is_client_compress_support</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>xa_log_detailed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_pool_size</name></name> <operator>=</operator> <name>DEFAULT_POOL_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>worker_processes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>max_resp_len</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>  <comment type="block">/* 10M */</comment>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>max_alive_time</name></name> <operator>=</operator> <name>DEFAULT_LIVE_TIME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>merged_output_size</name></name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>max_header_size</name></name> <operator>=</operator> <literal type="number">65536</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>config_port</name></name> <operator>=</operator> <literal type="number">3306</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>check_slave_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name> <operator>=</operator> <literal type="number">10.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_query_cache_timeout</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>client_idle_timeout</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>HOURS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>incomplete_tran_idle_timeout</name></name> <operator>=</operator> <literal type="number">3600</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>maintained_client_idle_timeout</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>long_query_time</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>cetus_max_allowed_packet</name></name> <operator>=</operator> <name>MAX_ALLOWED_PACKET_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>disable_dns_cache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>is_tcp_stream_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>is_tcp_stream_enabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>is_fast_stream_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>is_partition_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>check_sql_loosely</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>is_sql_special_processed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>group_replication_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_bufsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_prefix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_maxsize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_idletime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_maxnum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>check_dns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><name>frontend</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * free the frontend of the chassis
 */</comment>
<function><type><name>void</name></type>
<name>chassis_frontend_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>chassis_frontend_t</name></name> <modifier>*</modifier></type><name>frontend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>frontend</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>keyfile</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_key_file_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>keyfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>log_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>base_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>conf_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>pid_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>log_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>ifname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>remote_config_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_switch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_slice_free</name><argument_list>(<argument><expr>struct <name>chassis_frontend_t</name></expr></argument>, <argument><expr><name>frontend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * setup the options of the chassis
 */</comment>
<function><type><name>int</name></type>
<name>chassis_frontend_set_chassis_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>chassis_frontend_t</name></name> <modifier>*</modifier></type><name>frontend</name></decl></parameter>, <parameter><decl><type><name>chassis_options_t</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>chassis</name><modifier>*</modifier></type> <name>srv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"verbose-shutdown"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>verbose_shutdown</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Always log the exit code when shutting down"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_verbose_shutdown</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"daemon"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>daemon_mode</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Start in daemon-mode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_daemon_mode</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>user</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Run cetus as user"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;user&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_user</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"basedir"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>base_dir</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Base directory to prepend to relative paths in the config"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;absolute path&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_basedir</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"conf-dir"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>conf_dir</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Configuration directory"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;absolute path&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_confdir</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"pid-file"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>pid_file</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"PID file in case we are started as daemon"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;file&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_pidfile</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"plugin-dir"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>plugin_dir</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Path to the plugins"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;path&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_plugindir</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"plugins"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING_ARRAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Plugins to load"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;name&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_plugins</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"log-level"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>log_level</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Log all messages of level ... or higher"</literal></expr></argument>, <argument><expr><literal type="string">"(error|warning|info|message|debug)"</literal></expr></argument>,
                        <argument><expr><name>assign_log_level</name></expr></argument>, <argument><expr><name>show_log_level</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"log-file"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>log_filename</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Log all messages in a file"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;file&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_log_file</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"log-xa-file"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>log_xa_filename</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Log all xa messages in a file"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;file&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_log_xa_file</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"log-backtrace-on-crash"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>invoke_dbg_on_crash</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Try to invoke debugger on crash"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_log_backtrace_on_crash</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"max-open-files"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>max_files_number</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Maximum number of open files (ulimit -n)"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_max_open_files</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"default-charset"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>default_charset</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Set the default character set for backends"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_default_charset</name></expr></argument>, <argument><expr><name>show_default_charset</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"default-username"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>default_username</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Set the default username for visiting backends"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_default_username</name></expr></argument>, <argument><expr><name>show_default_username</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"default-db"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>default_db</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Set the default db for visiting backends"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_default_db</name></expr></argument>, <argument><expr><name>show_default_db</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"ifname"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>ifname</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Set the network interface for distinguishing cetus instances"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_ifname</name></expr></argument>, <argument><expr><name>show_ifname</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"default-pool-size"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>default_pool_size</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Set the default pool szie for visiting backends"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_default_pool_size</name></expr></argument>, <argument><expr><name>show_default_pool_size</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"max-pool-size"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>max_pool_size</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Set the max pool szie for visiting backends"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_max_pool_size</name></expr></argument>, <argument><expr><name>show_max_pool_size</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"worker-processes"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>worker_processes</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Set worker processes for processing client requests"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_worker_processes</name></expr></argument>, <argument><expr><name>show_worker_processes</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"max-resp-size"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>max_resp_len</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Set the max response size for one backend"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer(64)&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_max_resp_len</name></expr></argument>, <argument><expr><name>show_max_resp_len</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"max-alive-time"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>max_alive_time</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Set the max alive time for server connection"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_max_alive_time</name></expr></argument>, <argument><expr><name>show_max_alive_time</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"merged-output-size"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>merged_output_size</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"set the merged output size for tcp streaming"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_merged_output_size</name></expr></argument>, <argument><expr><name>show_merged_output_size</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"max-header-size"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>max_header_size</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"set the max header size for tcp streaming"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_max_header_size</name></expr></argument>, <argument><expr><name>show_max_header_size</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"worker-id"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>worker_id</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Set the worker id and the maximum value allowed is 63 and the min value is 1"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_worker_id</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"disable-threads"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>disable_threads</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Disable all threads creation"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_disable_threads</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"ssl"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>ssl</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Specifies that the server permits but does not require"</literal>
                        <literal type="string">" encrypted connections. This option is disabled by default"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_ssl</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"enable-back-compress"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>is_back_compressed</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"enable compression for backend interactions"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_enable_back_compress</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"enable-client-compress"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>is_client_compress_support</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"enable compression for client interactions"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_enable_client_compress</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"check-slave-delay"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>check_slave_delay</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Check ro backends with heartbeat"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_check_slave_delay</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"slave-delay-down"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Slave will be set down after reach this delay secondes"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;double&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_slave_delay_down</name></expr></argument>, <argument><expr><name>show_slave_delay_down</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"slave-delay-recover"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Slave will recover after below this delay secondes"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;double&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_slave_delay_recover</name></expr></argument>, <argument><expr><name>show_slave_delay_recover</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"default-query-cache-timeout"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>default_query_cache_timeout</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"default query cache timeout in ms"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_default_query_cache_timeout</name></expr></argument>, <argument><expr><name>show_default_query_cache_timeout</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"default-client-idle-timeout"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>client_idle_timeout</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"set client idle timeout in seconds(default 28800 seconds)"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_default_client_idle_timeout</name></expr></argument>, <argument><expr><name>show_default_client_idle_timeout</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"default-incomplete-tran-idle-timeout"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>incomplete_tran_idle_timeout</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"set client incomplete transaction idle timeout in seconds(default 3600 seconds)"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_default_incomplete_tran_idle_timeout</name></expr></argument>, <argument><expr><name>show_default_incomplete_tran_idle_timeout</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"default-maintained-client-idle-timeout"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>maintained_client_idle_timeout</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"set maintained client idle timeout in seconds(default 30 seconds)"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_default_maintained_client_idle_timeout</name></expr></argument>, 
                        <argument><expr><name>show_default_maintained_client_idle_timeout</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"long-query-time"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>long_query_time</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Long query time in ms"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;integer&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_long_query_time</name></expr></argument>, <argument><expr><name>show_long_query_time</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"enable-client-found-rows"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>set_client_found_rows</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Set client found rows flag"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_enable_client_found_rows</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"reduce-connections"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>is_reduce_conns</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Reduce connections when idle connection num is too high"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_reduce_connections</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"enable-query-cache"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>query_cache_enabled</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_enable_query_cache</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"enable-tcp-stream"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>is_tcp_stream_enabled</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_enable_tcp_stream</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"enable-fast-stream"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>is_fast_stream_enabled</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_enable_fast_stream</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"enable-sql-special-processed"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>is_sql_special_processed</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_enable_sql_special_processed</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"partition-mode"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>is_partition_mode</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_enable_partition</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"check-sql-loosely"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>check_sql_loosely</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_check_sql_loosely</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"log-xa-in-detail"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>xa_log_detailed</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"log xa in detail"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_log_xa_in_detail</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"disable-dns-cache"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>disable_dns_cache</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Every new connection to backends will resolve domain name"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_disable_dns_cache</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"master-preferred"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>master_preferred</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Access to master preferentially"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_master_preferred</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"max-allowed-packet"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>cetus_max_allowed_packet</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Max allowed packet as in mysql"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;int&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_max_allowed_packet</name></expr></argument>, <argument><expr><name>show_max_allowed_packet</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"remote-conf-url"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>remote_config_url</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Remote config url, mysql://xx"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_remote_conf_url</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"trx-isolation-level"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>trx_isolation_level</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"transaction isolation level, default: REPEATABLE READ"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_trx_isolation_level</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"group-replication-mode"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>group_replication_mode</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"mysql group replication mode, 0:not support(defaults) 1:support single primary mode 2:support multi primary mode(not implement yet)"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;int&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_group_replication</name></expr></argument>, <argument><expr><name>show_group_replication_mode</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"sql-log-bufsize"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_bufsize</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"the buffer size of the log"</literal></expr></argument>,<argument><expr><literal type="string">"&lt;int&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_sql_log_bufsize</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"sql-log-switch"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_switch</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"the log switch, ON/OFF/REALTIME"</literal></expr></argument>,<argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                        <argument><expr><name>assign_sql_log_switch</name></expr></argument>, <argument><expr><name>show_sql_log_switch</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                        <argument><expr><literal type="string">"sql-log-prefix"</literal></expr></argument>,
                         <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_prefix</name></name><operator>)</operator></expr></argument>,
                         <argument><expr><literal type="string">"the log filename"</literal></expr></argument>,<argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_sql_log_prefix</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                         <argument><expr><literal type="string">"sql-log-path"</literal></expr></argument>,
                          <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_path</name></name><operator>)</operator></expr></argument>,
                          <argument><expr><literal type="string">"the log path"</literal></expr></argument>,<argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_sql_log_path</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                         <argument><expr><literal type="string">"sql-log-maxsize"</literal></expr></argument>,
                          <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_maxsize</name></name><operator>)</operator></expr></argument>,
                          <argument><expr><literal type="string">"the maxsize of sql file, units is M"</literal></expr></argument>,<argument><expr><literal type="string">"&lt;int&gt;"</literal></expr></argument>,
                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_sql_log_maxsize</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                         <argument><expr><literal type="string">"sql-log-mode"</literal></expr></argument>,
                          <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_mode</name></name><operator>)</operator></expr></argument>,
                          <argument><expr><literal type="string">"the mode of sql file"</literal></expr></argument>,<argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                          <argument><expr><name>assign_sql_log_mode</name></expr></argument>, <argument><expr><name>show_sql_log_mode</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                         <argument><expr><literal type="string">"sql-log-idletime"</literal></expr></argument>,
                          <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_idletime</name></name><operator>)</operator></expr></argument>,
                          <argument><expr><literal type="string">"sql log idle time when no log flush to disk"</literal></expr></argument>,<argument><expr><literal type="string">"&lt;int&gt;"</literal></expr></argument>,
                          <argument><expr><name>assign_sql_log_idletime</name></expr></argument>, <argument><expr><name>show_sql_log_idletime</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                          <argument><expr><literal type="string">"sql-log-maxnum"</literal></expr></argument>,
                          <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_maxnum</name></name><operator>)</operator></expr></argument>,
                          <argument><expr><literal type="string">"aximum number of sql log files"</literal></expr></argument>,<argument><expr><literal type="string">"&lt;int&gt;"</literal></expr></argument>,
                          <argument><expr><name>assign_sql_log_maxnum</name></expr></argument>, <argument><expr><name>show_sql_log_maxnum</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><name>opts</name></expr></argument>,
                          <argument><expr><literal type="string">"check-dns"</literal></expr></argument>,
                          <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>check_dns</name></name><operator>)</operator></expr></argument>,
                          <argument><expr><literal type="string">"check dns when hostname changed"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_check_dns</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SIGACTION</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_backtrace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>array</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strings</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>backtrace</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strings</name> <operator>=</operator> <call><name>backtrace_symbols</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Obtained %d stack frames."</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sigsegv_handler</name><parameter_list>(<parameter><decl><type><name>int</name> <name>G_GNUC_UNUSED</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>log_backtrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>                    <comment type="block">/* trigger a SIGABRT instead of just exiting */</comment>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>check_plugin_mode_valid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>chassis_frontend_t</name></name> <modifier>*</modifier></type><name>frontend</name></decl></parameter>, <parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>proxy_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sharding_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"shard"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sharding_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"set sharding mode true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"proxy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>proxy_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>sharding_mode</name> <operator>&amp;&amp;</operator> <name>proxy_mode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"shard &amp; proxy is mutual exclusive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>sharding_mode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"try loading shard-plugin.so from rw-edition, exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><name>proxy_mode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"try loading proxy-plugin.so from shard-edition, exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>g_query_cache_item_free</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>query_cache_item</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>network_queue_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* strdup with 1) default value &amp; 2) NULL check */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUP_STRING</name><parameter_list>(<parameter><type><name>STR</name></type></parameter>, <parameter><type><name>DEFAULT</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>(STR) ? g_strdup(STR) : ((DEFAULT) ? g_strdup(DEFAULT) : NULL)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_parameters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>chassis_frontend_t</name></name> <modifier>*</modifier></type><name>frontend</name></decl></parameter>, <parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name> <operator>=</operator> <call><name>DUP_STRING</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name> <operator>=</operator> <call><name>DUP_STRING</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_charset</name></name></expr></argument>, <argument><expr><literal type="string">"utf8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>default_db</name></name> <operator>=</operator> <call><name>DUP_STRING</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>ifname</name></name> <operator>=</operator> <call><name>DUP_STRING</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>ifname</name></name></expr></argument>, <argument><expr><literal type="string">"eth0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_REUSEPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:SO_REUSEPORT is defined"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>worker_processes</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>worker_processes</name></name> <operator>&gt;</operator> <name>MAX_WORK_PROCESSES</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name> <operator>=</operator> <name>MAX_WORK_PROCESSES</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>worker_processes</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:SO_REUSEPORT is undefined"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"set worker processes:%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>default_pool_size</name></name> <operator>&lt;</operator> <name>DEFAULT_POOL_SIZE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_pool_size</name></name> <operator>=</operator> <name>DEFAULT_POOL_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>default_pool_size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"set default pool size:%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>connections_created_per_time</name> <init>= <expr><name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name> <operator>/</operator> <name><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>connections_created_per_time</name> <operator>&gt;</operator> <name>MAX_CREATE_CONN_NUM</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>connections_created_per_time</name></name> <operator>=</operator> <name>MAX_CREATE_CONN_NUM</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>connections_created_per_time</name></name> <operator>=</operator> <name>connections_created_per_time</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>max_pool_size</name></name> <operator>&gt;=</operator> <name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>max_idle_connections</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>max_pool_size</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>max_idle_connections</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"set max pool size:%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_idle_connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>max_resp_len</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>max_resp_len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"set max resp len:%lld"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_resp_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>current_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>max_alive_time</name></name> <operator>&lt;</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>max_alive_time</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>max_alive_time</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>max_alive_time</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"set max alive time:%d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_alive_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>merged_output_size</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>merged_output_size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>compressed_merged_output_size</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>merged_output_size</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:set merged output size:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>merged_output_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>max_header_size</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>max_header_size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:set max header size:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>worker_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>guid_state</name><operator>.</operator><name>worker_id</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>worker_id</name></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tp</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name> <init>= <expr><name><name>tp</name><operator>.</operator><name>tv_usec</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>guid_state</name><operator>.</operator><name>worker_id</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>rand_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>RAND_MAX</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:please set worker id first, different instances should have different worker ids"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: the system chooses worker id automatically although it may have potential conflicts:%d"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>guid_state</name><operator>.</operator><name>worker_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DUP_STRING</name></cpp:undef>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>client_found_rows</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>set_client_found_rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"set client_found_rows %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>client_found_rows</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>xa_log_detailed</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>xa_log_detailed</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>xa_log_detailed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:xa_log_detailed true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:xa_log_detailed false"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>query_cache_enabled</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>query_cache_enabled</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>query_cache_enabled</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>query_cache_table</name></name> <operator>=</operator> <call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>, <argument><expr><name>g_query_cache_item_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>cache_index</name></name> <operator>=</operator> <call><name>g_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>is_tcp_stream_enabled</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>is_tcp_stream_enabled</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>is_tcp_stream_enabled</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:tcp stream enabled"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>is_fast_stream_enabled</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>is_fast_stream_enabled</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>is_fast_stream_enabled</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:fast stream enabled"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:partition mode"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>check_sql_loosely</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>check_sql_loosely</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>is_sql_special_processed</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>is_sql_special_processed</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>is_sql_special_processed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:enable sql special porcessing"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>disable_threads</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>disable_threads</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>is_back_compressed</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>is_back_compressed</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>compress_support</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>is_client_compress_support</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>check_slave_delay</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>check_slave_delay</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>master_preferred</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>master_preferred</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>disable_dns_cache</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>disable_dns_cache</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name> <operator>&gt;</operator> <name><name>srv</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"`slave-delay-recover` should be lower than `slave-delay-down`."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Set slave-delay-recover=%.3f"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>default_query_cache_timeout</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_query_cache_timeout</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>client_idle_timeout</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>client_idle_timeout</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>incomplete_tran_idle_timeout</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>incomplete_tran_idle_timeout</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>maintained_client_idle_timeout</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>maintained_client_idle_timeout</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>long_query_time</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>long_query_time</name></name></expr></argument>, <argument><expr><name>MAX_QUERY_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>cetus_max_allowed_packet</name></name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>cetus_max_allowed_packet</name></name></expr></argument>,
                                          <argument><expr><name>MAX_ALLOWED_PACKET_FLOOR</name></expr></argument>, <argument><expr><name>MAX_ALLOWED_PACKET_CEIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>check_dns</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>check_dns</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr></argument>, <argument><expr><literal type="string">"REPEATABLE READ"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr></argument>, <argument><expr><literal type="string">"REPEATABLE-READ"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>internal_trx_isolation_level</name></name> <operator>=</operator> <name>TF_REPEATABLE_READ</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"REPEATABLE-READ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr></argument>, <argument><expr><literal type="string">"READ COMMITTED"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr></argument>, <argument><expr><literal type="string">"READ-COMMITTED"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>internal_trx_isolation_level</name></name> <operator>=</operator> <name>TF_READ_COMMITTED</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"READ-COMMITTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr></argument>, <argument><expr><literal type="string">"READ UNCOMMITTED"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr></argument>, <argument><expr><literal type="string">"READ-UNCOMMITTED"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>internal_trx_isolation_level</name></name> <operator>=</operator> <name>TF_READ_UNCOMMITTED</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"READ-UNCOMMITTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr></argument>, <argument><expr><literal type="string">"SERIALIZABLE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>internal_trx_isolation_level</name></name> <operator>=</operator> <name>TF_SERIALIZABLE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"SERIALIZABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>internal_trx_isolation_level</name></name> <operator>=</operator> <name>TF_READ_COMMITTED</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"trx isolation level:%s is not expected, use READ COMMITTED instead"</literal></expr></argument>,
                    <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"READ-COMMITTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"trx isolation level is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>internal_trx_isolation_level</name></name> <operator>=</operator> <name>TF_READ_COMMITTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"READ-COMMITTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"trx isolation level value:%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>trx_isolation_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>release_resouces_when_exit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>chassis_frontend_t</name></name> <modifier>*</modifier></type><name>frontend</name></decl></parameter>, <parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name>GError</name> <modifier>*</modifier></type><name>gerr</name></decl></parameter>,
                           <parameter><decl><type><name>chassis_options_t</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>chassis_log</name> <modifier>*</modifier></type><name>log</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>gerr</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_error_free</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>srv</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>chassis_free</name><argument_list>(<argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call chassis_options_free"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>opts</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>chassis_options_free</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call chassis_log_free"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_log_free</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tc_log_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_frontend_free</name><argument_list>(<argument><expr><name>frontend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>resolve_path</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>chassis_frontend_t</name></name> <modifier>*</modifier></type><name>frontend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * these are used before we gathered all the options
     * from the plugins, thus we need to fix them up before
     * dealing with all the rest.
     */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_path</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>new_path</name> <operator>=</operator> <call><name>chassis_resolve_path</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>base_dir</name></name></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>log_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_path</name> <operator>&amp;&amp;</operator> <name>new_path</name> <operator>!=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>log_filename</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>log_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>log_filename</name></name> <operator>=</operator> <name>new_path</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>new_path</name> <operator>=</operator> <call><name>chassis_resolve_path</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>base_dir</name></name></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>pid_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_path</name> <operator>&amp;&amp;</operator> <name>new_path</name> <operator>!=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>pid_file</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>pid_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>pid_file</name></name> <operator>=</operator> <name>new_path</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>pid_file</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>pid_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>new_path</name> <operator>=</operator> <call><name>chassis_resolve_path</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>base_dir</name></name></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_path</name> <operator>&amp;&amp;</operator> <name>new_path</name> <operator>!=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>plugin_dir</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_dir</name></name> <operator>=</operator> <name>new_path</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>new_path</name> <operator>=</operator> <call><name>chassis_resolve_path</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>base_dir</name></name></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>conf_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_path</name> <operator>&amp;&amp;</operator> <name>new_path</name> <operator>!=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>conf_dir</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>conf_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>conf_dir</name></name> <operator>=</operator> <name>new_path</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>slow_query_log_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>log_domain</name></decl></parameter>, <parameter><decl><type><name>GLogLevelFlags</name></type> <name>log_level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type>
<name>init_slow_query_log</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>main_log</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>main_log</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>log_name</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>main_log</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>log_name</name></expr></argument>, <argument><expr><literal type="string">".slowquery.log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>log_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_log_set_handler</name><argument_list>(<argument><expr><literal type="string">"slowquery"</literal></expr></argument>, <argument><expr><name>G_LOG_LEVEL_MASK</name> <operator>|</operator> <name>G_LOG_FLAG_FATAL</name>
                          <operator>|</operator> <name>G_LOG_FLAG_RECURSION</name></expr></argument>, <argument><expr><name>slow_query_log_handler</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>log_name</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fp</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * This is the "real" main which is called on UNIX platforms.
 */</comment>
<function><type><name>int</name></type>
<name>main_cmdline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SIGACTION</name></cpp:ifdef>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sigaction</name></name></type> <name>sigsegv_sa</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/* read the command-line options */</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>chassis_frontend_t</name></name> <modifier>*</modifier></type><name>frontend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_options_t</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>gerr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_log</name> <modifier>*</modifier></type><name>log</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>slow_query_log_fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * a little helper macro to set the src-location that
     * we stepped out at to exit
     */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOTO_EXIT</name><parameter_list>(<parameter><type><name>status</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>exit_code = status; \
    exit_location = G_STRLOC; \
    goto exit_nicely;</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>int</name></type> <name>exit_code</name> <init>= <expr><name>EXIT_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>exit_location</name> <init>= <expr><name>G_STRLOC</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* init module, ... system */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>chassis_frontend_init_glib</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* start the logging ... to stderr */</comment>
    <expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>chassis_log_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* display messages while parsing or loading plugins */</comment>
    <expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>min_lvl</name></name> <operator>=</operator> <name>G_LOG_LEVEL_MESSAGE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_log_set_default_handler</name><argument_list>(<argument><expr><name>chassis_log_func</name></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* may fail on library mismatch */</comment>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>srv</name> <operator>=</operator> <call><name>chassis_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block">/* we need the log structure for the log-rotation */</comment>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <name>log</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>frontend</name> <operator>=</operator> <call><name>chassis_frontend_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>frontend</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" format="doxygen">/**
     * parse once to get the basic options like --default-file and --version
     *
     * leave the unknown options in the list
     */</comment>

    <if_stmt><if>if <condition>(<expr><call><name>chassis_frontend_init_base_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>print_version</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>default_file</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>gerr</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>print_version</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>print_version</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>default_file</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>keyfile</name></name> <operator>=</operator> <call><name>chassis_frontend_open_config_file</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: loading config from '%s' failed: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>, <argument><expr><name><name>gerr</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* print the main version number here, but don't exit
     * we check for print_version again, after loading the plugins (if any)
     * and print their version numbers, too. then we exit cleanly.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>print_version</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_frontend_print_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* add the other options which can also appear in the config file */</comment>
    <expr_stmt><expr><name>opts</name> <operator>=</operator> <call><name>chassis_options_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>ignore_unknown</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>opts</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_frontend_set_chassis_options</name><argument_list>(<argument><expr><name>frontend</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>FALSE</name> <operator>==</operator> <call><name>chassis_options_parse_cmdline</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>gerr</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>keyfile</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>FALSE</name> <operator>==</operator> <call><name>chassis_keyfile_to_options_with_error</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>keyfile</name></name></expr></argument>, <argument><expr><literal type="string">"cetus"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>gerr</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>remote_config_url</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>remote_config_url</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>remote_config_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name> <operator>=</operator> <call><name>chassis_config_from_url</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>remote_config_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"remote config init error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>chassis_config_parse_options</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"remote_config parse error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>chassis_frontend_init_basedir</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>frontend</name><operator>-&gt;</operator><name>base_dir</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SIGACTION</name></cpp:ifdef>
    <comment type="block">/* register the sigsegv interceptor */</comment>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sigsegv_sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sigsegv_sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sigsegv_sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>sigsegv_handler</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sigsegv_sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>invoke_dbg_on_crash</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>invoke_dbg_on_crash</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>invoke_dbg_on_crash</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>invoke_dbg_on_crash</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>RUNNING_ON_VALGRIND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigsegv_sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * some plugins cannot see the chassis struct from the point
     * where they open files, hence we must make it available
     */</comment>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>base_dir</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>base_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>plugin_dir</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_frontend_init_plugin_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frontend</name><operator>-&gt;</operator><name>plugin_dir</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>base_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frontend</name><operator>-&gt;</operator><name>conf_dir</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>conf_dir</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>resolve_path</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>frontend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>conf_dir</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>conf_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr>)</condition> <block>{<block_content> <comment type="block">/* if no remote-config-url, we use local config */</comment>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name> <operator>=</operator> <call><name>chassis_config_from_local_dir</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>conf_dir</name></name></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cetus_pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * start the logging
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>log_filename</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>log_filename</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>log_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>log</name><operator>-&gt;</operator><name>log_filename</name></name> <operator>&amp;&amp;</operator> <name>FALSE</name> <operator>==</operator> <call><name>chassis_log_open</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"can't open log-file '%s': %s"</literal></expr></argument>, <argument><expr><name><name>log</name><operator>-&gt;</operator><name>log_filename</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * handle log-level after the config-file is read,
     * just in case it is specified in the file
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>log_level</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>log_level</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>log_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* if it is not set, use "critical" as default */</comment>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>log_level</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"critical"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>chassis_log_set_level</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>log_level</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"--log-level=... failed, level '%s' is unknown "</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>log_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"starting "</literal> <name>PACKAGE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHASSIS_BUILD_TAG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"build revision: "</literal> <name>CHASSIS_BUILD_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"glib version: %d.%d.%d"</literal></expr></argument>, <argument><expr><name>GLIB_MAJOR_VERSION</name></expr></argument>, <argument><expr><name>GLIB_MINOR_VERSION</name></expr></argument>, <argument><expr><name>GLIB_MICRO_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"libevent version: %s"</literal></expr></argument>, <argument><expr><call><name>event_get_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"config dir: %s"</literal></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>conf_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>ssl</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>init_parameters</name><argument_list>(<argument><expr><name>frontend</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_init</name><argument_list>(<argument><expr><name>srv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_print</name><argument_list>(<argument><expr><literal type="string">"network_mysqld_init failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEFAULT_PLUGIN</name></cpp:ifdef>
        <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>DEFAULT_PLUGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"proxy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>chassis_frontend_load_plugins</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>modules</name></name></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_dir</name></name></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>plugin_names</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>srv</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>plugin_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>chassis_frontend_init_plugins</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>modules</name></name></expr></argument>,
                                      <argument><expr><name>opts</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>keyfile</name></name></expr></argument>, <argument><expr><literal type="string">"cetus"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>gerr</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* if we only print the version numbers, exit and don't do any more work */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>print_version</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_frontend_print_plugin_versions</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>modules</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* we know about the options now, lets parse them */</comment>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>ignore_unknown</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>help_enabled</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

    <comment type="block">/* handle unknown options */</comment>
    <if_stmt><if>if <condition>(<expr><name>FALSE</name> <operator>==</operator> <call><name>chassis_options_parse_cmdline</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>gerr</name><operator>-&gt;</operator><name>domain</name></name> <operator>==</operator> <name>G_OPTION_ERROR</name> <operator>&amp;&amp;</operator> <name><name>gerr</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>G_OPTION_ERROR_UNKNOWN_OPTION</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: %s (use --help to show all options)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>gerr</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: %s (code = %d, domain = %s)"</literal></expr></argument>,
                       <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>gerr</name><operator>-&gt;</operator><name>message</name></name></expr></argument>, <argument><expr><name><name>gerr</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><call><name>g_quark_to_string</name><argument_list>(<argument><expr><name><name>gerr</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* after parsing the options we should only have the program name left */</comment>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"unknown option: %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>daemon_mode</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>daemon_mode</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>daemon_mode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:daemon mode"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>chassis_unix_daemonize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>group_replication_mode</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>frontend</name><operator>-&gt;</operator><name>group_replication_mode</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"group-replication-mode is invalid, current value is %d"</literal></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>group_replication_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>group_replication_mode</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>group_replication_mode</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * log the versions of all loaded plugins
     */</comment>
    <expr_stmt><expr><call><name>chassis_frontend_log_plugin_versions</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>modules</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>verbose_shutdown</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>verbose_shutdown</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>is_reduce_conns</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>is_reduce_conns</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * we have to drop root privileges in chassis_mainloop() after
     * the plugins opened the ports, so we need the user there
     */</comment>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>check_plugin_mode_valid</name><argument_list>(<argument><expr><name>frontend</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>default_username</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"proxy needs default username"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frontend</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>frontend</name><operator>-&gt;</operator><name>log_xa_filename</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"logs/xa.log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>log_xa_filename</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_path</name> <init>= <expr><call><name>chassis_resolve_path</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>base_dir</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_path</name> <operator>&amp;&amp;</operator> <name>new_path</name> <operator>!=</operator> <name><name>srv</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>log_xa_filename</name></name> <operator>=</operator> <name>new_path</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"XA log file: %s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tc_log_init</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>log_xa_filename</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>slow_query_log_fp</name> <operator>=</operator> <call><name>init_slow_query_log</name><argument_list>(<argument><expr><name><name>log</name><operator>-&gt;</operator><name>log_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>slow_query_log_fp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"cannot open slow-query log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>max_files_number</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>max_files_number</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>max_files_number</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>chassis_fdlimit_set</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_files_number</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: setting fdlimit = %d failed: %s (%d)"</literal></expr></argument>,
                       <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>max_files_number</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"max open file-descriptors = %"</literal> <name>G_GINT64_FORMAT</name></expr></argument>, <argument><expr><call><name>chassis_fdlimit_get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_bufsize</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_bufsize</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>sql_log_bufsize</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_switch</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_switch</name></name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_switch</name></name></expr></argument>, <argument><expr><literal type="string">"REALTIME"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>=</operator> <name>REALTIME</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_switch</name></name></expr></argument>, <argument><expr><literal type="string">"OFF"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"sql-log-switch is invalid, current value is %s"</literal></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_switch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_prefix</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_prefix</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_path</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_path</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>base_dir</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_path</name></name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/logs"</literal></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>base_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_maxsize</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_maxsize</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>sql_log_maxsize</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_mode</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_mode</name></name></expr></argument>, <argument><expr><literal type="string">"CLIENT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>=</operator> <name>CLIENT</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_mode</name></name></expr></argument>, <argument><expr><literal type="string">"BACKEND"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>=</operator> <name>BACKEND</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_mode</name></name></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>=</operator> <name>ALL</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_mode</name></name></expr></argument>, <argument><expr><literal type="string">"CONNECT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>=</operator> <name>CONNECT</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_mode</name></name></expr></argument>, <argument><expr><literal type="string">"FRONT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>=</operator> <name>FRONT</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"sql-log-mode is invalid, current value is %s"</literal></expr></argument>, <argument><expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_idletime</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_idletime</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>sql_log_idletime</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>frontend</name><operator>-&gt;</operator><name>sql_log_maxnum</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_maxnum</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>sql_log_maxnum</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>check_dns</name></name> <operator>=</operator> <name><name>frontend</name><operator>-&gt;</operator><name>check_dns</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>chassis_mainloop</name><argument_list>(<argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* looks like we failed */</comment>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: Failure from chassis_mainloop. Shutting down."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GOTO_EXIT</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <label><name>exit_nicely</name>:</label>
    <comment type="block">/* necessary to set the shutdown flag, because the monitor will continue
     * to schedule timers otherwise, causing an infinite loop in cleanup
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>exit_code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>exit_location</name> <operator>=</operator> <name>G_STRLOC</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>mallinfo</name></name></type> <name>m</name> <init>= <expr><call><name>mallinfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Total allocated space (bytes): %d"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>uordblks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Total free space (bytes): %d"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>fordblks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Top-most, releasable space (bytes): %d"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>keepcost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_set_shutdown_location</name><argument_list>(<argument><expr><name>exit_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>frontend</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>frontend</name><operator>-&gt;</operator><name>print_version</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* add a tag to the logfile */</comment>
        <expr_stmt><expr><call><name>g_log</name><argument_list>(<argument><expr><name>G_LOG_DOMAIN</name></expr></argument>,
              <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>srv</name> <operator>&amp;&amp;</operator> <name><name>srv</name><operator>-&gt;</operator><name>verbose_shutdown</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>G_LOG_LEVEL_CRITICAL</name></expr> </then><else>: <expr><name>G_LOG_LEVEL_MESSAGE</name></expr></else></ternary><operator>)</operator></expr></argument>,
              <argument><expr><literal type="string">"shutting down normally, exit code is: %d"</literal></expr></argument>, <argument><expr><name>exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SIGACTION</name></cpp:ifdef>
    <comment type="block">/* reset the handler */</comment>
    <expr_stmt><expr><name><name>sigsegv_sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_DFL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>frontend</name> <operator>&amp;&amp;</operator> <name><name>srv</name><operator>-&gt;</operator><name>invoke_dbg_on_crash</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>RUNNING_ON_VALGRIND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigsegv_sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>release_resouces_when_exit</name><argument_list>(<argument><expr><name>frontend</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>, <argument><expr><name>gerr</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>slow_query_log_fp</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>slow_query_log_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>exit_code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>main_cmdline</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
