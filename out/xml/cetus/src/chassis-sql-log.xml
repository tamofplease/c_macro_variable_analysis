<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/chassis-sql-log.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-sql-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>COM_STRING</name></type> <name><name>com_command_name</name><index>[]</index></name><init>=<expr><block>{
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Sleep"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Quit"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Init DB"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Query"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Field List"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Create DB"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Drop DB"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Refresh"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Shutdown"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Statistics"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Processlist"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Connect"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Kill"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Debug"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Ping"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Time"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Delayed insert"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Change user"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Binlog Dump"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Table Dump"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Connect Out"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Register Slave"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Prepare"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Execute"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Long Data"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Close stmt"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Reset stmt"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Set option"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Fetch"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Daemon"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Binlog Dump GTID"</literal></argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <macro><name>C</name><argument_list>(<argument><literal type="string">"Error"</literal></argument>)</argument_list></macro> }</block></expr>  <comment type="line">// Last command number</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>com_dis_tras_state</name><index>[]</index></name><init>=<expr><block>{
    <expr><literal type="string">"UNKNOWN"</literal></expr>,
    <expr><literal type="string">"NEXT_ST_XA_START"</literal></expr>,
    <expr><literal type="string">"NEXT_ST_XA_QUERY"</literal></expr>,
    <expr><literal type="string">"NEXT_ST_XA_END"</literal></expr>,
    <expr><literal type="string">"NEXT_ST_XA_PREPARE"</literal></expr>,
    <expr><literal type="string">"NEXT_ST_XA_COMMIT"</literal></expr>,
    <expr><literal type="string">"NEXT_ST_XA_ROLLBACK"</literal></expr>,
    <expr><literal type="string">"NEXT_ST_XA_CANDIDATE_OVER"</literal></expr>,
    <expr><literal type="string">"NEXT_ST_XA_OVER"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>guint</name></type> <name>roundup_pow_of_two</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>guint</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1U</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>x</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_current_time_str</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"str is NULL when call get_current_time_str()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTimeVal</name></type> <name>tv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>  <name>t</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_get_current_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>allocated_len</name></name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">".%.3d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>rfifo</name></name> <modifier>*</modifier></type><name>rfifo_alloc</name><parameter_list>(<parameter><decl><type><name>guint</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>rfifo</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><operator>(</operator>struct <name>rfifo</name> <operator>*</operator><operator>)</operator><call><name>g_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rfifo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>roundup_pow_of_two</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>g_malloc0</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ret</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>in</name></name> <operator>=</operator> <name><name>ret</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rfifo_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rfifo</name></name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fifo</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>fifo</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>guint</name></type> <name>rfifo_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rfifo</name></name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>guchar</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fifo</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"struct fifo is NULL when call rfifo_write()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>guint</name></type> <name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>fifo</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <name><name>fifo</name><operator>-&gt;</operator><name>out</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>fifo</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>in</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fifo</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>in</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//g_strlcpy</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fifo</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>l</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>in</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>guint</name></type> <name>rfifo_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mgr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"struct mgr is NULL when call rfifo_flush()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>rfifo</name></name> <modifier>*</modifier></type><name>fifo</name> <init>= <expr><name><name>mgr</name><operator>-&gt;</operator><name>fifo</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fifo</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"struct fifo is NULL when call rfifo_flush()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fp</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"sql_log_fp is NULL when call rfifo_flush()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>guint</name></type> <name>len</name> <init>= <expr><name><name>fifo</name><operator>-&gt;</operator><name>in</name></name> <operator>-</operator> <name><name>fifo</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint</name></type> <name>l</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>fifo</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>out</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>fd</name> <init>= <expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint</name></type> <name>s1</name> <init>= <expr><call><name>pwrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fifo</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>out</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,
            <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_cursize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_cursize</name></name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>out</name></name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>guint</name></type> <name>s2</name> <init>= <expr><call><name>pwrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fifo</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_cursize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_cursize</name></name> <operator>+=</operator> <name>s2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>out</name></name> <operator>+=</operator> <name>s2</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>REALTIME</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fsync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>s1</name> <operator>+</operator> <name>s2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>sql_log_alloc</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>mgr</name> <init>= <expr><operator>(</operator>struct <name>sql_log_mgr</name> <operator>*</operator><operator>)</operator><call><name>g_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sql_log_mgr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>mgr</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator>struct <name>sql_log_mgr</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_prefix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_bufsize</name></name> <operator>=</operator> <name>SQL_LOG_BUFFER_DEF_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>=</operator> <name>BACKEND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_cursize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_maxsize</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fullname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_idletime</name></name> <operator>=</operator> <name>SQL_LOG_DEF_IDLETIME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>=</operator> <name>SQL_LOG_STOP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_filelist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_maxnum</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <return>return <expr><name>mgr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_queue_manually</name><parameter_list>(<parameter><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>GDestroyNotify</name></type> <name>free_func</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>queue</name> <operator>||</operator> <operator>!</operator><name>free_func</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>num</name> <init>= <expr><call><name>g_queue_get_length</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>num</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><operator>(</operator><name>gchar</name> <operator>*</operator><operator>)</operator><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>free_func</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>num</name> <operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>g_queue_free</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sql_log_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mgr</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rfifo_free</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>free_queue_manually</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_filelist</name></name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_filelist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sql_log_check_filenum</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mgr</name> <operator>||</operator> <operator>!</operator><name>filename</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"struct mgr or filename is NULL when call sql_log_check_filenum()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_maxnum</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_filelist</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_filelist</name></name> <operator>=</operator> <call><name>g_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><call><name>g_queue_find_custom</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_filelist</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>(</operator><name>GCompareFunc</name><operator>)</operator><name>strcmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"file %s is exist"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_filelist</name></name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>gint</name></type> <name>num</name> <init>= <expr><call><name>g_queue_get_length</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_filelist</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>mgr</name><operator>-&gt;</operator><name>sql_log_maxnum</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><operator>(</operator><name>gchar</name> <operator>*</operator><operator>)</operator><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_filelist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"rm log file %s failed"</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"rm log file %s success"</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>num</name> <operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return ;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sql_log_check_rotate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mgr</name></expr>)</condition><block type="pseudo"><block_content> <return>return ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_maxsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_cursize</name></name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>gulong</name><operator>)</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_maxsize</name></name><operator>)</operator> <operator>*</operator> <name>MEGABYTES</name></expr>)</condition><block type="pseudo"><block_content> <return>return ;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>cur_tm</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>rotate_filename</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/%s-%d-%04d%02d%02d%02d%02d%02d.%s"</literal></expr></argument>,
            <argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_path</name></name></expr></argument>, <argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_prefix</name></name></expr></argument>, <argument><expr><name>cetus_pid</name></expr></argument>,
            <argument><expr><name><name>cur_tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>cur_tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cur_tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>cur_tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>,
            <argument><expr><name><name>cur_tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>cur_tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><name>SQL_LOG_DEF_SUFFIX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rotate_filename</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"can not get the rotate filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return ;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fp</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fullname</name></name></expr></argument>, <argument><expr><name>rotate_filename</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"rename log file name to %s failed"</literal></expr></argument>, <argument><expr><name>rotate_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sql_log_check_filenum</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>, <argument><expr><name>rotate_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>rotate_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_cursize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fp</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fullname</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fp</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"rotate error, because fopen(%s) failed"</literal></expr></argument>, <argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

 <function><type><name>gpointer</name></type> <name>sql_log_mainloop</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>mgr</name> <init>= <expr><operator>(</operator>struct <name>sql_log_mgr</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fp</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fullname</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fp</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"sql log thread exit, because fopen(%s) failed"</literal></expr></argument>, <argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>=</operator> <name>SQL_LOG_STOP</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>rst</name> <init>= <expr><call><name>fstat</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rst</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"fstat() failed in sql_log_mainloop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_cursize</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"sql log thread started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>=</operator> <name>SQL_LOG_START</name></expr>;</expr_stmt>

    <while>while<condition>(<expr><operator>!</operator><call><name>chassis_is_shutdown</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>guint</name></type> <name>len</name> <init>= <expr><call><name>rfifo_flush</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_idletime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>sql_log_check_rotate</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>!=</operator> <name>SQL_LOG_START</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>sql_log_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
<label><name>sql_log_exit</name>:</label>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"sql log thread stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_cursize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>=</operator> <name>SQL_LOG_STOP</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_log_thread_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mgr</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>sql_log_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GLIB_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">32</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sql_log_thread</name> <operator>=</operator> <call><name>g_thread_create</name><argument_list>(<argument><expr><name>sql_log_mainloop</name></expr></argument>, <argument><expr><name>mgr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sql_log_thread</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Create sql log thread error: %s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>sql_log_thread</name> <operator>=</operator> <call><name>g_thread_new</name><argument_list>(<argument><expr><literal type="string">"sql_log-thread"</literal></expr></argument>, <argument><expr><name>sql_log_mainloop</name></expr></argument>, <argument><expr><name>mgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sql_log_thread</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Create sql log thread error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <name>sql_log_thread</name></expr>;</expr_stmt>
</block_content>}</block></function>

 <function><type><name>void</name></type>
 <name>cetus_sql_log_start_thread_once</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>)</parameter_list>
 <block>{<block_content>

     <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mgr</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"sql_mgr is null!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_bufsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_bufsize</name></name> <operator>=</operator> <name>SQL_LOG_BUFFER_DEF_SIZE</name></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_prefix</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_prefix</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>SQL_LOG_DEF_FILE_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_path</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>SQL_LOG_DEF_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
     <decl_stmt><decl><type><name>gint</name></type> <name>result</name> <init>= <expr><call><name>mkdir</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_path</name></name></expr></argument>, <argument><expr><literal type="number">0770</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"sql log path maybe exist, try to mkdir failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if> <else>else <block>{<block_content>
         <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"sql log path is not exist, try to mkdir success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fullname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_fullname</name></name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/%s-%d.%s"</literal></expr></argument>,
                 <argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_path</name></name></expr></argument>, <argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_prefix</name></name></expr></argument>, <argument><expr><name>cetus_pid</name></expr></argument>, <argument><expr><name>SQL_LOG_DEF_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
     <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <call><name>rfifo_alloc</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_filelist</name></name> <operator>=</operator> <call><name>g_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

     <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>OFF</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"sql thread is not start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <expr_stmt><expr><call><name>sql_log_thread_start</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></function>

<function><type><name>void</name></type>
<name>log_sql_client</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>con</name> <operator>||</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"con or con-&gt;srv is NULL when call log_sql_client()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>mgr</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mgr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"sql mgr is NULL when call log_sql_client()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>OFF</name> <operator>||</operator>
        <operator>!</operator><operator>(</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>&amp;</operator> <name>CLIENT</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>!=</operator> <name>SQL_LOG_START</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"2004-01-01T00:00:00.000Z"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>get_current_time_str</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">": #client# C_ip:%s C_db:%s C_usr:%s C_tx:%s C_retry:%d C_id:%u type:%s %s\n"</literal></expr></argument>,
                                             <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_ip</comment>
                                             <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_db</comment>
                                             <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_usr</comment>
                                             <argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr></then><else>:<expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,<comment type="line">//C_tx</comment>
                                             <argument><expr><name><name>con</name><operator>-&gt;</operator><name>retry_serv_cnt</name></name></expr></argument>,<comment type="line">//C_retry</comment>
                                             <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,<comment type="line">//C_id</comment>
                                             <argument><expr><call><name>GET_COM_NAME</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></argument>)</argument_list></call></expr></argument>,<comment type="line">//type</comment>
                                             <argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//sql</comment>

    <expr_stmt><expr><call><name>rfifo_write</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

 <function><type><name>void</name></type>
<name>log_sql_backend</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>injection</name> <modifier>*</modifier></type><name>inj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><name>con</name> <operator>||</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name></name> <operator>||</operator> <operator>!</operator><name>inj</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"con or con-&gt;srv or inj is NULL when call log_sql_backend()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <decl_stmt><decl><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>mgr</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mgr</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"sql mgr is NULL when call log_sql_backend()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>OFF</name> <operator>||</operator>
         <operator>!</operator><operator>(</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>&amp;</operator> <name>BACKEND</name><operator>)</operator> <operator>||</operator>
         <operator>(</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>!=</operator> <name>SQL_LOG_START</name><operator>)</operator></expr>)</condition> <block>{<block_content>
         <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <decl_stmt><decl><type><name>gdouble</name></type> <name>latency_ms</name> <init>= <expr><operator>(</operator><name><name>inj</name><operator>-&gt;</operator><name>ts_read_query_result_last</name></name> <operator>-</operator> <name><name>inj</name><operator>-&gt;</operator><name>ts_read_query</name></name><operator>)</operator><operator>/</operator><literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"2004-01-01T00:00:00.000Z"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>get_current_time_str</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">": #backend-rw# C_ip:%s C_db:%s C_usr:%s C_tx:%s C_id:%u S_ip:%s S_db:%s S_usr:%s S_id:%u "</literal>
                                              <literal type="string">"inj(type:%d bytes:%lu rows:%lu) latency:%.3lf(ms) %s type:%s %s\n"</literal></expr></argument>,
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_ip</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_db</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_usr</comment>
                                              <argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr></then><else>:<expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,<comment type="line">//C_tx</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,<comment type="line">//C_id</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//S_ip</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//S_db</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//S_usr</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,<comment type="line">//S_id</comment>
                                              <argument><expr><name><name>inj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>inj</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>inj</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>,
                                              <argument><expr><name>latency_ms</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>inj</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>query_status</name></name> <operator>==</operator> <name>MYSQLD_PACKET_OK</name></expr> ?</condition><then> <expr><literal type="string">"OK"</literal></expr> </then><else>: <expr><literal type="string">"ERR"</literal></expr></else></ternary></expr></argument>,
                                              <argument><expr><call><name>GET_COM_NAME</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></argument>)</argument_list></call></expr></argument>,<comment type="line">//type</comment>
                                              <argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>==</operator> <name>COM_STMT_EXECUTE</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>inj</name><operator>-&gt;</operator><name>query</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>GET_COM_STRING</name><argument_list>(<argument><expr><name><name>inj</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//sql</comment>

     <expr_stmt><expr><call><name>rfifo_write</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>log_sql_backend_sharding</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>)</parameter_list>
<block>{<block_content>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><name>con</name> <operator>||</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name></name> <operator>||</operator> <operator>!</operator><name>session</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"con or con-&gt;srv or session is NULL when call log_sql_backend_sharding()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <decl_stmt><decl><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>mgr</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mgr</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"sql mgr is NULL when call log_sql_backend_sharding()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>OFF</name> <operator>||</operator>
         <operator>!</operator><operator>(</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>&amp;</operator> <name>BACKEND</name><operator>)</operator> <operator>||</operator>
         <operator>(</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>!=</operator> <name>SQL_LOG_START</name><operator>)</operator></expr>)</condition> <block>{<block_content>
         <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <decl_stmt><decl><type><name>gdouble</name></type> <name>latency_ms</name> <init>= <expr><operator>(</operator><name><name>session</name><operator>-&gt;</operator><name>ts_read_query_result_last</name></name> <operator>-</operator> <name><name>session</name><operator>-&gt;</operator><name>ts_read_query</name></name><operator>)</operator><operator>/</operator><literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"2004-01-01T00:00:00.000Z"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>get_current_time_str</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>gint</name></type> <name>xa_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>session</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>xa_state</name> <operator>=</operator> <name><name>session</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">": #backend-sharding# C_ip:%s C_db:%s C_usr:%s C_tx:%s C_id:%u "</literal>
                                             <literal type="string">"trans(in_xa:%s xa_state:%s) attr_adj_state:%d\n"</literal></expr></argument>,
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_ip</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_db</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_usr</comment>
                                              <argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr></then><else>:<expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,<comment type="line">//C_tx</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,<comment type="line">//C_id</comment>
                                              <argument><expr><ternary><condition><expr><name><name>session</name><operator>-&gt;</operator><name>is_in_xa</name></name> <operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>com_dis_tras_state</name><index>[<expr><name>xa_state</name></expr>]</index></name></expr></argument>,
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>
                                              )</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if> <else>else <block>{<block_content>
         <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">": #backend-sharding# C_ip:%s C_db:%s C_usr:%s C_tx:%s C_id:%u S_ip:%s S_db:%s S_usr:%s S_id:%u "</literal>
                                              <literal type="string">"trans(in_xa:%s xa_state:%s) latency:%.3lf(ms) %s type:%s %s\n"</literal></expr></argument>,
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_ip</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_db</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_usr</comment>
                                              <argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr></then><else>:<expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,<comment type="line">//C_tx</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,<comment type="line">//C_id</comment>
                                              <argument><expr><name><name>session</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//S_ip</comment>
                                              <argument><expr><name><name>session</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//S_db</comment>
                                              <argument><expr><name><name>session</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//S_usr</comment>
                                              <argument><expr><name><name>session</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,<comment type="line">//S_id</comment>
                                              <argument><expr><ternary><condition><expr><name><name>session</name><operator>-&gt;</operator><name>is_in_xa</name></name> <operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>com_dis_tras_state</name><index>[<expr><name>xa_state</name></expr>]</index></name></expr></argument>,
                                              <argument><expr><name>latency_ms</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>session</name><operator>-&gt;</operator><name>query_status</name></name> <operator>==</operator> <name>MYSQLD_PACKET_OK</name></expr> ?</condition><then> <expr><literal type="string">"OK"</literal></expr> </then><else>: <expr><literal type="string">"ERR"</literal></expr></else></ternary></expr></argument>,
                                              <argument><expr><call><name>GET_COM_NAME</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></argument>)</argument_list></call></expr></argument>,<comment type="line">//type</comment>
                                              <argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>==</operator> <name>COM_STMT_EXECUTE</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>session</name><operator>-&gt;</operator><name>sql</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>session</name><operator>-&gt;</operator><name>sql</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//sql</comment>
     </block_content>}</block></else></if_stmt>
     <expr_stmt><expr><call><name>rfifo_write</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

 <function><type><name>void</name></type>
 <name>log_sql_connect</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
 <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><name>con</name> <operator>||</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"con or con-&gt;srv is NULL when call log_sql_connect()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <decl_stmt><decl><type><name><name>struct</name> <name>sql_log_mgr</name></name> <modifier>*</modifier></type><name>mgr</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mgr</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"sql mgr is NULL when call log_sql_connect()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>OFF</name> <operator>||</operator>
         <operator>!</operator><operator>(</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_mode</name></name> <operator>&amp;</operator> <name>CONNECT</name><operator>)</operator> <operator>||</operator>
         <operator>(</operator><name><name>mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>!=</operator> <name>SQL_LOG_START</name><operator>)</operator></expr>)</condition> <block>{<block_content>
         <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"2004-01-01T00:00:00.000Z"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>get_current_time_str</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">": #connect# %s@%s Connect Cetus %s msg:%s, C_id:%u C_db:%s C_charset:%u C_auth_plugin:%s C_ssl:%s C_cap:%x S_cap:%x\n"</literal></expr></argument>,
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_usr</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_ip</comment>
                                              <argument><expr><ternary><condition><expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"success"</literal></expr> </then><else>: <expr><literal type="string">"failed"</literal></expr></else></ternary></expr></argument>,
                                              <argument><expr><ternary><condition><expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr></then><else>: <expr><name>errmsg</name></expr></else></ternary></expr></argument>,
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>,<comment type="line">//C_id</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<comment type="line">//C_db</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>,<comment type="line">//C_charset</comment>
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>auth_plugin_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,
                                              <argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>ssl_request</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>client_capabilities</name></name></expr></argument>,
                                              <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>server_capabilities</name></name></expr></argument>
                                              )</argument_list></call></expr>;</expr_stmt>

     <expr_stmt><expr><call><name>rfifo_write</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></function>
</unit>
