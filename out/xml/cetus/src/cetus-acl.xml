<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/cetus-acl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<function><type><name>cetus_acl_t</name><modifier>*</modifier></type> <name>cetus_acl_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cetus_acl_t</name><modifier>*</modifier></type> <name>acl</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>cetus_acl_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>acl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>acl_entry_free</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>cetus_acl_entry_t</name></name><modifier>*</modifier></type> <name>e</name> <init>= <expr><name>entry</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cetus_acl_free</name><parameter_list>(<parameter><decl><type><name>cetus_acl_t</name><modifier>*</modifier></type> <name>acl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>whitelist</name></name></expr></argument>, <argument><expr><name>acl_entry_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GList</name><modifier>*</modifier></type> <name>acl_add_to_list</name><parameter_list>(<parameter><decl><type><name>GList</name><modifier>*</modifier></type> <name>entries</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>gboolean</name><modifier>*</modifier></type> <name>ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>l</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>entries</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>cetus_acl_entry_t</name></name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
            <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">"adding duplicate entry to acl, neglected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
            <return>return <expr><name>entries</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name><name>struct</name> <name>cetus_acl_entry_t</name></name><modifier>*</modifier></type> <name>ent</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>cetus_acl_entry_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    <return>return <expr><call><name>g_list_append</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_WILDCARD</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(X[0] == '*' || X[0] == '%')</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
 * user can be wildcard
 */</comment>
<function><type><specifier>static</specifier> <name>GList</name><modifier>*</modifier></type> <name>acl_delete_from_list</name><parameter_list>(<parameter><decl><type><name>GList</name><modifier>*</modifier></type> <name>entries</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>l</name> <init>= <expr><name>entries</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>cetus_acl_entry_t</name></name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><call><name>g_list_next</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
            <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IS_WILDCARD</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>acl_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>g_list_delete_link</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>l</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>entries</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>is_ip_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>host_ip</name> <init>= <expr><operator>(</operator><name>gchar</name> <operator>*</operator><operator>)</operator><name>ip</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>wildcard_pos</name> <init>= <expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>host_ip</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>host_ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>cmp_size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>host_ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>wildcard_pos</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cmp_size</name> <operator>=</operator> <operator>(</operator><name>gint</name><operator>)</operator><operator>(</operator><name>wildcard_pos</name> <operator>-</operator> <name>host_ip</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>host_ip</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>dot_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>i</name><operator>&lt;</operator><name>cmp_size</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dot_num</name> <operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>dot_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>gint</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>gint</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>gchar</name></type> <name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>acl_ip_contains</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>cip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>hip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>client_ip</name> <init>= <expr><operator>(</operator><name>gchar</name> <operator>*</operator><operator>)</operator><name>cip</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>host_ip</name> <init>= <expr><operator>(</operator><name>gchar</name> <operator>*</operator><operator>)</operator><name>hip</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name>host_ip</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>wildcard_pos</name> <init>= <expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>host_ip</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>host_ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>cmp_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>wildcard_pos</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cmp_size</name> <operator>=</operator> <operator>(</operator><name>gint</name><operator>)</operator><operator>(</operator><name>wildcard_pos</name> <operator>-</operator> <name>host_ip</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>cmp_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>host_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>cmp_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gboolean</name></type> <name>ret</name> <init>= <expr><operator>(</operator><call><name>g_ascii_strncasecmp</name><argument_list>(<argument><expr><name>client_ip</name></expr></argument>, <argument><expr><name>host_ip</name></expr></argument>, <argument><expr><name>cmp_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>acl_list_contains</name><parameter_list>(<parameter><decl><type><name>GList</name><modifier>*</modifier></type> <name>entries</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>l</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>entries</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>cetus_acl_entry_t</name></name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>acl_ip_contains</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>IS_WILDCARD</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>cetus_acl_add_rule</name><parameter_list>(<parameter><decl><type><name>cetus_acl_t</name><modifier>*</modifier></type> <name>acl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cetus_acl_category</name></name></type> <name>cate</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cate</name> <operator>==</operator> <name>ACL_WHITELIST</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>whitelist</name></name> <operator>=</operator> <call><name>acl_add_to_list</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>whitelist</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>blacklist</name></name> <operator>=</operator> <call><name>acl_add_to_list</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>blacklist</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>cetus_acl_add_rule_str</name><parameter_list>(<parameter><decl><type><name>cetus_acl_t</name><modifier>*</modifier></type> <name>acl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cetus_acl_category</name></name></type> <name>cate</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>the_rule</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>rule</name> <init>= <expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>the_rule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>user</name> <init>= <expr><literal type="string">"*"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>host</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>rule</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition> <block>{<block_content> <comment type="block">/* user@xx.xx.xx.xx style */</comment>
        <expr_stmt><expr><operator>*</operator><name>host</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>host</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>user</name> <operator>=</operator> <name>rule</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* xx.xx.xx.xx host only style */</comment>
        <expr_stmt><expr><name>host</name> <operator>=</operator> <name>rule</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_ip_address</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">"host name not ip address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><call><name>cetus_acl_add_rule</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>cate</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>cetus_acl_delete_rule</name><parameter_list>(<parameter><decl><type><name>cetus_acl_t</name><modifier>*</modifier></type> <name>acl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cetus_acl_category</name></name></type> <name>cate</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cate</name> <operator>==</operator> <name>ACL_WHITELIST</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>whitelist</name></name> <operator>=</operator> <call><name>acl_delete_from_list</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>whitelist</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>blacklist</name></name> <operator>=</operator> <call><name>acl_delete_from_list</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>blacklist</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>cetus_acl_delete_rule_str</name><parameter_list>(<parameter><decl><type><name>cetus_acl_t</name><modifier>*</modifier></type> <name>acl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cetus_acl_category</name></name></type> <name>cate</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>the_rule</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>rule</name> <init>= <expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>the_rule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>user</name> <init>= <expr><literal type="string">"*"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>host</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>rule</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition> <block>{<block_content> <comment type="block">/* user@xx.xx.xx.xx style */</comment>
        <expr_stmt><expr><operator>*</operator><name>host</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>host</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>user</name> <operator>=</operator> <name>rule</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* xx.xx.xx.xx host only style */</comment>
        <expr_stmt><expr><name>host</name> <operator>=</operator> <name>rule</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_ip_address</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">"host name not ip address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><call><name>cetus_acl_delete_rule</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>cate</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>cetus_acl_verify</name><parameter_list>(<parameter><decl><type><name>cetus_acl_t</name><modifier>*</modifier></type> <name>acl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>whitelist</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>acl</name><operator>-&gt;</operator><name>blacklist</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return> <comment type="block">/* acl is empty, every ip is ok to pass */</comment>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>whitelist</name></name> <operator>&amp;&amp;</operator> <call><name>acl_list_contains</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>whitelist</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>blacklist</name></name> <operator>&amp;&amp;</operator> <call><name>acl_list_contains</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>blacklist</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>whitelist</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>acl</name><operator>-&gt;</operator><name>blacklist</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>cetus_acl_add_rules</name><parameter_list>(<parameter><decl><type><name>cetus_acl_t</name><modifier>*</modifier></type> <name>acl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cetus_acl_category</name></name></type> <name>cate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>rules</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rules</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ip_arr</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>rules</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ip_arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><call><name>cetus_acl_add_rule_str</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>cate</name></expr></argument>, <argument><expr><name><name>ip_arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>ip_arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

</unit>
