<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/network-socket.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_GNU_SOURCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>            <comment type="block">/* writev */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_TYPES_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_FILIO_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/filio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include> <comment type="block" format="doxygen">/** inet_ntoa */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/version.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/filter.h&gt;</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_WRITEV</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_BUFFERED_NETIO</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_BUFFERED_NETIO</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_CONNRESET</name></cpp:macro> <cpp:value>ECONNRESET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_CONNABORTED</name></cpp:macro> <cpp:value>ECONNABORTED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_INPROGRESS</name></cpp:macro> <cpp:value>EINPROGRESS</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EWOULDBLOCK</name> <operator>==</operator> <name>EAGAIN</name></expr></cpp:if>
<comment type="block" format="doxygen">/**
 * some system make EAGAIN == EWOULDBLOCK which would lead to a 
 * error in the case handling
 *
 * set it to -1 as this error should never happen
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_WOULDBLOCK</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_WOULDBLOCK</name></cpp:macro> <cpp:value>EWOULDBLOCK</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-ssl.h"</cpp:file></cpp:include>

<function><type><name>network_socket</name> <modifier>*</modifier></type>
<name>network_socket_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_socket</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>=</operator> <call><name>network_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>send_queue_compressed</name></name> <operator>=</operator> <call><name>network_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_queue</name></name> <operator>=</operator> <call><name>network_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_queue_raw</name></name> <operator>=</operator> <call><name>network_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_queue_uncompress_raw</name></name> <operator>=</operator> <call><name>network_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_queue_decrypted_raw</name></name> <operator>=</operator> <call><name>network_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>default_db</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>charset</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>charset_client</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>charset_connection</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>charset_results</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sql_mode</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>socket_type</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>   <comment type="block">/* let's default to TCP */</comment>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_id_is_reset</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>network_address_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>network_address_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>create_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>create_time</name></name></expr>;</expr_stmt>

    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_socket_send_quit_and_free</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>new_packet</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>new_packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_len</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>new_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_socket_write</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_socket_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_socket_free</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_compressed_packet</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_compressed_packet</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_compressed_packet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>network_queue_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_queue_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>send_queue_compressed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_queue_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_queue_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>recv_queue_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_queue_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>recv_queue_uncompress_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_queue_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>recv_queue_decrypted_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>response</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>network_mysqld_auth_response_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>challenge</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>network_mysqld_auth_challenge_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>challenge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>network_address_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_address_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>ev_base</name></name></expr>)</condition> <block>{<block_content>     <comment type="block">/* if .ev_base isn't set, the event never got added */</comment>
        <expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL</name></cpp:ifdef>
    <expr_stmt><expr><call><name>network_ssl_free_connection</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>charset_client</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>charset_connection</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>charset_results</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sql_mode</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * portable 'set non-blocking io'
 *
 * @param sock    a socket
 * @return        NETWORK_SOCKET_SUCCESS on success, NETWORK_SOCKET_ERROR on error
 */</comment>
<function><type><name>network_socket_retval_t</name></type>
<name>network_socket_set_non_blocking</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name> <operator>|</operator> <name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: set_non_blocking() failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_socket_retval_t</name></type>
<name>network_socket_set_send_buffer_size</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: setsockopt SO_SNDBUF failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * accept a connection
 *
 * event handler for listening connections
 *
 * @param srv    a listening socket 
 * 
 */</comment>
<function><type><name>network_socket</name> <modifier>*</modifier></type>
<name>network_socket_accept</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* accept() only works on stream sockets */</comment>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>socket_type</name></name> <operator>==</operator> <name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>network_socket_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LINUX_VERSION_CODE</name> <operator>&gt;=</operator> <call><name>KERNEL_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">6</literal><operator>,</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call accept4"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>accept4</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr></argument>, <argument><expr><name>SOCK_NONBLOCK</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>reason</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_socket_free</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>reason</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_socket_free</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>network_socket_set_non_blocking</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><call><name>network_address_refresh_name</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_socket_free</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 
     * the listening side may be INADDR_ANY, 
     * let's get which address the client really connected to
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>getsockname</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_address_reset</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>network_address_refresh_name</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_address_reset</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>client</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>network_socket_retval_t</name></type>
<name>network_socket_connect_setopts</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**
     * set the same options as the mysql client 
     */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IP_TOS</name></cpp:ifdef>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_TOS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: setsockopt IP_TOS failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: setsockopt TCP_NODELAY failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: setsockopt SO_KEEPALIVE failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPIDLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: setsockopt TCP_KEEPIDLE failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPINTVL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: setsockopt TCP_KEEPINTVL failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPCNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: setsockopt TCP_KEEPCNT failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 
     * the listening side may be INADDR_ANY, 
     * let's get which address the client really connected to 
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>getsockname</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sock</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: getsockname() failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_address_reset</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>network_address_refresh_name</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: network_address_refresh_name() failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_address_reset</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * finish the non-blocking connect()
 *
 * sets 'errno' as if connect() would have failed
 *
 */</comment>
<function><type><name>network_socket_retval_t</name></type>
<name>network_socket_connect_finish</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>so_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socklen_t</name></type> <name>so_error_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>so_error</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * we might get called a 2nd time after a connect() == EINPROGRESS
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>so_error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>so_error_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* getsockopt failed */</comment>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: getsockopt(%s) failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>so_error</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><call><name>network_socket_connect_setopts</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    <default>default:</default>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>so_error</name></expr>;</expr_stmt>

        <return>return <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * connect a socket
 *
 * the sock-&gt;addr has to be set before 
 * 
 * @param sock    a socket 
 * @return        NETWORK_SOCKET_SUCCESS on connected, 
 *                NETWORK_SOCKET_ERROR on error, 
 *                NETWORK_SOCKET_ERROR_RETRY for try again
 * @see network_address_set_address()
 */</comment>
<function><type><name>network_socket_retval_t</name></type>
<name>network_socket_connect</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* our _new() allocated it already */</comment>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>NETWORK_SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* we want to use the -&gt;name in the error-msgs */</comment>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>NETWORK_SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* we already have a valid fd, we don't want to leak it */</comment>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>NETWORK_SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>socket_type</name></name> <operator>==</operator> <name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>NETWORK_SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * create a socket for the requested address
     *
     * if the dst-&gt;addr isn't set yet, socket() will fail with unsupported type
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>socket_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: socket(%s) failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" format="doxygen">/**
     * make the connect() call non-blocking
     *
     */</comment>
    <expr_stmt><expr><call><name>network_socket_set_non_blocking</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>connect</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block" format="doxygen">/**
         * in most TCP cases we connect() will return with 
         * EINPROGRESS ... 3-way handshake
         */</comment>
        <switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>E_NET_INPROGRESS</name></expr>:</case>
        <case>case <expr><name>E_NET_WOULDBLOCK</name></expr>:</case>
            <return>return <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>;</return>
        <default>default:</default>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: connect(%s) failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>network_socket_connect_setopts</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_REUSEPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BPF_ENABLED</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>attach_bpf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sock_filter</name></name></type> <name><name>code</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* A = raw_smp_processor_id() */</comment>
        <expr><block>{ <expr><name>BPF_LD</name>  <operator>|</operator> <name>BPF_W</name> <operator>|</operator> <name>BPF_ABS</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SKF_AD_OFF</name> <operator>+</operator> <name>SKF_AD_CPU</name></expr> }</block></expr>,
        <comment type="block">/* return A */</comment>
        <expr><block>{ <expr><name>BPF_RET</name> <operator>|</operator> <name>BPF_A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sock_fprog</name></name></type> <name>p</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>,
        <expr><operator>.</operator><name>filter</name> <operator>=</operator> <name>code</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ATTACH_REUSEPORT_CBPF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:failed to set SO_ATTACH_REUSEPORT_CBPF, err:%s"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * connect a socket
 *
 * the con-&gt;dst-&gt;addr has to be set before 
 * 
 * @param con    a socket 
 * @return       NETWORK_SOCKET_SUCCESS on connected, NETWORK_SOCKET_ERROR on error
 *
 * @see network_address_set_address()
 */</comment>
<function><type><name>network_socket_retval_t</name></type>
<name>network_socket_bind</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>con</name></decl></parameter>,  <parameter><decl><type><name>int</name></type> <name>advanced_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* 
     * HPUX:       int setsockopt(int s, int level, int optname, 
     *                            const void *optval, int optlen);
     * all others: int setsockopt(int s, int level, int optname, 
     *                            const void *optval, socklen_t optlen);
     */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETSOCKOPT_OPTVAL_CAST</name></cpp:macro> <cpp:value>(void *)</cpp:value></cpp:define>

    <comment type="block">/* socket is already bound */</comment>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>NETWORK_SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>socket_type</name></name> <operator>==</operator> <name>SOCK_DGRAM</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>socket_type</name></name> <operator>==</operator> <name>SOCK_STREAM</name><operator>)</operator></expr></argument>, <argument><expr><name>NETWORK_SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>socket_type</name></name> <operator>==</operator> <name>SOCK_STREAM</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>NETWORK_SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>NETWORK_SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>socket_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: socket(%s) failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><name>SETSOCKOPT_OPTVAL_CAST</name> <operator>&amp;</operator> <name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: setsockopt(%s, IPPROTO_TCP, TCP_NODELAY) failed: %s (%d)"</literal></expr></argument>,
                           <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><name>SETSOCKOPT_OPTVAL_CAST</name> <operator>&amp;</operator> <name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: setsockopt(%s, SOL_SOCKET, SO_REUSEADDR) failed: %s (%d)"</literal></expr></argument>,
                           <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_REUSEPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if <condition>(<expr><name>advanced_mode</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:set SO_REUSEPORT for fd:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEPORT</name></expr></argument>, <argument><expr><name>SETSOCKOPT_OPTVAL_CAST</name> <operator>&amp;</operator> <name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: setsockopt(%s, SOL_SOCKET, SO_REUSEPORT) failed: %s (%d)"</literal></expr></argument>,
                            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BPF_ENABLED</name></cpp:ifdef>
                <expr_stmt><expr><call><name>attach_bpf</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IPV6_V6ONLY</name></cpp:ifdef>
            <comment type="block">/* disable dual-stack IPv4-over-IPv6 sockets
             *
             * ... if it is supported:
             * - Linux
             * - Mac OS X
             * - FreeBSD
             * - Solaris 10 and later
             *
             * no supported on:
             * - Solaris 9 and earlier
             */</comment>

            <comment type="block">/* IPV6_V6ONLY is int on unix */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_V6ONLY</name></expr></argument>, <argument><expr><name>SETSOCKOPT_OPTVAL_CAST</name> <operator>&amp;</operator> <name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: setsockopt(%s, IPPROTO_IPV6, IPV6_V6ONLY) failed: %s (%d)"</literal></expr></argument>,
                           <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>bind</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/* binding failed so the address/socket is already being used
             * let's check if we can connect to it so we check if is being used 
             * by some app
             */</comment>
            <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>connect</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connect(%s) failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* we can't connect to the socket so no one is listening on it. We need
                 * to unlink it (delete the name from the file system) to be able to
                 * re-use it.
                 * network_address_free does the unlink, but to re-use it we need
                 * to store the pathname associated with the socket before unlink it and
                 * create a new socket with it.
                 */</comment>
                <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>address_copy</name> <init>= <expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>can_unlink_socket</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_address_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>network_address_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>network_address_set_address</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>address_copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>address_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* we can now free the address copy */</comment>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>address_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: retrying to bind(%s)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* let's bind again with the new socket */</comment>
                <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>bind</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: bind(%s) failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: bind(%s) failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>a</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>socklen_t</name></type> <name>a_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>getsockname</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: getsockname(%s) failed: %s (%d)"</literal></expr></argument>,
                           <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>sin_port</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv6</name><operator>.</operator><name>sin6_port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>a</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>socklen_t</name></type> <name>a_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>getsockname</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: getsockname(%s) failed: %s (%d)"</literal></expr></argument>,
                           <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>sin6_port</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>listen</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: listen(%s, 128) failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* UDP sockets bind the -&gt;src address */</comment>
        <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>NETWORK_SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>NETWORK_SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name><operator>.</operator><name>sa_family</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>socket_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: socket(%s) failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>bind</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>common</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: bind(%s) failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>can_unlink_socket</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * read a data from the socket
 *
 * @param sock the socket
 */</comment>
<function><type><name>network_socket_retval_t</name></type>
<name>network_socket_read</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gssize</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>to_read</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>to_read</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>recv_queue_raw</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: recv queue length:%d, sock:%p, client addr:%s, to read:%d"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>recv_queue_raw</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sock</name><operator>-&gt;</operator><name>to_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: tcp read:%d for fd:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sock</name><operator>-&gt;</operator><name>to_read</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>to_read</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>E_NET_CONNABORTED</name></expr>:</case>
                    <comment type="block" format="doxygen">/** nothing to read, let's let ioctl() handle the close for us */</comment>
            <case>case <expr><name>E_NET_CONNRESET</name></expr>:</case>
            <case>case <expr><name>E_NET_WOULDBLOCK</name></expr>:</case>    <comment type="block" format="doxygen">/** the buffers are empty, try again later */</comment>
            <case>case <expr><name>EAGAIN</name></expr>:</case>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:server to read:%d, but empty"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sock</name><operator>-&gt;</operator><name>to_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
            <default>default:</default>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: recv() failed: %s (errno=%d), to read:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                          <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sock</name><operator>-&gt;</operator><name>to_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block" format="doxygen">/**
             * connection close
             *
             * let's call the ioctl() and let it handle it for use
             */</comment>
            <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>to_read</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>recv_queue_raw</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * write data to the socket
 *
 */</comment>
<function><type><specifier>static</specifier> <name>network_socket_retval_t</name></type>
<name>network_socket_write_writev</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>send_chunks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* send the whole queue */</comment>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>chunk_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>chunk_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gssize</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>os_errno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>max_chunk_count</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>send_chunks</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>network_queue</name><modifier>*</modifier></type> <name>send_queue</name> <init>= <expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>do_compress</name></name></expr> ?</condition><then>
        <expr><name><name>con</name><operator>-&gt;</operator><name>send_queue_compressed</name></name></expr> </then><else>: <expr><name><name>con</name><operator>-&gt;</operator><name>send_queue</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>chunk_count</name> <operator>=</operator> <ternary><condition><expr><name>send_chunks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>send_chunks</name></expr> </then><else>: <expr><operator>(</operator><name>gint</name><operator>)</operator><name><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>chunk_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>max_chunk_count</name> <operator>=</operator> <name>UIO_MAXIOV</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>chunk_count</name> <operator>=</operator> <ternary><condition><expr><name>chunk_count</name> <operator>&gt;</operator> <name>max_chunk_count</name></expr> ?</condition><then> <expr><name>max_chunk_count</name></expr> </then><else>: <expr><name>chunk_count</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name>chunk_count</name></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* make sure it is never negative */</comment>

    <expr_stmt><expr><name>iov</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr>struct <name>iovec</name></expr></argument>, <argument><expr><name>chunk_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>aggr_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>chunk</name> <operator>=</operator> <name><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr><operator>,</operator> <expr><name>chunk_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
         <condition><expr><name>chunk</name> <operator>&amp;&amp;</operator> <name>chunk_id</name> <operator>&lt;</operator> <name>chunk_count</name></expr>;</condition> <incr><expr><name>chunk_id</name><operator>++</operator></expr><operator>,</operator> <expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>chunk_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>iov</name><index>[<expr><name>chunk_id</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>iov</name><index>[<expr><name>chunk_id</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>iov</name><index>[<expr><name>chunk_id</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>iov</name><index>[<expr><name>chunk_id</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>aggr_len</name> <operator>+=</operator> <name><name>iov</name><index>[<expr><name>chunk_id</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>aggr_len</name> <operator>&gt;=</operator> <literal type="number">65536</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>chunk_id</name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: s-&gt;len is zero"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: network socket:%p, send (src:%s, dst:%s) fd:%d"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>writev</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>chunk_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: tcp write:%d, chunk count:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>chunk_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>os_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>iov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><name>os_errno</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>E_NET_WOULDBLOCK</name></expr>:</case>
        <case>case <expr><name>EAGAIN</name></expr>:</case>
            <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
        <case>case <expr><name>EPIPE</name></expr>:</case>
        <case>case <expr><name>E_NET_CONNRESET</name></expr>:</case>
        <case>case <expr><name>E_NET_CONNABORTED</name></expr>:</case>
                <comment type="block" format="doxygen">/** remote side closed the connection */</comment>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        <default>default:</default>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: writev(%s, ...) failed: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>os_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>send_queue</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

    <comment type="block">/* check all the chunks which we have sent out */</comment>
    <for>for <control>(<init><expr><name>chunk</name> <operator>=</operator> <name><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>chunk</name></expr>;</condition><incr/>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: s-&gt;len is zero"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>send_queue</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NETWORK_DEBUG_TRACE_IO</name></expr></cpp:if>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:output for sock:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* to trace the data we sent to the socket, enable this */</comment>
            <expr_stmt><expr><call><name>g_debug_hexdump</name><argument_list>(<argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>do_query_cache</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>cache_queue</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>MAX_QUERY_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>query_cache_too_long</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:too long for cache queue:%p, len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>query_cache_too_long</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:append packet to cache queue:%p, len:%d, total:%d"</literal></expr></argument>,
                            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>cache_queue</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>g_queue_delete_link</name><argument_list>(<argument><expr><name><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:wait for event"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * write a content of con-&gt;send_queue to the socket
 *
 * @param con         socket to read from
 * @param send_chunks number of chunks to send, if &lt; 0 send all
 *
 * @returns NETWORK_SOCKET_SUCCESS on success, 
 *          NETWORK_SOCKET_ERROR on error and 
 *          NETWORK_SOCKET_WAIT_FOR_EVENT if the call would have blocked 
 */</comment>
<function><type><name>network_socket_retval_t</name></type>
<name>network_socket_write</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>send_chunks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>socket_type</name></name> <operator>==</operator> <name>SOCK_STREAM</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>network_socket_write_writev</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>send_chunks</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: udp write is not supported"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>network_socket_retval_t</name></type>
<name>network_socket_to_read</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: ioctl(%d, FIONREAD, ...) failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: ioctl(%d, FIONREAD, ...) succeeded, but is negative: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>to_read</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
