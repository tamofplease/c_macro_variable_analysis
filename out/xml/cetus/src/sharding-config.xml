<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/sharding-config.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sharding-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys-pedantic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-timings.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>GList</name> <modifier>*</modifier></type><name>shard_conf_vdbs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GHashTable</name> <modifier>*</modifier></type><name>shard_conf_tables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* mapping&lt; schema_table_t*, sharding_table_t* &gt; */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>GList</name> <modifier>*</modifier></type><name>shard_conf_single_tables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GList</name> <modifier>*</modifier></type><name>shard_conf_all_groups</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GString</name> <modifier>*</modifier></type><name>parition_super_group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>schema_table_t</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name><name>struct</name> <name>schema_table_t</name></name><modifier>*</modifier></type>
<name>schema_table_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>schema_table_t</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>schema_table_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>schema</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>st</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>schema_table_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>schema_table_t</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* djb hash, same as g_str_hash */</comment>
<function><type><specifier>static</specifier> <name>guint</name></type>
<name>schema_table_hash</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>schema_table_t</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint32</name></type> <name>h</name> <init>= <expr><literal type="number">5381</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>schema</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>h</name> <operator>+</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>h</name> <operator>+</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>table</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>h</name> <operator>+</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>schema_table_equal</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>v1</name></decl></parameter>,
             <parameter><decl><type><name>gconstpointer</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>schema_table_t</name></name> <modifier>*</modifier></type><name>st1</name> <init>= <expr><name>v1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>schema_table_t</name></name> <modifier>*</modifier></type><name>st2</name> <init>= <expr><name>v2</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>st1</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name><name>st2</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
      <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>st1</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>st2</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>shard_conf_table_cmp</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>schema_table_t</name></name> <modifier>*</modifier></type><name>st1</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>schema_table_t</name></name> <modifier>*</modifier></type><name>st2</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>st1</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name><name>st2</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
               <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>st1</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>st2</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sharding_table_t</name> <modifier>*</modifier></type>
<name>sharding_tables_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>schema_table_t</name></name></type> <name>st</name> <init>= <expr><block>{<expr><name>schema</name></expr>, <expr><name>table</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gpointer</name></type> <name>tinfo</name> <init>= <expr><call><name>g_hash_table_find</name><argument_list>(<argument><expr><name>shard_conf_tables</name></expr></argument>, <argument><expr><name>shard_conf_table_cmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>tinfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>sharding_tables_add</name><parameter_list>(<parameter><decl><type><name>sharding_table_t</name><modifier>*</modifier></type> <name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sharding_tables_get</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return> <comment type="block">/* !! DON'T REPLACE ONLINE */</comment>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>schema_table_t</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>schema_table_new</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>shard_conf_tables</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sharding_vdb_t</name> <modifier>*</modifier></type>
<name>shard_vdbs_get_by_id</name><parameter_list>(<parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>vdbs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>vdbs</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>vdb</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sharding_vdb_t</name> <modifier>*</modifier></type>
<name>sharding_vdbs_get_by_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sharding_table_t</name> <modifier>*</modifier></type><name>tinfo</name> <init>= <expr><call><name>sharding_tables_get</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tinfo</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>tinfo</name><operator>-&gt;</operator><name>vdb_ref</name></name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sharding_table_free</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sharding_table_t</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>info</name><operator>-&gt;</operator><name>schema</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>info</name><operator>-&gt;</operator><name>pkey</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pkey</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>sharding_partition_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sharding_partition_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>method</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hash_count</name></name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>logic_shard_num</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>group_name</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sharding_partition_contain_hash</name><parameter_list>(<parameter><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>partition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>partition</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>SHARD_METHOD_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name><name>partition</name><operator>-&gt;</operator><name>hash_count</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>TestBit</name><argument_list>(<argument><expr><name><name>partition</name><operator>-&gt;</operator><name>hash_set</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sharding_partition_free</name><parameter_list>(<parameter><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>SHARD_METHOD_RANGE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_STR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>low_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>group_name</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>group_name</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sharding_partition_to_string</name><parameter_list>(<parameter><decl><type><name>sharding_partition_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>GString</name><modifier>*</modifier></type> <name>repr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name>repr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>SHARD_METHOD_RANGE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_STR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>repr</name></expr></argument>, <argument><expr><literal type="string">"(%s, %s]-&gt;%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>low_value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,
                            <argument><expr><name><name>p</name><operator>-&gt;</operator><name>group_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>repr</name></expr></argument>, <argument><expr><literal type="string">"(%ld, %ld]-&gt;%s"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>low_value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,
                            <argument><expr><name><name>p</name><operator>-&gt;</operator><name>group_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>repr</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>hash_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>TestBit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>hash_set</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>repr</name></expr></argument>, <argument><expr><literal type="string">"%d,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name>repr</name></expr></argument>, <argument><expr><name><name>repr</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>repr</name></expr></argument>, <argument><expr><literal type="string">"]-&gt;%s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>group_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sharding_vdb_partitions_to_string</name><parameter_list>(<parameter><decl><type><name>sharding_vdb_t</name><modifier>*</modifier></type> <name>vdb</name></decl></parameter>, <parameter><decl><type><name>GString</name><modifier>*</modifier></type> <name>repr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name>repr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GString</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vdb</name><operator>-&gt;</operator><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_partition_t</name><modifier>*</modifier></type> <name>part</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sharding_partition_to_string</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>repr</name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>partitions</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>repr</name></expr></argument>, <argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sharding_vdb_t</name> <modifier>*</modifier></type><name>sharding_vdb_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>sharding_vdb_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name> <operator>=</operator> <call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>vdb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sharding_vdb_free</name><parameter_list>(<parameter><decl><type><name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vdb</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vdb</name><operator>-&gt;</operator><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sharding_partition_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>sharding_vdb_is_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is_partition_mode</name></decl></parameter>, <parameter><decl><type><name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_groups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_partition_mode</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <name>num_groups</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"vdb-%d partition count not equal to number of groups, vdb partition len:%d, groups:%d"</literal></expr></argument>,
                    <argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>num_groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>SHARD_METHOD_HASH</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>logic_shard_num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>vdb</name><operator>-&gt;</operator><name>logic_shard_num</name></name> <operator>&gt;</operator> <name>MAX_HASH_VALUE_COUNT</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* make sure all hash values fall into a partition */</comment>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value_set</name> <init>= <expr><call><name>g_malloc0</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>logic_shard_num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
        <comment type="block">/* collect hash values of all partitions */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vdb</name><operator>-&gt;</operator><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>vdb</name><operator>-&gt;</operator><name>logic_shard_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>TestBit</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>hash_set</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>value_set</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <comment type="block">/* we expect that value_set all filled with 1 */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vdb</name><operator>-&gt;</operator><name>logic_shard_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>value_set</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>value_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>value_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GPtrArray</name> <modifier>*</modifier></type>
<name>shard_conf_get_all_groups</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>all_groups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>shard_conf_all_groups</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name><modifier>*</modifier></type> <name>gp</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>all_groups</name></expr></argument>, <argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>all_groups</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>shard_conf_find_groups</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>shard_conf_get_all_groups</name><argument_list>(<argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>shard_conf_all_groups</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>gp</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>gp</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>GPtrArray</name> <modifier>*</modifier></type>
<name>shard_conf_get_any_group</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>any_group</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name>table</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" db or table name is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name> <init>= <expr><call><name>sharding_vdbs_get_by_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>vdb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>partitions</name> <init>= <expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>any_group</name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>group_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>any_group</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GPtrArray</name> <modifier>*</modifier></type>
<name>shard_conf_get_table_groups</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>visited_groups</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name>table</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" schema or table name is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name> <init>= <expr><call><name>sharding_vdbs_get_by_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>vdb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>partitions</name> <init>= <expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>partition</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>already_added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>visited_groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>added_group_name</name> <init>= <expr><name><name>visited_groups</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>partition</name><operator>-&gt;</operator><name>group_name</name></name></expr></argument>, <argument><expr><name>added_group_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>already_added</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>already_added</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>visited_groups</name></expr></argument>, <argument><expr><name><name>partition</name><operator>-&gt;</operator><name>group_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>visited_groups</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get array of groups pointers of a table
 * no more duplication check cause one group correspond multiple range value
 */</comment>
<function><type><name>GPtrArray</name> <modifier>*</modifier></type>
<name>shard_conf_table_partitions</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>partitions</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name>table</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" db or table name is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name> <init>= <expr><call><name>sharding_vdbs_get_by_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vdb</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>all_partitions</name> <init>= <expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>all_partitions</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>all_partitions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>partitions</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>sharding_table_t</name> <modifier>*</modifier></type>
<name>shard_conf_get_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sharding_tables_get</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>shard_conf_is_shard_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><ternary><condition><expr><call><name>sharding_tables_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>GPtrArray</name> <modifier>*</modifier></type>
<name>shard_conf_get_fixed_group</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>partition</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>guint64</name></type> <name>fixture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>partition</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>parition_super_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>groups</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>g_list_length</name><argument_list>(<argument><expr><name>shard_conf_all_groups</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>groups</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>fixture</name> <operator>%</operator> <name>len</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>grp</name> <init>= <expr><call><name>g_list_nth_data</name><argument_list>(<argument><expr><name>shard_conf_all_groups</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>groups</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>single_table_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>single_table_t</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>group</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>shard_conf_set_vdb_list</name><parameter_list>(<parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>vdbs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>shard_conf_vdbs</name></expr></argument>, <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>sharding_vdb_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>shard_conf_vdbs</name> <operator>=</operator> <name>vdbs</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GList</name><modifier>*</modifier></type> <name>shard_conf_get_vdb_list</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><name>shard_conf_vdbs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>shard_conf_set_tables</name><parameter_list>(<parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>tables</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>shard_conf_tables</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name>shard_conf_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>shard_conf_tables</name> <operator>=</operator> <name>tables</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>sharding_table_equal</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>sharding_table_t</name> <modifier>*</modifier></type><name>st1</name> <init>= <expr><name>v1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>sharding_table_t</name> <modifier>*</modifier></type><name>st2</name> <init>= <expr><name>v2</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>st1</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>st2</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>st1</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>st2</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>a</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>GList</name><modifier>*</modifier></type> <name>shard_conf_get_tables</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>tables</name> <init>= <expr><call><name>g_hash_table_get_values</name><argument_list>(<argument><expr><name>shard_conf_tables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tables</name> <operator>=</operator> <call><name>g_list_sort</name><argument_list>(<argument><expr><name>tables</name></expr></argument>, <argument><expr><name>sharding_table_equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>tables</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GList</name><modifier>*</modifier></type> <name>shard_conf_get_single_tables</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><name>shard_conf_single_tables</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GString</name> <modifier>*</modifier></type><name>partition_get_super_group</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><name>parition_super_group</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>shard_conf_set_single_tables</name><parameter_list>(<parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>tables</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>shard_conf_single_tables</name></expr></argument>, <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>single_table_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>shard_conf_single_tables</name> <operator>=</operator> <name>tables</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>shard_conf_set_all_groups</name><parameter_list>(<parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>shard_conf_all_groups</name></expr></argument>, <argument><expr><name>g_string_true_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>shard_conf_all_groups</name> <operator>=</operator> <name>groups</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GList</name> <modifier>*</modifier></type>
<name>string_list_distinct_append</name><parameter_list>(<parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>strlist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>strlist</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>g_string_equal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>strlist</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><call><name>g_list_append</name><argument_list>(<argument><expr><name>strlist</name></expr></argument>, <argument><expr><call><name>g_string_new</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
 * setup index &amp; validate configurations
 */</comment>
<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>shard_conf_try_setup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is_partition_mode</name></decl></parameter>, <parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>vdbs</name></decl></parameter>, <parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>tables</name></decl></parameter>, <parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>single_tables</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_groups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vdbs</name> <operator>||</operator> <operator>!</operator><name>tables</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"empty vdb/table list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>vdbs</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sharding_vdb_is_valid</name><argument_list>(<argument><expr><name>is_partition_mode</name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>, <argument><expr><name>num_groups</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"invalid vdb config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>all_groups</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>table_dict</name> <init>= <expr><call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><name>schema_table_hash</name></expr></argument>, <argument><expr><name>schema_table_equal</name></expr></argument>,
                                                   <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator><name>schema_table_free</name></expr></argument>,
                                                   <argument><expr><name>sharding_table_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <name>tables</name></expr>;</expr_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_table_t</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name> <init>= <expr><call><name>shard_vdbs_get_by_id</name><argument_list>(<argument><expr><name>vdbs</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>vdb_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Fill table with vdb info */</comment>
        <if_stmt><if>if <condition>(<expr><name>vdb</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>vdb_ref</name></name> <operator>=</operator> <name>vdb</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>shard_key_type</name></name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" table:%s VDB ID cannot be found: %d"</literal></expr></argument>,
                       <argument><expr><name><name>table</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>vdb_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name>table_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vdb</name><operator>-&gt;</operator><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>all_groups</name> <operator>=</operator> <call><name>string_list_distinct_append</name><argument_list>(<argument><expr><name>all_groups</name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>group_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name><name>struct</name> <name>schema_table_t</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>schema_table_new</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>table_dict</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block">/* `tables` has been transferred to `table_dict`, free it */</comment>
    <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>shard_conf_set_vdb_list</name><argument_list>(<argument><expr><name>vdbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shard_conf_set_tables</name><argument_list>(<argument><expr><name>table_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shard_conf_set_single_tables</name><argument_list>(<argument><expr><name>single_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shard_conf_set_all_groups</name><argument_list>(<argument><expr><name>all_groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>parition_super_group</name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>PARTITION_SUPER_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>shard_conf_destroy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>shard_conf_vdbs</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>shard_conf_vdbs</name></expr></argument>, <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>sharding_vdb_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>parition_super_group</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>parition_super_group</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>shard_conf_tables</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name>shard_conf_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>shard_conf_single_tables</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>shard_conf_single_tables</name></expr></argument>, <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>single_table_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>shard_conf_all_groups</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>shard_conf_all_groups</name></expr></argument>, <argument><expr><name>g_string_true_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>GHashTable</name> <modifier>*</modifier></type><name>load_shard_from_json</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>json_str</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>gboolean</name></type>
<name>shard_conf_load</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>partition_mode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>json_str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_groups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>load_shard_from_json</name><argument_list>(<argument><expr><name>json_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ht</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>tables</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="string">"table_list"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>vdbs</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="string">"vdb_list"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>single_tables</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="string">"single_tables"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>success</name> <init>= <expr><call><name>shard_conf_try_setup</name><argument_list>(<argument><expr><name>partition_mode</name></expr></argument>, <argument><expr><name>vdbs</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><name>single_tables</name></expr></argument>, <argument><expr><name>num_groups</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>vdbs</name></expr></argument>, <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>sharding_vdb_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>tables</name></expr></argument>, <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>sharding_table_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>single_table_t</name></name> <modifier>*</modifier></type>
<name>shard_conf_get_single_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>shard_conf_single_tables</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>single_table_t</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>t</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>shard_conf_is_single_table</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>partition_mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>partition_mode</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>single_table_t</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>shard_conf_get_single_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>shard_conf_group_contains</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>match</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>gp</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>g_string_equal</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GPtrArray</name> <modifier>*</modifier></type>
<name>shard_conf_get_single_table_distinct_group</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>single_table_t</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>shard_conf_get_single_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>shard_conf_group_contains</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>groups</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>code_map_t</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
}</block> <decl><name><name>key_type_map</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"INT"</literal></expr>, <expr><name>SHARD_DATA_TYPE_INT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"CHAR"</literal></expr>, <expr><name>SHARD_DATA_TYPE_STR</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"STR"</literal></expr>, <expr><name>SHARD_DATA_TYPE_STR</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"STRING"</literal></expr>, <expr><name>SHARD_DATA_TYPE_STR</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DATE"</literal></expr>, <expr><name>SHARD_DATA_TYPE_DATE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DATETIME"</literal></expr>, <expr><name>SHARD_DATA_TYPE_DATETIME</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>sharding_key_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>key_type_map</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>key_type_map</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>key_type_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>key_type_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Wrong sharding setting &lt;key_type:%s&gt;"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sharding_key_type_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>key_type_map</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>key_type_map</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>key_type_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>key_type_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="string">"error"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sharding_method</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SHARD_METHOD_HASH</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"range"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SHARD_METHOD_RANGE</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>SHARD_METHOD_UNKNOWN</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Parse partitions from JSON to Hash Table
 * exmpale:
 *   {"data1":[0], "data2":[1], "data3":[2], "data4":[3]}
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_partitions</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>partitions</name></decl></parameter> <comment type="block">/* out */</comment> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* { "groupA":xx, "groupB":xx, "groupC":xx} */</comment>
        <comment type="block">/* null means unlimited */</comment>
        <switch>switch <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>cJSON_NULL</name></expr>:</case>       <comment type="block">/* range: null */</comment>
            <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>sharding_partition_new</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_STR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>INT_MAX</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>cJSON_Number</name></expr>:</case>     <comment type="block">/* range &gt; 123 */</comment>
            <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>sharding_partition_new</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>cJSON_String</name></expr>:</case>     <comment type="block">/* range &gt; "str" */</comment>
            <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>sharding_partition_new</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_DATETIME</name>
                <operator>||</operator> <name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_DATE</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>epoch</name> <init>= <expr><call><name>chassis_epoch_from_string</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>epoch</name></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Wrong sharding setting &lt;datetime format:%s&gt;"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>cJSON_Array</name></expr>:</case><block>{<block_content>
            <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cJSON_Number</name> <operator>==</operator> <name><name>elem</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>   <comment type="block">/* hash in [0,3,5] */</comment>
                <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>sharding_partition_new</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init>;</init> <condition><expr><name>elem</name></expr>;</condition> <incr><expr><name>elem</name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>elem</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>cJSON_Number</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">"array has different type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>elem</name><operator>-&gt;</operator><name>valueint</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>elem</name><operator>-&gt;</operator><name>valueint</name></name> <operator>&lt;</operator> <name><name>vdb</name><operator>-&gt;</operator><name>logic_shard_num</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>SetBit</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>hash_set</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>valueint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">"hash value exceeds logic_shard_num"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cJSON_String</name> <operator>==</operator> <name><name>elem</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>    <comment type="block">/* TODO: range in [0, 100, 200] */</comment>
                <while>while <condition>(<expr><name>elem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>sharding_partition_new</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_DATETIME</name>
                        <operator>||</operator> <name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_DATE</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>epoch</name> <init>= <expr><call><name>chassis_epoch_from_string</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>epoch</name></expr>;</expr_stmt></block_content></block></if>
                        <else>else<block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Wrong sharding setting &lt;datetime format:%s&gt;"</literal></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>elem</name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"JSON TYPE: %d, GROUP: %s"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>                       <comment type="block">/* end switch */</comment>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>cmp_shard_range_groups_int</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>item1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>sharding_partition_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>item2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>sharding_partition_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>n1</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>item1</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>n2</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>item2</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>n1</name> <operator>&gt;</operator> <name>n2</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n1</name> <operator>==</operator> <name>n2</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>cmp_shard_range_groups_str</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>item1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>sharding_partition_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>item2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>sharding_partition_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name><name>item1</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><name><name>item2</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>s1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_partitions</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>partitions</name></decl></parameter>, <parameter><decl><type><name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>SHARD_METHOD_RANGE</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* sort partitions */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_INT</name>
            <operator>||</operator> <name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_DATETIME</name>
            <operator>||</operator> <name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_DATE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_sort</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>cmp_shard_range_groups_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_sort</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>cmp_shard_range_groups_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="block">/* record the lower range, get from previous group */</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>prev_value</name> <init>= <expr><name>INT_MIN</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prev_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_STR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>low_value</name></name> <operator>=</operator> <name>prev_str</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>partitions</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>prev_str</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>low_value</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>prev_value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>prev_value</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>part</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>hash_count</name></name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>logic_shard_num</name></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @return GList&lt;sharding_vdb_t *&gt;
 */</comment>
<function><type><specifier>static</specifier> <name>GList</name> <modifier>*</modifier></type>
<name>parse_vdbs</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>vdb_root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>vdb_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>vdb_root</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>key_type</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>method</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>num</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"num"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>partitions</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"partitions"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>id</name> <operator>&amp;&amp;</operator> <name>key_type</name> <operator>&amp;&amp;</operator> <name>method</name> <operator>&amp;&amp;</operator> <name>num</name> <operator>&amp;&amp;</operator> <name>partitions</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"parse vdbs error, neglected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>struct</name> <name>sharding_vdb_t</name></name> <modifier>*</modifier></type><name>vdb</name> <init>= <expr><call><name>sharding_vdb_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>cJSON_Number</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>valueint</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <call><name>sharding_key_type</name><argument_list>(<argument><expr><name><name>key_type</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Wrong sharding settings &lt;key_type:%s&gt;"</literal></expr></argument>, <argument><expr><name><name>key_type</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <call><name>sharding_method</name><argument_list>(<argument><expr><name><name>method</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>method</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Wrong sharding settings &lt;key_type:%s&gt;"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>num</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>cJSON_Number</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>logic_shard_num</name></name> <operator>=</operator> <name><name>num</name><operator>-&gt;</operator><name>valueint</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"no match num: %s"</literal></expr></argument>, <argument><expr><name><name>num</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>parse_partitions</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>, <argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setup_partitions</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>vdb_list</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>vdb_list</name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>vdb_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GList</name> <modifier>*</modifier></type>
<name>parse_tables</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>tables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>table_root</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"table"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>pkey</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"pkey"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>vdb</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"vdb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>db</name> <operator>&amp;&amp;</operator> <name>table_root</name> <operator>&amp;&amp;</operator> <name>pkey</name> <operator>&amp;&amp;</operator> <name>vdb</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sharding_table_t</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sharding_table_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>cJSON_String</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>vdb_id</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>cJSON_Number</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>vdb_id</name></name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>valueint</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>schema</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name><name>table_root</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>pkey</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>tables</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>tables</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"parse_tables error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>tables</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GList</name> <modifier>*</modifier></type>
<name>parse_single_tables</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>tables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"table"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <name>db</name> <operator>&amp;&amp;</operator> <name>group</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>single_table_t</name></name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>single_table_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>schema</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tables</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>tables</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"single_table parse error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>tables</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GHashTable</name> <modifier>*</modifier></type>
<name>load_shard_from_json</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>json_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>json_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"JSON format is not correct:%s"</literal></expr></argument>, <argument><expr><name>json_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* parse vdbs */</comment>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>vdb_root</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"vdb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vdb_root</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">"vdb config file error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>vdb_list</name> <init>= <expr><call><name>parse_vdbs</name><argument_list>(<argument><expr><name>vdb_root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* parse tables */</comment>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>table_root</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"table"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>table_root</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">"table config error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>table_list</name> <init>= <expr><call><name>parse_tables</name><argument_list>(<argument><expr><name>table_root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* parse single tables */</comment>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>single_root</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"single_tables"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>single_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>single_root</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>single_list</name> <operator>=</operator> <call><name>parse_single_tables</name><argument_list>(<argument><expr><name>single_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>shard_hash</name> <init>= <expr><call><name>g_hash_table_new</name><argument_list>(<argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>shard_hash</name></expr></argument>, <argument><expr><literal type="string">"table_list"</literal></expr></argument>, <argument><expr><name>table_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>shard_hash</name></expr></argument>, <argument><expr><literal type="string">"vdb_list"</literal></expr></argument>, <argument><expr><name>vdb_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>shard_hash</name></expr></argument>, <argument><expr><literal type="string">"single_tables"</literal></expr></argument>, <argument><expr><name>single_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* NULLable */</comment>
    <return>return <expr><name>shard_hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>shard_conf_add_vdb</name><parameter_list>(<parameter><decl><type><name>sharding_vdb_t</name><modifier>*</modifier></type> <name>vdb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>l</name> <init>= <expr><name>shard_conf_vdbs</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_vdb_t</name><modifier>*</modifier></type> <name>base</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>vdb</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"add vdb dup id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>setup_partitions</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>shard_conf_vdbs</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>shard_conf_vdbs</name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>shard_conf_add_sharded_table</name><parameter_list>(<parameter><decl><type><name>sharding_table_t</name><modifier>*</modifier></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sharding_vdb_t</name><modifier>*</modifier></type> <name>vdb</name> <init>= <expr><call><name>shard_vdbs_get_by_id</name><argument_list>(<argument><expr><name>shard_conf_vdbs</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>vdb_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>vdb</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>vdb_ref</name></name> <operator>=</operator> <name>vdb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>shard_key_type</name></name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name></expr>;</expr_stmt>
        <return>return <expr><call><name>sharding_tables_add</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cJSON</name><modifier>*</modifier></type> <name>json_create_vdb_object</name><parameter_list>(<parameter><decl><type><name>sharding_vdb_t</name><modifier>*</modifier></type> <name>vdb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name>sharding_key_type_str</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>vdb</name><operator>-&gt;</operator><name>method</name></name><operator>==</operator><name>SHARD_METHOD_HASH</name></expr>?</condition><then><expr><literal type="string">"hash"</literal></expr></then><else>:<expr><literal type="string">"range"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"num"</literal></expr></argument>, <argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>logic_shard_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>pob</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vdb</name><operator>-&gt;</operator><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_partition_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>SHARD_METHOD_RANGE</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_STR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pob</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>group_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_INT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>pob</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>group_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> <comment type="block">/*datetime*/</comment>
                <decl_stmt><decl><type><name>char</name></type> <name><name>time_str</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>chassis_epoch_to_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><name>time_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>pob</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>group_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>time_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content> <comment type="block">/*hash*/</comment>
            <decl_stmt><decl><type><name>GArray</name><modifier>*</modifier></type> <name>numbers</name> <init>= <expr><call><name>g_array_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>hash_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>TestBit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>hash_set</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_array_append_val</name><argument_list>(<argument><expr><name>numbers</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>num_array</name> <init>= <expr><call><name>cJSON_CreateIntArray</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>numbers</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>numbers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_array_free</name><argument_list>(<argument><expr><name>numbers</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>pob</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>group_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>num_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"partitions"</literal></expr></argument>, <argument><expr><name>pob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>shard_conf_write_json</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf_manager</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>vdb_array</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>l</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>shard_conf_vdbs</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_vdb_t</name><modifier>*</modifier></type> <name>vdb</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>json_create_vdb_object</name><argument_list>(<argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>vdb_array</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>table_array</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>tables</name> <init>= <expr><call><name>shard_conf_get_tables</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>tables</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_table_t</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"pkey"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>pkey</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"vdb"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>vdb_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>table_array</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>root</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"vdb"</literal></expr></argument>, <argument><expr><name>vdb_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><name>table_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>shard_conf_single_tables</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>single_table_array</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>shard_conf_single_tables</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>single_table_t</name></name><modifier>*</modifier></type> <name>t</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>single_table_array</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"single_tables"</literal></expr></argument>, <argument><expr><name>single_table_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>json_str</name> <init>= <expr><call><name>cJSON_Print</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>chassis_config_write_object</name><argument_list>(<argument><expr><name>conf_manager</name></expr></argument>, <argument><expr><literal type="string">"sharding"</literal></expr></argument>, <argument><expr><name>json_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Update sharding.json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>json_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>shard_conf_add_single_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>schema</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>schema</name> <operator>&amp;&amp;</operator> <name>table</name> <operator>&amp;&amp;</operator> <name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>shard_conf_is_single_table</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"try adding duplicate single table %s.%s"</literal></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>l</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>shard_conf_all_groups</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name><modifier>*</modifier></type> <name>gp</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>gp</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"try adding single table to non-existed group: %s"</literal></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>single_table_t</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>single_table_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>schema</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>shard_conf_single_tables</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>shard_conf_single_tables</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
</unit>
