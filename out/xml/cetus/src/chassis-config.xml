<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/chassis-config.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-timings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>        <comment type="block">/* for g_stat */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_MAX_NAME_LEN</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<struct>struct <name>config_object_t</name> <block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>RF_MAX_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>config_object_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>ob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>url_parse_user_pass</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>rconf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userpass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strndup</name><argument_list>(<argument><expr><name>userpass</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sep</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>rconf</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sep</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rconf</name><operator>-&gt;</operator><name>password</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>sep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>rconf</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>url_parse_host_port</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>rconf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostport</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strndup</name><argument_list>(<argument><expr><name>hostport</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sep</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>rconf</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sep</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rconf</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>sep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>rconf</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rconf</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <literal type="number">3306</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>url_parse_parameter</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>rconf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"table="</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>rconf</name><operator>-&gt;</operator><name>options_table</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">" and "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>     <comment type="block">/* remove last 'and' */</comment>
        <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rconf</name><operator>-&gt;</operator><name>options_filter</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* example mysql://user:pass@host:port/schema?table=xx&amp;id=xx */</comment>
<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>chassis_config_parse_mysql_url</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>rconf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<comment type="block">/* only "host" is required -&gt; [dbuser[:[dbpassword]]@]host[:port][/schema] */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>schema</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>schema</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>param</name> <operator>&amp;&amp;</operator> <name>param</name> <operator>&lt;</operator> <name>schema</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>rconf</name><operator>-&gt;</operator><name>schema</name></name> <operator>=</operator> <ternary><condition><expr><name>param</name></expr> ?</condition><then> <expr><call><name>strndup</name><argument_list>(<argument><expr><name>schema</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>param</name> <operator>-</operator> <name>schema</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strdup</name><argument_list>(<argument><expr><name>schema</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>param</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>url_parse_parameter</name><argument_list>(<argument><expr><name>rconf</name></expr></argument>, <argument><expr><name>param</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>url</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rconf</name><operator>-&gt;</operator><name>options_table</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>rconf</name><operator>-&gt;</operator><name>options_table</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostend</name> <init>= <expr><ternary><condition><expr><name>schema</name></expr> ?</condition><then> <expr><name>schema</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>param</name></expr> ?</condition><then> <expr><name>param</name></expr> </then><else>: <expr><name>url</name> <operator>+</operator> <name>len</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>at</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>url_parse_user_pass</name><argument_list>(<argument><expr><name>rconf</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>at</name> <operator>-</operator> <name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <call><name>url_parse_host_port</name><argument_list>(<argument><expr><name>rconf</name></expr></argument>, <argument><expr><name>at</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>hostend</name> <operator>-</operator> <name>at</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>url_parse_host_port</name><argument_list>(<argument><expr><name>rconf</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>hostend</name> <operator>-</operator> <name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MYSQL</name> <modifier>*</modifier></type>
<name>chassis_config_get_mysql_connection</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call chassis_config_get_mysql_connection"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* first try the cached connection */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:mysql conn was not closed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call mysql_init"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>mysql_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_init_called</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">1</literal> <operator>*</operator> <name>SECONDS</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mysql_options</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>MYSQL_OPT_CONNECT_TIMEOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_options</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>MYSQL_OPT_READ_TIMEOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_options</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>MYSQL_OPT_WRITE_TIMEOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call mysql_real_connect"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_real_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>password</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>    <comment type="block">/* cache the connection */</comment>
    <return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>chassis_config_mysql_init_tables</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>chassis_config_get_mysql_connection</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: MySQL conn is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>status</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CREATE DATABASE IF NOT EXISTS %s"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS %s.objects("</literal>
             <literal type="string">"object_name varchar(64) NOT NULL,"</literal>
             <literal type="string">"object_value text NOT NULL,"</literal> <literal type="string">"mtime timestamp NOT NULL,"</literal> <literal type="string">"PRIMARY KEY(object_name))"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS %s.%s("</literal>
             <literal type="string">"option_key varchar(64) NOT NULL,"</literal>
             <literal type="string">"option_value varchar(1024) NOT NULL,"</literal> <literal type="string">"PRIMARY KEY(option_key))"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>options_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  
<label><name>recycle_mysql_resources</name>:</label>
    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>chassis_config_t</name> <modifier>*</modifier></type>
<name>chassis_config_from_url</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>rconf</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>chassis_config_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"mysql://"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>rconf</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CHASSIS_CONF_MYSQL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>chassis_config_parse_mysql_url</name><argument_list>(<argument><expr><name>rconf</name></expr></argument>, <argument><expr><name>url</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"sqlite://"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>chassis_config_parse_mysql_url</name><argument_list>(<argument><expr><name>rconf</name></expr></argument>, <argument><expr><name>url</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"url not supported: %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>chassis_config_mysql_init_tables</name><argument_list>(<argument><expr><name>rconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_config_free</name><argument_list>(<argument><expr><name>rconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rconf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* TODO: */</comment>
<function><type><name>chassis_config_t</name> <modifier>*</modifier></type>
<name>chassis_config_from_local_dir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>conf_dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>conf_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>chassis_config_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CHASSIS_CONF_LOCAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>conf_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_table</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>conf_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>conf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>chassis_config_free</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>password</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>schema</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>options_table</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>options_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>options_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>options_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>options_one</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>options_one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>options_two</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>options_two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>objects_one</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>objects_one</name></name></expr></argument>, <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>config_object_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>objects_two</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>objects_two</name></name></expr></argument>, <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>config_object_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mysql_init_called</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mysql_thread_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:mysql_thread_end is called"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>chassis_config_load_options_mysql</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>chassis_config_get_mysql_connection</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"chassis_config can't get mysql conn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>status</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SELECT option_key,option_value FROM %s.%s"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>options_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"sql failed: %s"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>recycle_mysql_resources</name>;</goto></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>options_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>options_one</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_one</name></name> <operator>=</operator> <call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_hash_table_remove_all</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>options_one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><name>options</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>options_one</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>options_two</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_two</name></name> <operator>=</operator> <call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_hash_table_remove_all</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>options_two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><name>options</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>options_two</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<label><name>recycle_mysql_resources</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>gboolean</name></type>
<name>chassis_config_set_remote_options</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>gchar</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>gchar</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition><block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>chassis_config_get_mysql_connection</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:Cannot connect to mysql server."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>status</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name></type> <name><name>sql</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>real_value</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>real_value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>,
            <argument><expr><literal type="string">"INSERT INTO %s.`settings`(option_key,option_value) VALUES ('%s', '%s') ON DUPLICATE KEY UPDATE option_value = '%s'"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>real_value</name></expr></argument>, <argument><expr><name>real_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"sql failed: %s | error: %s"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

<label><name>recycle_mysql_resources</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>chassis_config_set_remote_backends</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>gchar</name><modifier>*</modifier></type> <name>key1</name></decl></parameter>, <parameter><decl><type><name>gchar</name><modifier>*</modifier></type> <name>value1</name></decl></parameter>, <parameter><decl><type><name>gchar</name><modifier>*</modifier></type> <name>key2</name></decl></parameter>, <parameter><decl><type><name>gchar</name><modifier>*</modifier></type> <name>value2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition><block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>chassis_config_get_mysql_connection</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:Cannot connect to mysql server."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>status</name> <init>= <expr><name>FALSE</name></expr></init></decl>, <decl><type ref="prev"/><name>status1</name> <init>= <expr><name>FALSE</name></expr></init></decl>, <decl><type ref="prev"/><name>status2</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name></type> <name><name>sql1</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>real_value1</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name></type> <name><name>sql2</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>real_value2</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>key1</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value1</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>real_value1</name></expr></argument>, <argument><expr><name>value1</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql1</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                <argument><expr><literal type="string">"INSERT INTO %s.`settings`(option_key,option_value) VALUES ('%s', '%s') ON DUPLICATE KEY UPDATE option_value = '%s'"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>key1</name></expr></argument>, <argument><expr><name>real_value1</name></expr></argument>, <argument><expr><name>real_value1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql1</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                <argument><expr><literal type="string">"DELETE FROM %s.`settings` where option_key = '%s'"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"sql failed: %s | error: %s"</literal></expr></argument>, <argument><expr><name>sql1</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>status1</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>status1</name> <operator>&amp;&amp;</operator> <name>key2</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value2</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>real_value2</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql2</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                <argument><expr><literal type="string">"INSERT INTO %s.`settings`(option_key,option_value) VALUES ('%s', '%s') ON DUPLICATE KEY UPDATE option_value = '%s'"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><name>real_value2</name></expr></argument>, <argument><expr><name>real_value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql2</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                <argument><expr><literal type="string">"DELETE FROM %s.`settings` where option_key = '%s'"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"sql failed: %s | error: %s"</literal></expr></argument>, <argument><expr><name>sql1</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>status2</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt> 
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>status1</name> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>key2</name> <operator>==</operator> <name>NULL</name></expr>?</condition><then> <expr><name>TRUE</name></expr></then><else>:<expr><name>status2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<label><name>recycle_mysql_resources</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gint</name></type> <name>chassis_config_reload_options</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CHASSIS_CONF_MYSQL</name></expr>:</case>
        <if_stmt><if>if<condition>(<expr><call><name>chassis_config_load_options_mysql</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    <default>default:</default>
        <comment type="block">/* TODO g_critical(G_STRLOC " not implemented"); */</comment>
        <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>GHashTable</name> <modifier>*</modifier></type>
<name>chassis_config_get_options</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>options_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>options</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>options_one</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>options</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>options_two</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>options</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chassis_config_object_set_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>ob</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>mt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name>mt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type>
<name>chassis_config_get_object</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>objects</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>objects_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>objects</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>objects_one</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>objects</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>objects_two</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>objects</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>ob</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>chassis_config_mysql_query_object</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                                  <parameter><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:reach mysql_query"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>chassis_config_get_mysql_connection</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:Cannot connect to mysql server."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
        
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:reach mysql_query"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>status</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SELECT object_value,mtime FROM %s.objects where object_name='%s'"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"sql failed: %s"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content> 
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:reach mysql_store_result, result:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>row</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:reach mysql_fetch_row"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>time_t</name></type> <name>mt</name> <init>= <expr><call><name>chassis_epoch_from_string</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>chassis_config_object_set_cache</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<label><name>recycle_mysql_resources</name>:</label>
    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>chassis_config_local_query_object</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                                  <parameter><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>json_res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>basename</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>basename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>object_file</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>basename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_file_get_contents</name><argument_list>(<argument><expr><name>object_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_error_matches</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>G_FILE_ERROR</name></expr></argument>, <argument><expr><name>G_FILE_ERROR_NOENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>object_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>json_res</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>json_res</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GStatBuf</name></type> <name>sta</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_stat</name><argument_list>(<argument><expr><name>object_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sta</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_config_object_set_cache</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>sta</name><operator>.</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>object_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* select a table, make it into a json */</comment>
<function><type><name>gboolean</name></type>
<name>chassis_config_query_object</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>json_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>refresh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><call><name>chassis_config_get_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr>struct <name>config_object_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>RF_MAX_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>objects_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>objects_one</name></name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>objects_one</name></name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>objects_two</name></name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>objects_two</name></name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>refresh</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>chassis_config_object_set_cache</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>json_res</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>TRUE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">": config type:%d"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CHASSIS_CONF_MYSQL</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>refresh</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>chassis_config_mysql_query_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><operator>*</operator><name>json_res</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>TRUE</name></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <return>return <expr><name>FALSE</name></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>  <else>else <block>{<block_content>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    <case>case <expr><name>CHASSIS_CONF_LOCAL</name></expr>:</case>
        <return>return <expr><call><name>chassis_config_local_query_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>json_res</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>chassis_config_mysql_write_object</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                                  <parameter><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>chassis_config_get_mysql_connection</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:Cannot connect to mysql server."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>status</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO %s.objects(object_name,object_value,mtime)"</literal>
                    <literal type="string">" VALUES('%s','%s', FROM_UNIXTIME(%ld)) ON DUPLICATE KEY UPDATE object_value = '%s', mtime = FROM_UNIXTIME(%ld)"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>json</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>json</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"sql failed: %s"</literal></expr></argument>, <argument><expr><name><name>sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_config_object_set_cache</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>json</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>chassis_config_local_write_object</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                                  <parameter><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* conf-&gt;schema is an absolute path for local config */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>basename</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>basename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>object_file</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>basename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>object_file</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* truncate and write */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">"can't open file: %s for write"</literal></expr></argument>, <argument><expr><name>object_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>object_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>json_str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>json_str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GStatBuf</name></type> <name>sta</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_stat</name><argument_list>(<argument><expr><name>object_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sta</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_config_object_set_cache</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>json_str</name></expr></argument>, <argument><expr><name><name>sta</name><operator>.</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>object_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>chassis_config_write_object</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><call><name>chassis_config_get_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr>struct <name>config_object_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>RF_MAX_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>objects_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>objects_one</name></name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>objects_one</name></name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>objects_two</name></name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>objects_two</name></name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CHASSIS_CONF_MYSQL</name></expr>:</case>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    <case>case <expr><name>CHASSIS_CONF_LOCAL</name></expr>:</case>
        <return>return <expr><call><name>chassis_config_local_write_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>chassis_config_parse_options</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>opts_table</name> <init>= <expr><call><name>chassis_config_get_options</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opts_table</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_config_reload_options</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>options_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>opts_table</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>options_one</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>opts_table</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>options_two</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opts_table</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>entries</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_option_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/* already set by cmdline or config file */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTION_FLAG_CMDLINE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTION_FLAG_CONF_FILE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>entry_value</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>opts_table</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>entry_value</name></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>OPTION_ARG_NONE</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>entry_value</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>entry_value</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>entry_value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>entry_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"error boolean value: %s"</literal></expr></argument>, <argument><expr><name>entry_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            <case>case <expr><name>OPTION_ARG_INT</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>entry_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>OPTION_ARG_INT64</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>gint64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <call><name>g_ascii_strtoll</name><argument_list>(<argument><expr><name>entry_value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>OPTION_ARG_STRING</name></expr>:</case><block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>entry_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>OPTION_ARG_STRING_ARRAY</name></expr>:</case><block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>entry_value</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <name>values</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>OPTION_ARG_DOUBLE</name></expr>:</case>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name>entry_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Unhandled option arg type: %d"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>chassis_config_mysql_is_object_outdated</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>chassis_config_get_mysql_connection</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SELECT mtime FROM %s.objects where object_name='%s'"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>status</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"sql failed: %s"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>recycle_mysql_resources</name>;</goto></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>row</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>recycle_mysql_resources</name>;</goto></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>mt</name> <init>= <expr><call><name>chassis_epoch_from_string</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<label><name>recycle_mysql_resources</name>:</label>
    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>object</name><operator>-&gt;</operator><name>mtime</name></name> <operator>&lt;</operator> <name>mt</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>chassis_config_local_is_object_outdated</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GStatBuf</name></type> <name>sta</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>basename</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>basename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>object_file</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>basename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_stat</name><argument_list>(<argument><expr><name>object_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>object_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>object_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>object</name><operator>-&gt;</operator><name>mtime</name></name> <operator>&lt;</operator> <name><name>sta</name><operator>.</operator><name>st_mtime</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>chassis_config_is_object_outdated</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><call><name>chassis_config_get_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CHASSIS_CONF_MYSQL</name></expr>:</case>
        <return>return <expr><call><name>chassis_config_mysql_is_object_outdated</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CHASSIS_CONF_LOCAL</name></expr>:</case>
        <return>return <expr><call><name>chassis_config_local_is_object_outdated</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ID_SIZE</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>chassis_config_get_id</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CHASSIS_CONF_MYSQL</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"%s_%d_%s"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>CHASSIS_CONF_LOCAL</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"error-config-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"_%u_%u"</literal></expr></argument>, <argument><expr><call><name>g_random_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>g_random_int</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name>MAX_ID_SIZE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_erase</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>MAX_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"id truncated to: %s"</literal></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>id_str</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>id_str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>chassis_config_register_service</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>chassis_config_get_mysql_connection</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: MySQL conn is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>status</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS %s.services("</literal>
             <literal type="string">"id varchar(64) NOT NULL,"</literal>
             <literal type="string">"data varchar(64) NOT NULL,"</literal> <literal type="string">"start_time timestamp, PRIMARY KEY(id))"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"INSERT INTO %s.services(id, data, start_time)"</literal>
             <literal type="string">" VALUES('%s','%s',FROM_UNIXTIME(%ld)) ON DUPLICATE KEY UPDATE"</literal>
             <literal type="string">" start_time=FROM_UNIXTIME(%ld)"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<label><name>recycle_mysql_resources</name>:</label>
    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>chassis_config_unregister_service</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>conf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>chassis_config_get_mysql_connection</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: MySQL conn is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"DELETE FROM %s.services WHERE id='%s'"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>chassis_config_reload_variables</name><parameter_list>(<parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"call chassis_config_reload_variables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>status</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>chassis_config_get_mysql_connection</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:Cannot connect to mysql server when reload variables."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SELECT object_value,mtime FROM %s.objects where object_name='%s'"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"sql failed: %s, when reload variables, mysql_errno: %d"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call mysql_store_result nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>row</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call mysql_fetch_row nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>time_t</name></type> <name>mt</name> <init>= <expr><call><name>chassis_epoch_from_string</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>config_object_t</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><call><name>chassis_config_get_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"call chassis_config_get_object nil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>recycle_mysql_resources</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>chassis_config_object_set_cache</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<label><name>recycle_mysql_resources</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mysql_conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
</unit>
