<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/chassis-event.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNISTD_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>             <comment type="block">/* for write() */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>         <comment type="block">/* for SOCK_STREAM and AF_UNIX/AF_INET */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_CONNRESET</name></cpp:macro> <cpp:value>ECONNRESET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_CONNABORTED</name></cpp:macro> <cpp:value>ECONNABORTED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_INPROGRESS</name></cpp:macro> <cpp:value>EINPROGRESS</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EWOULDBLOCK</name> <operator>==</operator> <name>EAGAIN</name></expr></cpp:if>
<comment type="block" format="doxygen">/**
 * some system make EAGAIN == EWOULDBLOCK which would lead to a
 * error in the case handling
 *
 * set it to -1 as this error should never happen
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_WOULDBLOCK</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NET_WOULDBLOCK</name></cpp:macro> <cpp:value>EWOULDBLOCK</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>sig_atomic_t</name></type>    <name>cetus_reap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>sig_atomic_t</name></type>    <name>cetus_change_binary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>sig_atomic_t</name></type>    <name>cetus_quit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>sig_atomic_t</name></type>    <name>cetus_noaccept</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>chassis_event_add_with_timeout</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>event_base_set</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:event add ev:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * add a event asynchronously
 *
 * @see network_mysqld_con_handle()
 */</comment>
<function><type><name>void</name></type>
<name>chassis_event_add</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>chassis_event_loop_t</name> <modifier>*</modifier></type>
<name>chassis_event_loop_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>event_base_new</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>chassis_event_loop_free</name><parameter_list>(<parameter><decl><type><name>chassis_event_loop_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>event_base_free</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>chassis_event_loop</name><parameter_list>(<parameter><decl><type><name>chassis_event_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <comment type="block" format="doxygen">/**
     * check once a second if we shall shutdown the proxy
     */</comment>
    <while>while <condition>(<expr><operator>(</operator><name>mutex</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>mutex</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>chassis_is_shutdown</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cetus_reap</name> <operator>||</operator> <name>cetus_change_binary</name> <operator>||</operator> <name>cetus_quit</name> <operator>||</operator> <name>cetus_noaccept</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>cetus_quit</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: cetus_quit is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>cetus_noaccept</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: cetus_noaccept is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>cetus_reap</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: cetus_reap is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">256000</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>event_base_loopexit</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: leaving chassis_event_loop early. failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>event_base_dispatch</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: after event_base_dispatch:%d, errno:%d, str:%s"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: EINTR is met"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: leaving chassis_event_loop early, errno != EINTR was: %s (%d)"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
        

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
