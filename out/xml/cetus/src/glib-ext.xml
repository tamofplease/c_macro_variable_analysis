<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/glib-ext.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys-pedantic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * free function for GStrings in a GHashTable
 */</comment>
<function><type><name>void</name></type>
<name>g_hash_table_string_free</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * common GString free func as a hook
 */</comment>
<function><type><name>void</name></type>
<name>g_string_true_free</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * hash function for GString
 */</comment>
<function><type><name>guint</name></type>
<name>g_hash_table_string_hash</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>g_string_hash</name><argument_list>(<argument><expr><name>_key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * compare function for GString
 */</comment>
<function><type><name>gboolean</name></type>
<name>g_hash_table_string_equal</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>_a</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>_b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>g_string_equal</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>_b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * true-function for g_hash_table_foreach
 */</comment>
<function><type><name>gboolean</name></type>
<name>g_hash_table_true</name><parameter_list>(<parameter><function_decl><type><name>gpointer</name></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>key</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>gpointer</name></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>value</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>gpointer</name></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>u</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * duplicate a GString
 */</comment>
<function><type><name>GString</name> <modifier>*</modifier></type>
<name>g_string_dup</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * compare two strings (gchar arrays), whose lengths are known
 */</comment>
<function><type><name>gboolean</name></type>
<name>strleq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>a_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>b_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>a_len</name> <operator>!=</operator> <name>b_len</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a_len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * calculate the difference between two GTimeVal values, in usec
 * positive return value in *tdiff means *told is indeed "earlier" than *tnew,
 * negative return value means the reverse
 * Caller is responsible for passing valid pointers
 */</comment>
<function><type><name>void</name></type>
<name>ge_gtimeval_diff</name><parameter_list>(<parameter><decl><type><name>GTimeVal</name> <modifier>*</modifier></type><name>told</name></decl></parameter>, <parameter><decl><type><name>GTimeVal</name> <modifier>*</modifier></type><name>tnew</name></decl></parameter>, <parameter><decl><type><name>gint64</name> <modifier>*</modifier></type><name>tdiff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>tdiff</name> <operator>=</operator> <operator>(</operator><name>gint64</name><operator>)</operator><name><name>tnew</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>told</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>tdiff</name> <operator>*=</operator> <name>G_USEC_PER_SEC</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>tdiff</name> <operator>+=</operator> <operator>(</operator><name>gint64</name><operator>)</operator><name><name>tnew</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>told</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GString</name> <modifier>*</modifier></type>
<name>g_string_assign_len</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>str_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>g_debug_hexdump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>hex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>_s</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>hex</name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><literal type="string">"[%04"</literal> <name>G_GSIZE_MODIFIER</name> <literal type="string">"x]  "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"  "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>g_ascii_isprint</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"\n  "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">16</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* fill up the line */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>-</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>-</operator> <operator>(</operator><name>len</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>g_ascii_isprint</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"(%s) %"</literal> <name>G_GSIZE_FORMAT</name> <literal type="string">" bytes:\n  %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>hex</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>calculate_alloc_len</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>orig_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>orig_len</name> <operator>&lt;=</operator> <literal type="number">16384</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>orig_len</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">32</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
     
        <if_stmt><if>if <condition>(<expr><name>orig_len</name> <operator>&lt;=</operator> <literal type="number">48</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">48</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
     
        <if_stmt><if>if <condition>(<expr><name>orig_len</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">64</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
     
        <if_stmt><if>if <condition>(<expr><name>orig_len</name> <operator>&lt;=</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">128</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>orig_len</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">256</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>orig_len</name> <operator>&lt;=</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">512</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>orig_len</name> <operator>&lt;=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">1024</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>orig_len</name> <operator>&lt;=</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">2048</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>orig_len</name> <operator>&lt;=</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">4096</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>orig_len</name> <operator>&lt;=</operator> <literal type="number">8192</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">8192</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><literal type="number">16384</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>orig_len</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
