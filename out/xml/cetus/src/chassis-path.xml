<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/chassis-path.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>             <comment type="block">/* for realpath */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-path.h"</cpp:file></cpp:include>

<function><type><name>gchar</name> <modifier>*</modifier></type>
<name>chassis_get_basedir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>prgname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>absolute_path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>bin_dir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name></type> <name><name>r_path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>base_dir</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>g_path_is_absolute</name><argument_list>(<argument><expr><name>prgname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* No need to dup, just to get free right */</comment>
        <expr_stmt><expr><name>absolute_path</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>prgname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block" format="doxygen">/**
         * the path wasn't absolute
         *
         * Either it is
         * - in the $PATH 
         * - relative like ./bin/... or
         */</comment>

        <expr_stmt><expr><name>absolute_path</name> <operator>=</operator> <call><name>g_find_program_in_path</name><argument_list>(<argument><expr><name>prgname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>absolute_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"can't find myself (%s) in PATH"</literal></expr></argument>, <argument><expr><name>prgname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_path_is_absolute</name><argument_list>(<argument><expr><name>absolute_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>cwd</name> <init>= <expr><call><name>g_get_current_dir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>absolute_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>absolute_path</name> <operator>=</operator> <call><name>g_build_filename</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>prgname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* assume that the binary is in ./s?bin/ and 
     * that the the basedir is right above it
     *
     * to get this working we need a "clean" basedir, no .../foo/./bin/ 
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>realpath</name><argument_list>(<argument><expr><name>absolute_path</name></expr></argument>, <argument><expr><name>r_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: realpath(%s) failed: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>absolute_path</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>bin_dir</name> <operator>=</operator> <call><name>g_path_get_dirname</name><argument_list>(<argument><expr><name>r_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>base_dir</name> <operator>=</operator> <call><name>g_path_get_dirname</name><argument_list>(<argument><expr><name>bin_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* don't free base_dir, because we need it later */</comment>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>absolute_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>bin_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>base_dir</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type>
<name>chassis_resolve_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_dir</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>base_dir</name> <operator>||</operator> <operator>!</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>g_path_is_absolute</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>filename</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>base_dir</name></expr></argument>, <argument><expr><name>G_DIR_SEPARATOR_S</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
