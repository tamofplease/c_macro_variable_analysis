<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/server-session.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server-session.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysqld_error.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resultset_merge.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plugin-common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-sql-log.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>server_session_free</name><parameter_list>(<parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ss</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>server_sess_wait_for_event</name><parameter_list>(<parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>ev_type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>ev_type</name></expr></argument>, <argument><expr><name>server_session_con_handler</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_waiting</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>remove_server_wait_event</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><operator>(</operator><name>server_session_t</name> <operator>*</operator><operator>)</operator><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>is_waiting</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: still wait server resp here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CHECK_PENDING_EVENT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_tcp_stream_after_recv_resp</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>candidates</name><index>[<expr><name><name>ss</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>candidates</name><index>[<expr><name><name>ss</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <call><name>g_queue_peek_head_link</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server_closed</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>remove_mul_server_recv_packets</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>proxy_put_shard_conn_to_pool</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: server conn is closed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"server closed prematurely"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_RESULT_MERGE</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>tail</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>err_packet</name> <init>= <expr><name><name>err</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>err_packet</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>resp_too_long</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: merge over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>callback_merge</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>RM_FAIL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"merge failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_RESULT_MERGE</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>callback_merge</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>RM_FAIL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>remove_server_wait_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: remove read pending event:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"merge failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_RESULT_MERGE</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>remove_server_wait_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: resp too long:%p, src port:%s, sql:%s"</literal></expr></argument>,
                  <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"response too long for proxy"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_LONG_RESP</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>tail</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>err_packet</name> <init>= <expr><name><name>err</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>merge_parameters_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>err_packet</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pkt_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_read_event</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_READ</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:NET_RW_STATE_ERROR is set i:%d,b:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>to_read</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>record_xa_log_for_mending</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>unavailable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_FINISHED</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: b is zero, xid:%s, con:%p, xa state:%d"</literal></expr></argument>,
                          <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:b is zero, socket fd:%d, con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_cnt</name></name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>ss</name><operator>-&gt;</operator><name>index</name></name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:NET_RW_STATE_ERROR is set i:%d,b:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_timeout_event</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>record_xa_log_for_mending</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: EV_TIMEOUT for con xid:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_timeout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_FINISHED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:EV_TIMEOUT, set server timeout, con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_read_part_finished</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:part finished, num_read_pending:%d for con:%p, server fd:%d"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>do_tcp_stream_after_recv_resp</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>is_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_read_finished</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>is_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_write_event</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><call><name>network_mysqld_write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_servers_visited</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_write_pending</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_READ</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_write_pending</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_WRITE</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:write wait for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>server_sess_wait_for_event</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>write_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><literal type="string">"write error"</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_client_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:write error for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_NET_ERROR_ON_WRITE</name></expr></argument>, <argument><expr><literal type="string">"08S01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
    </block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_read_server</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>is_finished</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>to_read</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>is_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>is_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NETWORK_SOCKET_SUCCESS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: finished flag:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>is_finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: finished flag:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>is_finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_mysqld_read_mul_packets</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: finished flag:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>is_finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>:</case>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: resp len:%d, attr adj state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sock</name><operator>-&gt;</operator><name>resp_len</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>is_finished</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: read finished here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>set_conn_attr</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_FINISHED</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_read_finished</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_waiting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>ON</name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>REALTIME</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>ts_read_query_result_last</name></name> <operator>=</operator> <call><name>get_timer_microseconds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>query</name> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>query_status</name></name> <operator>=</operator> <name>MYSQLD_PACKET_ERR</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>log_sql_backend_sharding</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>num_servers_visited</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>set_conn_attr</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_PART_FINISHED</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:tcp stream is true for:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>could_be_fast_streamed</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
                    <while>while <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>network_mysqld_queue_append_raw</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: network_mysqld_queue_append_raw packet here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>

                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: send_part_content_to_client"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>send_part_content_to_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>server_sess_wait_for_event</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>could_be_fast_streamed</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: optimize here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>resp_len</name></name> <operator>&gt;</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>max_resp_len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_FINISHED</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_too_long</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: resp len is too long for query:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: resp too long:%p, src port:%s, sql:%s"</literal></expr></argument>,
                          <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
                                                   <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"response too long for proxy"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_LONG_RESP</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>&amp;&amp;</operator> <name><name>sock</name><operator>-&gt;</operator><name>max_header_size_reached</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>num_servers_visited</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set NET_RW_STATE_PART_FINISHED here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_PART_FINISHED</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_servers_visited</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sock</name><operator>-&gt;</operator><name>max_header_size_reached</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
                    <while>while <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>network_mysqld_queue_append_raw</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: send_part_content_to_client"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>send_part_content_to_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>server_sess_wait_for_event</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    <case>case <expr><name>NETWORK_SOCKET_ERROR</name></expr>:</case>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: NET_RW_STATE_ERROR is set here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_after_read</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>partially_merged</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>do_tcp_stream_after_recv_resp</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:con:%p, state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_pending_servers</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>server_session_con_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:visit server_session_con_handler"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><operator>(</operator><name>server_session_t</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>con</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>read_cal_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:visit server_session_con_handler, state:%d for con:%p, fd:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>is_waiting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_cache_enabled</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check if query can be cached, attr state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_read_ro_server_allowed</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>==</operator> <name>ATTR_START</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>query_cache_judged</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>do_check_qeury_cache</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>process_read_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>process_timeout_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <do>do <block>{<block_content>

        <switch>switch <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NET_RW_STATE_PART_FINISHED</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_READ</name> <operator>||</operator> <name>events</name> <operator>==</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>process_read_part_finished</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return;</return>
        <case>case <expr><name>NET_RW_STATE_ERROR</name></expr>:</case>
        <case>case <expr><name>NET_RW_STATE_FINISHED</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_READ</name> <operator>||</operator> <name>events</name> <operator>==</operator> <name>EV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>process_read_finished</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return;</return>
        <case>case <expr><name>NET_RW_STATE_WRITE</name></expr>:</case>
            <expr_stmt><expr><call><name>process_write_event</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        <case>case <expr><name>NET_RW_STATE_READ</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_read_server</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: stop here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>

        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>NET_RW_STATE_FINISHED</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>events</name> <operator>==</operator> <name>EV_READ</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>process_after_read</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>NET_RW_STATE_NONE</name></expr>)</condition>;</do>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:server_session_con_handler over for con:%p, ss:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
