<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/cetus-process.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-channel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-process-cycle.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>int</name></type>     <name>signo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>signame</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handler</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>siginfo_t</name> <modifier>*</modifier></type><name>siginfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ucontext</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>cetus_signal_t</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cetus_execute_proc</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cetus_signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>siginfo_t</name> <modifier>*</modifier></type><name>siginfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ucontext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cetus_process_get_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>int</name></type>              <name>cetus_argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>           <modifier>*</modifier><modifier>*</modifier></type><name>cetus_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>           <modifier>*</modifier><modifier>*</modifier></type><name>cetus_os_argv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>              <name>cetus_process_slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>              <name>cetus_channel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>              <name>cetus_last_process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>              <name>cetus_process_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type>     <name>cetus_channel_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cetus_process_t</name></type>  <name><name>cetus_processes</name><index>[<expr><name>CETUS_MAX_PROCESSES</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>cetus_signal_t</name></type>  <name><name>signals</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_NOACCEPT_SIGNAL</name></expr></argument>)</argument_list></call></expr>,
      <expr><literal type="string">"SIG"</literal> <call><name>cetus_value</name><argument_list>(<argument><expr><name>CETUS_NOACCEPT_SIGNAL</name></expr></argument>)</argument_list></call></expr>,
      <expr><literal type="string">""</literal></expr>,
      <expr><name>cetus_signal_handler</name></expr> }</block></expr>,

    <expr><block>{ <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_TERMINATE_SIGNAL</name></expr></argument>)</argument_list></call></expr>,
      <expr><literal type="string">"SIG"</literal> <call><name>cetus_value</name><argument_list>(<argument><expr><name>CETUS_TERMINATE_SIGNAL</name></expr></argument>)</argument_list></call></expr>,
      <expr><literal type="string">"stop"</literal></expr>,
      <expr><name>cetus_signal_handler</name></expr> }</block></expr>,

    <expr><block>{ <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_SHUTDOWN_SIGNAL</name></expr></argument>)</argument_list></call></expr>,
      <expr><literal type="string">"SIG"</literal> <call><name>cetus_value</name><argument_list>(<argument><expr><name>CETUS_SHUTDOWN_SIGNAL</name></expr></argument>)</argument_list></call></expr>,
      <expr><literal type="string">"quit"</literal></expr>,
      <expr><name>cetus_signal_handler</name></expr> }</block></expr>,

    <expr><block>{ <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_CHANGEBIN_SIGNAL</name></expr></argument>)</argument_list></call></expr>,
      <expr><literal type="string">"SIG"</literal> <call><name>cetus_value</name><argument_list>(<argument><expr><name>CETUS_CHANGEBIN_SIGNAL</name></expr></argument>)</argument_list></call></expr>,
      <expr><literal type="string">""</literal></expr>,
      <expr><name>cetus_signal_handler</name></expr> }</block></expr>,

    <expr><block>{ <expr><name>SIGALRM</name></expr>, <expr><literal type="string">"SIGALRM"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>cetus_signal_handler</name></expr> }</block></expr>,

    <expr><block>{ <expr><name>SIGINT</name></expr>, <expr><literal type="string">"SIGINT"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>cetus_signal_handler</name></expr> }</block></expr>,

    <expr><block>{ <expr><name>SIGIO</name></expr>, <expr><literal type="string">"SIGIO"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,

    <expr><block>{ <expr><name>SIGCHLD</name></expr>, <expr><literal type="string">"SIGCHLD"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>cetus_signal_handler</name></expr> }</block></expr>,

    <expr><block>{ <expr><name>SIGSYS</name></expr>, <expr><literal type="string">"SIGSYS, SIG_IGN"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,

    <expr><block>{ <expr><name>SIGPIPE</name></expr>, <expr><literal type="string">"SIGPIPE, SIG_IGN"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,

    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_channel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>channel</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>socketpair</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: socketpair() failed "</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: create channel %d:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
            <argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name> <operator>|</operator> <name>O_RDWR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: nonblock failed while spawning: %s (%d)"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cetus_close_channel</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name> <operator>|</operator> <name>O_RDWR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: nonblock failed while spawning: %s (%d)"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>g_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cetus_close_channel</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>on</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FIOASYNC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>on</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: ioctl(FIOASYNC) failed"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cetus_close_channel</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>F_SETOWN</name></expr></argument>, <argument><expr><name>cetus_pid</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: fcntl(F_SETOWN) failed while spawning:%s, cetus_pid:%d"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cetus_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cetus_close_channel</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: fcntl(FD_CLOEXEC) failed"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cetus_close_channel</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: fcntl(FD_CLOEXEC) failed"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cetus_close_channel</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>pid_t</name></type>
<name>cetus_spawn_process</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>cetus_spawn_proc_pt</name></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>respawn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pid_t</name></type>  <name>pid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>s</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>respawn</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <name>respawn</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>cetus_last_process</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>CETUS_MAX_PROCESSES</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: no more than %d processes can be spawned"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>CETUS_MAX_PROCESSES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>CETUS_INVALID_PID</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>


    <if_stmt><if>if <condition>(<expr><name>respawn</name> <operator>!=</operator> <name>CETUS_PROCESS_DETACHED</name></expr>)</condition> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><call><name>create_channel</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>parent_child_channel</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>CETUS_INVALID_PID</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>cetus_channel</name> <operator>=</operator> <name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>cetus_process_slot</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>pid</name></expr>)</condition> <block>{<block_content>

    <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: fork() failed while spawning \"%s\""</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cetus_close_channel</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>parent_child_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>CETUS_INVALID_PID</name></expr>;</return>

    <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><name>cetus_parent</name> <operator>=</operator> <name>cetus_pid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cetus_pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>cetus_process_slot</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <name>cetus_pid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>exited</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: after call fork, channel:%d, pid:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>proc</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: start %s %d, respawn:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>respawn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>exited</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>respawn</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>pid</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>proc</name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>exiting</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>respawn</name></expr>)</condition> <block>{<block_content>

    <case>case <expr><name>CETUS_PROCESS_NORESPAWN</name></expr>:</case>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>respawn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>just_spawn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>detached</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>CETUS_PROCESS_JUST_SPAWN</name></expr>:</case>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>respawn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>just_spawn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>detached</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>CETUS_PROCESS_RESPAWN</name></expr>:</case>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>respawn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>just_spawn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>detached</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>CETUS_PROCESS_JUST_RESPAWN</name></expr>:</case>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>respawn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>just_spawn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>detached</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>CETUS_PROCESS_DETACHED</name></expr>:</case>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>respawn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>just_spawn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>detached</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>cetus_last_process</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: cetus_last_process add,orig:%d, cetus_processes[s].parent_child_channel[0]:%d"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cetus_last_process</name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cetus_last_process</name><operator>++</operator></expr>;</expr_stmt>
        <comment type="block">/* TODO may have potential problems when having too many crashes */</comment>
        <expr_stmt><expr><name>cetus_process_id</name> <operator>=</operator> <operator>(</operator><name>cetus_process_id</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>MAX_WORK_PROCESSES</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>pid_t</name></type>
<name>cetus_execute</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>cetus_exec_ctx_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>cetus_spawn_process</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>cetus_execute_proc</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                             <argument><expr><name>CETUS_PROCESS_DETACHED</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_execute_proc</name><parameter_list>(<parameter><decl><type><name>cetus_cycle_t</name> <modifier>*</modifier></type><name>cycle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cycle</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>cycle</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>stop_listening</name></name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>cetus_exec_ctx_t</name>  <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>execve</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator> <specifier>const</specifier><operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator> <specifier>const</specifier><operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>envp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: execve() failed while executing %s \"%s\""</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>envp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>cetus_init_signals</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cetus_signal_t</name>      <modifier>*</modifier></type><name>sig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type>     <name>sa</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>sig</name> <operator>=</operator> <name>signals</name></expr>;</init> <condition><expr><name><name>sig</name><operator>-&gt;</operator><name>signo</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>sig</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sigaction</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>sig</name><operator>-&gt;</operator><name>handler</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_sigaction</name></name> <operator>=</operator> <name><name>sig</name><operator>-&gt;</operator><name>handler</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_SIGINFO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_IGN</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name><name>sig</name><operator>-&gt;</operator><name>signo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: sigaction(%s) failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>signame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> 
<name>cetus_signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>siginfo_t</name> <modifier>*</modifier></type><name>siginfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ucontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>              <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cetus_signal_t</name>  <modifier>*</modifier></type><name>sig</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator>  <name>errno</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>sig</name> <operator>=</operator> <name>signals</name></expr>;</init> <condition><expr><name><name>sig</name><operator>-&gt;</operator><name>signo</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>sig</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>sig</name><operator>-&gt;</operator><name>signo</name></name> <operator>==</operator> <name>signo</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <switch>switch <condition>(<expr><name>cetus_process</name></expr>)</condition> <block>{<block_content>

    <case>case <expr><name>CETUS_PROCESS_MASTER</name></expr>:</case>
    <case>case <expr><name>CETUS_PROCESS_SINGLE</name></expr>:</case>
        <switch>switch <condition>(<expr><name>signo</name></expr>)</condition> <block>{<block_content>

        <case>case <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_SHUTDOWN_SIGNAL</name></expr></argument>)</argument_list></call></expr>:</case>
            <expr_stmt><expr><name>cetus_quit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_TERMINATE_SIGNAL</name></expr></argument>)</argument_list></call></expr>:</case>
        <case>case <expr><name>SIGINT</name></expr>:</case>
            <expr_stmt><expr><name>cetus_terminate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_NOACCEPT_SIGNAL</name></expr></argument>)</argument_list></call></expr>:</case>
            <expr_stmt><expr><name>cetus_noaccept</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_CHANGEBIN_SIGNAL</name></expr></argument>)</argument_list></call></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>getppid</name><argument_list>()</argument_list></call> <operator>==</operator> <name>cetus_parent</name> <operator>||</operator> <name>cetus_new_binary</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>cetus_change_binary</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>SIGALRM</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>SIGIO</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>SIGCHLD</name></expr>:</case>
            <expr_stmt><expr><name>cetus_reap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>

        <break>break;</break>

    <case>case <expr><name>CETUS_PROCESS_WORKER</name></expr>:</case>
    <case>case <expr><name>CETUS_PROCESS_HELPER</name></expr>:</case>
        <switch>switch <condition>(<expr><name>signo</name></expr>)</condition> <block>{<block_content>

        <case>case <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_NOACCEPT_SIGNAL</name></expr></argument>)</argument_list></call></expr>:</case>
            <expr_stmt><expr><name>cetus_noaccept</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_SHUTDOWN_SIGNAL</name></expr></argument>)</argument_list></call></expr>:</case>
            <expr_stmt><expr><name>cetus_quit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_TERMINATE_SIGNAL</name></expr></argument>)</argument_list></call></expr>:</case>
        <case>case <expr><name>SIGINT</name></expr>:</case>
            <expr_stmt><expr><name>cetus_terminate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><call><name>cetus_signal_value</name><argument_list>(<argument><expr><name>CETUS_CHANGEBIN_SIGNAL</name></expr></argument>)</argument_list></call></expr>:</case>
        <case>case <expr><name>SIGIO</name></expr>:</case>
            <break>break;</break>
        </block_content>}</block></switch>

        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>signo</name> <operator>==</operator> <name>SIGCHLD</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_process_get_status</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>cetus_process_get_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t</name></type>          <name>pid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>   <name>one</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>one</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for <control>( <init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
        <expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>waitpid</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ECHILD</name> <operator>&amp;&amp;</operator> <name>one</name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ECHILD</name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <return>return;</return>
        </block_content>}</block></if></if_stmt>


        <expr_stmt><expr><name>one</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cetus_last_process</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>respawn</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>respawn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

</unit>
