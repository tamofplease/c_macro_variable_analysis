<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/cetus-variable.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-variable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-mainloop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>cetus_variable_get_value_str</name><parameter_list>(<parameter><decl><type><name>cetus_variable_t</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>VAR_INT</name></expr>:</case>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>gint</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>VAR_INT64</name></expr>:</case>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>guint64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>VAR_FLOAT</name></expr>:</case>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>VAR_STRING</name></expr>:</case>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"error value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>
</unit>
