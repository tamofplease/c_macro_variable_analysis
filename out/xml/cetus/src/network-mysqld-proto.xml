<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/network-mysqld-proto.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys-pedantic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * decode a length-encoded integer from a network packet
 *
 * _off is incremented on success 
 *
 * @param packet   the MySQL-packet to decode
 * @param v        destination of the integer
 * @return 0 on success, non-0 on error 
 *
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_lenenc_int</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint64</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>off</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint64</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bytestream</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: offset is too large:%d, packet len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>bytestream</name><index>[<expr><name>off</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">251</literal></expr>)</condition> <block>{<block_content>    <comment type="block">/* */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>bytestream</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bytestream</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">252</literal></expr>)</condition> <block>{<block_content>    <comment type="block">/* 2 byte length */</comment>
        <if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>off</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bytestream</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">253</literal></expr>)</condition> <block>{<block_content>    <comment type="block">/* 3 byte */</comment>
        <if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>off</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bytestream</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">254</literal></expr>)</condition> <block>{<block_content>    <comment type="block">/* 8 byte */</comment>
        <if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>
                             <operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>
                              <operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>bytestream</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>off</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* if we hit this place we complete have no idea about the protocol */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>bytestream</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="number">251</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: bytestream[%d] is %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>bytestream</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* either ERR (255) or NULL (251) */</comment>
        <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>off</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * skip bytes in the network packet
 *
 * a assertion makes sure that we can't skip over the end of the packet 
 *
 * @param packet the MySQL network packet
 * @param size   bytes to skip
 *
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_skip</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_skip_lenenc_str</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint64</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug_hexdump</name><argument_list>(<argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_get_lenenc_int</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a fixed-length integer from the network packet 
 *
 * @param packet the MySQL network packet
 * @param v      destination of the integer
 * @param size   byte-len of the integer to decode
 * @return a the decoded integer
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_peek_int_len</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint64</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gsize</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint32</name></type> <name>r_l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r_h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guchar</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><operator>(</operator><name>guchar</name> <operator>*</operator><operator>)</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" format="doxygen">/**
     * for some reason left-shift &gt; 32 leads to negative numbers 
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>shift</name> <operator>+=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>bytes</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>r_l</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>bytes</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>shift</name> <operator>+=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>bytes</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>r_h</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>bytes</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>guint64</name><operator>)</operator><name>r_h</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>r_l</name><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_get_int_len</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint64</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_peek_int_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a 8-bit integer from the network packet
 *
 * @param packet the MySQL network packet
 * @param v      dest for the number
 * @return 0 on success, non-0 on error
 * @see network_mysqld_proto_get_int_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_int8</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint8</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint64</name></type> <name>v64</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_get_int_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v64</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name>v64</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>v64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* check that we really only got one byte back */</comment>

    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>v64</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a 8-bit integer from the network packet
 *
 * @param packet the MySQL network packet
 * @param v      dest for the number
 * @return 0 on success, non-0 on error
 * @see network_mysqld_proto_get_int_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_peek_int8</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint8</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint64</name></type> <name>v64</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_peek_int_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v64</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check that we really only got one byte back */</comment>
    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name>v64</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>v64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>v64</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a 16-bit integer from the network packet
 *
 * @param packet the MySQL network packet
 * @param v      dest for the number
 * @return 0 on success, non-0 on error
 * @see network_mysqld_proto_get_int_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_int16</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint16</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint64</name></type> <name>v64</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_get_int_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v64</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check that we really only got two byte back */</comment>
    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name>v64</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>v64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>v64</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a 16-bit integer from the network packet
 *
 * @param packet the MySQL network packet
 * @param v      dest for the number
 * @return 0 on success, non-0 on error
 * @see network_mysqld_proto_get_int_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_peek_int16</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint16</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint64</name></type> <name>v64</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_peek_int_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v64</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check that we really only got two byte back */</comment>
    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name>v64</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>v64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>v64</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a 24-bit integer from the network packet
 *
 * @param packet the MySQL network packet
 * @param v      dest for the number
 * @return 0 on success, non-0 on error
 * @see network_mysqld_proto_get_int_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_int24</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint32</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint64</name></type> <name>v64</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_get_int_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v64</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check that we really only got two byte back */</comment>
    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name>v64</name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>v64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>v64</name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a 32-bit integer from the network packet
 *
 * @param packet the MySQL network packet
 * @param v      dest for the number
 * @return 0 on success, non-0 on error
 * @see network_mysqld_proto_get_int_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_int32</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint32</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint64</name></type> <name>v64</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_get_int_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v64</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>v64</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a string from the network packet
 *
 * @param packet the MySQL network packet
 * @param s      dest of the string
 * @param len    length of the string
 * @return       0 on success, non-0 otherwise
 * @return the string (allocated) or NULL of len is 0
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_str_len</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: packet-offset out of range: %u + "</literal> <name>F_SIZE_T</name> <literal type="string">" &gt; "</literal> <name>F_SIZE_T</name></expr></argument>,
                   <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>g_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>network_mysqld_proto_get_str_len2</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: packet-offset out of range: %u + "</literal> <name>F_SIZE_T</name> <literal type="string">" &gt; "</literal> <name>F_SIZE_T</name></expr></argument>,
                   <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a variable-length string from the network packet
 *
 * variable length strings are prefixed with variable-length integer 
 * defining the length of the string
 *
 * @param packet the MySQL network packet
 * @param s      destination of the decoded string
 * @param _len    destination of the length of the decoded string, if len is non-NULL
 * @return 0 on success, non-0 on error
 * @see network_mysqld_proto_get_str_len(), network_mysqld_proto_get_lenenc_int()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_lenenc_str</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>guint64</name> <modifier>*</modifier></type><name>_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint64</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug_hexdump</name><argument_list>(<argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_get_lenenc_int</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>PACKET_LEN_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>_len</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><call><name>network_mysqld_proto_get_str_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_get_column</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>s_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint64</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>network_mysqld_proto_get_lenenc_int</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>s_size</name> <operator>&lt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: column too long:%ld, buffer size:%ld"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>s_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>network_mysqld_proto_get_str_len2</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a NUL-terminated string from the network packet
 *
 * @param packet the MySQL network packet
 * @param s      dest of the string
 * @return       0 on success, non-0 otherwise
 * @see network_mysqld_proto_get_str_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_string</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint64</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name><operator>)</operator></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* this has to be a \0 */</comment>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" format="doxygen">/**
         * copy the string w/o the NUL byte 
         */</comment>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_str_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a GString from the network packet
 *
 * @param packet the MySQL network packet
 * @param len    bytes to copy
 * @param out    a GString which carries the string
 * @return       0 on success, -1 on error
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_gstr_len</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>               <comment type="block">/* nothing to copy */</comment>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* the offset is already too large */</comment>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>;</expr_stmt>    <comment type="block">/* offset would get too large */</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get a NUL-terminated GString from the network packet
 *
 * @param packet the MySQL network packet
 * @param out    a GString which carries the string
 * @return       a pointer to the string in out
 *
 * @see network_mysqld_proto_get_gstr_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_get_gstr</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint64</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator>
         <operator>*</operator><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>==</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>    <comment type="block">/* havn't found a trailing \0 */</comment>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_get_gstr_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* skip the \0 */</comment>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>err</name> <operator>||</operator> <call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * create a empty field for a result-set definition
 *
 * @return a empty MYSQL_FIELD
 */</comment>
<function><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type>
<name>network_mysqld_proto_fielddef_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>MYSQL_FIELD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>field</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_mysql_field_row_free</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>row</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * free a MYSQL_FIELD and its components
 *
 * @param field  the MYSQL_FIELD to free
 */</comment>
<function><type><name>void</name></type>
<name>network_mysqld_proto_fielddef_free</name><parameter_list>(<parameter><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>catalog</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>catalog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>org_name</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>org_table</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>org_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * create a array of MYSQL_FIELD 
 *
 * @return a empty array of MYSQL_FIELD
 */</comment>
<function><type><name>GPtrArray</name> <modifier>*</modifier></type>
<name>network_mysqld_proto_fielddefs_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>fields</name> <operator>=</operator> <call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>fields</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * free a array of MYSQL_FIELD 
 *
 * @param fields  array of MYSQL_FIELD to free
 * @see network_mysqld_proto_field_free()
 */</comment>
<function><type><name>void</name></type>
<name>network_mysqld_proto_fielddefs_free</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name><name>fields</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>field</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * set length of the packet in the packet header
 *
 * each MySQL packet is 
 *  - is prefixed by a 4 byte packet header
 *  - length is max 16Mbyte (3 Byte)
 *  - sequence-id (1 Byte) 
 *
 * To encode a packet of more then 16M clients have to send multiple 16M frames
 *
 * the sequence-id is incremented for each related packet and wrapping from 255 to 0
 *
 * @param header  string of at least 4 byte to write the packet header to
 * @param length  length of the packet
 * @param id      sequence-id of the packet
 * @return 0
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_set_packet_len</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>_header</name></decl></parameter>, <parameter><decl><type><name>guint32</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>_header</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&lt;=</operator></expr></argument>, <argument><expr><name>PACKET_LEN_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_set_packet_id</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>_header</name></decl></parameter>, <parameter><decl><type><name>guint8</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>_header</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>network_mysqld_proto_set_compressed_packet_len</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>_header</name></decl></parameter>, <parameter><decl><type><name>guint32</name></type> <name>length</name></decl></parameter>,
                                                   <parameter><decl><type><name>guint32</name></type> <name>len_before</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>_header</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&lt;=</operator></expr></argument>, <argument><expr><name>PACKET_LEN_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len_before</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len_before</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len_before</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_append_packet_len</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>_header</name></decl></parameter>, <parameter><decl><type><name>guint32</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>network_mysqld_proto_append_int24</name><argument_list>(<argument><expr><name>_header</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_append_packet_id</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>_header</name></decl></parameter>, <parameter><decl><type><name>guint8</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>network_mysqld_proto_append_int8</name><argument_list>(<argument><expr><name>_header</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * decode the packet length from a packet header
 *
 * @param header the first 3 bytes of the network packet
 * @return the packet length
 * @see network_mysqld_proto_set_header()
 */</comment>
<function><type><name>guint32</name></type>
<name>network_mysqld_proto_get_packet_len</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>_header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>_header</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>(</operator><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * decode the packet id from a packet header
 *
 * @param header the first 4 bytes of the network packet
 * @return the packet id
 * @see network_mysqld_proto_set_packet_id()
 */</comment>
<function><type><name>guint8</name></type>
<name>network_mysqld_proto_get_packet_id</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>_header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>_header</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

    <return>return <expr><name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * append the variable-length integer to the packet
 *
 * @param packet  the MySQL network packet
 * @param length  integer to encode
 * @return        0
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_append_lenenc_int</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint64</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">251</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>gchar</name><operator>)</operator><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">16777216</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>gchar</name><operator>)</operator><literal type="number">253</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>gchar</name><operator>)</operator><literal type="number">254</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * encode a GString in to a MySQL len-encoded string 
 *
 * @param packet  the MySQL network packet
 * @param s       string to encode
 * @param length  length of the string to encode
 * @return 0
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_append_lenenc_str_len</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>guint64</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>gchar</name><operator>)</operator><literal type="number">251</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" format="doxygen">/** this is NULL */</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_proto_append_lenenc_int</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * encode a GString in to a MySQL len-encoded string 
 *
 * @param packet  the MySQL network packet
 * @param s       string to encode
 *
 * @see network_mysqld_proto_append_lenenc_str_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_append_lenenc_str</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>network_mysqld_proto_append_lenenc_str_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * encode fixed length integer in to a network packet
 *
 * @param packet  the MySQL network packet
 * @param num     integer to encode
 * @param size    byte size of the integer
 * @return        0
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>network_mysqld_proto_append_int_len</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint64</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gsize</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>num</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * encode 8-bit integer in to a network packet
 *
 * @param packet  the MySQL network packet
 * @param num     integer to encode
 *
 * @see network_mysqld_proto_append_int_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_append_int8</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint8</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>network_mysqld_proto_append_int_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * encode 16-bit integer in to a network packet
 *
 * @param packet  the MySQL network packet
 * @param num     integer to encode
 *
 * @see network_mysqld_proto_append_int_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_append_int16</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint16</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>network_mysqld_proto_append_int_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * encode 24-bit integer in to a network packet
 *
 * @param packet  the MySQL network packet
 * @param num     integer to encode
 *
 * @see network_mysqld_proto_append_int_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_append_int24</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint32</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>network_mysqld_proto_append_int_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * encode 32-bit integer in to a network packet
 *
 * @param packet  the MySQL network packet
 * @param num     integer to encode
 *
 * @see network_mysqld_proto_append_int_len()
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_append_int32</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>guint32</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>network_mysqld_proto_append_int_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * hash the password as MySQL 4.1 and later assume
 *
 *   SHA1(password)
 *
 * @see network_mysqld_proto_scramble
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_password_hash</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>response</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>password_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GChecksum</name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>

    <comment type="block">/* first round: SHA1(password) */</comment>
    <expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name>g_checksum_new</name><argument_list>(<argument><expr><name>G_CHECKSUM_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_checksum_update</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><operator>(</operator><name>guchar</name> <operator>*</operator><operator>)</operator> <name>password</name></expr></argument>, <argument><expr><name>password_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><call><name>g_checksum_type_get_length</name><argument_list>(<argument><expr><name>G_CHECKSUM_SHA1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* will be overwritten with the right value in the next step */</comment>
    <expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>response</name><operator>-&gt;</operator><name>allocated_len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_checksum_get_digest</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><operator>(</operator><name>guchar</name> <operator>*</operator><operator>)</operator> <name><name>response</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>response</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_checksum_free</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * scramble the hashed password with the challenge
 *
 * @param response         dest 
 * @param challenge        the challenge string as sent by the mysql-server
 * @param challenge_len    length of the challenge
 * @param hashed_pwd  hashed password
 * @param hashed_pwd_len length of the hashed password
 *
 * @see network_mysqld_proto_password_hash
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proto_password_scramble</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>response</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>challenge</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>challenge_len</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hashed_pwd</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>hashed_pwd_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GChecksum</name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>step2</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>challenge</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><literal type="number">20</literal> <operator>==</operator> <name>challenge_len</name> <operator>||</operator> <literal type="number">21</literal> <operator>==</operator> <name>challenge_len</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>hashed_pwd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><literal type="number">20</literal> <operator>==</operator> <name>hashed_pwd_len</name> <operator>||</operator> <literal type="number">21</literal> <operator>==</operator> <name>hashed_pwd_len</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * we have to run
     *
     *   XOR(SHA1(password), SHA1(challenge + SHA1(SHA1(password)))
     *
     * where SHA1(password) is the hashed_pwd and
     *       challenge      is ... challenge
     *
     *   XOR(hashed_pwd, SHA1(challenge + SHA1(hashed_pwd)))
     *
     */</comment>

    <if_stmt><if>if <condition>(<expr><name>hashed_pwd_len</name> <operator>==</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>hashed_pwd_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* 1. SHA1(hashed_pwd) */</comment>
    <expr_stmt><expr><name>step2</name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_password_hash</name><argument_list>(<argument><expr><name>step2</name></expr></argument>, <argument><expr><name>hashed_pwd</name></expr></argument>, <argument><expr><name>hashed_pwd_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 2. SHA1(challenge + SHA1(hashed_pwd) */</comment>
    <expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name>g_checksum_new</name><argument_list>(<argument><expr><name>G_CHECKSUM_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if the challenge is 21 bytes long it means we're behind a 5.5.7 or up server
     * that supports authentication plugins. After auth-plugin-data-2 the protocol adds
     * a spacing character to split it from the next part of the packet: auth-plugin-name.
     * That spacing char '\0' is the 21th byte.
     *
     * We assume that auth-plugin-data is always 20 bytes, 
     * on this scnenario it is 21 so we need
     * to ignore the last byte: the trailing '\0'.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>challenge_len</name> <operator>==</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>challenge_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_checksum_update</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><operator>(</operator><name>guchar</name> <operator>*</operator><operator>)</operator> <name>challenge</name></expr></argument>, <argument><expr><name>challenge_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_checksum_update</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><operator>(</operator><name>guchar</name> <operator>*</operator><operator>)</operator> <name><name>step2</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>step2</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><call><name>g_checksum_type_get_length</name><argument_list>(<argument><expr><name>G_CHECKSUM_SHA1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>response</name><operator>-&gt;</operator><name>allocated_len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_checksum_get_digest</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><operator>(</operator><name>guchar</name> <operator>*</operator><operator>)</operator> <name><name>response</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>response</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_checksum_free</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* XOR the hashed_pwd with SHA1(challenge + SHA1(hashed_pwd)) */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>guchar</name><operator>)</operator> <name><name>response</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>guchar</name><operator>)</operator> <name><name>hashed_pwd</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>step2</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_mysqld_proto_skip_network_header</name><parameter_list>(<parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>network_mysqld_proto_skip</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>NET_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*@}*/</comment>
</unit>
