<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/chassis-keyfile.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-keyfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * map options from the keyfile to the config-options
 *
 * @returns FALSE on error, TRUE on success
 * @added in 0.8.3
 */</comment>
<function><type><name>gboolean</name></type>
<name>chassis_keyfile_to_options_with_error</name><parameter_list>(<parameter><decl><type><name>GKeyFile</name> <modifier>*</modifier></type><name>keyfile</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>ini_group_name</name></decl></parameter>, <parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>config_entries</name></decl></parameter>, <parameter><decl><type><name>GError</name> <modifier>*</modifier><modifier>*</modifier></type><name>_gerr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>gerr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>ret</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>keyfile</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_set_error</name><argument_list>(<argument><expr><name>_gerr</name></expr></argument>, <argument><expr><name>G_FILE_ERROR</name></expr></argument>, <argument><expr><name>G_FILE_ERROR_INVAL</name></expr></argument>, <argument><expr><literal type="string">"keyfile has to be set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_key_file_has_group</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>ini_group_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* the group doesn't exist, no config-entries to map */</comment>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"(keyfile) has no group [%s]"</literal></expr></argument>, <argument><expr><name>ini_group_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <comment type="block">/* set the defaults */</comment>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>config_entries</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_option_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>arg_string</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg_string_array</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gboolean</name></type> <name>arg_bool</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gint</name></type> <name>arg_int</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gint64</name></type> <name>arg_int64</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gdouble</name></type> <name>arg_double</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gsize</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/* already set by command line */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPTION_FLAG_CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>OPTION_ARG_STRING</name></expr>:</case>
            <comment type="block">/* is this option set already */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>arg_string</name> <operator>=</operator> <call><name>g_key_file_get_string</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>ini_group_name</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gerr</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* strip trailing spaces */</comment>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>gchar</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <call><name>g_strchomp</name><argument_list>(<argument><expr><name>arg_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>OPTION_ARG_STRING_ARRAY</name></expr>:</case>
            <comment type="block">/* is this option set already */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>arg_string_array</name> <operator>=</operator> <call><name>g_key_file_get_string_list</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>ini_group_name</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gerr</name></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>arg_string_array</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>arg_string_array</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>g_strstrip</name><argument_list>(<argument><expr><name><name>arg_string_array</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>gchar</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <name>arg_string_array</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>OPTION_ARG_NONE</name></expr>:</case>
            <expr_stmt><expr><name>arg_bool</name> <operator>=</operator> <call><name>g_key_file_get_boolean</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>ini_group_name</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gerr</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>gboolean</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <name>arg_bool</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>OPTION_ARG_INT</name></expr>:</case>
            <expr_stmt><expr><name>arg_int</name> <operator>=</operator> <call><name>g_key_file_get_integer</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>ini_group_name</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gerr</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>gint</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <name>arg_int</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>OPTION_ARG_INT64</name></expr>:</case>
            <expr_stmt><expr><name>arg_int64</name> <operator>=</operator> <call><name>g_key_file_get_int64</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>ini_group_name</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gerr</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>gint64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <name>arg_int64</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>OPTION_ARG_DOUBLE</name></expr>:</case>
            <expr_stmt><expr><name>arg_double</name> <operator>=</operator> <call><name>g_key_file_get_double</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>ini_group_name</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gerr</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>gdouble</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>arg_data</name></name><operator>)</operator> <operator>=</operator> <name>arg_double</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"%s: (keyfile) the option %d can't be handled"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>

        <if_stmt><if>if <condition>(<expr><name>gerr</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>gerr</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>G_KEY_FILE_ERROR_KEY_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* ignore if this key isn't set in the config-file */</comment>
                <expr_stmt><expr><call><name>g_error_free</name><argument_list>(<argument><expr><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* otherwise propage the error the higher level */</comment>
                <expr_stmt><expr><call><name>g_propagate_error</name><argument_list>(<argument><expr><name>_gerr</name></expr></argument>, <argument><expr><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>gerr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>OPTION_FLAG_CONF_FILE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
