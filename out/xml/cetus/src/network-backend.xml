<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/network-backend.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-backend.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-plugin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"character-set.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-users.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>backend_state_t_str</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"unknown"</literal></expr>,
    <expr><literal type="string">"online"</literal></expr>,
    <expr><literal type="string">"down"</literal></expr>,
    <expr><literal type="string">"maintaining"</literal></expr>,
    <expr><literal type="string">"deleted"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>backend_type_t_str</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"unknown"</literal></expr>,
    <expr><literal type="string">"read/write"</literal></expr>,
    <expr><literal type="string">"readonly"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>network_backend_t</name> <modifier>*</modifier></type>
<name>network_backend_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_backend_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>network_connection_pool_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <call><name>network_address_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>server_group</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>server_version</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>server_weight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_backend_free</name><parameter_list>(<parameter><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>network_connection_pool_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_address_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>server_version</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>server_group</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>config</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_username</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call network_backend_free end"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_backend_init_extra</name><parameter_list>(<parameter><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>max_idle_connections</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>max_idle_connections</name></name> <operator>=</operator> <name><name>chas</name><operator>-&gt;</operator><name>max_idle_connections</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>mid_idle_connections</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>mid_idle_connections</name></name> <operator>=</operator> <name><name>chas</name><operator>-&gt;</operator><name>mid_idle_connections</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_backend_conns_count</name><parameter_list>(<parameter><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>in_use</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pooled</name> <init>= <expr><call><name>network_connection_pool_total_conns_count</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>in_use</name> <operator>+</operator> <name>pooled</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>network_group_t</name> <modifier>*</modifier></type><name>network_group_new</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>network_group_free</name><parameter_list>(<parameter><decl><type><name>network_group_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>network_group_add</name><parameter_list>(<parameter><decl><type><name>network_group_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>network_backend_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>network_group_update</name><parameter_list>(<parameter><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>gp</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>network_backends_t</name> <modifier>*</modifier></type>
<name>network_backends_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>network_backends_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name></name> <operator>=</operator> <call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>groups</name></name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>network_group_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_backends_free</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gsize</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bs</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: call network_backends_free"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_backend_free</name><argument_list>(<argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>network_backends_into_group</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>backend</name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>server_group</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>gp</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>gp</name> <operator>=</operator> <call><name>network_backends_get_group</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_group</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_group_add</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>network_backends_add_group</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_backend_config</name><parameter_list>(<parameter><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name></decl></parameter>, <parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>backend_config</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_username</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_username</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>default_db</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>charset</name></name> <operator>=</operator> <call><name>charset_get_number</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>mid_conn_pool</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>mid_idle_connections</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>max_conn_pool</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>max_idle_connections</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * FIXME: 1) remove _set_address, make this function callable with result of same
 *        2) differentiate between reasons for "we didn't add" (now -1 in all cases)
 */</comment>
<function><type><name>int</name></type>
<name>network_backends_add</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
                     <parameter><decl><type><name>backend_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>backend_state_t</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>new_backend</name> <init>= <expr><call><name>network_backend_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>new_backend</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_backend</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_backend</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>srv</name></name> <operator>=</operator> <name>srv</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>group_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>group_p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_backends_add_group</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>group_p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>new_backend</name><operator>-&gt;</operator><name>server_group</name></name></expr></argument>, <argument><expr><name>group_p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>new_backend</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>group_p</name> <operator>-</operator> <name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_backends_add_group</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Only valid for rw mode */</comment>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>weight_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>weight_p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>priority_mode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>new_backend</name><operator>-&gt;</operator><name>server_weight</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>weight_p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>new_backend</name><operator>-&gt;</operator><name>server_weight</name></name> <operator>&gt;</operator> <name>MAX_WEIGHT_VALUE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>new_backend</name><operator>-&gt;</operator><name>server_weight</name></name> <operator>=</operator> <name>MAX_WEIGHT_VALUE</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>new_backend</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>,
                              <argument><expr><name>weight_p</name> <operator>-</operator> <name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>new_backend</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>network_address_set_address</name><argument_list>(<argument><expr><name><name>new_backend</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>new_backend</name><operator>-&gt;</operator><name>address</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_backend_free</name><argument_list>(<argument><expr><name>new_backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>BACKEND_OPERATE_NETERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
    <comment type="block">/* check if this backend is already known */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>old_backend</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strleq</name><argument_list>(<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>old_backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>new_backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_backend_free</name><argument_list>(<argument><expr><name>new_backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"backend %s is already known!"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>BACKEND_OPERATE_DUPLICATE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BACKEND_TYPE_RW</name> <operator>&amp;&amp;</operator> <call><name>network_backend_check_available_rw</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>new_backend</name><operator>-&gt;</operator><name>server_group</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>BACKEND_OPERATE_2MASTER</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>new_backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BACKEND_TYPE_RO</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>ro_server_num</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>set_backend_config</name><argument_list>(<argument><expr><name>new_backend</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>is_need_to_create_conns</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_backends_into_group</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>new_backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"added %s backend: %s, state: %s"</literal></expr></argument>, <argument><expr><name><name>backend_type_t_str</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name><name>backend_state_t_str</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>BACKEND_OPERATE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * we just change the state to deleted
 */</comment>
<function><type><name>int</name></type>
<name>network_backends_remove</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name> <operator>&amp;&amp;</operator> <name><name>bs</name><operator>-&gt;</operator><name>ro_server_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>ro_server_num</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_UNKNOWN</name></expr></argument>, <argument><expr><name>BACKEND_STATE_DELETED</name></expr></argument>, <argument><expr><name>NO_PREVIOUS_STATE</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * updated the _DOWN state to _UNKNOWN if the backends were
 * down for at least 4 seconds
 *
 * we only check once a second to reduce the overhead on connection setup
 *
 * @returns   number of updated backends
 */</comment>
<function><type><name>int</name></type>
<name>network_backends_check</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTimeVal</name></type> <name>now</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>backends_woken_up</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint64</name></type> <name>t_diff</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_get_current_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ge_gtimeval_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bs</name><operator>-&gt;</operator><name>backend_last_check</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check max(once a second) */</comment>
    <comment type="block">/* this also covers the "time went backards" case */</comment>
    <if_stmt><if>if <condition>(<expr><name>t_diff</name> <operator>&lt;</operator> <name>G_USEC_PER_SEC</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>t_diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: time went backwards (%"</literal> <name>G_GINT64_FORMAT</name> <literal type="string">" usec)!"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>t_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>backend_last_check</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>backend_last_check</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>backend_last_check</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_DOWN</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* check if a backend is marked as down for more than 4 sec */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>state_since</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: backend %s was down for more than 4 secs, waking it up"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BACKEND_STATE_UNKNOWN</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>state_since</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>backends_woken_up</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>backends_woken_up</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * modify the backends to new type and new state.
 *
 * @returns   0 for success -1 for error.
 */</comment>

<function><type><name>int</name></type>
<name>network_backends_modify</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>ndx</name></decl></parameter>,
        <parameter><decl><type><name>backend_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>backend_state_t</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>backend_state_t</name></type> <name>oldstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTimeVal</name></type> <name>now</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_get_current_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ndx</name> <operator>&gt;=</operator> <call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>ndx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>guint</name></type> <name>is_change</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>oldstate</name> <operator>==</operator> <name>NO_PREVIOUS_STATE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>oldstate</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>state</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>state</name></name><operator>)</operator></expr></argument>, <argument><expr><name>oldstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>state_since</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>BACKEND_STATE_UP</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>BACKEND_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>srv</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>is_need_to_create_conns</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>is_change</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"there might be conflict, network_backends_modify failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BACKEND_TYPE_RO</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>ro_server_num</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>ro_server_num</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>gp</name> <init>= <expr><call><name>network_backends_get_group</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>server_group</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>gp</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>network_group_update</name><argument_list>(<argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>is_change</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name>is_change</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"change backend: %s from type: %s, state: %s to type: %s, state: %s"</literal></expr></argument>,
                          <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>backend_type_t_str</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>,
                          <argument><expr><name><name>backend_state_t_str</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>backend_type_t_str</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>backend_state_t_str</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: backend state:%d for backend:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_backend_t</name> <modifier>*</modifier></type>
<name>network_backends_get</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>ndx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ndx</name> <operator>&gt;=</operator> <call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* FIXME: shouldn't we copy the backend or add ref-counting ? */</comment>
    <return>return <expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>ndx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>guint</name></type>
<name>network_backends_count</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>len</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>gboolean</name></type>
<name>network_backends_load_config</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cetus_users_contains</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: no required password here for user:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>backend</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>set_backend_config</name><argument_list>(<argument><expr><name>backend</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>network_group_t</name> <modifier>*</modifier></type>
<name>network_backends_get_group</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>PARTITION_SUPER_GROUP</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>group</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>group</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>network_backends_add_group</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>gp_name</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>gp_name</name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>PARTITION_SUPER_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>gp_name</name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>network_backends_get_group</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>gp_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="block">/* dup check */</comment>
        <decl_stmt><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>gp</name> <init>= <expr><call><name>network_group_new</name><argument_list>(<argument><expr><name>gp_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>gp_name</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>network_group_t</name> <modifier>*</modifier></type>
<name>network_group_new</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>gp</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>network_group_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>gp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    <return>return <expr><name>gp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>network_group_free</name><parameter_list>(<parameter><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>gp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>gp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>network_group_add</name><parameter_list>(<parameter><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>gp</name></decl></parameter>, <parameter><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>gp</name><operator>-&gt;</operator><name>master</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"only one master each group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>gp</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>gp</name><operator>-&gt;</operator><name>nslaves</name></name> <operator>&gt;=</operator> <name>MAX_GROUP_SLAVES</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"too many slaves for group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gp</name><operator>-&gt;</operator><name>nslaves</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>gp</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>strleq</name><argument_list>(<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>gp</name><operator>-&gt;</operator><name>nslaves</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gp</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name><name>gp</name><operator>-&gt;</operator><name>nslaves</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>gp</name><operator>-&gt;</operator><name>nunknown</name></name> <operator>&gt;=</operator> <name>MAX_GROUP_SLAVES</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"too many unknown for group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gp</name><operator>-&gt;</operator><name>nunknown</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>gp</name><operator>-&gt;</operator><name>unknown</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>strleq</name><argument_list>(<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>gp</name><operator>-&gt;</operator><name>nunknown</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gp</name><operator>-&gt;</operator><name>unknown</name><index>[<expr><name><name>gp</name><operator>-&gt;</operator><name>nunknown</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* some backend in this group changed rw type, update */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>network_group_update</name><parameter_list>(<parameter><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>gp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* take out backends of this group evenly */</comment>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>backends</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>gp</name><operator>-&gt;</operator><name>master</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>backends</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>backends</name></expr></argument>, <argument><expr><name><name>gp</name><operator>-&gt;</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gp</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gp</name><operator>-&gt;</operator><name>nslaves</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>backends</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>backends</name></expr></argument>, <argument><expr><name><name>gp</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>gp</name><operator>-&gt;</operator><name>nslaves</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gp</name><operator>-&gt;</operator><name>nunknown</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>backends</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>backends</name></expr></argument>, <argument><expr><name><name>gp</name><operator>-&gt;</operator><name>unknown</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>gp</name><operator>-&gt;</operator><name>nunknown</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* rearrange them into this group */</comment>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>backends</name></expr>;</init> <condition><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>network_group_add</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>backends</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>network_backends_get_ro_ndx_by_priority</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GArray</name> <modifier>*</modifier></type><name>active_ro_indices</name> <init>= <expr><call><name>g_array_sized_new</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>weight</name><index>[<expr><name>MAX_WEIGHT_VALUE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>MAX_WEIGHT_VALUE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_UP</name> <operator>||</operator>
         <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_UNKNOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>weight</name><index>[<expr><name><name>backend</name><operator>-&gt;</operator><name>server_weight</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>max_weight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAX_WEIGHT_VALUE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>max_weight</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_UP</name> <operator>||</operator>
         <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_UNKNOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>server_weight</name></name> <operator>==</operator> <name>max_weight</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_array_append_val</name><argument_list>(<argument><expr><name>active_ro_indices</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><name><name>active_ro_indices</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>g_array_index</name><argument_list>(<argument><expr><name>active_ro_indices</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>read_count</name></name><operator>++</operator><operator>)</operator> <operator>%</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_array_free</name><argument_list>(<argument><expr><name>active_ro_indices</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>network_backends_get_ro_ndx</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>priority_mode</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>network_backends_get_ro_ndx_by_priority</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* round robin choose read only backend */</comment>
    <decl_stmt><decl><type><name>GArray</name><modifier>*</modifier></type> <name>active_ro_indices</name> <init>= <expr><call><name>g_array_sized_new</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name><operator>)</operator>
            <operator>&amp;&amp;</operator> <operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_UP</name> <operator>||</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_UNKNOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_array_append_val</name><argument_list>(<argument><expr><name>active_ro_indices</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><name><name>active_ro_indices</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>g_array_index</name><argument_list>(<argument><expr><name>active_ro_indices</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>read_count</name></name><operator>++</operator><operator>)</operator> <operator>%</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_array_free</name><argument_list>(<argument><expr><name>active_ro_indices</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_backends_get_rw_ndx</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>BACKEND_TYPE_RW</name> <operator>==</operator> <name><name>backend</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_UP</name> <operator>||</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_UNKNOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_backends_find_address</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>ipport</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>i</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>network_backends_server_version</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>GString</name><modifier>*</modifier></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>server_version</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>server_version</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* round robin pick */</comment>
<function><type><name>network_backend_t</name> <modifier>*</modifier></type>
<name>network_group_pick_slave_backend</name><parameter_list>(<parameter><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>group</name><operator>-&gt;</operator><name>nslaves</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><operator>(</operator><name><name>group</name><operator>-&gt;</operator><name>slave_visit_cnt</name></name><operator>++</operator><operator>)</operator> <operator>%</operator> <name><name>group</name><operator>-&gt;</operator><name>nslaves</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>backend</name> <operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">": skip dead backend(slave): %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><call><name>network_backend_conns_count</name><argument_list>(<argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>connected_clts</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cur_idle</name> <init>= <expr><name>total</name> <operator>-</operator> <name>connected_clts</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>max_idle_conns</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>max_conn_pool</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, slave:%d, total:%d, connected:%d, idle:%d, max:%d"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>connected_clts</name></expr></argument>, <argument><expr><name>cur_idle</name></expr></argument>, <argument><expr><name>max_idle_conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>cur_idle</name> <operator>||</operator> <name>total</name> <operator>&lt;=</operator> <name>max_idle_conns</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>group</name><operator>-&gt;</operator><name>nslaves</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>backend</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>backend</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_group_get_slave_names</name><parameter_list>(<parameter><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>slaves</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>group</name><operator>-&gt;</operator><name>nslaves</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>slaves</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>slaves</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_backends_idle_conns</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pooled</name> <init>= <expr><call><name>network_connection_pool_total_conns_count</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>pooled</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_backends_used_conns</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>in_use</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>in_use</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>network_backend_check_available_rw</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <name><name>name</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>BACKEND_TYPE_RW</name> <operator>==</operator> <name><name>backend</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
                <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_MAINTAINING</name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_DELETED</name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>network_backends_get_group</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>rw</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>master</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>rw</name> <operator>&amp;&amp;</operator> <name><name>rw</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_MAINTAINING</name> <operator>&amp;&amp;</operator> <name><name>rw</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_DELETED</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
