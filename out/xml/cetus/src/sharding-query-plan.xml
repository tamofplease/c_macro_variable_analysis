<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/sharding-query-plan.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sharding-query-plan.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>sharding_plan_t</name> <modifier>*</modifier></type>
<name>sharding_plan_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type><name>orig_sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sharding_plan_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>orig_sql</name></name> <operator>=</operator> <name>orig_sql</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name> <operator>=</operator> <call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>plan</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sharding_plan_free</name><parameter_list>(<parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>sql_list</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>sql_list</name></name></expr></argument>, <argument><expr><name>g_string_true_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>mapping</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>plan</name><operator>-&gt;</operator><name>mapping</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init> <condition><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sharding_plan_free_map</name><parameter_list>(<parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>is_sql_rewrite_completely</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>sql_list</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>sql_list</name></name></expr></argument>, <argument><expr><name>g_string_true_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>sql_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>mapping</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>plan</name><operator>-&gt;</operator><name>mapping</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init> <condition><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>mapping</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>_group_sql_pair</name></name> <modifier>*</modifier></type>
<name>sharding_plan_get_mapping</name><parameter_list>(<parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type><name>gp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>mapping</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>plan</name><operator>-&gt;</operator><name>mapping</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init> <condition><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>_group_sql_pair</name></name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>gp</name> <operator>==</operator> <name><name>group</name><operator>-&gt;</operator><name>gp_name</name></name> <operator>||</operator> <call><name>g_string_equal</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>gp_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>group</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sharding_plan_has_group</name><parameter_list>(<parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type><name>gp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>gp</name> <operator>||</operator> <call><name>g_string_equal</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TRUE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sharding_plan_add_mapping</name><parameter_list>(<parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>_group_sql_pair</name></name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><call><name>sharding_plan_get_mapping</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pair</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>_group_sql_pair</name></name> <modifier>*</modifier></type><name>new_pair</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>_group_sql_pair</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>new_pair</name><operator>-&gt;</operator><name>gp_name</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>new_pair</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>mapping</name></name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><name>new_pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sharding_plan_add_group</name><parameter_list>(<parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>gp_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sharding_plan_has_group</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>gp_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>gp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sharding_plan_add_mapping</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>gp_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sharding_plan_add_groups</name><parameter_list>(<parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>groups</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>sharding_plan_add_group</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sharding_plan_clear_group</name><parameter_list>(<parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>groups</name> <init>= <expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_remove_range</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sharding_plan_add_group_sql</name><parameter_list>(<parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>gp_name</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>sql_list</name></name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>sql_list</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sharding_plan_has_group</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>gp_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>gp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sharding_plan_add_mapping</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>gp_name</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type>
<name>sharding_plan_get_sql</name><parameter_list>(<parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>_group_sql_pair</name></name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><call><name>sharding_plan_get_mapping</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pair</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pair</name><operator>-&gt;</operator><name>sql</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>pair</name><operator>-&gt;</operator><name>sql</name></name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name><name>plan</name><operator>-&gt;</operator><name>is_modified</name></name></expr> ?</condition><then> <expr><name><name>plan</name><operator>-&gt;</operator><name>modified_sql</name></name></expr> </then><else>: <expr><name><name>plan</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></else></ternary></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>plan</name><operator>-&gt;</operator><name>is_modified</name></name></expr> ?</condition><then> <expr><name><name>plan</name><operator>-&gt;</operator><name>modified_sql</name></name></expr> </then><else>: <expr><name><name>plan</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sharding_plan_set_modified_sql</name><parameter_list>(<parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>is_modified</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>modified_sql</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>gstr_comp</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>a2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>GString</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>GString</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a2</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>s2</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sharding_plan_sort_groups</name><parameter_list>(<parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_ptr_array_sort</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>gstr_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
