<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/cetus-monitor.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-monitor.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-users.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-timings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sharding-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ALIVE_INTERVAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ALIVE_TIMES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_DELAY_INTERVAL</name></cpp:macro> <cpp:value>500 * 1000</cpp:value></cpp:define> <comment type="block">/* 500ms */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_LEN</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<comment type="block">/* Each backend should have db &lt;proxy_heart_beat&gt; and table &lt;tb_heartbeat&gt; */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEARTBEAT_DB</name></cpp:macro> <cpp:value>"proxy_heart_beat"</cpp:value></cpp:define>

<struct>struct <name>cetus_monitor_t</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>chassis</name></name> <modifier>*</modifier></type><name>chas</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_event_loop_t</name> <modifier>*</modifier></type><name>evloop</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>check_alive_timer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>write_master_timer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>read_slave_timer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>check_config_timer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>db_passwd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>backend_conns</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>registered_objects</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config_id</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mysql_init_called</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mysql_conn_free</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_current_sys_timestr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>time_sec</name> <init>= <expr><call><name>g_malloc</name><argument_list>(<argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>time_sec</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>time_micro</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s.%06ld"</literal></expr></argument>, <argument><expr><name>time_sec</name></expr></argument>, <argument><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>time_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>time_micro</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MYSQL</name> <modifier>*</modifier></type>
<name>get_mysql_connection</name><parameter_list>(<parameter><decl><type><name>cetus_monitor_t</name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>backend_conns</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_ping</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>conn</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_hash_table_remove</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>backend_conns</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"monitor: remove dead mysql conn of backend: %s"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>mysql_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>mysql_init_called</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">6</literal> <operator>*</operator> <name>SECONDS</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mysql_options</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>MYSQL_OPT_CONNECT_TIMEOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_options</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>MYSQL_OPT_READ_TIMEOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_options</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>MYSQL_OPT_WRITE_TIMEOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ip_port</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>ip_port</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name> <init>= <expr><name><name>monitor</name><operator>-&gt;</operator><name>chas</name><operator>-&gt;</operator><name>default_username</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_real_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ip_port</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>db_passwd</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                         <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"monitor thread cannot connect to backend: %s@%s"</literal></expr></argument>,
               <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>chas</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_conn_free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>ip_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"set session time_zone='+08:00'"</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mysql_real_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(
        <argument><expr><literal type="string">"set session timezone failed. error: %d, "</literal>
        <literal type="string">"text: %s, backend: %s"</literal></expr></argument>,
        <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_conn_free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>rs_set</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rs_set</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>mysql_field_count</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(
            <argument><expr><literal type="string">"set session timezone failed. "</literal>
            <literal type="string">"error: %d, text: %s, backend: %s"</literal></expr></argument>,
            <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>rs_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>backend_conns</name></name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"monitor thread connected to backend: %s, cached %d conns"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>,
            <argument><expr><call><name>g_hash_table_size</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>backend_conns</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>ip_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>get_ip_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ip</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>hptr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>hptr</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>hptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"gethostbyname failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for>for<control>(<init><expr><name>pptr</name> <operator>=</operator> <name><name>hptr</name><operator>-&gt;</operator><name>h_addr_list</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>hptr</name><operator>-&gt;</operator><name>h_addrtype</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pptr</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>ADDRESS_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>slave_list_compare</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>old_value</name> <init>= <expr><operator>(</operator><name>gchar</name> <operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>search_value</name> <init>= <expr><operator>(</operator><name>gchar</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>, <argument><expr><name>search_value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>group_replication_detect</name><parameter_list>(<parameter><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>cetus_monitor_t</name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>bs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return ;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>slave_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name></type> <name><name>master_addr</name><index>[<expr><name>ADDRESS_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name></type> <name><name>slave_addr</name><index>[<expr><name>ADDRESS_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name></type> <name><name>server_group</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint</name></type> <name>has_master</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint</name></type> <name>backends_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>sql1</name> <init>= <expr><literal type="string">"SELECT `MEMBER_HOST`, `MEMBER_PORT` FROM "</literal>
            <literal type="string">"performance_schema.replication_group_members "</literal>
            <literal type="string">"WHERE MEMBER_STATE = 'ONLINE' AND MEMBER_ID = "</literal>
            <literal type="string">"(SELECT VARIABLE_VALUE FROM performance_schema.global_status "</literal>
            <literal type="string">"WHERE VARIABLE_NAME = 'group_replication_primary_member')  "</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>sql2</name> <init>= <expr><literal type="string">"SELECT `MEMBER_HOST`, `MEMBER_PORT` FROM "</literal>
            <literal type="string">"performance_schema.replication_group_members "</literal>
            <literal type="string">"WHERE MEMBER_STATE = 'ONLINE' AND MEMBER_ID &lt;&gt; "</literal>
            <literal type="string">"(SELECT VARIABLE_VALUE FROM performance_schema.global_status "</literal>
            <literal type="string">"WHERE VARIABLE_NAME = 'group_replication_primary_member')  "</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>backends_num</name> <operator>=</operator> <call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>backends_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_MAINTAINING</name> <operator>||</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_DELETED</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backend_addr</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>get_mysql_connection</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>rs_set</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gchar</name></type> <name><name>ip</name><index>[<expr><name>ADDRESS_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gchar</name></type> <name><name>old_master</name><index>[<expr><name>ADDRESS_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"get connection failed. error: %d, text: %s, backend: %s"</literal></expr></argument>,
                                                                 <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><call><name>mysql_real_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>sql1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"select primary info failed for group_replication. error: %d, text: %s, backend: %s"</literal></expr></argument>,
                                           <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>rs_set</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>rs_set</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"get primary info result set failed for group_replication. error: %d, text: %s, backend: %s"</literal></expr></argument>,
                                                       <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>rs_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_OFFLINE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"get primary info rows failed for group_replication. error: %d, text: %s, backend: %s"</literal></expr></argument>,
                                                                                   <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>rs_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>get_ip_by_name</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"get master ip by name failed. error: %d, text: %s, backend: %s"</literal></expr></argument>,
                                                                   <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>rs_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>old_master</name></expr></argument>, <argument><expr><name>master_addr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>master_addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>master_addr</name></expr></argument>, <argument><expr><name>ADDRESS_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>old_master</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>old_master</name></expr></argument>, <argument><expr><name>master_addr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"exists more than one masters."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>rs_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return ;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>old_master</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>old_master</name></expr></argument>, <argument><expr><name>master_addr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>rs_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>rs_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rs_set</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>master_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"get master address failed. error: %d, text: %s, backend: %s"</literal></expr></argument>,
                                                                   <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>backend_addr</name></expr></argument>, <argument><expr><name>master_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>get_mysql_connection</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>master_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"get connection failed. error: %d, text: %s, backend: %s"</literal></expr></argument>,
                                                                    <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>master_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><call><name>mysql_real_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>sql2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"select slave info failed for group_replication. error: %d, text: %s, backend: %s"</literal></expr></argument>,
                                           <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>master_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>rs_set</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>rs_set</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"get slave info result set failed for group_replication. error: %d, text: %s"</literal></expr></argument>,
                                                       <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <while>while<condition>(<expr><name>row</name><operator>=</operator><call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>rs_set</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ADDRESS_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>get_ip_by_name</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"get slave ip by name failed. error: %d, text: %s"</literal></expr></argument>,
                                                       <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>slave_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ADDRESS_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>slave_addr</name></expr></argument>, <argument><expr><name>ADDRESS_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name><name>slave_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>slave_list</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>slave_list</name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name>slave_addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"add slave %s in list, %d"</literal></expr></argument>, <argument><expr><name>slave_addr</name></expr></argument>, <argument><expr><call><name>g_list_length</name><argument_list>(<argument><expr><name>slave_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"get slave address failed. error: %d, text: %s"</literal></expr></argument>,
                                                       <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>rs_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>backends_num</name> <operator>=</operator> <call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>backends_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backend_addr</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>server_group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>server_group</name></name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>server_group</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>server_group</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>has_master</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>backend_addr</name></expr></argument>, <argument><expr><name>master_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_OFFLINE</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RW</name></expr></argument>, <argument><expr><name>BACKEND_STATE_UNKNOWN</name></expr></argument>, <argument><expr><name>NO_PREVIOUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>g_list_find_custom</name><argument_list>(<argument><expr><name>slave_list</name></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>, <argument><expr><name>slave_list_compare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>it</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_OFFLINE</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RO</name></expr></argument>, <argument><expr><name>BACKEND_STATE_UNKNOWN</name></expr></argument>, <argument><expr><name>NO_PREVIOUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RO</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>NO_PREVIOUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>slave_list</name> <operator>=</operator> <call><name>g_list_remove_link</name><argument_list>(<argument><expr><name>slave_list</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_MAINTAINING</name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_DELETED</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RO</name></expr></argument>, <argument><expr><name>BACKEND_STATE_OFFLINE</name></expr></argument>, <argument><expr><name>NO_PREVIOUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>backends_num</name> <operator>=</operator> <call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>backends_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backend_addr</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>server_group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>server_group</name></name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>server_group</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>server_group</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name> <operator>||</operator> <name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>g_list_find_custom</name><argument_list>(<argument><expr><name>slave_list</name></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>, <argument><expr><name>slave_list_compare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>it</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_OFFLINE</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RO</name></expr></argument>, <argument><expr><name>BACKEND_STATE_UNKNOWN</name></expr></argument>, <argument><expr><name>NO_PREVIOUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RO</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>NO_PREVIOUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>slave_list</name> <operator>=</operator> <call><name>g_list_remove_link</name><argument_list>(<argument><expr><name>slave_list</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name><name>master_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>backend_addr</name></expr></argument>, <argument><expr><name>master_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_OFFLINE</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RW</name></expr></argument>, <argument><expr><name>BACKEND_STATE_UNKNOWN</name></expr></argument>, <argument><expr><name>NO_PREVIOUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RW</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>NO_PREVIOUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><name>has_master</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_MAINTAINING</name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_DELETED</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RO</name></expr></argument>, <argument><expr><name>BACKEND_STATE_OFFLINE</name></expr></argument>, <argument><expr><name>NO_PREVIOUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>has_master</name> <operator>&amp;&amp;</operator> <name><name>master_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>server_group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gchar</name></type> <name><name>master_addr_temp</name><index>[<expr><name>ADDRESS_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>master_addr_temp</name></expr></argument>, <argument><expr><name>ADDRESS_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s@%s"</literal></expr></argument>, <argument><expr><name>master_addr</name></expr></argument>, <argument><expr><name>server_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_backends_add</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>master_addr_temp</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RW</name></expr></argument>, <argument><expr><name>BACKEND_STATE_UP</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>chas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>network_backends_add</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>master_addr</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RW</name></expr></argument>, <argument><expr><name>BACKEND_STATE_UP</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>chas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>g_list_length</name><argument_list>(<argument><expr><name>slave_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>it</name> <operator>=</operator> <name>slave_list</name></expr>;</init> <condition><expr><name>it</name></expr>;</condition> <incr><expr><name>it</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>server_group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>gchar</name></type> <name><name>slave_addr_temp</name><index>[<expr><name>ADDRESS_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>slave_addr_temp</name></expr></argument>, <argument><expr><name>ADDRESS_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s@%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>, <argument><expr><name>server_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_backends_add</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>slave_addr_temp</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RO</name></expr></argument>, <argument><expr><name>BACKEND_STATE_UNKNOWN</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>chas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>network_backends_add</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RO</name></expr></argument>, <argument><expr><name>BACKEND_STATE_UNKNOWN</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>chas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>slave_list</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_MONITOR_TIMER</name><parameter_list>(<parameter><type><name>ev_struct</name></type></parameter>, <parameter><type><name>ev_cb</name></type></parameter>, <parameter><type><name>timeout</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ev_now_update((struct ev_loop *) monitor-&gt;evloop);\
    evtimer_set(&amp;(monitor-&gt;ev_struct), ev_cb, monitor);\
    event_base_set(monitor-&gt;evloop, &amp;(monitor-&gt;ev_struct));\
    evtimer_add(&amp;(monitor-&gt;ev_struct), &amp;timeout);</cpp:value></cpp:define>

<function><type><name>gint</name></type>
<name>check_hostname</name><parameter_list>(<parameter><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
     <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><name>backend</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

     <decl_stmt><decl><type><name>gchar</name></type> <name><name>old_addr</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name>old_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>old_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>network_address_set_address</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>address</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <return>return <expr><name>ret</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
     <decl_stmt><decl><type><name>char</name></type> <name><name>new_addr</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ipv4</name><operator>.</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name>new_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>old_addr</name></expr></argument>, <argument><expr><name>new_addr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
     <return>return <expr><name>ret</name></expr>;</return>
 </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_backend_alive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cetus_monitor_t</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>monitor</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>group_replication_mode</name></name> <operator>==</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>group_replication_detect</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>backends_num</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>backends_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>backend_state_t</name></type> <name>oldstate</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_DELETED</name> <operator>||</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_MAINTAINING</name> <operator>||</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_OFFLINE</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backend_addr</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>check_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<label><name>hostnameloop</name>:</label>
        <while>while <condition>(<expr><operator>++</operator><name>check_count</name> <operator>&lt;=</operator> <name>CHECK_ALIVE_TIMES</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>get_mysql_connection</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>check_dns</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>check_hostname</name><argument_list>(<argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <goto>goto <name>hostnameloop</name>;</goto>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_DOWN</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>BACKEND_STATE_DOWN</name></expr></argument>, <argument><expr><name>oldstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Backend %s is set to DOWN."</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Backend %s is set to DOWN failed."</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"get null conn from Backend %s."</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Backend %s is not ALIVE!"</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>BACKEND_STATE_UP</name></expr></argument>, <argument><expr><name>oldstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Backend %s is set to UP."</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Backend %s is set to UP failed."</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Backend %s is ALIVE!"</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>CHECK_ALIVE_INTERVAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_MONITOR_TIMER</name><argument_list>(<argument><expr><name>check_alive_timer</name></expr></argument>, <argument><expr><name>check_backend_alive</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_slave_timestamp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_master_timestamp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cetus_monitor_t</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>monitor</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>group_replication_mode</name></name> <operator>==</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>group_replication_detect</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Catch RW time 
     * Need a table to write from master and read from slave.
     * CREATE TABLE if not exists `tb_heartbeat` (
     *   `p_id` varchar(128) NOT NULL,
     *   `p_ts` timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),
     *   PRIMARY KEY (`p_id`)
     * ) ENGINE = InnoDB DEFAULT CHARSET = utf8;
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>backends_num</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>backends_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>backend_state_t</name></type> <name>oldstate</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_DELETED</name> <operator>||</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_MAINTAINING</name> <operator>||</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_OFFLINE</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur_time_str</name> <init>= <expr><call><name>get_current_sys_timestr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"INSERT INTO %s.tb_heartbeat (p_id, p_ts)"</literal>
                     <literal type="string">" VALUES ('%s', '%s') ON DUPLICATE KEY UPDATE p_ts='%s'"</literal></expr></argument>,
                     <argument><expr><name>HEARTBEAT_DB</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>config_id</name></name></expr></argument>, <argument><expr><name>cur_time_str</name></expr></argument>, <argument><expr><name>cur_time_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backend_addr</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>
<label><name>hostnameloop</name>:</label><empty_stmt>;</empty_stmt>
            <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>get_mysql_connection</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>check_dns</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>check_hostname</name><argument_list>(<argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <goto>goto <name>hostnameloop</name>;</goto>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>   
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not connect to Backend %s."</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>BACKEND_STATE_UP</name></expr></argument>, <argument><expr><name>oldstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Backend %s is set to UP."</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Backend %s is set to UP failed."</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>previous_result</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>    <comment type="block">/* for each backend group */</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>mysql_real_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name><name>previous_result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Update heartbeat error: %d, text: %s, backend: %s"</literal></expr></argument>,
                               <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>result</name> <operator>!=</operator> <name><name>previous_result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Update heartbeat success. backend: %s"</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>previous_result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>cur_time_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Wait 50ms for RO write data */</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_MONITOR_TIMER</name><argument_list>(<argument><expr><name>read_slave_timer</name></expr></argument>, <argument><expr><name>check_slave_timestamp</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_slave_timestamp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cetus_monitor_t</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>monitor</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Read delay sec and set slave UP/DOWN according to delay_secs */</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>backends_num</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>backends_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>backend_state_t</name></type> <name>oldstate</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RW</name> <operator>||</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_DELETED</name> <operator>||</operator>
            <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_MAINTAINING</name> <operator>||</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BACKEND_STATE_OFFLINE</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backend_addr</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>
<label><name>hostnameloop</name>:</label><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>get_mysql_connection</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>check_dns</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>check_hostname</name><argument_list>(<argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <goto>goto <name>hostnameloop</name>;</goto>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Connection error when read delay from RO backend: %s"</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_DOWN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>BACKEND_STATE_DOWN</name></expr></argument>, <argument><expr><name>oldstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Backend %s is set to DOWN."</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Backend %s is set to DOWN failed."</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"select p_ts from %s.tb_heartbeat where p_id='%s'"</literal></expr></argument>,
                 <argument><expr><name>HEARTBEAT_DB</name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>config_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>previous_result</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>    <comment type="block">/* for each backend group */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>mysql_real_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name><name>previous_result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Select heartbeat error: %d, text: %s, backend: %s"</literal></expr></argument>,
                       <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>result</name> <operator>!=</operator> <name><name>previous_result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Select heartbeat success. backend: %s"</literal></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>previous_result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>rs_set</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><name>rs_set</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"fetch heartbeat result failed, errno:%d, errmsg:%s"</literal></expr></argument>, <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name> <init>= <expr><call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>rs_set</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>ts_slave</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>row</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tms</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>glong</name></type> <name>ts_slave_sec</name> <init>= <expr><call><name>chassis_epoch_from_string</name><argument_list>(<argument><expr><name><name>tms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>ts_slave_msec</name> <init>= <expr><call><name>atof</name><argument_list>(<argument><expr><name><name>tms</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>ts_slave</name> <operator>=</operator> <name>ts_slave_sec</name> <operator>+</operator> <name>ts_slave_msec</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>tms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ts_slave</name> <operator>=</operator> <call><name>chassis_epoch_from_string</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Check slave delay no data:%s"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>delay_secs</name> <init>= <expr><name>G_MAXINT32</name><operator>/</operator><literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ts_slave</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>ts_now</name> <init>= <expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>delay_secs</name> <operator>=</operator> <name>ts_now</name> <operator>-</operator> <name>ts_slave</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>slave_delay_msec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>delay_secs</name> <operator>*</operator><literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>slave_delay_msec</name></name> <operator>=</operator> <name>G_MAXINT32</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>delay_secs</name> <operator>&gt;</operator> <name><name>chas</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_DOWN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>BACKEND_STATE_DOWN</name></expr></argument>, <argument><expr><name>oldstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Slave delay %.3f seconds. Set slave to DOWN."</literal></expr></argument>, <argument><expr><name>delay_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Slave delay %.3f seconds. Set slave to DOWN failed."</literal></expr></argument>, <argument><expr><name>delay_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>delay_secs</name> <operator>&lt;=</operator> <name><name>chas</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_backends_modify</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>BACKEND_STATE_UP</name></expr></argument>, <argument><expr><name>oldstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Slave delay %.3f seconds. Recovered. Set slave to UP."</literal></expr></argument>, <argument><expr><name>delay_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Slave delay %.3f seconds. Recovered. Set slave to UP failed."</literal></expr></argument>, <argument><expr><name>delay_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>rs_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>CHECK_DELAY_INTERVAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ADD_MONITOR_TIMER</name><argument_list>(<argument><expr><name>write_master_timer</name></expr></argument>, <argument><expr><name>update_master_timestamp</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_MAX_NAME_LEN</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<struct>struct <name>monitored_object_t</name> <block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MON_MAX_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>monitor_callback_fn</name></type> <name>func</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type>
<name>cetus_monitor_open</name><parameter_list>(<parameter><decl><type><name>cetus_monitor_t</name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>, <parameter><decl><type><name>monitor_type_t</name></type> <name>monitor_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>monitor_type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>MONITOR_TYPE_CHECK_ALIVE</name></expr>:</case>
        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ADD_MONITOR_TIMER</name><argument_list>(<argument><expr><name>check_alive_timer</name></expr></argument>, <argument><expr><name>check_backend_alive</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"check_alive monitor open."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>MONITOR_TYPE_CHECK_DELAY</name></expr>:</case>
        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ADD_MONITOR_TIMER</name><argument_list>(<argument><expr><name>write_master_timer</name></expr></argument>, <argument><expr><name>update_master_timestamp</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"check_slave monitor open."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cetus_monitor_mainloop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cetus_monitor_t</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>chassis_event_loop_t</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><call><name>chassis_event_loop_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>evloop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>monitor</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>config_id</name></name> <operator>=</operator> <call><name>chassis_config_get_id</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chas</name><operator>-&gt;</operator><name>default_username</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"default-username not set, monitor will not work"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>cetus_users_get_server_pwd</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>, <argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>db_passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>db_passwd</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* TODO: retry */</comment>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"no password for %s, monitor will not work"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>default_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>backend_conns</name></name> <operator>=</operator> <call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>, <argument><expr><name>mysql_conn_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chas</name><operator>-&gt;</operator><name>check_slave_delay</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_monitor_open</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>MONITOR_TYPE_CHECK_ALIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>check_slave_delay</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_monitor_open</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>MONITOR_TYPE_CHECK_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>chassis_event_loop</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"monitor thread closing %d mysql conns"</literal></expr></argument>, <argument><expr><call><name>g_hash_table_size</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>backend_conns</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>backend_conns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>mysql_init_called</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mysql_thread_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:mysql_thread_end is called"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"exiting monitor loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_event_loop_free</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cetus_monitor_start_thread</name><parameter_list>(<parameter><decl><type><name>cetus_monitor_t</name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>, <parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>chas</name></name> <operator>=</operator> <name>chas</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>disable_threads</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"monitor thread is disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>thread</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>new_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GLIB_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">32</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>new_thread</name> <operator>=</operator> <call><name>g_thread_create</name><argument_list>(<argument><expr><name>cetus_monitor_mainloop</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_thread</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Create thread error: %s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>new_thread</name> <operator>=</operator> <call><name>g_thread_new</name><argument_list>(<argument><expr><literal type="string">"monitor-thread"</literal></expr></argument>, <argument><expr><name>cetus_monitor_mainloop</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_thread</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Create thread error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <name>new_thread</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"monitor thread started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cetus_monitor_stop_thread</name><parameter_list>(<parameter><decl><type><name>cetus_monitor_t</name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Waiting for monitor thread to quit ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_thread_join</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Monitor thread stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>cetus_monitor_t</name> <modifier>*</modifier></type>
<name>cetus_monitor_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cetus_monitor_t</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>cetus_monitor_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>db_passwd</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>monitor</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cetus_monitor_free</name><parameter_list>(<parameter><decl><type><name>cetus_monitor_t</name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* backend_conns should be freed in its own thread, not here */</comment>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>db_passwd</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>registered_objects</name></name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>monitor</name><operator>-&gt;</operator><name>config_id</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>monitor</name><operator>-&gt;</operator><name>config_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
