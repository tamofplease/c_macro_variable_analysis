<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/src/network-injection.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-injection.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-timings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_DIFF_US</name><parameter_list>(<parameter><type><name>t2</name></type></parameter>, <parameter><type><name>t1</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>((t2.tv_sec - t1.tv_sec) * 1000000.0 + (t2.tv_usec - t1.tv_usec))</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
 * Initialize an injection struct.
 */</comment>
<function><type><name>injection</name> <modifier>*</modifier></type>
<name>injection_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>injection</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>injection</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>query</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>resultset_is_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* don't buffer the resultset */</comment>
    <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>ts_read_query</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>ts_read_query_result_last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Free an injection struct
 */</comment>
<function><type><name>void</name></type>
<name>injection_free</name><parameter_list>(<parameter><decl><type><name>injection</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>network_injection_queue</name> <modifier>*</modifier></type>
<name>network_injection_queue_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>g_queue_new</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_injection_queue_free</name><parameter_list>(<parameter><decl><type><name>network_injection_queue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>network_injection_queue_reset</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_queue_free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_injection_queue_reset</name><parameter_list>(<parameter><decl><type><name>network_injection_queue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>injection</name> <modifier>*</modifier></type><name>inj</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>inj</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>injection_free</name><argument_list>(<argument><expr><name>inj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_injection_queue_append</name><parameter_list>(<parameter><decl><type><name>network_injection_queue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>injection</name> <modifier>*</modifier></type><name>inj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>inj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_injection_queue_prepend</name><parameter_list>(<parameter><decl><type><name>network_injection_queue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>injection</name> <modifier>*</modifier></type><name>inj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_queue_push_head</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>inj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>proxy_resultset_t</name> <modifier>*</modifier></type>
<name>proxy_resultset_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_resultset_t</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>proxy_resultset_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Free a resultset struct
 */</comment>
<function><type><name>void</name></type>
<name>proxy_resultset_free</name><parameter_list>(<parameter><decl><type><name>proxy_resultset_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>fields</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
