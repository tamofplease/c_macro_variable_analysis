<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/libev/ev_epoll.c"><comment type="block">/*
 * libev epoll fd activity backend
 *
 * Copyright (c) 2007,2008,2009,2010,2011 Marc Alexander Lehmann &lt;libev@schmorp.de&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modifica-
 * tion, are permitted provided that the following conditions are met:
 *
 *   1.  Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *   2.  Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-
 * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-
 * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-
 * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU General Public License ("GPL") version 2 or any later version,
 * in which case the provisions of the GPL are applicable instead of
 * the above. If you wish to allow the use of your version of this file
 * only under the terms of the GPL and not to allow others to use your
 * version of this file under the BSD license, indicate your decision
 * by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL. If you do not delete the
 * provisions above, a recipient may use your version of this file under
 * either the BSD or the GPL.
 */</comment>

<comment type="block">/*
 * general notes about epoll:
 *
 * a) epoll silently removes fds from the fd set. as nothing tells us
 *    that an fd has been removed otherwise, we have to continually
 *    "rearm" fds that we suspect *might* have changed (same
 *    problem with kqueue, but much less costly there).
 * b) the fact that ADD != MOD creates a lot of extra syscalls due to a)
 *    and seems not to have any advantage.
 * c) the inability to handle fork or file descriptors (think dup)
 *    limits the applicability over poll, so this is not a generic
 *    poll replacement.
 * d) epoll doesn't work the same as select with many file descriptors
 *    (such as files). while not critical, no other advanced interface
 *    seems to share this (rather non-unixy) limitation.
 * e) epoll claims to be embeddable, but in practise you never get
 *    a ready event for the epoll fd (broken: &lt;=2.6.26, working: &gt;=2.6.32).
 * f) epoll_ctl returning EPERM means the fd is always ready.
 *
 * lots of "weird code" and complication handling in this file is due
 * to these design problems with epoll, as we try very hard to avoid
 * epoll_ctl syscalls for common usage patterns and handle the breakage
 * ensuing from receiving events for closed and otherwise long gone
 * file descriptors.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/epoll.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_EMASK_EPERM</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>epoll_modify</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>oldmask</name></decl>;</decl_stmt>

  <comment type="block">/*
   * we handle EPOLL_CTL_DEL by ignoring it here
   * on the assumption that the fd is gone anyways
   * if that is wrong, we have to handle the spurious
   * event in epoll_poll.
   * if the fd is added again, we try to ADD it, and, if that
   * fails, we assume it still has the same eventmask.
   */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nev</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>oldmask</name> <operator>=</operator> <name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>emask</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>emask</name> <operator>=</operator> <name>nev</name></expr>;</expr_stmt>

  <comment type="block">/* store the generation counter in the upper 32 bits, the fd in the lower 32 bits */</comment>
  <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>data</name><operator>.</operator><name>u64</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>fd</name>
              <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>++</operator><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>egen</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>events</name></name>   <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>nev</name> <operator>&amp;</operator> <name>EV_READ</name></expr>  ?</condition><then> <expr><name>EPOLLIN</name></expr>  </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
              <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>nev</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr> ?</condition><then> <expr><name>EPOLLOUT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>expect_true</name> <argument_list>(<argument><expr><operator>!</operator><call><name>epoll_ctl</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>oev</name> <operator>&amp;&amp;</operator> <name>oldmask</name> <operator>!=</operator> <name>nev</name></expr> ?</condition><then> <expr><name>EPOLL_CTL_MOD</name></expr> </then><else>: <expr><name>EPOLL_CTL_ADD</name></expr></else></ternary></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>expect_true</name> <argument_list>(<argument><expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>epoll_ctl</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>EPOLL_CTL_ADD</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>expect_true</name> <argument_list>(<argument><expr><name>errno</name> <operator>==</operator> <name>EEXIST</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* EEXIST means we ignored a previous DEL, but the fd is still active */</comment>
      <comment type="block">/* if the kernel mask is the same as the new mask, we assume it hasn't changed */</comment>
      <if_stmt><if>if <condition>(<expr><name>oldmask</name> <operator>==</operator> <name>nev</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>dec_egen</name>;</goto></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>epoll_ctl</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>EPOLL_CTL_MOD</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>expect_true</name> <argument_list>(<argument><expr><name>errno</name> <operator>==</operator> <name>EPERM</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* EPERM means the fd is always ready, but epoll is too snobbish */</comment>
      <comment type="block">/* to handle it, unlike select or poll. */</comment>
      <expr_stmt><expr><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>emask</name> <operator>=</operator> <name>EV_EMASK_EPERM</name></expr>;</expr_stmt>

      <comment type="block">/* add fd to epoll_eperms, if not already inside */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>oldmask</name> <operator>&amp;</operator> <name>EV_EMASK_EPERM</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>array_needsize</name> <argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>epoll_eperms</name></expr></argument>, <argument><expr><name>epoll_epermmax</name></expr></argument>, <argument><expr><name>epoll_epermcnt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EMPTY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>epoll_eperms</name> <index>[<expr><name>epoll_epermcnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      <return>return;</return>
    </block_content>}</block></if></if_stmt>

  <macro><name>fd_kill</name> <argument_list>(<argument>EV_A_ fd</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>dec_egen</name>:</label>
  <comment type="block">/* we didn't successfully call epoll_ctl, so decrement the generation counter again */</comment>
  <expr_stmt><expr><operator>--</operator><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>egen</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>epoll_poll</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>ev_tstamp</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eventcnt</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>epoll_epermcnt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* epoll wait times cannot be larger than (LONG_MAX - 999UL) / HZ msecs, which is below */</comment>
  <comment type="block">/* the default libev max wait time, however. */</comment>
  <expr_stmt><expr><name>EV_RELEASE_CB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>eventcnt</name> <operator>=</operator> <call><name>epoll_wait</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>epoll_events</name></expr></argument>, <argument><expr><name>epoll_eventmax</name></expr></argument>, <argument><expr><name>timeout</name> <operator>*</operator> <literal type="number">1e3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>EV_ACQUIRE_CB</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>eventcnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ev_syserr</name> <argument_list>(<argument><expr><literal type="string">"(libev) epoll_wait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <return>return;</return>
    </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>eventcnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><name>epoll_events</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ev</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>u64</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* mask out the lower 32 bits */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>want</name> <init>= <expr><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>events</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>got</name>  <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EPOLLOUT</name> <operator>|</operator> <name>EPOLLERR</name> <operator>|</operator> <name>EPOLLHUP</name><operator>)</operator></expr> ?</condition><then> <expr><name>EV_WRITE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
               <operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EPOLLIN</name>  <operator>|</operator> <name>EPOLLERR</name> <operator>|</operator> <name>EPOLLHUP</name><operator>)</operator></expr> ?</condition><then> <expr><name>EV_READ</name></expr>  </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

      <comment type="block">/*
       * check for spurious notification.
       * this only finds spurious notifications on egen updates
       * other spurious notifications will be found by epoll_ctl, below
       * we assume that fd is always in range, as we never shrink the anfds array
       */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>egen</name> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>u64</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* recreate kernel state */</comment>
          <expr_stmt><expr><name>postfork</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>got</name> <operator>&amp;</operator> <operator>~</operator><name>want</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>emask</name> <operator>=</operator> <name>want</name></expr>;</expr_stmt>

          <comment type="block">/*
           * we received an event but are not interested in it, try mod or del
           * this often happens because we optimistically do not unregister fds
           * when we are no longer interested in them, but also when we get spurious
           * notifications for fds from another process. this is partially handled
           * above with the gencounter check (== our fd is not the event fd), and
           * partially here, when epoll_ctl returns an error (== a child has the fd
           * but we closed it).
           */</comment>
          <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>want</name> <operator>&amp;</operator> <name>EV_READ</name></expr>  ?</condition><then> <expr><name>EPOLLIN</name></expr>  </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
                     <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>want</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr> ?</condition><then> <expr><name>EPOLLOUT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

          <comment type="block">/* pre-2.6.9 kernels require a non-null pointer with EPOLL_CTL_DEL, */</comment>
          <comment type="block">/* which is fortunately easy to do for us. */</comment>
          <if_stmt><if>if <condition>(<expr><call><name>epoll_ctl</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>want</name></expr> ?</condition><then> <expr><name>EPOLL_CTL_MOD</name></expr> </then><else>: <expr><name>EPOLL_CTL_DEL</name></expr></else></ternary></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><name>postfork</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* an error occurred, recreate kernel state */</comment>
              <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

      <macro><name>fd_event</name> <argument_list>(<argument>EV_A_ fd</argument>, <argument>got</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    </block_content>}</block></for>

  <comment type="block">/* if the receive array was full, increase its size */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>eventcnt</name> <operator>==</operator> <name>epoll_eventmax</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>epoll_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>epoll_eventmax</name> <operator>=</operator> <call><name>array_nextsize</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>epoll_event</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>epoll_eventmax</name></expr></argument>, <argument><expr><name>epoll_eventmax</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>epoll_events</name> <operator>=</operator> <operator>(</operator>struct <name>epoll_event</name> <operator>*</operator><operator>)</operator><call><name>ev_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>epoll_event</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>epoll_eventmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* now synthesize events for all fds where epoll fails, while select works... */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>epoll_epermcnt</name></expr>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>epoll_eperms</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>events</name> <init>= <expr><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name> <operator>|</operator> <name>EV_WRITE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>emask</name> <operator>&amp;</operator> <name>EV_EMASK_EPERM</name> <operator>&amp;&amp;</operator> <name>events</name></expr>)</condition><block type="pseudo"><block_content>
        <macro><name>fd_event</name> <argument_list>(<argument>EV_A_ fd</argument>, <argument>events</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
      <else>else
        <block>{<block_content>
          <expr_stmt><expr><name><name>epoll_eperms</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>epoll_eperms</name> <index>[<expr><operator>--</operator><name>epoll_epermcnt</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>emask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>inline_size</name>
<name>int</name></type>
<name>epoll_init</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EPOLL_CLOEXEC</name></cpp:ifdef>
  <expr_stmt><expr><name>backend_fd</name> <operator>=</operator> <call><name>epoll_create1</name> <argument_list>(<argument><expr><name>EPOLL_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>backend_fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOSYS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>backend_fd</name> <operator>=</operator> <call><name>epoll_create</name> <argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>backend_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>fcntl</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>backend_mintime</name> <operator>=</operator> <literal type="number">1e-3</literal></expr>;</expr_stmt> <comment type="block">/* epoll does sometimes return early, this is just to avoid the worst */</comment>
  <expr_stmt><expr><name>backend_modify</name>  <operator>=</operator> <name>epoll_modify</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>backend_poll</name>    <operator>=</operator> <name>epoll_poll</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>epoll_eventmax</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> <comment type="block">/* initial number of events receivable per poll */</comment>
  <expr_stmt><expr><name>epoll_events</name> <operator>=</operator> <operator>(</operator>struct <name>epoll_event</name> <operator>*</operator><operator>)</operator><call><name>ev_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>epoll_event</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>epoll_eventmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>EVBACKEND_EPOLL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>inline_size</name>
<name>void</name></type>
<name>epoll_destroy</name> <parameter_list>(<parameter><decl><type><name>EV_P</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>epoll_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>array_free</name> <argument_list>(<argument><expr><name>epoll_eperm</name></expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>inline_size</name>
<name>void</name></type>
<name>epoll_fork</name> <parameter_list>(<parameter><decl><type><name>EV_P</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>backend_fd</name> <operator>=</operator> <call><name>epoll_create</name> <argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_syserr</name> <argument_list>(<argument><expr><literal type="string">"(libev) epoll_create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

  <expr_stmt><expr><call><name>fcntl</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fd_rearm_all</name> <argument_list>(<argument><expr><name>EV_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
