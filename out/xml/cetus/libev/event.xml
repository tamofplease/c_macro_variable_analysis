<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/libev/event.c"><comment type="block">/*
 * libevent compatibility layer
 *
 * Copyright (c) 2007,2008,2009,2010,2012 Marc Alexander Lehmann &lt;libev@schmorp.de&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modifica-
 * tion, are permitted provided that the following conditions are met:
 *
 *   1.  Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *   2.  Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-
 * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-
 * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-
 * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU General Public License ("GPL") version 2 or any later version,
 * in which case the provisions of the GPL are applicable instead of
 * the above. If you wish to allow the use of your version of this file
 * only under the terms of the GPL and not to allow others to use your
 * version of this file under the BSD license, indicate your decision
 * by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL. If you do not delete the
 * provisions above, a recipient may use your version of this file under
 * either the BSD or the GPL.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EV_EVENT_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> EV_EVENT_H</cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_MULTIPLICITY</name></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>dLOOPev</name></cpp:macro> <cpp:value>struct ev_loop *loop = (struct ev_loop *)ev-&gt;ev_base</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>dLOOPbase</name></cpp:macro> <cpp:value>struct ev_loop *loop = (struct ev_loop *)base</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>dLOOPev</name></cpp:macro></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>dLOOPbase</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* never accessed, will always be cast from/to ev_loop */</comment>
<struct>struct <name>event_base</name>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>ev_x_cur</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ev_tstamp</name></type>
<name>ev_tv_get</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tv</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>ev_tstamp</name></type> <name>after</name> <init>= <expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1e-6</literal></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><name>after</name></expr> ?</condition><then> <expr><name>after</name></expr> </then><else>: <expr><literal type="number">1e-6</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1.</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_STRINGIFY</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value># s</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_VERSION</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EVENT_STRINGIFY (a) "." EVENT_STRINGIFY (b)</cpp:value></cpp:define>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>event_get_version</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* returns ABI, not API or library, version */</comment>
  <return>return <expr><call><name>EVENT_VERSION</name> <argument_list>(<argument><expr><name>EV_VERSION_MAJOR</name></expr></argument>, <argument><expr><name>EV_VERSION_MINOR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>event_get_method</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><literal type="string">"libev"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>event_init</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_MULTIPLICITY</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>ev_x_cur</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ev_x_cur</name> <operator>=</operator> <operator>(</operator>struct <name>event_base</name> <operator>*</operator><operator>)</operator><call><name>ev_loop_new</name> <argument_list>(<argument><expr><name>EVFLAG_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>ev_x_cur</name> <operator>=</operator> <operator>(</operator>struct <name>event_base</name> <operator>*</operator><operator>)</operator><call><name>ev_default_loop</name> <argument_list>(<argument><expr><name>EVFLAG_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><literal type="string">"libev: multiple event bases not supported when not compiled with EV_MULTIPLICITY"</literal><operator>,</operator> <operator>!</operator><name>ev_x_cur</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ev_x_cur</name> <operator>=</operator> <operator>(</operator>struct <name>event_base</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><call><name>ev_default_loop</name> <argument_list>(<argument><expr><name>EVFLAG_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>ev_x_cur</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>event_base_get_method</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><literal type="string">"libev"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type>
<name>event_base_new</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_MULTIPLICITY</name></expr></cpp:if>
  <return>return <expr><operator>(</operator>struct <name>event_base</name> <operator>*</operator><operator>)</operator><call><name>ev_loop_new</name> <argument_list>(<argument><expr><name>EVFLAG_AUTO</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><literal type="string">"libev: multiple event bases not supported when not compiled with EV_MULTIPLICITY"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_base_free</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>dLOOPbase</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_MULTIPLICITY</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ev_is_default_loop</name> <argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_loop_destroy</name> <argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_dispatch</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>event_base_dispatch</name> <argument_list>(<argument><expr><name>ev_x_cur</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EV_STANDALONE</name></cpp:ifdef>
<function><type><name>void</name></type> <name>event_set_log_callback</name> <parameter_list>(<parameter><decl><type><name>event_log_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* nop */</comment>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>event_loop</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>event_base_loop</name> <argument_list>(<argument><expr><name>ev_x_cur</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_loopexit</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>event_base_loopexit</name> <argument_list>(<argument><expr><name>ev_x_cur</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>event_callback_fn</name></type> <name>event_get_callback</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ev_x_cb</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>revents</name> <operator>&amp;=</operator> <name>EV_READ</name> <operator>|</operator> <name>EV_WRITE</name> <operator>|</operator> <name>EV_TIMER</name> <operator>|</operator> <name>EV_SIGNAL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name> <operator>=</operator> <name>revents</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><name>revents</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ev_x_cb_sig</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name><name>struct</name> <name>ev_signal</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator>struct <name>event</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>w</name><operator>)</operator> <operator>-</operator> <call><name>offsetof</name> <argument_list>(<argument><expr>struct <name>event</name></expr></argument>, <argument><expr><name><name>iosig</name><operator>.</operator><name>sig</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>revents</name> <operator>&amp;</operator> <name>EV_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>event_del</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>ev_x_cb</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>revents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ev_x_cb_io</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name><name>struct</name> <name>ev_io</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator>struct <name>event</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>w</name><operator>)</operator> <operator>-</operator> <call><name>offsetof</name> <argument_list>(<argument><expr>struct <name>event</name></expr></argument>, <argument><expr><name><name>iosig</name><operator>.</operator><name>io</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>revents</name> <operator>&amp;</operator> <name>EV_ERROR</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_PERSIST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>event_del</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>ev_x_cb</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>revents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ev_x_cb_to</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name><name>struct</name> <name>ev_timer</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator>struct <name>event</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>w</name><operator>)</operator> <operator>-</operator> <call><name>offsetof</name> <argument_list>(<argument><expr>struct <name>event</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>event_del</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ev_x_cb</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>revents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_set</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EV_SIGNAL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>sig</name></name></expr></argument>, <argument><expr><name>ev_x_cb_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>ev_x_cb_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><call><name>ev_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>to</name></name></expr></argument>, <argument><expr><name>ev_x_cb_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name>     <operator>=</operator> <name>ev_x_cur</name></expr>;</expr_stmt> <comment type="block">/* not threadsafe, but it's how libevent works */</comment>
  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name>       <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name>   <operator>=</operator> <name>events</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_pri</name></name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_callback</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_arg</name></name>      <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_res</name></name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name>    <operator>=</operator> <name>EVLIST_INIT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_once</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>event_base_once</name> <argument_list>(<argument><expr><name>ev_x_cur</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_add</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>dLOOPev</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_SIGNAL</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ev_is_active</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>ev_signal_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>sig</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>ev_signal_start</name> <argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>|=</operator> <name>EVLIST_SIGNAL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name> <operator>|</operator> <name>EV_WRITE</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ev_is_active</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>ev_io_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_fd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name> <operator>|</operator> <name>EV_WRITE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>ev_io_start</name> <argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>|=</operator> <name>EVLIST_INSERTED</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tv</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <call><name>ev_tv_get</name> <argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ev_timer_again</name> <argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>|=</operator> <name>EVLIST_TIMEOUT</name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>ev_timer_stop</name> <argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVLIST_TIMEOUT</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>|=</operator> <name>EVLIST_ACTIVE</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_del</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>dLOOPev</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_SIGNAL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_signal_stop</name> <argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name> <operator>|</operator> <name>EV_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_io_stop</name> <argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>ev_is_active</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>to</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_timer_stop</name> <argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_flags</name></name> <operator>=</operator> <name>EVLIST_INIT</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_active</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>ncalls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>dLOOPev</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <name>EV_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_feed_event</name> <argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>to</name></name></expr></argument>, <argument><expr><name>res</name> <operator>&amp;</operator> <name>EV_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <name>EV_SIGNAL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_feed_event</name> <argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>sig</name></name></expr></argument>, <argument><expr><name>res</name> <operator>&amp;</operator> <name>EV_SIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name> <operator>|</operator> <name>EV_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_feed_event</name> <argument_list>(<argument><expr><name>EV_A_</name> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>res</name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name> <operator>|</operator> <name>EV_WRITE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_pending</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>short</name></type> <name>revents</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>dLOOPev</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_SIGNAL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* sig */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>ev_is_active</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>sig</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ev_is_pending</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>revents</name> <operator>|=</operator> <name>EV_SIGNAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name> <operator>|</operator> <name>EV_WRITE</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* io */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>ev_is_active</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>io</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ev_is_pending</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>iosig</name><operator>.</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>revents</name> <operator>|=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EV_READ</name> <operator>|</operator> <name>EV_WRITE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>ev_events</name></name> <operator>&amp;</operator> <name>EV_TIMEOUT</name> <operator>||</operator> <call><name>ev_is_active</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>to</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ev_is_pending</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>to</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>revents</name> <operator>|=</operator> <name>EV_TIMEOUT</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>tv</name></expr>)</condition>
        <block>{<block_content>
          <decl_stmt><decl><type><name>ev_tstamp</name></type> <name>at</name> <init>= <expr><call><name>ev_now</name> <argument_list>(<argument><expr><name>EV_A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name>  <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>at</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name>at</name> <operator>-</operator> <operator>(</operator><name>ev_tstamp</name><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1e6</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>events</name> <operator>&amp;</operator> <name>revents</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_priority_init</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>npri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>event_base_priority_init</name> <argument_list>(<argument><expr><name>ev_x_cur</name></expr></argument>, <argument><expr><name>npri</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_priority_set</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_pri</name></name> <operator>=</operator> <name>pri</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_base_set</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ev_base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_base_loop</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>dLOOPbase</name></expr>;</expr_stmt>

  <return>return <expr><operator>!</operator><macro><name>ev_run</name> <argument_list>(<argument>EV_A_ flags</argument>)</argument_list></macro></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_base_dispatch</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>event_base_loop</name> <argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ev_x_loopexit_cb</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>dLOOPbase</name></expr>;</expr_stmt>

  <macro><name>ev_break</name> <argument_list>(<argument>EV_A_ EVBREAK_ONE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_base_loopexit</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ev_tstamp</name></type> <name>after</name> <init>= <expr><call><name>ev_tv_get</name> <argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>dLOOPbase</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ev_once</name> <argument_list>(<argument><expr><name>EV_A_</name> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>after</name> <operator>&gt;=</operator> <literal type="number">0.</literal></expr> ?</condition><then> <expr><name>after</name></expr> </then><else>: <expr><literal type="number">0.</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ev_x_loopexit_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>ev_x_once</name>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ev_x_once_cb</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ev_x_once</name></name> <modifier>*</modifier></type><name>once</name> <init>= <expr><operator>(</operator>struct <name>ev_x_once</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>once</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name><name>once</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><name>revents</name></expr></argument>, <argument><expr><name><name>once</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_base_once</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>short</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ev_x_once</name></name> <modifier>*</modifier></type><name>once</name> <init>= <expr><operator>(</operator>struct <name>ev_x_once</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ev_x_once</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>dLOOPbase</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>once</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>once</name><operator>-&gt;</operator><name>fd</name></name>  <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>once</name><operator>-&gt;</operator><name>cb</name></name>  <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>once</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

  <macro><name>ev_once</name> <argument_list>(<argument>EV_A_ fd</argument>, <argument>events &amp; (EV_READ | EV_WRITE)</argument>, <argument>ev_tv_get (tv)</argument>, <argument>ev_x_once_cb</argument>, <argument>(void *)once</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_base_priority_init</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>npri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/*dLOOPbase;*/</comment>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
