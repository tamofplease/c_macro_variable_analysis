<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/libev/ev_win32.c"><comment type="block">/*
 * libev win32 compatibility cruft (_not_ a backend)
 *
 * Copyright (c) 2007,2008,2009 Marc Alexander Lehmann &lt;libev@schmorp.de&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modifica-
 * tion, are permitted provided that the following conditions are met:
 *
 *   1.  Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *   2.  Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-
 * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-
 * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-
 * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU General Public License ("GPL") version 2 or any later version,
 * in which case the provisions of the GPL are applicable instead of
 * the above. If you wish to allow the use of your version of this file
 * only under the terms of the GPL and not to allow others to use your
 * version of this file under the BSD license, indicate your decision
 * by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL. If you do not delete the
 * provisions above, a recipient may use your version of this file under
 * either the BSD or the GPL.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>

<comment type="block">/* note: the comment below could not be substantiated, but what would I care */</comment>
<comment type="block">/* MSDN says this is required to handle SIGFPE */</comment>
<comment type="block">/* my wild guess would be that using something floating-pointy is required */</comment>
<comment type="block">/* for the crt to do something about it */</comment>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>double</name></type> <name>SIGFPE_REQ</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>SOCKET</name></type>
<name>ev_tcp_socket</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_USE_WSASOCKET</name></expr></cpp:if>
  <return>return <expr><call><name>WSASocket</name> <argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>socket</name> <argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* oh, the humanity! */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ev_pipe</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>filedes</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>addr</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>addr_size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>adr2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>adr2_size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>adr2</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOCKET</name></type> <name>listener</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOCKET</name></type> <name><name>sock</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>listener</name> <operator>=</operator> <call><name>ev_tcp_socket</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name> <argument_list>(<argument><expr><name>INADDR_LOOPBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>bind</name> <argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>addr_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>getsockname</name> <argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>listen</name> <argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sock</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ev_tcp_socket</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>connect</name> <argument_list>(<argument><expr><name><name>sock</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>addr_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* TODO: returns INVALID_SOCKET on winsock accept, not &lt; 0. fix it */</comment>
  <comment type="block">/* when convenient, probably by just removing error checking altogether? */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sock</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>accept</name> <argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* windows vista returns fantasy port numbers for sockets:
   * example for two interconnected tcp sockets:
   *
   * (Socket::unpack_sockaddr_in getsockname $sock0)[0] == 53364
   * (Socket::unpack_sockaddr_in getpeername $sock0)[0] == 53363
   * (Socket::unpack_sockaddr_in getsockname $sock1)[0] == 53363
   * (Socket::unpack_sockaddr_in getpeername $sock1)[0] == 53365
   *
   * wow! tridirectional sockets!
   *
   * this way of checking ports seems to work:
   */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>getpeername</name> <argument_list>(<argument><expr><name><name>sock</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>getsockname</name> <argument_list>(<argument><expr><name><name>sock</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>adr2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adr2_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>addr_size</name> <operator>!=</operator> <name>adr2_size</name>
      <operator>||</operator> <name><name>addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>adr2</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <comment type="block">/* just to be sure, I mean, it's windows */</comment>
      <operator>||</operator> <name><name>addr</name><operator>.</operator><name>sin_port</name></name>        <operator>!=</operator> <name><name>adr2</name><operator>.</operator><name>sin_port</name></name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>closesocket</name> <argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_SELECT_IS_WINSOCKET</name></expr></cpp:if>
  <expr_stmt><expr><name><name>filedes</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>EV_WIN32_HANDLE_TO_FD</name> <argument_list>(<argument><expr><name><name>sock</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>filedes</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>EV_WIN32_HANDLE_TO_FD</name> <argument_list>(<argument><expr><name><name>sock</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* when select isn't winsocket, we also expect socket, connect, accept etc.
   * to work on fds */</comment>
  <expr_stmt><expr><name><name>filedes</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sock</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>filedes</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sock</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
  <expr_stmt><expr><call><name>closesocket</name> <argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sock</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>closesocket</name> <argument_list>(<argument><expr><name><name>sock</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sock</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>closesocket</name> <argument_list>(<argument><expr><name><name>sock</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pipe</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pipe</name><parameter_list>(<parameter><type><name>filedes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ev_pipe (filedes)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EV_HAVE_EV_TIME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<function><type><name>ev_tstamp</name></type>
<name>ev_time</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>ui</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ui</name><operator>.</operator><name>u</name><operator>.</operator><name>LowPart</name></name>  <operator>=</operator> <name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ui</name><operator>.</operator><name>u</name><operator>.</operator><name>HighPart</name></name> <operator>=</operator> <name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>

  <comment type="block">/* msvc cannot convert ulonglong to double... yes, it is that sucky */</comment>
  <return>return <expr><operator>(</operator><name>LONGLONG</name><operator>)</operator><operator>(</operator><name><name>ui</name><operator>.</operator><name>QuadPart</name></name> <operator>-</operator> <literal type="number">116444736000000000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1e-7</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
