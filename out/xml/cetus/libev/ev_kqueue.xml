<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/libev/ev_kqueue.c"><comment type="block">/*
 * libev kqueue backend
 *
 * Copyright (c) 2007,2008,2009,2010,2011,2012,2013 Marc Alexander Lehmann &lt;libev@schmorp.de&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modifica-
 * tion, are permitted provided that the following conditions are met:
 *
 *   1.  Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *   2.  Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-
 * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-
 * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-
 * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU General Public License ("GPL") version 2 or any later version,
 * in which case the provisions of the GPL are applicable instead of
 * the above. If you wish to allow the use of your version of this file
 * only under the terms of the GPL and not to allow others to use your
 * version of this file under the BSD license, indicate your decision
 * by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL. If you do not delete the
 * provisions above, a recipient may use your version of this file under
 * either the BSD or the GPL.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/event.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<function><type><name>inline_speed</name>
<name>void</name></type>
<name>kqueue_change</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>++</operator><name>kqueue_changecnt</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>array_needsize</name> <argument_list>(<argument><expr>struct <name>kevent</name></expr></argument>, <argument><expr><name>kqueue_changes</name></expr></argument>, <argument><expr><name>kqueue_changemax</name></expr></argument>, <argument><expr><name>kqueue_changecnt</name></expr></argument>, <argument><expr><name>EMPTY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>EV_SET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>kqueue_changes</name> <index>[<expr><name>kqueue_changecnt</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fflags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* OS X at least needs this */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EV_ENABLE</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>EV_ENABLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NOTE_EOF</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>NOTE_EOF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>kqueue_modify</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>oev</name> <operator>!=</operator> <name>nev</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>oev</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
        <macro><name>kqueue_change</name> <argument_list>(<argument>EV_A_ fd</argument>, <argument>EVFILT_READ</argument> , <argument>EV_DELETE</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>oev</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
        <macro><name>kqueue_change</name> <argument_list>(<argument>EV_A_ fd</argument>, <argument>EVFILT_WRITE</argument>, <argument>EV_DELETE</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* to detect close/reopen reliably, we have to re-add */</comment>
  <comment type="block">/* event requests even when oev == nev */</comment>

  <if_stmt><if>if <condition>(<expr><name>nev</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
    <macro><name>kqueue_change</name> <argument_list>(<argument>EV_A_ fd</argument>, <argument>EVFILT_READ</argument> , <argument>EV_ADD | EV_ENABLE</argument>, <argument>NOTE_EOF</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>nev</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
    <macro><name>kqueue_change</name> <argument_list>(<argument>EV_A_ fd</argument>, <argument>EVFILT_WRITE</argument>, <argument>EV_ADD | EV_ENABLE</argument>, <argument>NOTE_EOF</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>kqueue_poll</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>ev_tstamp</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

  <comment type="block">/* need to resize so there is enough space for errors */</comment>
  <if_stmt><if>if <condition>(<expr><name>kqueue_changecnt</name> <operator>&gt;</operator> <name>kqueue_eventmax</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>kqueue_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>kqueue_eventmax</name> <operator>=</operator> <call><name>array_nextsize</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>kevent</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>kqueue_eventmax</name></expr></argument>, <argument><expr><name>kqueue_changecnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>kqueue_events</name> <operator>=</operator> <operator>(</operator>struct <name>kevent</name> <operator>*</operator><operator>)</operator><call><name>ev_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>kevent</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>kqueue_eventmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>EV_RELEASE_CB</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EV_TS_SET</name> <argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>kevent</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>kqueue_changes</name></expr></argument>, <argument><expr><name>kqueue_changecnt</name></expr></argument>, <argument><expr><name>kqueue_events</name></expr></argument>, <argument><expr><name>kqueue_eventmax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>EV_ACQUIRE_CB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>kqueue_changecnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ev_syserr</name> <argument_list>(<argument><expr><literal type="string">"(libev) kevent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <return>return;</return>
    </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>res</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>kqueue_events</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ident</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name><name>kqueue_events</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>EV_ERROR</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name><name>kqueue_events</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>

          <comment type="block">/* we are only interested in errors for fds that we are interested in :) */</comment>
          <if_stmt><if>if <condition>(<expr><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>events</name></expr>)</condition>
            <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* resubmit changes on ENOENT */</comment>
                <macro><name>kqueue_modify</name> <argument_list>(<argument>EV_A_ fd</argument>, <argument><literal type="number">0</literal></argument>, <argument>anfds [fd].events</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
              <if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>EBADF</name></expr>)</condition> <comment type="block">/* on EBADF, we re-check the fd */</comment>
                <block>{<block_content>
                  <if_stmt><if>if <condition>(<expr><call><name>fd_valid</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <macro><name>kqueue_modify</name> <argument_list>(<argument>EV_A_ fd</argument>, <argument><literal type="number">0</literal></argument>, <argument>anfds [fd].events</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
                  <else>else<block type="pseudo"><block_content>
                    <macro><name>fd_kill</name> <argument_list>(<argument>EV_A_ fd</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></if>
              <else>else<block type="pseudo"><block_content> <comment type="block">/* on all other errors, we error out on the fd */</comment>
                <macro><name>fd_kill</name> <argument_list>(<argument>EV_A_ fd</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
        <macro><name>fd_event</name> <argument_list>(
          <argument>EV_A_
          fd</argument>,
          <argument>kqueue_events [i].filter == EVFILT_READ ? EV_READ
          : kqueue_events [i].filter == EVFILT_WRITE ? EV_WRITE
          : <literal type="number">0</literal></argument>
        )</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>kqueue_eventmax</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>kqueue_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>kqueue_eventmax</name> <operator>=</operator> <call><name>array_nextsize</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>kevent</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>kqueue_eventmax</name></expr></argument>, <argument><expr><name>kqueue_eventmax</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>kqueue_events</name> <operator>=</operator> <operator>(</operator>struct <name>kevent</name> <operator>*</operator><operator>)</operator><call><name>ev_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>kevent</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>kqueue_eventmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>inline_size</name>
<name>int</name></type>
<name>kqueue_init</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* initialize the kernel queue */</comment>
  <expr_stmt><expr><name>kqueue_fd_pid</name> <operator>=</operator> <call><name>getpid</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>backend_fd</name> <operator>=</operator> <call><name>kqueue</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>fcntl</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* not sure if necessary, hopefully doesn't hurt */</comment>

  <expr_stmt><expr><name>backend_mintime</name> <operator>=</operator> <literal type="number">1e-9</literal></expr>;</expr_stmt> <comment type="block">/* apparently, they did the right thing in freebsd */</comment>
  <expr_stmt><expr><name>backend_modify</name>  <operator>=</operator> <name>kqueue_modify</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>backend_poll</name>    <operator>=</operator> <name>kqueue_poll</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>kqueue_eventmax</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> <comment type="block">/* initial number of events receivable per poll */</comment>
  <expr_stmt><expr><name>kqueue_events</name> <operator>=</operator> <operator>(</operator>struct <name>kevent</name> <operator>*</operator><operator>)</operator><call><name>ev_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>kevent</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>kqueue_eventmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>kqueue_changes</name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>kqueue_changemax</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>kqueue_changecnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><name>EVBACKEND_KQUEUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>inline_size</name>
<name>void</name></type>
<name>kqueue_destroy</name> <parameter_list>(<parameter><decl><type><name>EV_P</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>kqueue_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>kqueue_changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>inline_size</name>
<name>void</name></type>
<name>kqueue_fork</name> <parameter_list>(<parameter><decl><type><name>EV_P</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* some BSD kernels don't just destroy the kqueue itself,
   * but also close the fd, which isn't documented, and
   * impossible to support properly.
   * we remember the pid of the kqueue call and only close
   * the fd if the pid is still the same.
   * this leaks fds on sane kernels, but BSD interfaces are
   * notoriously buggy and rarely get fixed.
   */</comment>
  <decl_stmt><decl><type><name>pid_t</name></type> <name>newpid</name> <init>= <expr><call><name>getpid</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>newpid</name> <operator>==</operator> <name>kqueue_fd_pid</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>kqueue_fd_pid</name> <operator>=</operator> <name>newpid</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>backend_fd</name> <operator>=</operator> <call><name>kqueue</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_syserr</name> <argument_list>(<argument><expr><literal type="string">"(libev) kqueue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

  <expr_stmt><expr><call><name>fcntl</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* re-register interest in fds */</comment>
  <expr_stmt><expr><call><name>fd_rearm_all</name> <argument_list>(<argument><expr><name>EV_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* sys/event.h defines EV_ERROR */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EV_ERROR</name></cpp:undef>

</unit>
