<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/libev/ev_port.c"><comment type="block">/*
 * libev solaris event port backend
 *
 * Copyright (c) 2007,2008,2009,2010,2011 Marc Alexander Lehmann &lt;libev@schmorp.de&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modifica-
 * tion, are permitted provided that the following conditions are met:
 *
 *   1.  Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *   2.  Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-
 * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-
 * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-
 * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU General Public License ("GPL") version 2 or any later version,
 * in which case the provisions of the GPL are applicable instead of
 * the above. If you wish to allow the use of your version of this file
 * only under the terms of the GPL and not to allow others to use your
 * version of this file under the BSD license, indicate your decision
 * by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL. If you do not delete the
 * provisions above, a recipient may use your version of this file under
 * either the BSD or the GPL.
 */</comment>

<comment type="block">/* useful reading:
 *
 * http://bugs.opensolaris.org/view_bug.do?bug_id=6268715 (random results)
 * http://bugs.opensolaris.org/view_bug.do?bug_id=6455223 (just totally broken)
 * http://bugs.opensolaris.org/view_bug.do?bug_id=6873782 (manpage ETIME)
 * http://bugs.opensolaris.org/view_bug.do?bug_id=6874410 (implementation ETIME)
 * http://www.mail-archive.com/networking-discuss@opensolaris.org/msg11898.html ETIME vs. nget
 * http://src.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/lib/libc/port/gen/event_port.c (libc)
 * http://cvs.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/uts/common/fs/portfs/port.c#1325 (kernel)
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;port.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<function><type><name>inline_speed</name>
<name>void</name></type>
<name>port_associate_and_check</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator>
      <call><name>port_associate</name> <argument_list>(
         <argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>PORT_SOURCE_FD</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
         <argument><expr><operator>(</operator><ternary><condition><expr><name>ev</name> <operator>&amp;</operator> <name>EV_READ</name></expr> ?</condition><then> <expr><name>POLLIN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
         <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>ev</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr> ?</condition><then> <expr><name>POLLOUT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
         <argument><expr><literal type="number">0</literal></expr></argument>
      )</argument_list></call></expr>
  )</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EBADFD</name></expr>)</condition><block type="pseudo"><block_content>
        <macro><name>fd_kill</name> <argument_list>(<argument>EV_A_ fd</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ev_syserr</name> <argument_list>(<argument><expr><literal type="string">"(libev) port_associate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>port_modify</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* we need to reassociate no matter what, as closes are
   * once more silently being discarded.
   */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nev</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>oev</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>port_dissociate</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>PORT_SOURCE_FD</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <macro><name>port_associate_and_check</name> <argument_list>(<argument>EV_A_ fd</argument>, <argument>nev</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>port_poll</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>ev_tstamp</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint_t</name></type> <name>nget</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* we initialise this to something we will skip in the loop, as */</comment>
  <comment type="block">/* port_getn can return with nget unchanged, but no indication */</comment>
  <comment type="block">/* whether it was the original value or has been updated :/ */</comment>
  <expr_stmt><expr><name><name>port_events</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>portev_source</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>EV_RELEASE_CB</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EV_TS_SET</name> <argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>port_getn</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>port_events</name></expr></argument>, <argument><expr><name>port_eventmax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nget</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>EV_ACQUIRE_CB</name></expr>;</expr_stmt>

  <comment type="block">/* port_getn may or may not set nget on error */</comment>
  <comment type="block">/* so we rely on port_events [0].portev_source not being updated */</comment>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ETIME</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_syserr</name> <argument_list>(<argument><expr><literal type="string">"(libev) port_getn (see http://bugs.opensolaris.org/view_bug.do?bug_id=6268715, try LIBEV_FLAGS=3 env variable)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nget</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>port_events</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>portev_source</name> <operator>==</operator> <name>PORT_SOURCE_FD</name></expr>)</condition>
        <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>port_events</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>portev_object</name></expr></init></decl>;</decl_stmt>

          <macro><name>fd_event</name> <argument_list>(
            <argument>EV_A_
            fd</argument>,
            <argument>(port_events [i].portev_events &amp; (POLLOUT | POLLERR | POLLHUP) ? EV_WRITE : <literal type="number">0</literal>)
            | (port_events [i].portev_events &amp; (POLLIN | POLLERR | POLLHUP) ? EV_READ : <literal type="number">0</literal>)</argument>
          )</argument_list></macro><empty_stmt>;</empty_stmt>

          <macro><name>fd_change</name> <argument_list>(<argument>EV_A_ fd</argument>, <argument>EV__IOFDSET</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>nget</name> <operator>==</operator> <name>port_eventmax</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>port_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>port_eventmax</name> <operator>=</operator> <call><name>array_nextsize</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>port_event_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>port_eventmax</name></expr></argument>, <argument><expr><name>port_eventmax</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>port_events</name> <operator>=</operator> <operator>(</operator><name>port_event_t</name> <operator>*</operator><operator>)</operator><call><name>ev_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>port_event_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>port_eventmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>inline_size</name>
<name>int</name></type>
<name>port_init</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Initialize the kernel queue */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>backend_fd</name> <operator>=</operator> <call><name>port_create</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><literal type="string">"libev: PORT_SOURCE_FD must not be zero"</literal><operator>,</operator> <name>PORT_SOURCE_FD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fcntl</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* not sure if necessary, hopefully doesn't hurt */</comment>

  <comment type="block">/* if my reading of the opensolaris kernel sources are correct, then
   * opensolaris does something very stupid: it checks if the time has already
   * elapsed and doesn't round up if that is the case,m otherwise it DOES round
   * up. Since we can't know what the case is, we need to guess by using a
   * "large enough" timeout. Normally, 1e-9 would be correct.
   */</comment>
  <expr_stmt><expr><name>backend_mintime</name> <operator>=</operator> <literal type="number">1e-3</literal></expr>;</expr_stmt> <comment type="block">/* needed to compensate for port_getn returning early */</comment>
  <expr_stmt><expr><name>backend_modify</name>  <operator>=</operator> <name>port_modify</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>backend_poll</name>    <operator>=</operator> <name>port_poll</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>port_eventmax</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> <comment type="block">/* initial number of events receivable per poll */</comment>
  <expr_stmt><expr><name>port_events</name> <operator>=</operator> <operator>(</operator><name>port_event_t</name> <operator>*</operator><operator>)</operator><call><name>ev_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>port_event_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>port_eventmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>EVBACKEND_PORT</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>inline_size</name>
<name>void</name></type>
<name>port_destroy</name> <parameter_list>(<parameter><decl><type><name>EV_P</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>port_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>inline_size</name>
<name>void</name></type>
<name>port_fork</name> <parameter_list>(<parameter><decl><type><name>EV_P</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>backend_fd</name> <operator>=</operator> <call><name>port_create</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ev_syserr</name> <argument_list>(<argument><expr><literal type="string">"(libev) port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

  <expr_stmt><expr><call><name>fcntl</name> <argument_list>(<argument><expr><name>backend_fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* re-register interest in fds */</comment>
  <expr_stmt><expr><call><name>fd_rearm_all</name> <argument_list>(<argument><expr><name>EV_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
