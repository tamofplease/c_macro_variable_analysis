<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/libev/ev_poll.c"><comment type="block">/*
 * libev poll fd activity backend
 *
 * Copyright (c) 2007,2008,2009,2010,2011 Marc Alexander Lehmann &lt;libev@schmorp.de&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modifica-
 * tion, are permitted provided that the following conditions are met:
 *
 *   1.  Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *   2.  Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-
 * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-
 * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-
 * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU General Public License ("GPL") version 2 or any later version,
 * in which case the provisions of the GPL are applicable instead of
 * the above. If you wish to allow the use of your version of this file
 * only under the terms of the GPL and not to allow others to use your
 * version of this file under the BSD license, indicate your decision
 * by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL. If you do not delete the
 * provisions above, a recipient may use your version of this file under
 * either the BSD or the GPL.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<function><type><name>inline_size</name>
<name>void</name></type>
<name>pollidx_init</name> <parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* consider using memset (.., -1, ...), which is practically guaranteed
   * to work on all systems implementing poll */</comment>
  <while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>base</name><operator>++</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>poll_modify</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>oev</name> <operator>==</operator> <name>nev</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>array_needsize</name> <argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>pollidxs</name></expr></argument>, <argument><expr><name>pollidxmax</name></expr></argument>, <argument><expr><name>fd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pollidx_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>pollidxs</name> <index>[<expr><name>fd</name></expr>]</index></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <comment type="block">/* need to allocate a new pollfd */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name><name>pollidxs</name> <index>[<expr><name>fd</name></expr>]</index></name> <operator>=</operator> <name>idx</name> <operator>=</operator> <name>pollcnt</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>array_needsize</name> <argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>, <argument><expr><name>polls</name></expr></argument>, <argument><expr><name>pollmax</name></expr></argument>, <argument><expr><name>pollcnt</name></expr></argument>, <argument><expr><name>EMPTY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>polls</name> <index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>polls</name> <index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>==</operator> <name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>nev</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>polls</name> <index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator>
        <operator>(</operator><ternary><condition><expr><name>nev</name> <operator>&amp;</operator> <name>EV_READ</name></expr> ?</condition><then> <expr><name>POLLIN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
        <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>nev</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr> ?</condition><then> <expr><name>POLLOUT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
  <else>else <comment type="block">/* remove pollfd */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name><name>pollidxs</name> <index>[<expr><name>fd</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>expect_true</name> <argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <operator>--</operator><name>pollcnt</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>polls</name> <index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>polls</name> <index>[<expr><name>pollcnt</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pollidxs</name> <index>[<expr><name><name>polls</name> <index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>poll_poll</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>ev_tstamp</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>EV_RELEASE_CB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>poll</name> <argument_list>(<argument><expr><name>polls</name></expr></argument>, <argument><expr><name>pollcnt</name></expr></argument>, <argument><expr><name>timeout</name> <operator>*</operator> <literal type="number">1e3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>EV_ACQUIRE_CB</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EBADF</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fd_ebadf</name> <argument_list>(<argument><expr><name>EV_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>syserr_cb</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fd_enomem</name> <argument_list>(<argument><expr><name>EV_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ev_syserr</name> <argument_list>(<argument><expr><literal type="string">"(libev) poll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>polls</name></expr>;</init> <condition><expr><name>res</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>
      <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><literal type="string">"libev: poll() returned illegal result, broken BSD kernel?"</literal><operator>,</operator> <name>p</name> <operator>&lt;</operator> <name>polls</name> <operator>+</operator> <name>pollcnt</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>revents</name></name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="block">/* this expect is debatable */</comment>
          <block>{<block_content>
            <expr_stmt><expr><operator>--</operator><name>res</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLNVAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
              <macro><name>fd_kill</name> <argument_list>(<argument>EV_A_ p-&gt;fd</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
              <macro><name>fd_event</name> <argument_list>(
                <argument>EV_A_
                p-&gt;fd</argument>,
                <argument>(p-&gt;revents &amp; (POLLOUT | POLLERR | POLLHUP) ? EV_WRITE : <literal type="number">0</literal>)
                | (p-&gt;revents &amp; (POLLIN | POLLERR | POLLHUP) ? EV_READ : <literal type="number">0</literal>)</argument>
              )</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
          </block_content>}</block></if></if_stmt>
      </block_content>}</block></for></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>inline_size</name>
<name>int</name></type>
<name>poll_init</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>backend_mintime</name> <operator>=</operator> <literal type="number">1e-3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>backend_modify</name>  <operator>=</operator> <name>poll_modify</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>backend_poll</name>    <operator>=</operator> <name>poll_poll</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>pollidxs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>pollidxmax</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>polls</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>pollmax</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>pollcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><name>EVBACKEND_POLL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>inline_size</name>
<name>void</name></type>
<name>poll_destroy</name> <parameter_list>(<parameter><decl><type><name>EV_P</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>pollidxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>polls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
