<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/lib/sql-property.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-property.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<enum>enum <name>property_parse_state_t</name> <block>{
    <comment type="line">// PARSE_STATE_INIT,</comment>
    <decl><name>PARSE_STATE_KEY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>PARSE_STATE_VALUE</name></decl>,
    <decl><name>PARSE_STATE_EQ_SIGN</name></decl>,
    <decl><name>PARSE_STATE_ERROR</name></decl>,
}</block>;</enum>

<enum>enum <block>{
    <decl><name>TYPE_INT</name></decl>,
    <decl><name>TYPE_STRING</name></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_VALUE_LEN</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<function><type><name>gboolean</name></type>
<name>sql_property_is_valid</name><parameter_list>(<parameter><decl><type><name>sql_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>table</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition><block type="pseudo"><block_content>   <comment type="block">/* mutual exclusive */</comment>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_property_free</name><parameter_list>(<parameter><decl><type><name>sql_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_property_parser_reset</name><parameter_list>(<parameter><decl><type><name>sql_property_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>parser</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>string_to_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <struct>struct <name>code_map_t</name> <block>{
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
    }</block> <decl><name><name>map</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{
        <expr><literal type="string">"READWRITE"</literal></expr>, <expr><name>MODE_READWRITE</name></expr>}</block></expr>, <expr><block>{
        <expr><literal type="string">"READONLY"</literal></expr>, <expr><name>MODE_READONLY</name></expr>}</block></expr>, <expr><block>{
        <expr><literal type="string">"SCOPE_LOCAL"</literal></expr>, <expr><name>P_SCOPE_LOCAL</name></expr>}</block></expr>, <expr><block>{
        <expr><literal type="string">"SCOPE_GLOBAL"</literal></expr>, <expr><name>P_SCOPE_GLOBAL</name></expr>}</block></expr>, <expr><block>{
    <expr><literal type="string">"SINGLE_NODE"</literal></expr>, <expr><name>TRX_SINGLE_NODE</name></expr>}</block></expr>,}</block></expr></init></decl>;</struct>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>ERROR_VALUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>parser_find_key</name><parameter_list>(<parameter><decl><type><name>sql_property_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <struct><specifier>static</specifier> <specifier>const</specifier> struct <name>property_desc_t</name> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>value_parse_func</name></type> <name>get_value</name></decl>;</decl_stmt>
    }</block> <decl><name><name>desc</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{
        <expr><literal type="string">"mode"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sql_property_t</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>TYPE_INT</name></expr>, <expr><name>string_to_code</name></expr>}</block></expr>, <expr><block>{
        <expr><literal type="string">"scope"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sql_property_t</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>, <expr><name>TYPE_INT</name></expr>, <expr><name>string_to_code</name></expr>}</block></expr>, <expr><block>{
        <expr><literal type="string">"transaction"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sql_property_t</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>, <expr><name>TYPE_INT</name></expr>, <expr><name>string_to_code</name></expr>}</block></expr>, <expr><block>{
        <expr><literal type="string">"group"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sql_property_t</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>, <expr><name>TYPE_STRING</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <expr><block>{
        <expr><literal type="string">"table"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sql_property_t</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>, <expr><name>TYPE_STRING</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <expr><block>{
    <expr><literal type="string">"key"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sql_property_t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>, <expr><name>TYPE_STRING</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,}</block></expr></init></decl>;</struct>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>key_offset</name></name> <operator>=</operator> <name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>get_value</name></name> <operator>=</operator> <name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>get_value</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_STATE_EQ_SIGN</name></expr>;</expr_stmt>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_STATE_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>parser_set_value</name><parameter_list>(<parameter><decl><type><name>sql_property_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>TYPE_INT</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>object</name> <operator>+</operator> <name><name>parser</name><operator>-&gt;</operator><name>key_offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* might be quoted */</comment>
            <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_VALUE_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>token</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name><name>parser</name><operator>-&gt;</operator><name>get_value</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name><name>parser</name><operator>-&gt;</operator><name>get_value</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_STATE_KEY</name></expr>;</expr_stmt>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>TYPE_STRING</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>object</name> <operator>+</operator> <name><name>parser</name><operator>-&gt;</operator><name>key_offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* might be quoted */</comment>
            <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>g_malloc0</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>token</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_STATE_KEY</name></expr>;</expr_stmt>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_STATE_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_property_parser_parse</name><parameter_list>(<parameter><decl><type><name>sql_property_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>sql_property_t</name> <modifier>*</modifier></type><name>property</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

    <case>case <expr><name>PARSE_STATE_KEY</name></expr>:</case>
        <return>return <expr><call><name>parser_find_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

    <case>case <expr><name>PARSE_STATE_EQ_SIGN</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_STATE_VALUE</name></expr>;</expr_stmt>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></else></if_stmt>

    <case>case <expr><name>PARSE_STATE_VALUE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>MAX_VALUE_LEN</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>parser_set_value</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>property</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

    <default>default:</default>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>
</unit>
