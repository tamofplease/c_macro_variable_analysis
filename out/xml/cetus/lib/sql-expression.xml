<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/lib/sql-expression.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-expression.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myparser.y.h"</cpp:file></cpp:include>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>sql_token_dup</name><parameter_list>(<parameter><decl><type><name>sql_token_t</name></type> <name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>token</name><operator>.</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>g_malloc0</name><argument_list>(<argument><expr><name><name>token</name><operator>.</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_string_dequote</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>sql_token_to_int</name><parameter_list>(<parameter><decl><type><name>sql_token_t</name></type> <name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* TODO: HEX */</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name><operator>++</operator> <operator>&lt;</operator> <name><name>token</name><operator>.</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><operator>(</operator><name>value</name> <operator>*</operator> <name>sign</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_string_dequote</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>quote</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>quote</name> <operator>=</operator> <name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>quote</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'\''</literal></expr>:</case>
        <break>break;</break>
    <case>case <expr><literal type="char">'"'</literal></expr>:</case>
        <break>break;</break>
    <case>case <expr><literal type="char">'`'</literal></expr>:</case>
        <break>break;</break>                  <comment type="block">/* For MySQL compatibility */</comment>
    <case>case <expr><literal type="char">'['</literal></expr>:</case>
        <expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
        <break>break;</break>                  <comment type="block">/* For MS SqlServer compatibility */</comment>
    <default>default:</default>
        <return>return;</return>
    </block_content>}</block></switch>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>quote</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>quote</name></expr>)</condition> <block>{<block_content>    <comment type="block">/* quote escape */</comment>
                <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>quote</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* slash escape */</comment>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>sql_expr_t</name> <modifier>*</modifier></type>
<name>sql_expr_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sql_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>TK_INTEGER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>extra</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql_expr_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>extra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>expr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>token</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>num_value</name></name> <operator>=</operator> <call><name>sql_token_to_int</name><argument_list>(<argument><expr><operator>*</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>token_text</name></name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>z</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>token_text</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>expr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>token</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>TK_STRING</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>TK_ID</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>sql_string_dequote</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>z</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>z</name><index>[<expr><name><name>token</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>var_scope</name></name> <operator>=</operator> <name>SCOPE_SESSION</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>expr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Only duplicate the root node
 */</comment>
<function><type><name>sql_expr_t</name> <modifier>*</modifier></type>
<name>sql_expr_dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>extra</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql_expr_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>extra</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_malloc0</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>expr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>alias</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_DOT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <call><name>sql_expr_dup</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <call><name>sql_expr_dup</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>select</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>expr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>height_of_expr</name><parameter_list>(<parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <operator>*</operator><name>height</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expr_set_height</name><parameter_list>(<parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>height_of_expr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>height_of_expr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_expr_attach_subtrees</name><parameter_list>(<parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>left</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>right</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>expr_set_height</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_expr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><operator>(</operator><name>sql_expr_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>select</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>sql_select_free</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>select</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>alias</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_expr_get_int</name><parameter_list>(<parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>gint64</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>rc</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TK_INTEGER</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>num_value</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_UMINUS</name></expr>:</case>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sql_expr_get_int</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>*</operator><name>value</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_UPLUS</name></expr>:</case>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sql_expr_get_int</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_expr_is_boolean</name><parameter_list>(<parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>gboolean</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gint64</name></type> <name>int_val</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sql_expr_get_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>int_val</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @param name NULL or expected token name
 * @return
 *   if name is NULL:
 *     return whether p is of type TK_ID
 *   if name not NULL:
 *     return TRUE only if p is TK_ID and has same name
 */</comment>
<function><type><name>gboolean</name></type>
<name>sql_expr_is_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>sql_expr_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>id</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_expr_is_function</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_FUNCTION</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>func</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>func</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>alias</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * prefix and suffix is NULLable
 * @return
 * if prefix or suffix is NULL, return true if the expression is of type:
 * TK_DOT
 *  |--TK_ID
 *  |--TK_ID
 *
 * if prefix or suffix not NULL, return ture only if expr is "prefix.suffix"
 */</comment>
<function><type><name>gboolean</name></type>
<name>sql_expr_is_dotted_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_DOT</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sql_expr_get_dotted_names</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>db_len</name></decl></parameter>,
                               <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tb_len</name></decl></parameter>,
                               <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_DOT</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>sql_expr_t</name> <modifier>*</modifier></type><name>dot</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_DOT</name></expr>)</condition> <block>{<block_content> <comment type="block">/* db.table.col */</comment>
            <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name>db_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>dot</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>&amp;&amp;</operator> <name><name>dot</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>token_text</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>dot</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name>tb_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>col</name> <operator>&amp;&amp;</operator> <name><name>dot</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>token_text</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>dot</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name>col_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_expr_is_field_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_ID</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_DOT</name></expr>)</condition> <block>{<block_content>   <comment type="block">/* qualified name */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_DOT</name></expr>)</condition> <block>{<block_content>   <comment type="block">/* db.table.col */</comment>
                <return>return <expr><call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <call><name>sql_expr_is_dotted_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>            <comment type="block">/* table.col */</comment>
                <return>return <expr><call><name>sql_expr_is_dotted_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>sql_expr_list_t</name> <modifier>*</modifier></type>
<name>sql_expr_list_append</name><parameter_list>(<parameter><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>list</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>sql_expr_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>sql_expr_t</name> <modifier>*</modifier></type>
<name>sql_expr_list_find</name><parameter_list>(<parameter><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>col</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>sql_expr_t</name> <modifier>*</modifier></type>
<name>sql_expr_list_find_fullname</name><parameter_list>(<parameter><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sql_expr_is_dotted_name</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>token_text</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>token_text</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>sql_expr_is_dotted_name</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>col</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Find first aggregate named `target`, only match function name
 * Example: target=max will match max(a) or max(b)
 * if `target` is NULL, find first occurance of any aggregate
 */</comment>
<function><type><name>int</name></type> <name>sql_expr_list_find_aggregate</name><parameter_list>(<parameter><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sql_expr_is_function</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name>sql_aggregate_type</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FT_UNKNOWN</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>i</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Similar with `sql_exp_list_find_aggregate`, but will also
 *  match function arguments, and target cannot be NULL
 * Example: target=max(a) will match max(a)
 */</comment>
<function><type><name>int</name></type> <name>sql_expr_list_find_exact_aggregate</name><parameter_list>(<parameter><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_FUNCTION</name>
            <operator>&amp;&amp;</operator> <call><name>sql_aggregate_type</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FT_UNKNOWN</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>i</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>alias</name></name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>i</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>sql_expr_list_find_aggregates</name><parameter_list>(<parameter><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>group_aggr_t</name> <modifier>*</modifier></type> <name>aggr_array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>enum</name> <name>sql_aggregate_type_t</name></name></type> <name>type</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_FUNCTION</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>sql_aggregate_type</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>FT_UNKNOWN</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>MAX_AGGR_FUNS</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>aggr_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>aggr_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>fun_type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_expr_list_free</name><parameter_list>(<parameter><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>sql_aggregate_type_t</name></name></type>
<name>sql_aggregate_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FT_COUNT</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"sum"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FT_SUM</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"avg"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FT_AVG</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"max"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FT_MAX</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FT_MIN</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>FT_UNKNOWN</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>sql_column_t</name> <modifier>*</modifier></type>
<name>sql_column_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>sql_column_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_column_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>sql_column_t</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>(</operator><name>sql_column_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>expr</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>alias</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sql_column_list_t</name> <modifier>*</modifier></type>
<name>sql_column_list_append</name><parameter_list>(<parameter><decl><type><name>sql_column_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>sql_column_t</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>list</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>sql_column_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_column_list_free</name><parameter_list>(<parameter><decl><type><name>sql_column_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>sql_select_t</name> <modifier>*</modifier></type>
<name>sql_select_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sql_select_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_select_free</name><parameter_list>(<parameter><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>columns</name></name></expr>)</condition><block type="pseudo"><block_content>             <comment type="block">/* The fields of the result */</comment>
        <expr_stmt><expr><call><name>sql_expr_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>from_src</name></name></expr>)</condition><block type="pseudo"><block_content>            <comment type="block">/* The FROM clause */</comment>
        <expr_stmt><expr><call><name>sql_src_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>from_src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>where_clause</name></name></expr>)</condition><block type="pseudo"><block_content>        <comment type="block">/* The WHERE clause */</comment>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>where_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>groupby_clause</name></name></expr>)</condition><block type="pseudo"><block_content>      <comment type="block">/* The GROUP BY clause */</comment>
        <expr_stmt><expr><call><name>sql_expr_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>groupby_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>having_clause</name></name></expr>)</condition><block type="pseudo"><block_content>       <comment type="block">/* The HAVING clause */</comment>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>having_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>orderby_clause</name></name></expr>)</condition><block type="pseudo"><block_content>      <comment type="block">/* The ORDER BY clause */</comment>
        <expr_stmt><expr><call><name>sql_expr_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>orderby_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>prior</name></name></expr>)</condition><block type="pseudo"><block_content>               <comment type="block">/* Prior select in a compound select statement */</comment>
        <expr_stmt><expr><call><name>sql_select_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prior</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* sql_select_t *pNext;         Next select to the left in a compound */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition><block type="pseudo"><block_content>               <comment type="block">/* LIMIT expression. NULL means not used. */</comment>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>              <comment type="block">/* OFFSET expression. NULL means not used. */</comment>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sql_delete_t</name> <modifier>*</modifier></type>
<name>sql_delete_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sql_delete_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sql_delete_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_delete_free</name><parameter_list>(<parameter><decl><type><name>sql_delete_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>from_src</name></name></expr>)</condition><block type="pseudo"><block_content>            <comment type="block">/* The FROM clause */</comment>
        <expr_stmt><expr><call><name>sql_src_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>from_src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>where_clause</name></name></expr>)</condition><block type="pseudo"><block_content>        <comment type="block">/* The WHERE clause */</comment>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>where_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>orderby_clause</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_expr_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>orderby_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* The ORDER BY clause */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition><block type="pseudo"><block_content>               <comment type="block">/* LIMIT expression. NULL means not used. */</comment>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>              <comment type="block">/* OFFSET expression. NULL means not used. */</comment>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sql_update_t</name> <modifier>*</modifier></type>
<name>sql_update_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sql_update_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sql_update_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_update_free</name><parameter_list>(<parameter><decl><type><name>sql_update_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>table_reference</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_table_reference_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>table_reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>set_list</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_expr_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>set_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>where_clause</name></name></expr>)</condition><block type="pseudo"><block_content>        <comment type="block">/* The WHERE clause */</comment>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>where_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>orderby_clause</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_expr_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>orderby_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* The ORDER BY clause */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition><block type="pseudo"><block_content>               <comment type="block">/* LIMIT expression. NULL means not used. */</comment>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>              <comment type="block">/* OFFSET expression. NULL means not used. */</comment>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sql_insert_t</name> <modifier>*</modifier></type>
<name>sql_insert_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sql_insert_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sql_insert_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_insert_free</name><parameter_list>(<parameter><decl><type><name>sql_insert_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_src_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sel_val</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_select_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sel_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>columns</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_id_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>update_list</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_expr_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>update_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_src_item_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sql_src_item_t</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>(</operator>struct <name>sql_src_item_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>table_name</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>index_hint</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_index_hint_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>index_hint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>table_alias</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>table_alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>dbname</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>select</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_select_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>select</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>on_clause</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>on_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>pUsing</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_id_list_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>pUsing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>func_arg</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_expr_list_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>func_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>groups</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sql_drop_database_t</name> <modifier>*</modifier></type>
<name>sql_drop_database_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sql_drop_database_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sql_drop_database_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_drop_database_free</name><parameter_list>(<parameter><decl><type><name>sql_drop_database_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>schema_name</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sql_src_list_t</name> <modifier>*</modifier></type>
<name>sql_src_list_append</name><parameter_list>(<parameter><decl><type><name>sql_src_list_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>sql_token_t</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>,
                    <parameter><decl><type><name>sql_token_t</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><name>sql_index_hint_t</name> <modifier>*</modifier></type><name>index_hint</name></decl></parameter>, <parameter><decl><type><name>sql_token_t</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>, <parameter><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>subquery</name></decl></parameter>,
                    <parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>on_clause</name></decl></parameter>, <parameter><decl><type><name>sql_id_list_t</name> <modifier>*</modifier></type><name>using_clause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sql_src_item_t</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sql_src_item_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>table_name</name></name> <operator>=</operator> <ternary><condition><expr><name>tname</name></expr> ?</condition><then> <expr><call><name>sql_token_dup</name><argument_list>(<argument><expr><operator>*</operator><name>tname</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>index_hint</name></name> <operator>=</operator> <name>index_hint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>table_alias</name></name> <operator>=</operator> <ternary><condition><expr><name>alias</name></expr> ?</condition><then> <expr><call><name>sql_token_dup</name><argument_list>(<argument><expr><operator>*</operator><name>alias</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>dbname</name></name> <operator>=</operator> <ternary><condition><expr><name>dbname</name></expr> ?</condition><then> <expr><call><name>sql_token_dup</name><argument_list>(<argument><expr><operator>*</operator><name>dbname</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>select</name></name> <operator>=</operator> <name>subquery</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>on_clause</name></name> <operator>=</operator> <name>on_clause</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>pUsing</name></name> <operator>=</operator> <name>using_clause</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>sql_src_item_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_src_list_free</name><parameter_list>(<parameter><decl><type><name>sql_src_list_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>sql_id_list_t</name> <modifier>*</modifier></type>
<name>sql_id_list_append</name><parameter_list>(<parameter><decl><type><name>sql_id_list_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>sql_token_t</name> <modifier>*</modifier></type><name>id_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>id_name</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>sql_token_dup</name><argument_list>(<argument><expr><operator>*</operator><name>id_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_id_list_free</name><parameter_list>(<parameter><decl><type><name>sql_id_list_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>sql_get_token_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <struct><specifier>static</specifier> struct <name>token_list_s</name> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    }</block> <decl><name><name>token_list</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{
        <expr><name>TK_SEMI</name></expr>, <expr><literal type="string">"TK_SEMI      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_CREATE</name></expr>, <expr><literal type="string">"TK_CREATE    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_TABLE</name></expr>, <expr><literal type="string">"TK_TABLE     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_IF</name></expr>, <expr><literal type="string">"TK_IF        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_NOT</name></expr>, <expr><literal type="string">"TK_NOT       "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_EXISTS</name></expr>, <expr><literal type="string">"TK_EXISTS    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_TEMP</name></expr>, <expr><literal type="string">"TK_TEMP      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_LP</name></expr>, <expr><literal type="string">"TK_LP        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_RP</name></expr>, <expr><literal type="string">"TK_RP        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_AS</name></expr>, <expr><literal type="string">"TK_AS        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_WITHOUT</name></expr>, <expr><literal type="string">"TK_WITHOUT   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_COMMA</name></expr>, <expr><literal type="string">"TK_COMMA     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_OR</name></expr>, <expr><literal type="string">"TK_OR        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_AND</name></expr>, <expr><literal type="string">"TK_AND       "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_IS</name></expr>, <expr><literal type="string">"TK_IS        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_MATCH</name></expr>, <expr><literal type="string">"TK_MATCH     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_LIKE_KW</name></expr>, <expr><literal type="string">"TK_LIKE_KW   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_BETWEEN</name></expr>, <expr><literal type="string">"TK_BETWEEN   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_IN</name></expr>, <expr><literal type="string">"TK_IN        "</literal></expr>}</block></expr>,
            <comment type="block">/*    {TK_ISNULL      ,"TK_ISNULL    "}, */</comment>
            <comment type="block">/*    {TK_NOTNULL     ,"TK_NOTNULL   "}, */</comment>
        <expr><block>{
        <expr><name>TK_NE</name></expr>, <expr><literal type="string">"TK_NE        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_EQ</name></expr>, <expr><literal type="string">"TK_EQ        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_GT</name></expr>, <expr><literal type="string">"TK_GT        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_LE</name></expr>, <expr><literal type="string">"TK_LE        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_LT</name></expr>, <expr><literal type="string">"TK_LT        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_GE</name></expr>, <expr><literal type="string">"TK_GE        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ESCAPE</name></expr>, <expr><literal type="string">"TK_ESCAPE    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_BITAND</name></expr>, <expr><literal type="string">"TK_BITAND    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_BITOR</name></expr>, <expr><literal type="string">"TK_BITOR     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_LSHIFT</name></expr>, <expr><literal type="string">"TK_LSHIFT    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_RSHIFT</name></expr>, <expr><literal type="string">"TK_RSHIFT    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_PLUS</name></expr>, <expr><literal type="string">"TK_PLUS      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_MINUS</name></expr>, <expr><literal type="string">"TK_MINUS     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_STAR</name></expr>, <expr><literal type="string">"TK_STAR      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_SLASH</name></expr>, <expr><literal type="string">"TK_SLASH     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_REM</name></expr>, <expr><literal type="string">"TK_REM       "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_CONCAT</name></expr>, <expr><literal type="string">"TK_CONCAT    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_COLLATE</name></expr>, <expr><literal type="string">"TK_COLLATE   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_BITNOT</name></expr>, <expr><literal type="string">"TK_BITNOT    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ID</name></expr>, <expr><literal type="string">"TK_ID        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ABORT</name></expr>, <expr><literal type="string">"TK_ABORT     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ACTION</name></expr>, <expr><literal type="string">"TK_ACTION    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_AFTER</name></expr>, <expr><literal type="string">"TK_AFTER     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ANALYZE</name></expr>, <expr><literal type="string">"TK_ANALYZE   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ASC</name></expr>, <expr><literal type="string">"TK_ASC       "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ATTACH</name></expr>, <expr><literal type="string">"TK_ATTACH    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_BEFORE</name></expr>, <expr><literal type="string">"TK_BEFORE    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_BEGIN</name></expr>, <expr><literal type="string">"TK_BEGIN     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_BY</name></expr>, <expr><literal type="string">"TK_BY        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_CASCADE</name></expr>, <expr><literal type="string">"TK_CASCADE   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_CAST</name></expr>, <expr><literal type="string">"TK_CAST      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_COLUMNKW</name></expr>, <expr><literal type="string">"TK_COLUMNKW  "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_CONFLICT</name></expr>, <expr><literal type="string">"TK_CONFLICT  "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_DATABASE</name></expr>, <expr><literal type="string">"TK_DATABASE  "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_DESC</name></expr>, <expr><literal type="string">"TK_DESC      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_DETACH</name></expr>, <expr><literal type="string">"TK_DETACH    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_EACH</name></expr>, <expr><literal type="string">"TK_EACH      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_END</name></expr>, <expr><literal type="string">"TK_END       "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_FAIL</name></expr>, <expr><literal type="string">"TK_FAIL      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_FOR</name></expr>, <expr><literal type="string">"TK_FOR       "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_IGNORE</name></expr>, <expr><literal type="string">"TK_IGNORE    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_INITIALLY</name></expr>, <expr><literal type="string">"TK_INITIALLY "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_INSTEAD</name></expr>, <expr><literal type="string">"TK_INSTEAD   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_NO</name></expr>, <expr><literal type="string">"TK_NO        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_PLAN</name></expr>, <expr><literal type="string">"TK_PLAN      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_QUERY</name></expr>, <expr><literal type="string">"TK_QUERY     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_KEY</name></expr>, <expr><literal type="string">"TK_KEY       "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_OF</name></expr>, <expr><literal type="string">"TK_OF        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_TO</name></expr>, <expr><literal type="string">"TK_TO"</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_OFFSET</name></expr>, <expr><literal type="string">"TK_OFFSET    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_PRAGMA</name></expr>, <expr><literal type="string">"TK_PRAGMA    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_RAISE</name></expr>, <expr><literal type="string">"TK_RAISE     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_RECURSIVE</name></expr>, <expr><literal type="string">"TK_RECURSIVE "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_RELEASE</name></expr>, <expr><literal type="string">"TK_RELEASE   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_REPLACE</name></expr>, <expr><literal type="string">"TK_REPLACE   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_RESTRICT</name></expr>, <expr><literal type="string">"TK_RESTRICT  "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ROW</name></expr>, <expr><literal type="string">"TK_ROW       "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_TRANSACTION</name></expr>, <expr><literal type="string">"TK_TRANSACTION"</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_START</name></expr>, <expr><literal type="string">"TK_START"</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_COMMIT</name></expr>, <expr><literal type="string">"TK_COMMIT"</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ROLLBACK</name></expr>, <expr><literal type="string">"TK_ROLLBACK  "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_SAVEPOINT</name></expr>, <expr><literal type="string">"TK_SAVEPOINT "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_TRIGGER</name></expr>, <expr><literal type="string">"TK_TRIGGER   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_VACUUM</name></expr>, <expr><literal type="string">"TK_VACUUM    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_VIEW</name></expr>, <expr><literal type="string">"TK_VIEW      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_VIRTUAL</name></expr>, <expr><literal type="string">"TK_VIRTUAL   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_WITH</name></expr>, <expr><literal type="string">"TK_WITH      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_RENAME</name></expr>, <expr><literal type="string">"TK_RENAME    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ANY</name></expr>, <expr><literal type="string">"TK_ANY       "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_STRING</name></expr>, <expr><literal type="string">"TK_STRING    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_JOIN_KW</name></expr>, <expr><literal type="string">"TK_JOIN_KW   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_INTEGER</name></expr>, <expr><literal type="string">"TK_INTEGER   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_FLOAT</name></expr>, <expr><literal type="string">"TK_FLOAT     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_CONSTRAINT</name></expr>, <expr><literal type="string">"TK_CONSTRAINT"</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_DEFAULT</name></expr>, <expr><literal type="string">"TK_DEFAULT   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_CHECK</name></expr>, <expr><literal type="string">"TK_CHECK     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_AUTO_INCREMENT</name></expr>, <expr><literal type="string">"TK_AUTO_INCREMENT  "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_PRIMARY</name></expr>, <expr><literal type="string">"TK_PRIMARY   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_UNIQUE</name></expr>, <expr><literal type="string">"TK_UNIQUE    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_FOREIGN</name></expr>, <expr><literal type="string">"TK_FOREIGN   "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_DROP</name></expr>, <expr><literal type="string">"TK_DROP      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_SELECT</name></expr>, <expr><literal type="string">"TK_SELECT    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_VALUES</name></expr>, <expr><literal type="string">"TK_VALUES    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_DISTINCT</name></expr>, <expr><literal type="string">"TK_DISTINCT  "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_DOT</name></expr>, <expr><literal type="string">"TK_DOT       "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_FROM</name></expr>, <expr><literal type="string">"TK_FROM      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_JOIN</name></expr>, <expr><literal type="string">"TK_JOIN      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ON</name></expr>, <expr><literal type="string">"TK_ON        "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_USING</name></expr>, <expr><literal type="string">"TK_USING     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ORDER</name></expr>, <expr><literal type="string">"TK_ORDER     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_GROUP</name></expr>, <expr><literal type="string">"TK_GROUP     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_HAVING</name></expr>, <expr><literal type="string">"TK_HAVING    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_LIMIT</name></expr>, <expr><literal type="string">"TK_LIMIT     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_DELETE</name></expr>, <expr><literal type="string">"TK_DELETE    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_WHERE</name></expr>, <expr><literal type="string">"TK_WHERE     "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_UPDATE</name></expr>, <expr><literal type="string">"TK_UPDATE    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_SET</name></expr>, <expr><literal type="string">"TK_SET       "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_INTO</name></expr>, <expr><literal type="string">"TK_INTO      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_INSERT</name></expr>, <expr><literal type="string">"TK_INSERT    "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_NULL</name></expr>, <expr><literal type="string">"TK_NULL      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_BLOB</name></expr>, <expr><literal type="string">"TK_BLOB      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_CASE</name></expr>, <expr><literal type="string">"TK_CASE      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_WHEN</name></expr>, <expr><literal type="string">"TK_WHEN      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_THEN</name></expr>, <expr><literal type="string">"TK_THEN      "</literal></expr>}</block></expr>, <expr><block>{
        <expr><name>TK_ELSE</name></expr>, <expr><literal type="string">"TK_ELSE      "</literal></expr>}</block></expr>
    }</block></expr></init></decl>;</struct>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>token_list</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>token_list_s</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>token_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>==</operator> <name>op</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>token_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="string">"NotFound"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* print the syntax tree, used for debug */</comment>
<function><type><name>void</name></type>
<name>sql_expr_print</name><parameter_list>(<parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>INDENT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spaces</name> <init>= <expr><literal type="string">"                                               "</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><name>depth</name> <operator>*</operator> <name>INDENT</name></expr></argument>, <argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>sql_get_token_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>!=</operator> <name>TK_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_INTEGER</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>num_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>sql_expr_print</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s[nul]\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>depth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>INDENT</name></expr></argument>, <argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>sql_expr_print</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s[nul]\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>depth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>INDENT</name></expr></argument>, <argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_statement_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>, <parameter><decl><type><name>sql_stmt_type_t</name></type> <name>stmt_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clause</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <switch>switch <condition>(<expr><name>stmt_type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>STMT_SELECT</name></expr>:</case>
        <expr_stmt><expr><call><name>sql_select_free</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>STMT_UPDATE</name></expr>:</case>
        <expr_stmt><expr><call><name>sql_update_free</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>STMT_INSERT</name></expr>:</case>
        <expr_stmt><expr><call><name>sql_insert_free</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>STMT_DELETE</name></expr>:</case>
        <expr_stmt><expr><call><name>sql_delete_free</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>STMT_SHOW</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>STMT_SHOW_COLUMNS</name></expr>:</case>
    <case>case <expr><name>STMT_SHOW_CREATE</name></expr>:</case>
    <case>case <expr><name>STMT_EXPLAIN_TABLE</name></expr>:</case>
        <expr_stmt><expr><call><name>sql_src_list_free</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>STMT_SET</name></expr>:</case>
        <expr_stmt><expr><call><name>sql_expr_list_free</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>STMT_SET_TRANSACTION</name></expr>:</case>
    <case>case <expr><name>STMT_SET_NAMES</name></expr>:</case>
    <case>case <expr><name>STMT_USE</name></expr>:</case>
    <case>case <expr><name>STMT_SAVEPOINT</name></expr>:</case>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>STMT_START</name></expr>:</case>
    <case>case <expr><name>STMT_COMMIT</name></expr>:</case>
    <case>case <expr><name>STMT_ROLLBACK</name></expr>:</case>
    <case>case <expr><name>STMT_COMMON_DDL</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>STMT_DROP_DATABASE</name></expr>:</case>
        <expr_stmt><expr><call><name>sql_drop_database_free</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <break>break;</break>
    <case>case <expr><name>STMT_CALL</name></expr>:</case>
        <expr_stmt><expr><call><name>sql_expr_free</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">":not supported clause type, caution mem leak"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_is_quoted_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'`'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>sql_join_type</name><parameter_list>(<parameter><decl><type><name>sql_token_t</name></type> <name>kw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <struct><specifier>static</specifier> struct <block>{
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name>code</name></decl>;</decl_stmt>
    }</block> <decl><name><name>_map</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{
        <expr><literal type="string">"INNER"</literal></expr>, <expr><name>JT_INNER</name></expr>}</block></expr>, <expr><block>{
        <expr><literal type="string">"CROSS"</literal></expr>, <expr><name>JT_CROSS</name></expr>}</block></expr>, <expr><block>{
        <expr><literal type="string">"NATURAL"</literal></expr>, <expr><name>JT_NATURAL</name></expr>}</block></expr>, <expr><block>{
        <expr><literal type="string">"LEFT"</literal></expr>, <expr><name>JT_LEFT</name></expr>}</block></expr>, <expr><block>{
        <expr><literal type="string">"RIGHT"</literal></expr>, <expr><name>JT_RIGHT</name></expr>}</block></expr>, <expr><block>{
    <expr><literal type="string">"OUTER"</literal></expr>, <expr><name>JT_OUTER</name></expr>}</block></expr>,}</block></expr></init></decl>;</struct>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>JT_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>kw_str</name> <init>= <expr><call><name>sql_token_dup</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>kw_str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>kw_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * !! support only ID, INTGER and STRING
 */</comment>
<function><type><name>gboolean</name></type>
<name>sql_expr_equals</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sql_expr_t</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sql_expr_t</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p1</name> <operator>&amp;&amp;</operator> <name>p2</name> <operator>&amp;&amp;</operator> <name><name>p1</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name><name>p2</name><operator>-&gt;</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_ID</name> <operator>||</operator> <name><name>p1</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_STRING</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name><name>p2</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_INTEGER</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>p1</name><operator>-&gt;</operator><name>num_value</name></name> <operator>==</operator> <name><name>p2</name><operator>-&gt;</operator><name>num_value</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_index_hint_free</name><parameter_list>(<parameter><decl><type><name>sql_index_hint_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_id_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>sql_index_hint_t</name><modifier>*</modifier></type>
<name>sql_index_hint_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sql_index_hint_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>    
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_table_reference_free</name><parameter_list>(<parameter><decl><type><name>sql_table_reference_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>table_list</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_src_list_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>table_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>index_hint</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_index_hint_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>index_hint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sql_table_reference_t</name> <modifier>*</modifier></type>
<name>sql_table_reference_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sql_table_reference_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
