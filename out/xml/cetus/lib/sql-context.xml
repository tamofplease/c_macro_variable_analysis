<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/lib/sql-context.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-context.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mylexer.l.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-property.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>sqlParser</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>yyp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yymajor</name></decl></parameter>, <parameter><decl><type><name>sql_token_t</name></type> <name>yyminor</name></decl></parameter>, <parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sqlParserFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freeProc</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>sqlParserAlloc</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallocProc</name>) <parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sqlParserTrace</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>TraceFILE</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zTracePrompt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yylex_restore_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>sql_context_init</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>explain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sql_statement</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stmt_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>clause_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>where_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parsing_place</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>property</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>is_parsing_subquery</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="block">/* allow_subquery_nesting; //keep unchanged */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_context_destroy</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sql_statement</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_statement_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>stmt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>message</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>property</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sql_property_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>property</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_context_reset</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>sql_context_destroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_context_append_msg</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>orig_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>message</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <call><name>g_malloc0</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>orig_msg</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>message</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>orig_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>orig_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <call><name>g_malloc0</name><argument_list>(<argument><expr><name>orig_len</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>message</name></name></expr></argument>, <argument><expr><name>orig_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>orig_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>message</name></name> <operator>+</operator> <name>orig_len</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_context_set_error</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_append_msg</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_context_add_stmt</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>sql_stmt_type_t</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>stmt_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sql_statement</name></name> <operator>=</operator> <name>clause</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>clause</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sql_statement_free</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_context_has_sharding_property</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>property</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>property</name><operator>-&gt;</operator><name>table</name></name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>property</name><operator>-&gt;</operator><name>group</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_token</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>sql_token_t</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>sql_property_parser_t</name> <modifier>*</modifier></type><name>prop_parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TK_PROPERTY_START</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>prop_parser</name><operator>-&gt;</operator><name>is_parsing</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>property</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>property</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>sql_property_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>TK_PROPERTY_END</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>prop_parser</name><operator>-&gt;</operator><name>is_parsing</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>sql_property_t</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>property</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_READWRITE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_FORCE_MASTER</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_READONLY</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_FORCE_SLAVE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sql_property_is_valid</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>property</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sql_property_free</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>property</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>property</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">":invalid comment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sql_context_set_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PARSE_SYNTAX_ERR</name></expr></argument>, <argument><expr><literal type="string">"comment error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>TK_MYSQL_HINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_WRITE</name></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>prop_parser</name><operator>-&gt;</operator><name>is_parsing</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/*# K = V */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sql_property_parser_parse</name><argument_list>(<argument><expr><name>prop_parser</name></expr></argument>,
                                           <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>property</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sql_property_free</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>property</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>property</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sql_context_set_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PARSE_SYNTAX_ERR</name></expr></argument>, <argument><expr><literal type="string">"comment error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sqlParser</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSER_TRACE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<comment type="block">/* Parse user allocated sql string
  sql-&gt;str must be terminated with 2 NUL
  sql-&gt;len is length including the 2 NUL */</comment>
<function><type><name>void</name></type>
<name>sql_context_parse_len</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>yyscan_t</name></type> <name>scanner</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>yylex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>YY_BUFFER_STATE</name></type> <name>buf_state</name> <init>= <expr><call><name>yy_scan_buffer</name><argument_list>(<argument><expr><name><name>sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>sql</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PARSER_TRACE</name></expr></cpp:if>
    <expr_stmt><expr><call><name>sqlParserTrace</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"---ParserTrace: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><call><name>sqlParserAlloc</name><argument_list>(<argument><expr><name>malloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sql_context_reset</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>sql_property_parser_t</name></type> <name>comment_parser</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sql_property_parser_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>comment_parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>last_parsed_token</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sql_token_t</name></type> <name>token</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>yylex</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>   <comment type="block">/* 0 on EOF */</comment>
        <expr_stmt><expr><name><name>token</name><operator>.</operator><name>z</name></name> <operator>=</operator> <call><name>yyget_text</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>token</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>yyget_leng</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PARSER_TRACE</name></expr></cpp:if>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"***LexerTrace: code: %d, yytext: %.*s\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"***LexerTrace: yytext addr: %p\n"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>parse_token</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comment_parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>last_parsed_token</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>rc</name></name> <operator>!=</operator> <name>PARSE_OK</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* break on PARSE_HEAD, other error */</comment>
            <expr_stmt><expr><call><name>yylex_restore_buffer</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* restore the input string */</comment>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>rc</name></name> <operator>==</operator> <name>PARSE_OK</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* grammar require semicolon as ending token */</comment>
        <if_stmt><if>if <condition>(<expr><name>last_parsed_token</name> <operator>!=</operator> <name>TK_SEMI</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sqlParser</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>TK_SEMI</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlParser</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlParserFree</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>yy_delete_buffer</name><argument_list>(<argument><expr><name>buf_state</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>yylex_destroy</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_context_is_autocommit_on</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>STMT_SET</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>set_list</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>set_list</name> <operator>&amp;&amp;</operator> <name><name>set_list</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>set_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_EQ</name> <operator>&amp;&amp;</operator> <call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><literal type="string">"AUTOCOMMIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>gboolean</name></type> <name>on</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>sql_expr_is_boolean</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>on</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>on</name></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_ON</name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <return>return <expr><name>TRUE</name></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_context_is_autocommit_off</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>STMT_SET</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>set_list</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>set_list</name> <operator>&amp;&amp;</operator> <name><name>set_list</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>set_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_EQ</name> <operator>&amp;&amp;</operator> <call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><literal type="string">"AUTOCOMMIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>gboolean</name></type> <name>on</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>sql_expr_is_boolean</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>on</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>on</name> <operator>==</operator> <name>FALSE</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_context_is_single_node_trx</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>context</name> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>property</name></name> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>property</name><operator>-&gt;</operator><name>transaction</name></name> <operator>==</operator> <name>TRX_SINGLE_NODE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_context_is_cacheable</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>!=</operator> <name>STMT_SELECT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>clause_flags</name></name> <operator>&amp;</operator> <name>CF_SUBQUERY</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>select</name><operator>-&gt;</operator><name>from_src</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>lock_read</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>select</name><operator>-&gt;</operator><name>columns</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>    <comment type="block">/* only allow aggreate functions */</comment>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EP_FUNCTION</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>col</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EP_AGGREGATE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
</unit>
