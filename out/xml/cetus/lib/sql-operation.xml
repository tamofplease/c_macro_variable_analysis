<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/lib/sql-operation.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-operation.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-filter-variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myparser.y.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>sql_select</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>select</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_READ</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>STMT_SELECT</name></expr></argument>, <argument><expr><name>select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_delete</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>sql_delete_t</name> <modifier>*</modifier></type><name>del</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>rc</name></name> <operator>!=</operator> <name>PARSE_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Delete Parse Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>STMT_DELETE</name></expr></argument>, <argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_update</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>sql_update_t</name> <modifier>*</modifier></type><name>update</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>rc</name></name> <operator>!=</operator> <name>PARSE_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Update Parse Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>STMT_UPDATE</name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_insert</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>sql_insert_t</name> <modifier>*</modifier></type><name>insert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>rc</name></name> <operator>!=</operator> <name>PARSE_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Insert Parse Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>STMT_INSERT</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_start_transaction</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>rc</name></name> <operator>!=</operator> <name>PARSE_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Start transaction parse Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>STMT_START</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_commit_transaction</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>rc</name></name> <operator>!=</operator> <name>PARSE_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"COMMIT transaction parse Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>STMT_COMMIT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_rollback_transaction</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>rc</name></name> <operator>!=</operator> <name>PARSE_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"ROLLBACK transaction parse Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>STMT_ROLLBACK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_savepoint</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tk</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>rc</name></name> <operator>!=</operator> <name>PARSE_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"SAVE POINT parse Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>STMT_SAVEPOINT</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_drop_database</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>sql_drop_database_t</name> <modifier>*</modifier></type><name>drop_database</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>STMT_DROP_DATABASE</name></expr></argument>, <argument><expr><name>drop_database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>string_array_contains</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>sa</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_set_variable</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>exps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>property</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_context_set_error</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>PARSE_NOT_SUPPORT</name></expr></argument>, <argument><expr><literal type="string">"Commanding comment is not allowed in SET clause"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>exps</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>!=</operator> <name>TK_EQ</name> <operator>||</operator> <operator>!</operator><call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sql_context_set_error</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>PARSE_SYNTAX_ERR</name></expr></argument>, <argument><expr><literal type="string">"syntax error in SET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>var_scope</name></name> <operator>==</operator> <name>SCOPE_GLOBAL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sql_context_set_error</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>PARSE_NOT_SUPPORT</name></expr></argument>, <argument><expr><literal type="string">"Only session scope SET is supported now"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var_name</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>token_text</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>token_text</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>var_name</name></expr></argument>, <argument><expr><literal type="string">"sql_mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gboolean</name></type> <name>supported</name> <init>= <expr><call><name>sql_filter_vars_is_allowed</name><argument_list>(<argument><expr><name>var_name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>supported</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sql_context_set_error</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>PARSE_NOT_SUPPORT</name></expr></argument>, <argument><expr><literal type="string">"This sql_mode is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>out</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>sql_filter_vars_is_allowed</name><argument_list>(<argument><expr><name>var_name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"SET of %s is not supported"</literal></expr></argument>, <argument><expr><name>var_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sql_context_set_error</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>PARSE_NOT_SUPPORT</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  <label><name>out</name>:</label>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>STMT_SET</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_set_names</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>property</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_context_set_error</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>PARSE_NOT_SUPPORT</name></expr></argument>, <argument><expr><literal type="string">"Commanding comment is not allowed in SET clause"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>charsets</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"latin1"</literal></expr>, <expr><literal type="string">"ascii"</literal></expr>, <expr><literal type="string">"gb2312"</literal></expr>, <expr><literal type="string">"gbk"</literal></expr>, <expr><literal type="string">"utf8"</literal></expr>, <expr><literal type="string">"utf8mb4"</literal></expr>, <expr><literal type="string">"big5"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cs_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>charsets</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>string_array_contains</name><argument_list>(<argument><expr><name>charsets</name></expr></argument>, <argument><expr><name>cs_size</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"Unknown character set: %s"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sql_context_set_error</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>PARSE_NOT_SUPPORT</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>STMT_SET_NAMES</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_set_transaction</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_feature</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>property</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_context_set_error</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>PARSE_NOT_SUPPORT</name></expr></argument>, <argument><expr><literal type="string">"Commanding comment is not allowed in SET clause"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>scope</name> <operator>==</operator> <name>SCOPE_GLOBAL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_context_set_error</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>PARSE_NOT_SUPPORT</name></expr></argument>, <argument><expr><literal type="string">"GLOBAL scope SET TRANSACTION is not supported now"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>sql_set_transaction_t</name> <modifier>*</modifier></type><name>set_tran</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sql_set_transaction_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>set_tran</name><operator>-&gt;</operator><name>scope</name></name> <operator>=</operator> <name>scope</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>set_tran</name><operator>-&gt;</operator><name>rw_feature</name></name> <operator>=</operator> <name>rw_feature</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>set_tran</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>STMT_SET_TRANSACTION</name></expr></argument>, <argument><expr><name>set_tran</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_use_database</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_READ</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>STMT_USE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_explain_table</name><parameter_list>(<parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>sql_src_list_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>|=</operator> <name>CF_READ</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_add_stmt</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>STMT_EXPLAIN_TABLE</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
