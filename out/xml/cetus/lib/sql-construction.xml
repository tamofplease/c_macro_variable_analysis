<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/lib/sql-construction.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-construction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myparser.y.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sql_expr_traverse</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>string_append_quoted</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>quote</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>quote</name></expr>)</condition> <block>{<block_content>      <comment type="block">/* escape quote inside string */</comment>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* sql construction */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>sql_append_expr</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TK_ID</name></expr>:</case>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_EQ</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_LT</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_GT</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_LE</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_GE</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&gt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_NE</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_AND</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" AND "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_OR</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" OR "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_DOT</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_UPLUS</name></expr>:</case>
    <case>case <expr><name>TK_UMINUS</name></expr>:</case>
    <case>case <expr><name>TK_INTEGER</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>valstr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pstr</name> <init>= <expr><name>valstr</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_UMINUS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>pstr</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>pstr</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>num_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_STRING</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><call><name>sql_is_quoted_string</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* TODO: dequote all */</comment>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>string_append_quoted</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_FUNCTION</name></expr>:</case><block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>args</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>sql_expr_traverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_BETWEEN</name></expr>:</case><block>{<block_content>
        <expr_stmt><expr><call><name>sql_append_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" BETWEEN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>args</name> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>low</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>high</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sql_expr_traverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" AND "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sql_expr_traverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_IN</name></expr>:</case><block>{<block_content>
        <expr_stmt><expr><call><name>sql_append_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" IN ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>args</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>sql_append_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>select</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>sel</name> <init>= <expr><call><name>sql_construct_select</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>select</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sel</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>sel</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>sel</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_EXISTS</name></expr>:</case><block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" EXISTS ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>sel</name> <init>= <expr><call><name>sql_construct_select</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>select</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sel</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>sel</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>sel</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_LIKE_KW</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>sql_expr_traverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" LIKE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>sql_append_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" ESCAPE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sql_append_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_NOT</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" NOT("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sql_expr_traverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_SELECT</name></expr>:</case><block>{<block_content>           <comment type="block">/* subselect as an expression */</comment>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>sel</name> <init>= <expr><call><name>sql_construct_select</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>select</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sel</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>sel</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>sel</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_IS</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" IS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_ISNOT</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" IS NOT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_PLUS</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>TK_MINUS</name></expr>:</case>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* these expr will be processed as leaf node */</comment>
<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>sql_expr_is_leaf_node</name><parameter_list>(<parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_DOT</name> <operator>&amp;&amp;</operator> <name><name>expr</name><operator>-&gt;</operator><name>left</name></name> <operator>&amp;&amp;</operator> <name><name>expr</name><operator>-&gt;</operator><name>right</name></name><operator>)</operator>    <comment type="block">/* db.table */</comment>
        <operator>||</operator><operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_UMINUS</name> <operator>&amp;&amp;</operator> <name><name>expr</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator> <comment type="block">/* -3 */</comment>
        <operator>||</operator><operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_UPLUS</name> <operator>&amp;&amp;</operator> <name><name>expr</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator>  <comment type="block">/* +4 */</comment>
        <operator>||</operator><operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_BETWEEN</name><operator>)</operator>
        <operator>||</operator> <operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_NOT</name><operator>)</operator>
        <operator>||</operator> <operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_EXISTS</name><operator>)</operator>
        <operator>||</operator> <operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_IN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sql_expr_traverse</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>expr</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sql_expr_is_leaf_node</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_append_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gboolean</name></type> <name>parenth</name> <init>= <expr><operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_AND</name> <operator>&amp;&amp;</operator> <name><name>expr</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_OR</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>parenth</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>sql_expr_traverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>parenth</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sql_append_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gboolean</name></type> <name>parenth</name> <init>= <expr><operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_AND</name> <operator>&amp;&amp;</operator> <name><name>expr</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_OR</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>parenth</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>sql_expr_traverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>parenth</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sql_construct_join</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>JT_INNER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" JOIN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>JT_INNER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"INNER "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>JT_CROSS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"CROSS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>JT_NATURAL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"NATURAL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>JT_LEFT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"LEFT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>JT_RIGHT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"RIGHT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>JT_OUTER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"OUTER "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"JOIN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>append_sql_expr</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>expr</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GString</name> <modifier>*</modifier></type>
<name>sql_construct_select</name><parameter_list>(<parameter><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>select</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>explain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>explain</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"EXPLAIN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"SELECT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>columns</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SF_DISTINCT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"DISTINCT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>select</name><operator>-&gt;</operator><name>columns</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>append_sql_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>alias</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" AS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>select</name><operator>-&gt;</operator><name>columns</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>from_src</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" FROM "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>select</name><operator>-&gt;</operator><name>from_src</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_src_item_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>from_src</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>table_name</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>dbname</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>groups</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>group_index</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>index</name> <operator>=</operator> <name>index</name> <operator>%</operator> <name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>group_name</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>group_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>select</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>sql_construct_select</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>select</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>table_alias</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" AS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>table_alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>index_hint</name></name></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>index_hint</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><name>IH_USE_INDEX</name></expr>:</case> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" USE INDEX ( "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                    <case>case <expr><name>IH_USE_KEY</name></expr>:</case> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" USE KEY ( "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                    <case>case <expr><name>IH_IGNORE_INDEX</name></expr>:</case> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" IGNORE INDEX ( "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                    <case>case <expr><name>IH_IGNORE_KEY</name></expr>:</case> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" IGNORE KEY ( "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                    <case>case <expr><name>IH_FORCE_INDEX</name></expr>:</case> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" FORCE INDEX ( "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                    <case>case <expr><name>IH_FORCE_KEY</name></expr>:</case> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" FORCE KEY ( "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                </block_content>}</block></switch>
                <decl_stmt><decl><type><name>gint</name></type> <name>len</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>index_hint</name><operator>-&gt;</operator><name>names</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>gint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>index_hint</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <operator>(</operator><name>len</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" , "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" ) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>on_clause</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" ON "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>append_sql_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>on_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>jointype</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sql_construct_join</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>jointype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>where_clause</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" WHERE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name><name>select</name><operator>-&gt;</operator><name>where_clause</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>modify_flag</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sql_expr_traverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>append_sql_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>groupby_clause</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>groupby</name> <init>= <expr><name><name>select</name><operator>-&gt;</operator><name>groupby_clause</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" GROUP BY "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>groupby</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>groupby</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>append_sql_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>groupby</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>having_clause</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" HAVING "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>append_sql_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>having_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>orderby_clause</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>orderby</name> <init>= <expr><name><name>select</name><operator>-&gt;</operator><name>orderby_clause</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" ORDER BY "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>orderby</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_column_t</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>orderby</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block">/* this might be duped from column, @see sql_modify_orderby
               not using append_sql_expr() to reserve possible alias */</comment>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name><name>col</name><operator>-&gt;</operator><name>expr</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sql_expr_traverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>sort_order</name></name> <operator>&amp;&amp;</operator> <name><name>col</name><operator>-&gt;</operator><name>sort_order</name></name> <operator>==</operator> <name>SQL_SO_DESC</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" DESC "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>orderby</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* don't use append_sql_expr() for LIMIT/OFFSET, the expression has changed */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" LIMIT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sql_expr_traverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" OFFSET "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sql_expr_traverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>lock_read</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" FOR UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>prior</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>sub_select</name> <init>= <expr><name><name>select</name><operator>-&gt;</operator><name>prior</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>union_sql</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>sub_select</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><call><name>sql_construct_select</name><argument_list>(<argument><expr><name>sub_select</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>union_sql</name></expr></argument>, <argument><expr><name><name>sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>union_sql</name></expr></argument>, <argument><expr><literal type="string">" UNION "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sub_select</name> <operator>=</operator> <name><name>sub_select</name><operator>-&gt;</operator><name>prior</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>union_sql</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <name>union_sql</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* format as " expr1,expr2,expr3 "*/</comment>
<function><type><name>void</name></type>
<name>sql_append_expr_list</name><parameter_list>(<parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>exprlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>exprlist</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>exprlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>append_sql_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>exprlist</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_construct_insert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is_partition_mode</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>sql_insert_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>table</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_src_item_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>dbname</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>is_partition_mode</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>group</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>groups</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>group_index</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>index</name> <operator>=</operator> <name>index</name> <operator>%</operator> <name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>group_name</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>group_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>columns</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>columns</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>columns_start</name></name></expr></argument>,
                            <argument><expr><name><name>p</name><operator>-&gt;</operator><name>columns_end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>columns_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sel_val</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sel_val</name><operator>-&gt;</operator><name>from_src</name></name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* select as values */</comment>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><call><name>sql_construct_select</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sel_val</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>select</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* expression values */</comment>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"VALUES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>values</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>sel_val</name></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init>;</init> <condition><expr><name>values</name></expr>;</condition> <incr><expr><name>values</name> <operator>=</operator> <name><name>values</name><operator>-&gt;</operator><name>prior</name></name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><name><name>values</name><operator>-&gt;</operator><name>columns</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sql_append_expr_list</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"),"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>   <comment type="block">/* no comma at the end */</comment>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>update_list</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" ON DUPLICATE KEY UPDATE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sql_append_expr_list</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>update_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
    
<function><type><name>GString</name> <modifier>*</modifier></type>
<name>sql_construct_update</name><parameter_list>(<parameter><decl><type><name>sql_update_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"UPDATE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>sql_src_list_t</name> <modifier>*</modifier></type><name>tables</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>table_reference</name><operator>-&gt;</operator><name>table_list</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sql_src_item_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>tables</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>dbname</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>groups</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>group_index</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <name>index</name> <operator>%</operator> <name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>group_name</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>group_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" SET "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>set_list</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>set_list</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>set_list</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>append_sql_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>set_list</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>where_clause</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" WHERE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>append_sql_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>where_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GString</name> <modifier>*</modifier></type>
<name>sql_construct_delete</name><parameter_list>(<parameter><decl><type><name>sql_delete_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>sql_src_item_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>from_src</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>dbname</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>groups</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>group_index</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <name>index</name> <operator>%</operator> <name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>group_name</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>group_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>where_clause</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" WHERE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>append_sql_expr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>where_clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

</unit>
