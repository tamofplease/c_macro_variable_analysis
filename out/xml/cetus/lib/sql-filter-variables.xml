<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/lib/sql-filter-variables.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-filter-variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>

<enum>enum <name>_value_type_t</name> <block>{
    <decl><name>VAL_UNKNOWN</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
    <decl><name>VAL_INT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>VAL_STRING</name></decl>,
    <decl><name>VAL_STRING_CSV</name></decl>,             <comment type="block">/* comma seperated string value */</comment>
}</block>;</enum>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>_value_type_t</name></name></type>
<name>value_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>VAL_INT</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>VAL_STRING</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"string-csv"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>VAL_STRING_CSV</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>VAL_UNKNOWN</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<struct>struct <name>sql_variable_t</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>enum</name> <name>_value_type_t</name></name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>silent_values</name></decl>;</decl_stmt>       <comment type="block">/* GList&lt;char *&gt; */</comment>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>allowed_values</name></decl>;</decl_stmt>      <comment type="block">/* GList&lt;char *&gt; */</comment>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>allow_all</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>silence_all</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sql_variable_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sql_variable_t</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>silent_values</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>silent_values</name></name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>allowed_values</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>allowed_values</name></name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>sql_variable_is_silent_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sql_variable_t</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>silent_values</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: l-&gt;data:%s, value:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>value</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: sql_variable_is_allowed_value true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>TRUE</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>sql_variable_is_allowed_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sql_variable_t</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>allowed_values</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: l-&gt;data:%s, value:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>value</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: sql_variable_is_allowed_value true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>TRUE</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>GHashTable</name> <modifier>*</modifier></type><name>cetus_variables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>sql_filter_vars_destroy</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cetus_variables</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name>cetus_variables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>str_case_equal</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>v1</name> <operator>||</operator> <operator>!</operator><name>v2</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>v1</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>v2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>guint</name></type>
<name>str_case_hash</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lower</name> <init>= <expr><call><name>g_ascii_strdown</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>v</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint</name></type> <name>hash</name> <init>= <expr><call><name>g_str_hash</name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_filter_vars_load_str_rules</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cetus_variables</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cetus_variables</name> <operator>=</operator> <call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><name>str_case_hash</name></expr></argument>, <argument><expr><name>str_case_equal</name></expr></argument>,
                                                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator> <name>sql_variable_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>json_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">":rule file parse error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>var_node</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"variables"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_node</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"cannot find \"variables\" json node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>var_node</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name>type</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>sql_variable_t</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>sql_variable_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>value_type</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>silent_array</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="string">"silent_values"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>silent_array</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>silent</name> <init>= <expr><name><name>silent_array</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init>;</init> <condition><expr><name>silent</name></expr>;</condition> <incr><expr><name>silent</name> <operator>=</operator> <name><name>silent</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>silent</name><operator>-&gt;</operator><name>valuestring</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>silent</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>silence_all</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>silent_values</name></name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>silent_values</name></name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>silent</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>allowed_array</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="string">"allowed_values"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>allowed_array</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>allowed</name> <init>= <expr><name><name>allowed_array</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init>;</init> <condition><expr><name>allowed</name></expr>;</condition> <incr><expr><name>allowed</name> <operator>=</operator> <name><name>allowed</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>allowed</name><operator>-&gt;</operator><name>valuestring</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>allowed</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>allow_all</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>allowed_values</name></name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>allowed_values</name></name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>allowed</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: var name:%s loaded"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* if duplicated, replace and free the old (key &amp; value) */</comment>
        <expr_stmt><expr><call><name>g_hash_table_replace</name><argument_list>(<argument><expr><name>cetus_variables</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_filter_vars_is_silent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:name is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sql_variable_t</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>cetus_variables</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>var</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: name:%s and var is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>silence_all</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: val is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>VAL_INT</name></expr>:</case>
    <case>case <expr><name>VAL_STRING</name></expr>:</case>
        <return>return <expr><call><name>sql_variable_is_silent_value</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>VAL_STRING_CSV</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name> <init>= <expr><call><name>g_strsplit_set</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sql_variable_is_silent_value</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">":not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_filter_vars_is_allowed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:name is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sql_variable_t</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>cetus_variables</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>var</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: name:%s and var is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>allow_all</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: val is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>VAL_INT</name></expr>:</case>
    <case>case <expr><name>VAL_STRING</name></expr>:</case>
        <return>return <expr><call><name>sql_variable_is_allowed_value</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>VAL_STRING_CSV</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name> <init>= <expr><call><name>g_strsplit_set</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sql_variable_is_allowed_value</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">"not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_filter_vars_load_default_rules</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_var_rule</name> <init>= <expr><literal type="string">"{"</literal>
        <literal type="string">"  \"variables\": ["</literal>
        <literal type="string">"    {"</literal>
        <literal type="string">"      \"name\": \"sql_mode\","</literal>
        <literal type="string">"      \"type\": \"string-csv\","</literal>
        <literal type="string">"      \"allowed_values\":  ["</literal>
        <literal type="string">"          \"STRICT_TRANS_TABLES\","</literal>
        <literal type="string">"          \"NO_AUTO_CREATE_USER\","</literal>
        <literal type="string">"          \"NO_ENGINE_SUBSTITUTION\""</literal>
        <literal type="string">"       ]"</literal>
        <literal type="string">"    },"</literal>
        <literal type="string">"    {"</literal>
        <literal type="string">"      \"name\": \"autocommit\","</literal>
        <literal type="string">"      \"type\": \"string\","</literal>
        <literal type="string">"      \"allowed_values\": [\"*\"]"</literal>
        <literal type="string">"    },"</literal>
        <literal type="string">"    {"</literal>
        <literal type="string">"      \"name\": \"character_set_client\","</literal>
        <literal type="string">"      \"type\": \"string\","</literal>
        <literal type="string">"      \"allowed_values\": [\"latin1\",\"ascii\",\"gb2312\",\"gbk\",\"utf8\",\"utf8mb4\",\"binary\",\"big5\"]"</literal>
        <literal type="string">"    },"</literal>
        <literal type="string">"    {"</literal>
        <literal type="string">"      \"name\": \"character_set_connection\","</literal>
        <literal type="string">"      \"type\": \"string\","</literal>
        <literal type="string">"      \"allowed_values\": [\"latin1\",\"ascii\",\"gb2312\",\"gbk\",\"utf8\",\"utf8mb4\",\"binary\",\"big5\"]"</literal>
        <literal type="string">"    },"</literal>
        <literal type="string">"    {"</literal>
        <literal type="string">"      \"name\": \"character_set_results\","</literal>
        <literal type="string">"      \"type\": \"string\","</literal>
        <literal type="string">"      \"allowed_values\": [\"latin1\",\"ascii\",\"gb2312\",\"gbk\",\"utf8\",\"utf8mb4\",\"binary\",\"big5\",\"NULL\"]"</literal>
        <literal type="string">"    }"</literal> <literal type="string">"  ]"</literal> <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>rc</name> <init>= <expr><call><name>sql_filter_vars_load_str_rules</name><argument_list>(<argument><expr><name>default_var_rule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_filter_vars_shard_load_default_rules</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_var_rule</name> <init>= <expr><literal type="string">"{"</literal>
        <literal type="string">"  \"variables\": ["</literal>
        <literal type="string">"    {"</literal>
        <literal type="string">"      \"name\": \"autocommit\","</literal>
        <literal type="string">"      \"type\": \"string\","</literal> <literal type="string">"      \"allowed_values\": [\"*\"]"</literal> <literal type="string">"    }"</literal> <literal type="string">"  ]"</literal> <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>rc</name> <init>= <expr><call><name>sql_filter_vars_load_str_rules</name><argument_list>(<argument><expr><name>default_var_rule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>sql_filter_vars_reload_str_rules</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>json_str</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>cetus_variables</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_hash_table_remove_all</name><argument_list>(<argument><expr><name>cetus_variables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sql_filter_vars_load_default_rules</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>sql_filter_vars_load_str_rules</name><argument_list>(<argument><expr><name>json_str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
