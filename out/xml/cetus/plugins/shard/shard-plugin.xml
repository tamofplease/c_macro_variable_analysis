<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/plugins/shard/shard-plugin.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysqld_error.h&gt;</cpp:file></cpp:include> <comment type="block" format="doxygen">/** for ER_UNKNOWN_ERROR */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-users.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"character-set.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-monitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-backend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-conn-pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-conn-pool-wrap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plugin-common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server-session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shard-plugin-con.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sharding-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sharding-parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sharding-query-plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-filter-variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options-utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-sql-log.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PLUGIN_VERSION</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHASSIS_BUILD_TAG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLUGIN_VERSION</name></cpp:macro> <cpp:value>CHASSIS_BUILD_TAG</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLUGIN_VERSION</name></cpp:macro> <cpp:value>PACKAGE_VERSION</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XA_LOG_BUF_LEN</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<struct>struct <name>chassis_plugin_config</name> <block>{
    <comment type="block" format="doxygen">/**&lt; listening address of the proxy */</comment>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>address</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**&lt; read-write backends */</comment>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>backend_addresses</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**&lt; read-only  backends */</comment>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>read_only_backend_addresses</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>listen_con</name></decl>;</decl_stmt>

    <comment type="block">/* exposed in the config as double */</comment>
    <decl_stmt><decl><type><name>gdouble</name></type> <name>connect_timeout_dbl</name></decl>;</decl_stmt>
    <comment type="block">/* exposed in the config as double */</comment>
    <decl_stmt><decl><type><name>gdouble</name></type> <name>read_timeout_dbl</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gdouble</name></type> <name>dist_tran_decided_read_timeout_dbl</name></decl>;</decl_stmt>
    <comment type="block">/* exposed in the config as double */</comment>
    <decl_stmt><decl><type><name>gdouble</name></type> <name>write_timeout_dbl</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>allow_ip</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>deny_ip</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>allow_nested_subquery</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/**
 * handle event-timeouts on the different states
 *
 * @note con-&gt;state points to the current state
 *
 */</comment>
<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_timeout</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>idle_timeout</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>client_idle_timeout</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>idle_timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>incomplete_tran_idle_timeout</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>maintain_close_mode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>idle_timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>maintained_client_idle_timeout</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>current_time</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>update_time</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:call proxy_timeout, state:%d, idle timeout:%d, diff:%d"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>idle_timeout</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ST_READ_M_QUERY_RESULT</name></expr>:</case>
    <case>case <expr><name>ST_READ_QUERY_RESULT</name></expr>:</case>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:read query result timeout"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&gt;</operator> <name>NEXT_ST_XA_CANDIDATE_OVER</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:EV_TIMEOUT, phase two, not recv response:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:xa tran failed here:%p, xa state:%d, xid:%s"</literal></expr></argument>,
                           <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>idle_timeout</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, is_server_conn_reserved is false"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, server conns returned to pool"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>proxy_put_shard_conn_to_pool</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s, client timeout, closing, diff:%d, con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_read_auth</argument>)</argument_list></macro>
<block>{<block_content>
    <return>return <expr><call><name>do_read_auth</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_other_set_command</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>mysqld_query_attr_t</name> <modifier>*</modifier></type><name>query_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: vist process_other_set_command"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>conn_attr_check_omit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"sql_mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>sql_mode</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>sql_mode_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_set_names</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>mysqld_query_attr_t</name> <modifier>*</modifier></type><name>query_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>conn_attr_check_omit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>charset_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>charset_code</name></name> <operator>=</operator> <call><name>charset_get_number</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>proxy_parse_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>proxy_get_server_list</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_backends_attr_changed</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>server_attr_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>con</name><operator>-&gt;</operator><name>last_backends_type</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s backend type:%d, record type:%d"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_backends_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>server_attr_changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name> <operator>&amp;&amp;</operator> <name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>server_attr_changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s backend state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>server_attr_changed</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>network_mysqld_con_purify_sharding_plan</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sharding_plan_t</name></name> <modifier>*</modifier></type><name>sharding_plan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>sharding_plan</name><operator>-&gt;</operator><name>modified_sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sharding_plan</name><operator>-&gt;</operator><name>is_modified</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_read_query</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>chunks</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>p</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: packet data is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"(proxy) unable to process command"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_reset_command_response_state</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_reset_query_state</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>is_modified</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: sharding_plan's sql is modified for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_purify_sharding_plan</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call network_mysqld_con_command_states_init"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_con_command_states_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: tracking mysql proto states failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_process_stopped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>is_process_stopped</name> <operator>=</operator> <call><name>check_backends_attr_changed</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>is_process_stopped</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_process_stopped</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>proxy_put_shard_conn_to_pool</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s server attr changed, but process continues"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"(proxy) unable to continue processing command"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_clear_xa_env_when_not_expected</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s server attr changed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_process_stopped</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>proxy_parse_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log_sql_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PROXY_NO_DECISION</name></expr>:</case>
        <break>break;</break>                  <comment type="block">/* go on to get groups */</comment>
    <case>case <expr><name>PROXY_SEND_RESULT</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    <case>case <expr><name>PROXY_SEND_NONE</name></expr>:</case>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_cache_enabled</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sql_context_is_cacheable</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>master_preferred</name></name> <operator>&amp;&amp;</operator>
                <operator>!</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_FORCE_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_FORCE_SLAVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>try_to_get_resp_from_query_cache</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_conn_shortaged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>slave_conn_shortaged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>use_slave_forced</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>proxy_get_server_list</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>RET_SUCCESS</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>use_all_prev_servers</name></name> <operator>||</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_GET_SERVER_CONNECTION_LIST</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>buffer_and_send_fake_resp</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: send faked resp to client"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"no group yet"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_NO_DB_ERROR</name></expr></argument>, <argument><expr><literal type="string">"3D000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: no group yet for this query"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><name>PROXY_SEND_RESULT</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>PROXY_NO_DECISION</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_GET_SERVER_CONNECTION_LIST</name></expr>;</expr_stmt>
        <break>break;</break>

    <default>default:</default>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: plugin(GET_SERVER_LIST) failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mysqld_con_send_sequence</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>uniq_id</name> <init>= <expr><call><name>incremental_guid_get_next</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>srv</name><operator>-&gt;</operator><name>guid_state</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%llu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>uniq_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"SEQUENCE"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_LONGLONG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type>
<name>sharding_get_sql</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>is_sql_rewrite_completely</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>sharding_plan_get_sql</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: first group:%s, now group:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>first_group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>first_group</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type><name>new_sql</name> <init>= <expr><call><name>sharding_plan_get_sql</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>new_sql</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>new_sql</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>new_sql</name></expr>;</return>

        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>new_sql</name> <init>= <expr><call><name>sharding_modify_sql</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>hav_condi</name></name><operator>)</operator></expr></argument>,
                    <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_groupby_need_reconstruct</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>new_sql</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sharding_plan_add_group_sql</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>new_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: new sql:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>new_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>new_sql</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>new_sql</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>explain_shard_sql</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_db</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set client default db:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sharding_parse_groups</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name></name><operator>)</operator></expr></argument>,
            <argument><expr><name><name>con</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name></name> <operator>=</operator> <call><name>sharding_modify_sql</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>hav_condi</name></name><operator>)</operator></expr></argument>,
            <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_groupby_need_reconstruct</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sharding_plan_set_modified_sql</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sharding_plan_sort_groups</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>abnormal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <name>ERROR_UNPARSABLE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>message</name></name></expr> ?</condition><then> </then><else>: <expr><literal type="string">"sql parse error"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_PARSE_SHARDING</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">": unparsable sql:%s"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>abnormal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>abnormal</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>proxy_generate_shard_explain_packet</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><call><name>sharding_plan_new</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>is_partition_mode</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>explain_shard_sql</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field1</name> <init>= <expr><call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>field1</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"groups"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field1</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_VAR_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field2</name> <init>= <expr><call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>field2</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"sql"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field2</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_VAR_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>sharding_plan_t</name></name> <modifier>*</modifier></type><name>sharding_plan</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>=</operator> <name>plan</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if  <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>first_group</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><call><name>sharding_get_sql</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>=</operator> <name>sharding_plan</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>analysis_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>mysqld_query_attr_t</name> <modifier>*</modifier></type><name>query_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>STMT_SELECT</name></expr>:</case><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_tcp_stream_enabled</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: con dist tran is false"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>could_be_tcp_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_fast_stream_enabled</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>could_be_fast_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><operator>(</operator><name>sql_select_t</name> <operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>could_be_tcp_streamed</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>sql_expr_list_find_aggregate</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>could_be_tcp_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: con tcp stream false"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>gboolean</name></type> <name>is_insert_id</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><name><name>select</name><operator>-&gt;</operator><name>columns</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&amp;&amp;</operator> <name><name>cols</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>sql_expr_is_function</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"LAST_INSERT_ID"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_insert_id</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"LAST_INSERT_ID"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_insert_id</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>is_insert_id</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: return last insert id"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* TODO last insert id processing */</comment>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>STMT_SET_NAMES</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>charset_name</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>process_set_names</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>charset_name</name></expr></argument>, <argument><expr><name>query_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set names"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>STMT_SET_TRANSACTION</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><call><name>sql_filter_vars_is_silent</name><argument_list>(<argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
                                               <argument><expr><call><name>L</name><argument_list>(<argument><expr><literal type="string">"(cetus) SET TRANSACTION not supported"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument><expr><name>ER_CETUS_NOT_SUPPORTED</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
    <case>case <expr><name>STMT_SET</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>set_list</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>set_list</name> <operator>&amp;&amp;</operator> <name><name>set_list</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>set_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_EQ</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>sql_expr_id</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>sql_expr_id</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>sql_filter_vars_is_silent</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><call><name>g_queue_pop_tail</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"silent variable: %s"</literal></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* set autocomit = x */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>sql_context_is_autocommit_on</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit_trans_buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: autocommit on"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sql_context_is_autocommit_off</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit_trans_buffered</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: autocommit off, now in transaction"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>&amp;&amp;</operator> <name>rhs</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>process_other_set_command</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>query_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>STMT_COMMIT</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>STMT_ROLLBACK</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_rollback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>STMT_USE</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set default db:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>STMT_START</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: start transaction command here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_start_trans_buffered</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_start_tran_command</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>PROXY_NO_DECISION</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>shard_handle_local_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* currently 3 kinds of local query */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>explain</name></name> <operator>==</operator> <name>TK_SHARD_EXPLAIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>proxy_generate_shard_explain_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>STMT_SELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sql_expr_is_function</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"CURRENT_DATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_current_date</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="string">"CURRENT_DATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sql_expr_is_function</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"CETUS_SEQUENCE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mysqld_con_send_sequence</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sql_expr_is_function</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"CETUS_VERSION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_cetus_version</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_parse_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call proxy_parse_query:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name></expr>)</condition> <block>{<block_content>   <comment type="block">/* previous sql */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit_trans_buffered</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&gt;=</operator> <name>NEXT_ST_XA_START</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>!=</operator> <name>NEXT_ST_XA_OVER</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: xa is not over yet:%p, xa state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_xa_start_generated</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: server conn should be closed:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_server_conn_reserved false:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: is_commit_or_rollback is false:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>conn_attr_check_omit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_rollback</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_xa_query_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>xa_query_status_error_and_abort</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>could_be_tcp_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>could_be_fast_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>candidate_fast_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>process_through_special_tunnel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>guint8</name></type> <name>command</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_skip_network_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"(proxy) unable to retrieve command"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:command:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>command</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>COM_QUERY</name></expr>:</case><block>{<block_content>
            <decl_stmt><decl><type><name>gsize</name></type> <name>sql_len</name> <init>= <expr><name><name>packet</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>packet</name><operator>.</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>network_mysqld_proto_get_gstr_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>sql_len</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 2 more NULL for lexer EOB */</comment>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sql_context_parse_len</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>rc</name></name> <operator>==</operator> <name>PARSE_SYNTAX_ERR</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_sql_special_processed</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>check_property_has_groups</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>process_through_special_tunnel</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <return>return <expr><name>PROXY_NO_DECISION</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>message</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s SQL syntax error: %s. while parsing: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_SYNTAX_ERROR</name></expr></argument>, <argument><expr><literal type="string">"42000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>rc</name></name> <operator>==</operator> <name>PARSE_NOT_SUPPORT</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>message</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s SQL unsupported: %s. while parsing: %s, clt:%s"</literal></expr></argument>,
                          <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_NOT_SUPPORTED</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* forbid force write on slave */</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_FORCE_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_WRITE</name><operator>)</operator> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s Comment usage error. SQL: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Force transaction on read-only slave"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Force write on read-only slave"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>clause_flags</name></name> <operator>&amp;</operator> <name>CF_LOCAL_QUERY</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>shard_handle_local_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>query_attr</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mysqld_query_attr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>analysis_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>query_attr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>COM_INIT_DB</name></expr>:</case>
            <break>break;</break>
        <case>case <expr><name>COM_QUIT</name></expr>:</case>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: quit command:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLOSE_CLIENT</name></expr>;</expr_stmt>
            <return>return <expr><name>PROXY_SEND_NONE</name></expr>;</return>
        <case>case <expr><name>COM_STMT_PREPARE</name></expr>:</case><block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
                                               <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"sharding proxy does not support prepare stmt"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument><expr><name>ER_CETUS_NOT_SUPPORTED</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>COM_PING</name></expr>:</case>
            <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
        <default>default:</default><block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <operator>(</operator><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <operator>(</operator><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
                                               <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"sharding proxy does not support this command now"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument><expr><name>ER_CETUS_NOT_SUPPORTED</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: unknown command:%d, sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name><name>sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
        </block_content>}</block>
        </block_content>}</block></switch>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: chunk is null"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>PROXY_NO_DECISION</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wrap_check_sql</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sql_context_t</name></name> <modifier>*</modifier></type><name>sql_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name> <operator>&amp;&amp;</operator> <name><name>sql_context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>!=</operator> <name>STMT_SELECT</name> <operator>&amp;&amp;</operator>
            <name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>table_type</name></name> <operator>==</operator> <name>GLOBAL_TABLE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:don't change sql for: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>is_sql_rewrite_completely</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:don't change sql for: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name></name> <operator>=</operator> <call><name>sharding_modify_sql</name><argument_list>(<argument><expr><name>sql_context</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>hav_condi</name></name><operator>)</operator></expr></argument>,
            <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_groupby_need_reconstruct</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"orig_sql: %s"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"modified:  %s"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sql_modified</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sharding_plan_set_modified_sql</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>modified_sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>con</name><operator>-&gt;</operator><name>sql_modified</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>record_last_backends_type</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s record_last_backends_type"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_backends_type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>generate_sql</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt> 
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <call><name>sharding_get_sql</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_ro_servers</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>has_rw_server</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>has_ro_server</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>new_servers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call remove_ro_servers:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_read_only</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>has_rw_server</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>has_ro_server</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_ro_server</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: has no ro server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>has_rw_server</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: has rw server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>new_servers</name> <operator>=</operator> <call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check servers:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_read_only</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>CHECK_PENDING_EVENT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>server_conn_refresh_time</name></name> <operator>&lt;=</operator> <name><name>server</name><operator>-&gt;</operator><name>create_time</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_pool_add_idle_conn</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: old connection for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>complement_conn_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: conn clients sub, total len:%d, back:%p, value:%d con:%p, s:%p"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>new_servers</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>gpointer</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>has_rw_server</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>=</operator> <name>new_servers</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>network_mysqld_con_set_sharding_plan</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>=</operator> <name>plan</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_init_db_when_get_server_list</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>groups</name> <init>= <expr><call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>name_len</name> <init>= <expr><call><name>network_mysqld_proto_get_packet_len</name><argument_list>(<argument><expr><name><name>packet</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>db_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>&gt;</operator> <name>PACKET_LEN_MAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: name len is too long:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>name_len</name> <operator>=</operator> <name>name_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_get_str_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>shard_conf_get_fixed_group</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>      <comment type="block">/* has database */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>rv</name> <operator>=</operator> <name>USE_PREVIOUS_TRAN_CONNS</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name>db_name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sharding_plan_add_groups</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_set_sharding_plan</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_NO_DECISION</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>db_name</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"not a configured DB"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>db_name</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>db_name</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>before_get_server_list</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_start_trans_buffered</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>is_auto_commit_trans_buffered</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: is_in_transaction true for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_xa_start_generated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sql_context_is_single_node_trx</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_tran_not_distributed_by_comment</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_tran_not_distributed_by_comment true:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check is_server_conn_reserved:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: is_server_conn_reserved false:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call proxy_put_shard_conn_to_pool:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>proxy_put_shard_conn_to_pool</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: still hold conn when starting a new transaction:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call proxy_put_shard_conn_to_pool:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>proxy_put_shard_conn_to_pool</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_xa_start_generated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call sharding_plan_free here:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>sharding_plan_free_map</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_rv_use_none</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* SET AUTOCOMMIT = 0 || START TRANSACTION */</comment>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>delay_send_auto_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: delay send autocommit 0"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_set_sharding_plan</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_rv_use_same</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* SET AUTOCOMMIT = 1 */</comment>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>&lt;</operator> <name>NEXT_ST_XA_END</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: no commit when set autocommit = 1:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>delay_send_auto_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_set_sharding_plan</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: no need to send autocommit true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_rv_use_previous_tran_conns</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* COMMIT/ROLLBACK */</comment>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: use previous conn for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>buffer_and_send_fake_resp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>delay_send_auto_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit_trans_buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_start_trans_buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: buffer_and_send_fake_resp set true:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set ERROR_DUP_COMMIT_OR_ROLLBACK here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>rv</name> <operator>=</operator> <name>USE_DIS_TRAN</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>use_all_prev_servers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_tran_not_distributed_by_comment</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set ERROR_DUP_COMMIT_OR_ROLLBACK here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>rv</name> <operator>=</operator> <name>USE_DIS_TRAN</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>use_all_prev_servers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_set_sharding_plan</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_rv_default</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: process_rv_default is called"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_tran_not_distributed_by_comment</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: default prcessing here for conn:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>valid_single_tran</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>valid_single_tran</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: group num:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>prev_group</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>cur_group</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>prev_group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>cur_group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>valid_single_tran</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>valid_single_tran</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: orig group num:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid_single_tran</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: tran conflicted here for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
                                               <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"conflict with stand-alone tran comment"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument><expr><name>ER_CETUS_SINGLE_NODE_FAIL</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_set_sharding_plan</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_set_sharding_plan</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>is_start_tran_command</name></name></expr>)</condition> <block>{<block_content>   <comment type="block">/* current sql START ? */</comment>
                <expr_stmt><expr><operator>*</operator><name>rv</name> <operator>=</operator> <name>USE_DIS_TRAN</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>rv</name> <operator>==</operator> <name>USE_DIS_TRAN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: user distributed trans found for sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_xa_start_generated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>delay_send_auto_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: not in transaction:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: xa transaction"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>rv</name> <operator>!=</operator> <name>ERROR_UNPARSABLE</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
                                                       <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Cannot find backend groups"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_CETUS_NO_GROUP</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* already ref by con, remove! */</comment>
                    <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check if it is a xa transaction"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>delay_send_auto_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>*</operator><name>rv</name> <operator>=</operator> <name>USE_DIS_TRAN</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_first_decision</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><operator>*</operator><name>rv</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>USE_NONE</name></expr>:</case>
        <expr_stmt><expr><call><name>process_rv_use_none</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>disp_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>

    <case>case <expr><name>USE_PREVIOUS_WARNING_CONN</name></expr>:</case>
        <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: origin has no sharding plan yet"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>use_all_prev_servers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: show warnings has no servers yet"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>USE_SAME</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_rv_use_same</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_rv_use_previous_tran_conns</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><name>USE_PREVIOUS_TRAN_CONNS</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: origin has no sharding plan yet"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_rv_use_previous_tran_conns</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>

    <default>default:</default>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_rv_default</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>

    </block_content>}</block></switch>                           <comment type="block">/* switch */</comment>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_decisions</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>query_stats_t</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>               <comment type="block">/* TODO: move these inside to give specific reasons */</comment>
    <case>case <expr><name>ERROR_UNPARSABLE</name></expr>:</case>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>message</name></name></expr> ?</condition><then> </then><else>: <expr><literal type="string">"sql parse error"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>err_code</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>rc</name></name> <operator>==</operator> <name>PARSE_NOT_SUPPORT</name><operator>)</operator></expr>
            ?</condition><then> <expr><name>ER_CETUS_NOT_SUPPORTED</name></expr> </then><else>: <expr><name>ER_CETUS_PARSE_SHARDING</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err_code</name></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">": unparsable sql:%s"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block>

    <case>case <expr><name>USE_DIS_TRAN</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_START</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_xa_start_generated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>xa_count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>partition_dist_tran</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>could_be_tcp_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>could_be_fast_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>delay_send_auto_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: xa transaction query:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>wrap_check_sql</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>

    <default>default:</default>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>wrap_check_sql</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_get_server_list</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call proxy_get_server_list:%p for sql:%s, clt:%s, xa state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
            <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>before_get_server_list</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_db</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set default db:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>write_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>use_all_prev_servers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>query_stats_t</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><call><name>sharding_plan_new</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>is_partition_mode</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>disp_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>process_through_special_tunnel</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sharding_parse_groups_by_property</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_WRITE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>write_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>COM_INIT_DB</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_init_db_when_get_server_list</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>disp_flag</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sharding_parse_groups</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>,
                        <argument><expr><name>stats</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>stmt_type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>STMT_DROP_DATABASE</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_drop_database_t</name> <modifier>*</modifier></type><name>drop_database</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>drop_database</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>truncate_default_db_when_drop_database</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>drop_database</name><operator>-&gt;</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>buffer_and_send_fake_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_closed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_too_long</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>last_record_updated</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>master_preferred</name></name> <operator>||</operator>
        <name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_WRITE</name> <operator>||</operator>
        <name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_FORCE_MASTER</name> <operator>||</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>||</operator> <name>rv</name> <operator>==</operator> <name>USE_SAME</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>remove_ro_servers</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>client_query</name><operator>.</operator><name>rw</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>proxyed_query</name><operator>.</operator><name>rw</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_FORCE_SLAVE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_read_ro_server_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_read_ro_server_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>client_query</name><operator>.</operator><name>ro</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>proxyed_query</name><operator>.</operator><name>ro</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>USE_PREVIOUS_WARNING_CONN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: is_server_conn_reserved is set false"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>make_first_decision</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>disp_flag</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name></expr>)</condition> <block>{<block_content>   <comment type="block">/* current sql */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_tran_not_distributed_by_comment</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_tran_not_distributed_by_comment</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>make_decisions</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>disp_flag</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_record_updated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>RET_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>proxy_get_pooled_connection</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>,
                            <parameter><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
                            <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>network_socket</name> <modifier>*</modifier><modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_robbed</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>server_unavailable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:group:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_group_t</name> <modifier>*</modifier></type><name>backend_group</name> <init>= <expr><call><name>network_backends_get_group</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>backend_group</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:backend_group is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>server_unavailable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BACKEND_TYPE_RO</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>backend</name> <operator>=</operator> <call><name>network_group_pick_slave_backend</name><argument_list>(<argument><expr><name>backend_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>backend</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* fallback to readwrite backend */</comment>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name>BACKEND_TYPE_RW</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>backend</name> <operator>=</operator> <name><name>backend_group</name><operator>-&gt;</operator><name>master</name></name></expr>;</expr_stmt>    <comment type="block">/* may be NULL if master down */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>backend</name> <operator>||</operator> <operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UNKNOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>backend</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: backend-&gt;state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: backend is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><operator>*</operator><name>server_unavailable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>backend</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: backend null, type:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>server_unavailable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>sock</name> <operator>=</operator> <call><name>network_connection_pool_get</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><name>is_robbed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>slave_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: conn shortaged, type:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>sock</name><operator>)</operator><operator>-&gt;</operator><name>is_read_only</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>BACKEND_TYPE_RO</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connected_clients add, backend:%p, now:%d, con:%p, server:%p"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><operator>*</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>proxy_add_server_connection</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>server_unavailable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>ss</name> <operator>=</operator> <operator>(</operator><name>server_session_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ss</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_NONE</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>==</operator> <name>NEXT_ST_XA_START</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_START</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>xa_start_already_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>==</operator> <name>NEXT_ST_XA_OVER</name> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: reset xa state:%d for ss ndx:%d, con:%p"</literal></expr></argument>,
                                      <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_START</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>xa_start_already_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_participated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <return>return <expr><name>TRUE</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>=</operator> <call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>BACKEND_TYPE_RW</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_read_ro_server_allowed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name>BACKEND_TYPE_RO</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_robbed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>proxy_get_pooled_connection</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_robbed</name></expr></argument>, <argument><expr><name>server_unavailable</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>server_session_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_new_server_added</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>con</name></name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>backend</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>server</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_consistent_checked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_consistent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>has_xa_write</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_NONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>fresh</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>is_xa_over</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>is_in_xa</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_START</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_participated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>xa_start_already_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>is_in_xa</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_robbed</name></name> <operator>=</operator> <name>is_robbed</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>ON</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>ts_read_query</name></name> <operator>=</operator> <call><name>get_timer_microseconds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* TODO: CHANGE SQL */</comment>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>ss_comp</name><parameter_list>(<parameter><decl><type><name>gconstpointer</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>a2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>server_session_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>server_session_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a2</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ss1</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ss2</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>proxy_add_server_connection_array</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>server_unavailable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sharding_plan_t</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gint8</name></type> <name><name>server_map</name><index>[<expr><name>MAX_SERVER_NUM</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>hit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_participated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>GString</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>sharding_plan_has_group</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_read_ro_server_allowed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_read_only</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: use read server"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_read_ro_server_allowed</name></name> <operator>&amp;&amp;</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_read_only</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: should release ro server to pool"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>hit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>first_group</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>hit</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>server_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: hit server"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>hit</name> <operator>==</operator> <name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>hit</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:in single tran, but visit multi servers for con:%p, sql:%s"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>xa_tran_conflict</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>new_servers</name> <init>= <expr><call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>server_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>network_connection_pool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>CHECK_PENDING_EVENT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>server_conn_refresh_time</name></name> <operator>&lt;=</operator> <name><name>server</name><operator>-&gt;</operator><name>create_time</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>network_pool_add_idle_conn</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: old connection for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>complement_conn_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: conn clients sub, total len:%d, back:%p, value:%d con:%p, s:%p"</literal></expr></argument>,
                            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>new_servers</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name>gpointer</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>=</operator> <name>new_servers</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>groups</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>last_group</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>super_group</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>super_group</name> <operator>=</operator> <call><name>partition_get_super_group</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>last_group</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>groups</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>!=</operator> <name>STMT_SELECT</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>partition_dist_tran</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set partition_dist_tran true for con:%p, sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_read_only</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: crazy, dist tran use readonly server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: group:%s, len:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name></name></expr></argument>, <argument><expr><name>super_group</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <continue>continue;</continue>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>last_group</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>last_group</name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>groups</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name></name></expr></argument>, <argument><expr><name>last_group</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>last_group</name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name></name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>groups</name><operator>++</operator></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: groups:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>groups</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>new_group</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                                <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>new_group</name></expr>;</expr_stmt>
                            </block_content>}</block></for>
                            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: crazy, server num is not equal to 1 for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><call><name>g_string_equal</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>super_group</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name>g_ptr_array_remove_fast</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>last_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>groups</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>group</name></expr>)</condition> <block>{<block_content>
                                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                                        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
                                    </block_content>}</block></for>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                                    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <if_stmt><if>if <condition>(<expr><call><name>g_string_equal</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>super_group</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                        <expr_stmt><expr><call><name>g_ptr_array_remove_fast</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>last_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if></if_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: group:%s for con:%p, plan group len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>first_group</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>proxy_add_server_connection</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>server_unavailable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_new_server_added</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_ptr_array_sort</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>ss_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>check_and_set_attr_bitmap</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>result</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>consistant</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>conn_attr_check_omit</name></name></expr>)</condition> <block>{<block_content>    <comment type="block">/* current sql is a SET statement */</comment>
        <decl_stmt><decl><type><name>mysqld_query_attr_t</name> <modifier>*</modifier></type><name>query_attr</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>query_attr</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>query_attr</name><operator>-&gt;</operator><name>sql_mode_set</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:conn_attr_check_omit true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>query_attr</name><operator>-&gt;</operator><name>charset_set</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>unmatched_attribute</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:check conn attr, default db:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>attr_consistent_checked</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:already checked for server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_consistent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:server:%p, query state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>consistant</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_diff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_robbed</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_diff</name></name> <operator>=</operator> <name>ATTR_DIF_CHANGE_USER</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>unmatched_attribute</name></name> <operator>|=</operator> <name>ATTR_DIF_CHANGE_USER</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>consistant</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>!=</operator> <name>COM_INIT_DB</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* check default db */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:default db for client:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_diff</name></name> <operator>=</operator> <name>ATTR_DIF_DEFAULT_DB</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>unmatched_attribute</name></name> <operator>|=</operator> <name>ATTR_DIF_DEFAULT_DB</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>consistant</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: default db different"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>sql_mode</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>sql_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: not support different sql modes"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>charset_check</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: client charset:%s, default charset:%s, client address:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                        <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_diff</name></name> <operator>|=</operator> <name>ATTR_DIF_CHARSET</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>unmatched_attribute</name></name> <operator>|=</operator> <name>ATTR_DIF_CHARSET</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>consistant</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: charset different, clt:%s, srv:%s, server:%p"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name> <operator>!=</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_diff</name></name> <operator>|=</operator> <name>ATTR_DIF_SET_OPTION</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>unmatched_attribute</name></name> <operator>|=</operator> <name>ATTR_DIF_SET_OPTION</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>consistant</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set option different"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_start_trans_buffered</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>is_auto_commit_trans_buffered</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_tran_not_distributed_by_comment</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_diff</name></name> <operator>|=</operator> <name>ATTR_DIF_SET_AUTOCOMMIT</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>unmatched_attribute</name></name> <operator>|=</operator> <name>ATTR_DIF_SET_AUTOCOMMIT</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>consistant</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:need sending autocommit or start transaction"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>consistant</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_consistent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set checked for server:%p, query state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_consistent_checked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>check_user_consistant</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>enum</name> <name>enum_server_command</name></name></type> <name>command</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>command</name> <operator>==</operator> <name>COM_CHANGE_USER</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>result</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>attr_consistent</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ss</name><operator>-&gt;</operator><name>attr_diff</name></name> <operator>&amp;</operator> <name>ATTR_DIF_CHANGE_USER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>hashed_password</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cetus_users_get_hashed_server_pwd</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>hashed_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>hashed_password</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: user:%s  hashed password is null"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>hashed_password</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: COM_CHANGE_USER:%d for server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>COM_CHANGE_USER</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>mysqld_change_user_packet_t</name></type> <name>chuser</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>chuser</name><operator>.</operator><name>username</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>chuser</name><operator>.</operator><name>auth_plugin_data</name></name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>chuser</name><operator>.</operator><name>hashed_pwd</name></name> <operator>=</operator> <name>hashed_password</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_db</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>chuser</name><operator>.</operator><name>database</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>chuser</name><operator>.</operator><name>charset</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_code</name></name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>payload</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>mysqld_proto_append_change_user_packet</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chuser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_robbed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>attr_adjusted_now</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: change user for server"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>=</operator> <name>ATTR_DIF_CHANGE_USER</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>hashed_password</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>build_xa_end_command</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>XA_CMD_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xid_str</name> <init>= <expr><call><name>generate_or_retrieve_xid_str</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"XA END %s"</literal></expr></argument>, <argument><expr><name>xid_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>is_rollback</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_ROLLBACK</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_ROLLBACK</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_PREPARE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_PREPARE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>unavailable</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:XA END %s, server:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>xid_str</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>srv_packet</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>srv_packet</name> <operator>=</operator> <call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv_packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>srv_packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>srv_packet</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_len</name><argument_list>(<argument><expr><name>srv_packet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_set_packet_id</name><argument_list>(<argument><expr><name>srv_packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>srv_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_get_server_conn_list</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><operator>(</operator><name>GString</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>do_query</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_xa_query</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_new_server_added</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>use_all_prev_servers</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>server_unavailable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>proxy_add_server_connection_array</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server_unavailable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>record_last_backends_type</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>xa_tran_conflict</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>server_unavailable</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>record_last_backends_type</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>do_query</name> <operator>=</operator> <call><name>check_and_set_attr_bitmap</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>do_query</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>generate_sql</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check_and_set_attr_bitmap is different"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: resp expect num:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>candidate_fast_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_attr_adjust</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>unmatched_attribute</name></name> <operator>&amp;</operator> <name>ATTR_DIF_CHANGE_USER</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>check_user_consistant</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>unmatched_attribute</name></name> <operator>&amp;</operator> <name>ATTR_DIF_DEFAULT_DB</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>shard_set_default_db_consistant</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>=</operator> <name>ATTR_DIF_DEFAULT_DB</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>unmatched_attribute</name></name> <operator>&amp;</operator> <name>ATTR_DIF_CHARSET</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>shard_set_charset_consistant</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>=</operator> <name>ATTR_DIF_CHARSET</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>unmatched_attribute</name></name> <operator>&amp;</operator> <name>ATTR_DIF_SET_OPTION</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>shard_set_multi_stmt_consistant</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>=</operator> <name>ATTR_DIF_SET_OPTION</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>unmatched_attribute</name></name> <operator>&amp;</operator> <name>ATTR_DIF_SET_AUTOCOMMIT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: autocommit adjust"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>shard_set_autocommit</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>=</operator> <name>ATTR_DIF_SET_AUTOCOMMIT</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>do_query</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>do_query</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>!=</operator> <name>ATTR_START</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: con-&gt;attr_adj_state is not ATTR_START:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_attr_adjust</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>attr_adj_state</name></name> <operator>=</operator> <name>ATTR_START</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>could_be_tcp_streamed</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>could_be_fast_streamed</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>candidate_fast_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check_and_set_attr_bitmap is the same:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran_xa_start_generated</name></name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* append xa query to send queue */</comment>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_QUERY</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xid_str</name> <init>= <expr><call><name>generate_or_retrieve_xid_str</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:xa start:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>xid_str</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_xa_start_generated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_start_trans_buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit_trans_buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server num:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>gboolean</name></type> <name>xa_start_phase</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>xa_start_already_sent</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>xa_start_phase</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: start phase is true:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>is_first_xa_query</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>xa_log_buffer</name><index>[<expr><name>XA_LOG_BUF_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_xa_log_buffer</name> <init>= <expr><name>xa_log_buffer</name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: omit it for server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>unavailable</name></name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:packet id:%d when get server"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>last_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <call><name>sharding_get_sql</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>qs_state</name></name> <operator>=</operator> <name>PARSE_COM_QUERY_INIT</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>xa_start_already_sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>==</operator> <name>NEXT_ST_XA_START</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:ss start phase:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:ss not start phase:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>==</operator> <name>NEXT_ST_XA_START</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>generate_or_retrieve_xid_str</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_xa_start_generated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>network_mysqld_send_xa_start</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>network_mysqld_send_xa_start</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_QUERY</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>xa_start_already_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>xa_start_phase</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:ss start phase:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>==</operator> <name>NEXT_ST_XA_OVER</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:omit here for server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_commit_or_rollback</name></name>  <comment type="block">/* current sql */</comment>
                        <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_END</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>build_xa_end_command</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_failed</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: clear recv queue"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>participated</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:omit here for server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <continue>continue;</continue>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>xa_start_phase</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:omit here for server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <continue>continue;</continue>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_QUERY</name></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>is_first_xa_query</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>p_xa_log_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>p_xa_log_buffer</name><operator>++</operator></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name>is_first_xa_query</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>p_xa_log_buffer</name></expr></argument>, <argument><expr><name>XA_LOG_BUF_LEN</name> <operator>-</operator> <operator>(</operator><name>p_xa_log_buffer</name> <operator>-</operator> <name>xa_log_buffer</name><operator>)</operator></expr></argument>,
                                 <argument><expr><literal type="string">"%s@%d"</literal></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>p_xa_log_buffer</name> <operator>=</operator> <name>p_xa_log_buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p_xa_log_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>shard_build_xa_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:shard_build_xa_query failed for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_OVER</name></expr>;</expr_stmt>
                            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>is_xa_query</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>=</operator> <name>NEXT_ST_XA_END</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set dist_tran_state xa end for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>==</operator> <name>COM_QUERY</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>payload</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>network_mysqld_proto_append_query_packet</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>network_queue_append</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>g_string_new_len</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_xa_query</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_expected_num</name></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NET_RW_STATE_NONE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>is_xa_query</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>xa_log_detailed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tc_log_info</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"XA QUERY %s %s %s"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xid_str</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                        <argument><expr><name>xa_log_buffer</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/**
 * decide about the next state after the result-set has been written
 * to the client
 *
 * if we still have data in the queue, back to proxy_send_query()
 * otherwise back to proxy_read_query() to pick up a new client query
 *
 * @note we should only send one result back to the client
 */</comment>
<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_send_query_result</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>STMT_DROP_DATABASE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>com_query</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>com_query</name> <operator>&amp;&amp;</operator> <name><name>com_query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>==</operator> <name>MYSQLD_PACKET_OK</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>server_session_t</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:truncate server database for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call proxy_put_shard_conn_to_pool for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>proxy_put_shard_conn_to_pool</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_client_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLOSE_CLIENT</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_QUERY</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_changed_user_failed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_changed_user_failed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_QUERY</name></expr>;</expr_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/**
 * connect to a backend
 *
 * @return
 *   NETWORK_SOCKET_SUCCESS        - connected successfully
 *   NETWORK_SOCKET_ERROR_RETRY    - connecting backend failed,
 *                                   call again to connect to another backend
 *   NETWORK_SOCKET_ERROR          - no backends available,
 *                                   adds a ERR packet to the client queue
 */</comment>
<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_connect_server</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>do_connect_cetus</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>backend</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_init</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>config</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>shard_plugin_con_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* TODO: this should inside "st"_new, but now "st" shared by many plugins */</comment>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>sql_context_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_init</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>allow_subquery_nesting</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>allow_nested_subquery</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>trx_read_write</name></name> <operator>=</operator> <name>TF_READ_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>internal_trx_isolation_level</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CONNECT_SERVER</name></expr>;</expr_stmt>

    <comment type="block">/* set the connection specific timeouts
     *
     * TODO: expose these settings at runtime
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_timeval_from_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>connect_timeout</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_timeval_from_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout_dbl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_timeval_from_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_timeval_from_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>write_timeout</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_c_disconnect_shard_client</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: con is still in trans for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name> <operator>!=</operator> <name>NEXT_ST_XA_OVER</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call proxy_put_shard_conn_to_pool for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>proxy_put_shard_conn_to_pool</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>PROXY_NO_DECISION</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * cleanup the proxy specific data on the current connection
 *
 * move the server connection into the connection pool in case it is a
 * good client-side close
 *
 * @return NETWORK_SOCKET_SUCCESS
 * @see plugin_call_cleanup
 */</comment>
<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_disconnect_client</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>shard_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call proxy_c_disconnect_shard_client:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>proxy_c_disconnect_shard_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sharding_plan_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sharding_plan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_reset_query_state</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* TODO: this should inside "st"_free, but now "st" shared by many plugins */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_context_destroy</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>shard_plugin_con_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set plugin_con_state null:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<function><type><name>int</name></type>
<name>network_mysqld_shard_connection_init</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_init</name></name> <operator>=</operator> <name>proxy_init</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_connect_server</name></name> <operator>=</operator> <name>proxy_connect_server</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_handshake</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_auth</name></name> <operator>=</operator> <name>proxy_read_auth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_auth_result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_query</name></name> <operator>=</operator> <name>proxy_read_query</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_get_server_conn_list</name></name> <operator>=</operator> <name>proxy_get_server_conn_list</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_query_result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_send_query_result</name></name> <operator>=</operator> <name>proxy_send_query_result</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_cleanup</name></name> <operator>=</operator> <name>proxy_disconnect_client</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_timeout</name></name> <operator>=</operator> <name>proxy_timeout</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>chassis_plugin_config</name> <modifier>*</modifier></type>
<name>network_mysqld_shard_plugin_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>chassis_plugin_config</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* use negative values as defaults to make them ignored */</comment>
    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout_dbl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>;</expr_stmt>

    <return>return <expr><name>config</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_proxy_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <name>G_GNUC_UNUSED</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_shard_plugin_free</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>read_only_backend_addresses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* free the global scope */</comment>
        <expr_stmt><expr><call><name>network_mysqld_proxy_free</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>chassis_config_unregister_service</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sql_filter_vars_destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shard_conf_destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_address</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_read_only_backend_address</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>free_str</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>old_backend</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>old_backend</name> <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name>
                    <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_DELETED</name> <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_MAINTAINING</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>old_backend</name><operator>-&gt;</operator><name>address</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><name><name>old_backend</name><operator>-&gt;</operator><name>server_group</name></name> <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>server_group</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>old_backend</name><operator>-&gt;</operator><name>server_group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_backend_addresses</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>free_str</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>old_backend</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>old_backend</name> <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RW</name>
                    <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_DELETED</name> <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_MAINTAINING</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>old_backend</name><operator>-&gt;</operator><name>address</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><name><name>old_backend</name><operator>-&gt;</operator><name>server_group</name></name> <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>server_group</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>old_backend</name><operator>-&gt;</operator><name>server_group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1:3306"</literal></expr></argument>, <argument><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_connect_timeout</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf (s)"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">//handle default</comment>
        <if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type> <name>show_allow_nested_subquery</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>allow_nested_subquery</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr></then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>assign_proxy_connect_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gdouble</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name>try_get_double_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_read_timeout</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf (s)"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>assign_proxy_read_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gdouble</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name>try_get_double_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_dist_tran_decided_read_timeout</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf (s)"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout_dbl</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>assign_proxy_dist_tran_decided_read_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gdouble</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name>try_get_double_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout_dbl</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_write_timeout</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf (s)"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>assign_proxy_write_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gdouble</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name>try_get_double_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_allow_ip</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>acl</name><operator>-&gt;</operator><name>whitelist</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>free_str</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>cetus_acl_entry_t</name></name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_deny_ip</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>acl</name><operator>-&gt;</operator><name>blacklist</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>free_str</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>cetus_acl_entry_t</name></name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * plugin options
 */</comment>
<function><type><specifier>static</specifier> <name>GList</name> <modifier>*</modifier></type>
<name>network_mysqld_shard_plugin_get_options</name><parameter_list>(<parameter><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis_options_t</name></type> <name>opts</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-address"</literal></expr></argument>,
                        <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>address</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"listening address:port of the proxy-server (default: :4040)"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;host:port&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_proxy_address</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-backend-addresses"</literal></expr></argument>,
                        <argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING_ARRAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"address:port of the remote backend-servers (default: 127.0.0.1:3306)"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;host:port&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_proxy_backend_addresses</name></expr></argument>, <argument><expr><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-read-only-backend-addresses"</literal></expr></argument>,
                        <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING_ARRAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>read_only_backend_addresses</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"address:port of the remote slave-server (default: not set)"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;host:port&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_proxy_read_only_backend_address</name></expr></argument>, <argument><expr><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-connect-timeout"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"connect timeout in seconds (default: 2.0 seconds)"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>assign_proxy_connect_timeout</name></expr></argument>, <argument><expr><name>show_proxy_connect_timeout</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"allow-nested-subquery"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>allow_nested_subquery</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"Use this on your own risk, data integrity is not guaranteed"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_allow_nested_subquery</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-read-timeout"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"read timeout in seconds (default: 600 seconds)"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>assign_proxy_read_timeout</name></expr></argument>, <argument><expr><name>show_proxy_read_timeout</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-xa-commit-or-rollback-read-timeout"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>dist_tran_decided_read_timeout_dbl</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"xa commit or rollback read timeout in seconds (default: 30 seconds)"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>assign_proxy_dist_tran_decided_read_timeout</name></expr></argument>,
                        <argument><expr><name>show_proxy_dist_tran_decided_read_timeout</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-write-timeout"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"write timeout in seconds (default: 600 seconds)"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>assign_proxy_write_timeout</name></expr></argument>, <argument><expr><name>show_proxy_write_timeout</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-allow-ip"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>allow_ip</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"allow user@IP for proxy permission"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_proxy_allow_ip</name></expr></argument>, <argument><expr><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-deny-ip"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>deny_ip</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"deny user@IP for proxy permission"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_proxy_deny_ip</name></expr></argument>, <argument><expr><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>opts</name><operator>.</operator><name>options</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * init the plugin with the parsed config
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>network_mysqld_shard_plugin_apply_config</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>listen_sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">":4040"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1:3306"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>allow_ip</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_acl_add_rules</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>ACL_WHITELIST</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>allow_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>deny_ip</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_acl_add_rules</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>ACL_BLACKLIST</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>deny_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" format="doxygen">/**
     * create a connection handle for the listen socket
     */</comment>
    <expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>network_mysqld_con_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_add_connection</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name></name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>listen_sock</name> <operator>=</operator> <call><name>network_socket_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>listen_sock</name></expr>;</expr_stmt>

    <comment type="block">/*
     * set the plugin hooks as we want to apply them
     * to the new connections too later
     */</comment>
    <expr_stmt><expr><call><name>network_mysqld_shard_connection_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_address_set_address</name><argument_list>(<argument><expr><name><name>listen_sock</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_socket_bind</name><argument_list>(<argument><expr><name>listen_sock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"shard module listening on port %s, con:%p"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>plugin_add_backends</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>read_only_backend_addresses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shard_json</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><call><name>chassis_config_query_object</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>,
                                              <argument><expr><literal type="string">"sharding"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>shard_json</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name> <operator>||</operator> <operator>!</operator><name>shard_json</name> <operator>||</operator> <operator>!</operator><call><name>shard_conf_load</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr></argument>, <argument><expr><name>shard_json</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"sharding configuration load error, exit program."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>shard_json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * call network_mysqld_con_accept() with this connection when we are done
     */</comment>

    <expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>listen_sock</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>listen_sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>, <argument><expr><name>network_mysqld_con_accept</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>event_base_set</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>listen_sock</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>listen_sock</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:listen sock, ev:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><operator>&amp;</operator><name><name>listen_sock</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_backends_load_config</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>update_timer_event</name></name></expr></argument>, <argument><expr><name>update_time_func</name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>update_time_interval</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>update_timer_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>update_time_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_connection_pool_create_conns</name><argument_list>(<argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>auto_create_conns_event</name></name></expr></argument>, <argument><expr><name>check_and_create_conns_func</name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>auto_create_conns_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>chassis_config_register_service</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><literal type="string">"shard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sql_filter_vars_shard_load_default_rules</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>var_json</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>chassis_config_query_object</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>, <argument><expr><literal type="string">"variables"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_json</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"reading variable rules"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sql_filter_vars_load_str_rules</name><argument_list>(<argument><expr><name>var_json</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"variable rule load error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>var_json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 
<name>network_mysqld_shard_plugin_stop_listening</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>,
        <parameter><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:call network_mysqld_shard_plugin_stop_listening"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:close listen socket:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_socket_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>G_MODULE_EXPORT</name> <name>int</name></type>
<name>plugin_init</name><parameter_list>(<parameter><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>CHASSIS_PLUGIN_MAGIC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"shard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>PLUGIN_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>network_mysqld_shard_plugin_new</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_options</name></name> <operator>=</operator> <name>network_mysqld_shard_plugin_get_options</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apply_config</name></name> <operator>=</operator> <name>network_mysqld_shard_plugin_apply_config</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stop_listening</name></name> <operator>=</operator> <name>network_mysqld_shard_plugin_stop_listening</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>destroy</name></name> <operator>=</operator> <name>network_mysqld_shard_plugin_free</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
