<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/plugins/admin/admin-commands.c"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_GNU_SOURCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"admin-commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-users.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-variable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"character-set.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-monitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server-session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys-pedantic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"admin-plugin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sharding-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options-utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-sql-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-process-cycle.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>gint</name></type> <name>save_setting</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name>gint</name> <modifier>*</modifier></type><name>effected_rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>send_result</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>gint</name></type> <name>ret</name></decl></parameter>, <parameter><decl><type><name>gint</name></type> <name>affected</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>admin_update_remote_backend</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_conn_xa_state_name</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con_dist_tran_state_t</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NEXT_ST_XA_START</name></expr>:</case> <return>return <expr><literal type="string">"XS"</literal></expr>;</return>
    <case>case <expr><name>NEXT_ST_XA_QUERY</name></expr>:</case> <return>return <expr><literal type="string">"XQ"</literal></expr>;</return>
    <case>case <expr><name>NEXT_ST_XA_END</name></expr>:</case> <return>return <expr><literal type="string">"XE"</literal></expr>;</return>
    <case>case <expr><name>NEXT_ST_XA_PREPARE</name></expr>:</case> <return>return <expr><literal type="string">"XP"</literal></expr>;</return>
    <case>case <expr><name>NEXT_ST_XA_COMMIT</name></expr>:</case> <return>return <expr><literal type="string">"XC"</literal></expr>;</return>
    <case>case <expr><name>NEXT_ST_XA_ROLLBACK</name></expr>:</case> <return>return <expr><literal type="string">"XR"</literal></expr>;</return>
    <case>case <expr><name>NEXT_ST_XA_CANDIDATE_OVER</name></expr>:</case> <return>return <expr><literal type="string">"XCO"</literal></expr>;</return>
    <case>case <expr><name>NEXT_ST_XA_OVER</name></expr>:</case> <return>return <expr><literal type="string">"XO"</literal></expr>;</return>
    <default>default:</default> <return>return <expr><literal type="string">"NX"</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>g_table_free_all</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>used_conns</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
}</block></struct></type> <name>used_conns_t</name>;</typedef>

<function><type><name>void</name></type> <name>admin_syntax_error</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>admin_stack_overflow</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>admin_get_error</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>admin_clear_error</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>admin_select_all_backends</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>config</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator><name>network_mysqld_proto_fielddef_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"PID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"backend_ndx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"slave delay(ms)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"idle_conns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"used_conns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"total_conns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>has_shard_plugin</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>GDestroyNotify</name><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>states</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"unknown"</literal></expr>, <expr><literal type="string">"up"</literal></expr>, <expr><literal type="string">"down"</literal></expr>, <expr><literal type="string">"maintaining"</literal></expr>, <expr><literal type="string">"deleted"</literal></expr>, <expr><literal type="string">"offline"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>types</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"unknown"</literal></expr>, <expr><literal type="string">"rw"</literal></expr>, <expr><literal type="string">"ro"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>cetus_pid_t</name></type> <name>process_id</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>process_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>states</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>state</name></name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>types</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>slave_delay_msec</name></name> <operator>&gt;=</operator> <literal type="number">10</literal><operator>)</operator></expr>  ?</condition><then> <expr><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>slave_delay_msec</name></name> <operator>-</operator> <literal type="number">10</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name> <operator>&amp;&amp;</operator> <name><name>chas</name><operator>-&gt;</operator><name>check_slave_delay</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>cur_idle_connections</name></name> <operator>+</operator> <name><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>has_shard_plugin</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>backend</name><operator>-&gt;</operator><name>server_group</name><operator>-&gt;</operator><name>len</name></name></expr> ?</condition><then> <expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Free data */</comment>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_select_conn_details</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>back_user_conn_hash_table</name> <init>= <expr><call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><name>g_str_hash</name></expr></argument>, 
            <argument><expr><name>g_str_equal</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>, <argument><expr><name>g_table_free_all</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>back_user_conn_hash_table</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
 
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>client</name></name> <operator>||</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>server_session_t</name>  <modifier>*</modifier></type><name>pmd</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>back_user_conn_hash_table</name></expr></argument>, 
                                                    <argument><expr><name><name>pmd</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: table is null for backend:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, 
                          <argument><expr><name><name>pmd</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>used_conns_t</name> <modifier>*</modifier></type><name>total_used</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>table</name></expr></argument>,
                                                           <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>total_used</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>total_used</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>used_conns_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>table</name></expr></argument>, 
                                    <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>total_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>total_used</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
            
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>back_user_conn_hash_table</name></expr></argument>, 
                                                        <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: table is null for backend:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, 
                              <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>used_conns_t</name> <modifier>*</modifier></type><name>total_used</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>table</name></expr></argument>,
                                                               <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>total_used</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>total_used</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>used_conns_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>table</name></expr></argument>, 
                                        <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>total_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>total_used</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>back_user_conn_hash_table</name></expr></argument>, 
                                                    <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: table is null for backend:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, 
                          <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>used_conns_t</name> <modifier>*</modifier></type><name>total_used</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>table</name></expr></argument>,
                                                           <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>total_used</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>total_used</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>used_conns_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>table</name></expr></argument>, 
                                    <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>total_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>total_used</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></for>


    <expr_stmt><expr><name>fields</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>network_mysqld_proto_fielddef_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"PID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"backend_ndx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"username"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"idle_conns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"used_conns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"total_conns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cetus_pid_t</name></type> <name>process_id</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>back_user_conn_hash_table</name></expr></argument>, 
                <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: table is null for backend:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, 
                    <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>users</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>users</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>users</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_hash_table_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>users</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* count all users' pooled connections */</comment>
            <while>while <condition>(<expr><call><name>g_hash_table_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>process_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>used_conns_t</name> <modifier>*</modifier></type><name>total_used</name> <init>= <expr><call><name>g_hash_table_lookup</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>total_used</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>total_used</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>total_used</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name><name>total_used</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Free data */</comment>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_hash_table_destroy</name><argument_list>(<argument><expr><name>back_user_conn_hash_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_show_connectionlist</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>show_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>show_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>show_count</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>number</name> <operator>=</operator> <name>show_count</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>config</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>fields</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>network_mysqld_proto_fielddef_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"PID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"ThreadID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"User"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"Host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"Command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"ProcessTime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"Trans"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"PS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"State"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>has_shard_plugin</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"Xa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"Xid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"Server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"Info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name>now</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>cetus_pid_t</name></type> <name>process_id</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>number</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>process_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name></name></expr>)</condition>  <block>{<block_content>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;=</operator> <name>ST_READ_QUERY</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"Sleep"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"Query"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>req_recv_time</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>diff</name> <operator>+=</operator> <operator>(</operator><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>req_recv_time</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr> ?</condition><then> <expr><literal type="string">"Y"</literal></expr> </then><else>: <expr><literal type="string">"N"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>is_prepared</name></name></expr> ?</condition><then> <expr><literal type="string">"Y"</literal></expr> </then><else>: <expr><literal type="string">"N"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><call><name>network_mysqld_con_st_name</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>has_shard_plugin</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><call><name>get_conn_xa_state_name</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran_state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>dist_tran</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>xa_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIMPLE_PARSER</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>servers</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>server_session_t</name>  <modifier>*</modifier></type><name>pmd</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>pmd</name> <operator>&amp;&amp;</operator> <name><name>pmd</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>pmd</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>src</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>pmd</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>delim</name> <init>= <expr><literal type="string">"-&gt;"</literal></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt> 
                    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>pmd</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>servers</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>src</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>delim</name> <init>= <expr><literal type="string">"-&gt;"</literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_READ_QUERY</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strndup</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_FIELD_DEF_1_COL</name><parameter_list>(<parameter><type><name>fields</name></type></parameter>, <parameter><type><name>col_name</name></type></parameter>)</parameter_list></cpp:macro>  \
    <cpp:value>do {\
    MYSQL_FIELD *field = network_mysqld_proto_fielddef_new();\
    field-&gt;name = col_name;                      \
    field-&gt;type = FIELD_TYPE_VAR_STRING;\
    g_ptr_array_add(fields, field);         \
    }while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_FIELD_DEF_2_COL</name><parameter_list>(<parameter><type><name>fields</name></type></parameter>, <parameter><type><name>col1_name</name></type></parameter>, <parameter><type><name>col2_name</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do {\
    MYSQL_FIELD *field = network_mysqld_proto_fielddef_new();\
    field-&gt;name = col1_name;                      \
    field-&gt;type = FIELD_TYPE_VAR_STRING;\
    g_ptr_array_add(fields, field);         \
    field = network_mysqld_proto_fielddef_new();     \
    field-&gt;name = col2_name;                      \
    field-&gt;type = FIELD_TYPE_VAR_STRING;\
    g_ptr_array_add(fields, field);         \
    }while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_FIELD_DEF_3_COL</name><parameter_list>(<parameter><type><name>fields</name></type></parameter>, <parameter><type><name>col1_name</name></type></parameter>, <parameter><type><name>col2_name</name></type></parameter>, <parameter><type><name>col3_name</name></type></parameter>)</parameter_list></cpp:macro>   \
    <cpp:value>do {\
    MYSQL_FIELD *field = network_mysqld_proto_fielddef_new();\
    field-&gt;name = col1_name;                      \
    field-&gt;type = FIELD_TYPE_VAR_STRING;\
    g_ptr_array_add(fields, field);         \
    field = network_mysqld_proto_fielddef_new();     \
    field-&gt;name = col2_name;                      \
    field-&gt;type = FIELD_TYPE_VAR_STRING;\
    g_ptr_array_add(fields, field);         \
    field = network_mysqld_proto_fielddef_new();     \
    field-&gt;name = col3_name;                      \
    field-&gt;type = FIELD_TYPE_VAR_STRING;\
    g_ptr_array_add(fields, field);  \
    }while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_FIELD_DEF_4_COL</name><parameter_list>(<parameter><type><name>fields</name></type></parameter>, <parameter><type><name>col1_name</name></type></parameter>, <parameter><type><name>col2_name</name></type></parameter>, <parameter><type><name>col3_name</name></type></parameter>, <parameter><type><name>col4_name</name></type></parameter>)</parameter_list></cpp:macro>   \
    <cpp:value>do {\
    MYSQL_FIELD *field = network_mysqld_proto_fielddef_new();\
    field-&gt;name = col1_name;                      \
    field-&gt;type = FIELD_TYPE_VAR_STRING;\
    g_ptr_array_add(fields, field);         \
    field = network_mysqld_proto_fielddef_new();     \
    field-&gt;name = col2_name;                      \
    field-&gt;type = FIELD_TYPE_VAR_STRING;\
    g_ptr_array_add(fields, field);         \
    field = network_mysqld_proto_fielddef_new();     \
    field-&gt;name = col3_name;                      \
    field-&gt;type = FIELD_TYPE_VAR_STRING;\
    g_ptr_array_add(fields, field);  \
    field = network_mysqld_proto_fielddef_new();     \
    field-&gt;name = col4_name;                      \
    field-&gt;type = FIELD_TYPE_VAR_STRING;\
    g_ptr_array_add(fields, field);  \
    }while(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND_ROW_1_COL</name><parameter_list>(<parameter><type><name>rows</name></type></parameter>, <parameter><type><name>row_data</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do {\
    GPtrArray* row = g_ptr_array_new();\
    g_ptr_array_add(row, (row_data));  \
    g_ptr_array_add(rows, row);\
    }while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND_ROW_2_COL</name><parameter_list>(<parameter><type><name>rows</name></type></parameter>, <parameter><type><name>col1</name></type></parameter>, <parameter><type><name>col2</name></type></parameter>)</parameter_list></cpp:macro>           \
    <cpp:value>do {\
    GPtrArray* row = g_ptr_array_new();\
    g_ptr_array_add(row, (col1));  \
    g_ptr_array_add(row, (col2));  \
    g_ptr_array_add(rows, row);\
    }while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND_ROW_3_COL</name><parameter_list>(<parameter><type><name>rows</name></type></parameter>, <parameter><type><name>col1</name></type></parameter>, <parameter><type><name>col2</name></type></parameter>, <parameter><type><name>col3</name></type></parameter>)</parameter_list></cpp:macro>    \
    <cpp:value>do {\
    GPtrArray *row = g_ptr_array_new();\
    g_ptr_array_add(row, (col1));  \
    g_ptr_array_add(row, (col2));  \
    g_ptr_array_add(row, (col3));  \
    g_ptr_array_add(rows, row);\
    }while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND_ROW_4_COL</name><parameter_list>(<parameter><type><name>rows</name></type></parameter>, <parameter><type><name>col1</name></type></parameter>, <parameter><type><name>col2</name></type></parameter>, <parameter><type><name>col3</name></type></parameter>, <parameter><type><name>col4</name></type></parameter>)</parameter_list></cpp:macro>    \
    <cpp:value>do {\
    GPtrArray *row = g_ptr_array_new();\
    g_ptr_array_add(row, (col1));  \
    g_ptr_array_add(row, (col2));  \
    g_ptr_array_add(row, (col3));  \
    g_ptr_array_add(row, (col4));  \
    g_ptr_array_add(rows, row);\
    }while(0)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>admin_acl_show_rules</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>is_white</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>ask_one_worker</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_2_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"User"</literal></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>l</name> <init>= <expr><ternary><condition><expr><name>is_white</name></expr> ?</condition><then> <expr><name><name>priv</name><operator>-&gt;</operator><name>acl</name><operator>-&gt;</operator><name>whitelist</name></name></expr> </then><else>: <expr><name><name>priv</name><operator>-&gt;</operator><name>acl</name><operator>-&gt;</operator><name>blacklist</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>cetus_acl_entry_t</name></name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_2_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_acl_add_rule</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>is_white</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>candidate_config_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>affected</name> <init>= <expr><call><name>cetus_acl_add_rule_str</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>,
                                         <argument><expr><ternary><condition><expr><name>is_white</name></expr>?</condition><then><expr><name>ACL_WHITELIST</name></expr></then><else>:<expr><name>ACL_BLACKLIST</name></expr></else></ternary></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>affected</name></expr></argument>,
                                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>CHANGE_SAVE_ERROR</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gint</name></type> <name>effected_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>affected</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>save_setting</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>effected_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>send_result</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_acl_delete_rule</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>is_white</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>candidate_config_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>affected</name> <init>= <expr><call><name>cetus_acl_delete_rule_str</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>,
                                             <argument><expr><ternary><condition><expr><name>is_white</name></expr>?</condition><then><expr><name>ACL_WHITELIST</name></expr></then><else>:<expr><name>ACL_BLACKLIST</name></expr></else></ternary></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>affected</name></expr></argument>,
                                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>CHANGE_SAVE_ERROR</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gint</name></type> <name>effected_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>affected</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>save_setting</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>effected_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>send_result</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* only match % wildcard, case insensitive */</comment>
<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>sql_pattern_like</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pattern</name> <operator>||</operator> <name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>glob</name> <init>= <expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>glob</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>glob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>glob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>glob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name><name>glob</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>lower_str</name> <init>= <expr><call><name>g_ascii_strdown</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>rc</name> <init>= <expr><call><name>g_pattern_match_simple</name><argument_list>(<argument><expr><name>glob</name></expr></argument>, <argument><expr><name>lower_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>lower_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* returned list must be freed */</comment>
<function><type><specifier>static</specifier> <name>GList</name><modifier>*</modifier></type> <name>admin_get_all_options</name><parameter_list>(<parameter><decl><type><name>chassis</name><modifier>*</modifier></type> <name>chas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>options</name> <init>= <expr><call><name>g_list_copy</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>options</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* shallow copy */</comment>
    <return>return <expr><name>options</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_show_variables</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>like</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>ask_one_worker</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pattern</name> <init>= <expr><ternary><condition><expr><name>like</name></expr> ?</condition><then> <expr><name>like</name></expr> </then><else>: <expr><literal type="string">"%"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><call><name>admin_get_all_options</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_3_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"Variable_name"</literal></expr></argument>, <argument><expr><literal type="string">"Value"</literal></expr></argument>, <argument><expr><literal type="string">"Property"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>freelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>options</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_option_t</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/* just support these for now */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sql_pattern_like</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name></type> <name>param</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>param</name><operator>.</operator><name>chas</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>param</name><operator>.</operator><name>opt_type</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>opt_property</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>show_hook</name></name> <operator>!=</operator> <name>NULL</name></expr>?</condition><then> <expr><call><name><name>opt</name><operator>-&gt;</operator><name>show_hook</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>freelist</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>freelist</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
                    <argument><expr><operator>(</operator><ternary><condition><expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>opt_property</name></name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="string">"Dynamic"</literal></expr> </then><else>: <expr><literal type="string">"Static"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>freelist</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>admin_set_reduce_conns</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>candidate_config_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>affected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_reduce_conns</name></name> <operator>!=</operator> <name>mode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_reduce_conns</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>affected</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>affected</name></expr></argument>,
                                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>CHANGE_SAVE_ERROR</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gint</name></type> <name>effected_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>affected</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>save_setting</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>effected_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>send_result</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_set_server_conn_refresh</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:call admin_set_server_conn_refresh"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>need_to_refresh_server_connections</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_set_maintain</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>affected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>maintain_close_mode</name></name> <operator>!=</operator> <name>mode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>maintain_close_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>affected</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>affected</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_set_charset_check</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_client</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>affected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>charset_check</name></name> <operator>!=</operator> <name>mode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>charset_check</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>affected</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>affected</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_show_maintain</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cetus_pid_t</name></type> <name>process_id</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>process_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_2_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"PID"</literal></expr></argument>, <argument><expr><literal type="string">"Cetus maintain status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>maintain_close_mode</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>APPEND_ROW_2_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>APPEND_ROW_2_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_select_version</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_1_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"cetus version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>PLUGIN_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_select_connection_stat</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backend_ndx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_1_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"connection_num"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>numstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>backend_ndx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* index in sql start from 1, not 0 */</comment>
    <if_stmt><if>if <condition>(<expr><name>backend_ndx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>backend_ndx</name> <operator>&lt;</operator> <call><name>network_backends_count</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>network_backend_t</name><modifier>*</modifier></type> <name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name><modifier>*</modifier></type> <name>user_name</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/*TODO: if robbed, conns is not for user_name */</comment>
        <decl_stmt><decl><type><name>GQueue</name><modifier>*</modifier></type> <name>conns</name> <init>= <expr><call><name>network_connection_pool_get_conns</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>conns</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>numstr</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>conns</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>numstr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>numstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>numstr</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>numstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>cetus_pwd_type</name></name></type> <name>password_type</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="string">"user_pwd"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>CETUS_SERVER_PWD</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="string">"app_user_pwd"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>CETUS_CLIENT_PWD</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_select_user_password</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>from_table</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>ask_one_worker</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>enum</name> <name>cetus_pwd_type</name></name></type> <name>pwd_type</name> <init>= <expr><call><name>password_type</name><argument_list>(<argument><expr><name>from_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_2_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="string">"password(sha1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>user</name></expr>)</condition> <block>{<block_content> <comment type="block">/* one user */</comment>
        <decl_stmt><decl><type><name>GString</name><modifier>*</modifier></type> <name>hashpwd</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cetus_users_get_hashed_pwd</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>pwd_type</name></expr></argument>, <argument><expr><name>hashpwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pwdhex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>hashpwd</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>pwdhex</name> <operator>=</operator> <call><name>g_malloc0</name><argument_list>(<argument><expr><name><name>hashpwd</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bytes_to_hex_str</name><argument_list>(<argument><expr><name><name>hashpwd</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>hashpwd</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>pwdhex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APPEND_ROW_2_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>pwdhex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>hashpwd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pwdhex</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>pwdhex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content> <comment type="block">/* all users */</comment>
        <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>strings_to_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name><modifier>*</modifier></type> <name>hashpwd</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>hack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* don't use value directly */</comment>
        <expr_stmt><expr><call><name>g_hash_table_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>g_hash_table_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>username</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>cetus_users_get_hashed_pwd</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>pwd_type</name></expr></argument>, <argument><expr><name>hashpwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pwdhex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>hashpwd</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>pwdhex</name> <operator>=</operator> <call><name>g_malloc0</name><argument_list>(<argument><expr><name><name>hashpwd</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>bytes_to_hex_str</name><argument_list>(<argument><expr><name><name>hashpwd</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>hashpwd</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>pwdhex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>strings_to_free</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>strings_to_free</name></expr></argument>, <argument><expr><name>pwdhex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>APPEND_ROW_2_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>pwdhex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>hashpwd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>strings_to_free</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>strings_to_free</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_update_or_delete_remote_user_password_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"update remote user password timeout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over, wait:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>usec</name> <init>= <expr><operator>(</operator><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>-</operator> <literal type="number">1000</literal> <operator>*</operator> <name>sec</name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><name>sec</name></expr>, <expr><name>usec</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_or_delete_remote_user_password_callback, timeout:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"update remote user password failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                    <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_update_or_delete_remote_user_password</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_or_delete_remote_user_password"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>chassis</name><modifier>*</modifier></type> <name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>asynchronous_type</name></name> <operator>=</operator> <name>ASYNCHRONOUS_UPDATE_OR_DELETE_USER_PASSWORD</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><name>admin_update_or_delete_remote_user_password_callback</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* update or insert */</comment>
<function><type><name>void</name></type> <name>admin_update_user_password</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>from_table</name></decl></parameter>,
                                      <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>enum</name> <name>cetus_pwd_type</name></name></type> <name>pwd_type</name> <init>= <expr><call><name>password_type</name><argument_list>(<argument><expr><name>from_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>affected</name> <init>= <expr><call><name>cetus_users_update_record</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>pwd_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s after cetus_users_update_record"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>affected</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s affected is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>cetus_users_write_json</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>users</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>admin_update_or_delete_remote_user_password</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>affected</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                    <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_delete_user_password</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>affected</name> <init>= <expr><call><name>cetus_users_delete_record</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>affected</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s affected is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>cetus_users_write_json</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>users</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>admin_update_or_delete_remote_user_password</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>affected</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                    <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_PARAM</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>backend_type_t</name></type> <name>backend_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>backend_type_t</name></type> <name>type</name> <init>= <expr><name>ERROR_PARAM</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ro"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name>BACKEND_TYPE_RO</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"rw"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name>BACKEND_TYPE_RW</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name>BACKEND_TYPE_UNKNOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>backend_state_t</name></type> <name>backend_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>backend_state_t</name></type> <name>state</name> <init>= <expr><name>ERROR_PARAM</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"up"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>BACKEND_STATE_UP</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"down"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>BACKEND_STATE_DOWN</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"maintaining"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>BACKEND_STATE_MAINTAINING</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>BACKEND_STATE_UNKNOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_insert_backend</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>candidate_config_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
  
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>network_backends_add</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,
                                        <argument><expr><call><name>backend_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name>backend_state</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>BACKEND_OPERATE_SUCCESS</name></expr>:</case>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if<condition>(<expr><call><name>backend_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BACKEND_TYPE_RO</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"proxy-read-only-backend-addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>admin_get_value_by_key</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve1</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve2</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>admin_update_remote_backend</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>backend_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"proxy-backend-addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>admin_get_value_by_key</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve1</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve2</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>admin_update_remote_backend</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"insert backend succeed, but save to remote failed."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>gint</name></type> <name>effected_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>save_setting</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>effected_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>send_result</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>BACKEND_OPERATE_NETERR</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"get network address failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>BACKEND_OPERATE_DUPLICATE</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"backend is already known"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>BACKEND_OPERATE_2MASTER</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"rw node is already existsï¼only one rw node is allowed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_update_backend</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>GList</name><modifier>*</modifier></type> <name>equations</name></decl></parameter>,
                          <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cond_key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cond_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>candidate_config_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>type_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>state_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>l</name></decl>;</decl_stmt> <comment type="block">/* list = [key1, val1, key2, val2, ...]*/</comment>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>equations</name></expr>;</init> <condition><expr><name>l</name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>l</name><operator>=</operator><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>l</name><operator>=</operator><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type_str</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>state_str</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"parameter error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>backend_ndx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cond_key</name></expr></argument>, <argument><expr><literal type="string">"backend_ndx"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>backend_ndx</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>cond_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backend_ndx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* index in SQL start from 1, not 0 */</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cond_key</name></expr></argument>, <argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>backend_ndx</name> <operator>=</operator> <call><name>network_backends_find_address</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>cond_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"parameter error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>network_backend_t</name><modifier>*</modifier></type> <name>bk</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bk</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"no such backend"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>&amp;&amp;</operator> <call><name>backend_type</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BACKEND_TYPE_RW</name> <operator>&amp;&amp;</operator>
            <call><name>network_backend_check_available_rw</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name><name>bk</name><operator>-&gt;</operator><name>server_group</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>backend_type</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>bk</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"rw node is already existsï¼only one rw node is allowed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><name>type_str</name></expr> ?</condition><then> <expr><call><name>backend_type</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>bk</name><operator>-&gt;</operator><name>type</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><ternary><condition><expr><name>state_str</name></expr> ?</condition><then> <expr><call><name>backend_state</name><argument_list>(<argument><expr><name>state_str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>bk</name><operator>-&gt;</operator><name>state</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ERROR_PARAM</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>ERROR_PARAM</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"parameter error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>affected</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>network_backends_modify</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>NO_PREVIOUS_STATE</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"proxy-read-only-backend-addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>admin_get_value_by_key</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve1</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"proxy-backend-addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve2</name></name> <operator>=</operator> <call><name>admin_get_value_by_key</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>admin_update_remote_backend</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>CHANGE_SAVE_ERROR</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gint</name></type> <name>effected_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>affected</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>save_setting</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>effected_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>send_result</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_delete_backend</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>candidate_config_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>backend_ndx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"backend_ndx"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>backend_ndx</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backend_ndx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* index in SQL start from 1, not 0 */</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>backend_ndx</name> <operator>=</operator> <call><name>network_backends_find_address</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"parameter error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>backend_ndx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>backend_ndx</name> <operator>&lt;</operator> <call><name>network_backends_count</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_backends_remove</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="block">/*TODO: just change state? */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"proxy-read-only-backend-addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>admin_get_value_by_key</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve1</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"proxy-backend-addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve2</name></name> <operator>=</operator> <call><name>admin_get_value_by_key</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>admin_update_remote_backend</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>gint</name></type> <name>effected_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><call><name>save_setting</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>effected_rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>send_result</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                        <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_supported_stats</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_1_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"client_query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"proxyed_query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"query_time_table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"server_query_details"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"query_wait_table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_get_stats</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content> <comment type="block">/* just "stats get", no argument */</comment>
        <expr_stmt><expr><call><name>admin_supported_stats</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cetus_pid_t</name></type> <name>process_id</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>process_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_3_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"PID"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>query_stats_t</name><modifier>*</modifier></type> <name>stats</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>chas</name><operator>-&gt;</operator><name>query_stats</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"client_query"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>client_query</name><operator>.</operator><name>ro</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>client_query</name><operator>.</operator><name>rw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"client_query.ro"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"client_query.rw"</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"proxyed_query"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>proxyed_query</name><operator>.</operator><name>ro</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>proxyed_query</name><operator>.</operator><name>rw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"proxyed_query.ro"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"proxyed_query.rw"</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"query_time_table"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_QUERY_TIME</name> <operator>&amp;&amp;</operator> <name><name>stats</name><operator>-&gt;</operator><name>query_time_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>row</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"query_time_table.%d"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>query_time_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"query_wait_table"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_WAIT_TIME</name> <operator>&amp;&amp;</operator> <name><name>stats</name><operator>-&gt;</operator><name>query_wait_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>row</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"query_wait_table.%d"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>query_wait_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"server_query_details"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>  <name>backends_num</name> <init>= <expr><call><name>network_backends_count</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>backends_num</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAX_SERVER_NUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>row</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"server_query_details.%d.ro"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>server_query_details</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ro</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"server_query_details.%d.rw"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>server_query_details</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_supported_config</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_1_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"common"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_get_config</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content> <comment type="block">/* just "config get", no argument */</comment>
        <expr_stmt><expr><call><name>admin_supported_config</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cetus_pid_t</name></type> <name>process_id</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>process_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_3_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"PID"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>buf2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf3</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>buf4</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"common"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>check_slave_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>slave_delay_down_threshold_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf3</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>slave_delay_recover_threshold_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf4</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>long_query_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"common.check_slave_delay"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"common.slave_delay_down_threshold_sec"</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"common.slave_delay_recover_threshold_sec"</literal></expr></argument>, <argument><expr><name>buf3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"common.long_query_time"</literal></expr></argument>, <argument><expr><name>buf4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"pool"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>mid_idle_connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>max_idle_connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf3</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>max_resp_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf4</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>master_preferred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"pool.default-pool-size"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"pool.max-pool-size"</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"pool.max-resp-len"</literal></expr></argument>, <argument><expr><name>buf3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"pool.master-preferred"</literal></expr></argument>, <argument><expr><name>buf4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"please check config file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_set_remote_config_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_or_delete_remote_user_password_callback"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"update remote config timeout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_set_remote_config_callback timeout, last timeout:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>usec</name> <init>= <expr><operator>(</operator><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>-</operator> <literal type="number">1000</literal> <operator>*</operator> <name>sec</name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><name>sec</name></expr>, <expr><name>usec</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_set_remote_config_callback, timeout:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,<argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Variable is set locally but cannot replace remote settings"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_set_remote_config</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_set_remote_config"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>chassis</name><modifier>*</modifier></type> <name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>asynchronous_type</name></name> <operator>=</operator> <name>ASYNCHRONOUS_SET_CONFIG</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><name>admin_set_remote_config_callback</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_update_remote_backend_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_remote_backend_callback"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"update remote backend timeout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_remote_backend_callback timeout, last timeout:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>fun_end</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>usec</name> <init>= <expr><operator>(</operator><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>-</operator> <literal type="number">1000</literal> <operator>*</operator> <name>sec</name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><name>sec</name></expr>, <expr><name>usec</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_remote_backend_callback, timeout:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,<argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"backend is set locally but cannot replace remote"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fun_end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fun_end</name>:</label>
    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>reserve1</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve1</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>reserve2</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>reserve2</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_update_remote_backend</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_remote_backend"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>chassis</name><modifier>*</modifier></type> <name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>asynchronous_type</name></name> <operator>=</operator> <name>ASYNCHRONOUS_UPDATE_BACKENDS</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><name>admin_update_remote_backend_callback</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_set_config</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>candidate_config_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><call><name>admin_get_all_options</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_option_t</name><modifier>*</modifier></type> <name>opt</name> <init>= <expr><call><name>chassis_options_get</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"no such variable: %s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name></type> <name>param</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>param</name><operator>.</operator><name>chas</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>param</name><operator>.</operator><name>opt_type</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>opt_property</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>assign_hook</name></name> <operator>!=</operator> <name>NULL</name></expr>?</condition><then> <expr><call><name><name>opt</name><operator>-&gt;</operator><name>assign_hook</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ASSIGN_NOT_SUPPORT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>admin_set_remote_config</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gint</name></type> <name>effected_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gint</name></type> <name>save_ret</name> <init>= <expr><call><name>save_setting</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>effected_rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>send_result</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>save_ret</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>ASSIGN_NOT_SUPPORT</name> <operator>==</operator> <name>ret</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Variable cannot be set dynamically"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1065</literal></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>ASSIGN_VALUE_INVALID</name> <operator>==</operator> <name>ret</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Value is illegal"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1065</literal></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"You have an error in your SQL syntax"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1065</literal></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_update_settings</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_settings"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"update remote settings timeout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_settings timeout, last timeout:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>usec</name> <init>= <expr><operator>(</operator><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>-</operator> <literal type="number">1000</literal> <operator>*</operator> <name>sec</name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><name>sec</name></expr>, <expr><name>usec</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_settings, timeout:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"load config failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><call><name>admin_get_all_options</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>opts_table</name> <init>= <expr><call><name>chassis_config_get_options</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>affected_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GHashTableIter</name></type> <name>iter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* don't use value directly */</comment>
    <expr_stmt><expr><call><name>g_hash_table_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>opts_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>g_hash_table_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_option_t</name><modifier>*</modifier></type> <name>opt</name> <init>= <expr><call><name>chassis_options_get</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">"no such variable: %s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name></type> <name>param</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>param</name><operator>.</operator><name>chas</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>param</name><operator>.</operator><name>opt_type</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>opt_property</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>assign_hook</name></name> <operator>!=</operator> <name>NULL</name></expr>?</condition><then>
            <expr><call><name><name>opt</name><operator>-&gt;</operator><name>assign_hook</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ASSIGN_NOT_SUPPORT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>affected_rows</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>affected_rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                    <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_reload_settings</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name><modifier>*</modifier></type> <name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>asynchronous_type</name></name> <operator>=</operator> <name>ASYNCHRONOUS_RELOAD</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><name>admin_update_settings</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_update_user</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"update user timeout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp timeout, last timeout:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>usec</name> <init>= <expr><operator>(</operator><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>-</operator> <literal type="number">1000</literal> <operator>*</operator> <name>sec</name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><name>sec</name></expr>, <expr><name>usec</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_user, timeout:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"update user failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>chassis_config_query_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"users"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name> <operator>||</operator> <name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"read user failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
 
    <decl_stmt><decl><type><name>cetus_users_t</name> <modifier>*</modifier></type><name>users</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>users</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>success</name> <init>= <expr><call><name>cetus_users_parse_json</name><argument_list>(<argument><expr><name>users</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"read %d users"</literal></expr></argument>, <argument><expr><call><name>g_hash_table_size</name><argument_list>(<argument><expr><name><name>users</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_reload_user</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name><modifier>*</modifier></type> <name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>asynchronous_type</name></name> <operator>=</operator> <name>ASYNCHRONOUS_RELOAD_USER</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><name>admin_update_user</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_update_variables</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_variables"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"update variables timeout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_variables timeout, last timeout:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>usec</name> <init>= <expr><operator>(</operator><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>-</operator> <literal type="number">1000</literal> <operator>*</operator> <name>sec</name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><name>sec</name></expr>, <expr><name>usec</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_update_variables, timeout:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"load variables failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>chassis_config_query_object</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"variables"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name> <operator>||</operator> <name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"read variables failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
 
    <if_stmt><if>if <condition>(<expr><call><name>sql_filter_vars_reload_str_rules</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"variable rule reload error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_reload_variables</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name><modifier>*</modifier></type> <name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>asynchronous_type</name></name> <operator>=</operator> <name>ASYNCHRONOUS_RELOAD_VARIABLES</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><name>admin_update_variables</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_config_reload</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>admin_reload_settings</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><call><name>cetus_users_read_json</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>admin_reload_user</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"read user failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">"variables"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>var_json</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"reload variables failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name>admin_reload_variables</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"wrong parameter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_kill_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>guint32</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s call admin_kill_query for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>process_index</name></name> <operator>=</operator> <name>thread_id</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>process_index</name></name> <operator>&gt;</operator> <name>cetus_last_process</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"thread id is not correct"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>ask_the_given_worker</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s call admin_kill_query:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><call><name>network_mysqld_kill_connection</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ok</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_reset_stats</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>query_stats_t</name><modifier>*</modifier></type> <name>stats</name> <init>= <expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                    <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_select_all_groups</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>ask_one_worker</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_3_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>, <argument><expr><literal type="string">"master"</literal></expr></argument>, <argument><expr><literal type="string">"slaves"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>free_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_backends_t</name><modifier>*</modifier></type> <name>bs</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>network_group_t</name><modifier>*</modifier></type> <name>gp</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>row</name> <init>= <expr><call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>gp</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>gp</name><operator>-&gt;</operator><name>master</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>gp</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>GString</name><modifier>*</modifier></type> <name>slaves</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_group_get_slave_names</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name>slaves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>slaves</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>free_list</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>free_list</name></expr></argument>, <argument><expr><name>slaves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>free_list</name></expr></argument>, <argument><expr><name>g_string_true_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<enum>enum <block>{
    <decl><name>SHARD_HELP</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
    <decl><name>RW_HELP</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
    <decl><name>ALL_HELP</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,
}</block>;</enum>
<struct><specifier>static</specifier> struct <name>sql_help_entry_t</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pattern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>desc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
}</block> <decl><name><name>sql_help_entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"add allow_ip|deny_ip 'user@address'"</literal></expr>, <expr><literal type="string">"add address to white or black list"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"add master 'ip:port'"</literal></expr>, <expr><literal type="string">"e.g. add master '3.1.2.1:6666'; "</literal></expr>, <expr><name>RW_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"add master 'ip:port@group'"</literal></expr>, <expr><literal type="string">"e.g. add master '3.1.2.1:6666@data3'; "</literal></expr>, <expr><name>SHARD_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"add slave 'ip:port'"</literal></expr>, <expr><literal type="string">"e.g. add slave '3.1.2.0:6666'; "</literal></expr>, <expr><name>RW_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"add slave 'ip:port@group'"</literal></expr>, <expr><literal type="string">"e.g. add slave '3.1.2.0:6666@data3'; "</literal></expr>, <expr><name>SHARD_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"cetus"</literal></expr>, <expr><literal type="string">"Show overall status of Cetus"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"config get [item]"</literal></expr>, <expr><literal type="string">"show config"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"config set key=value"</literal></expr>, <expr><literal type="string">"e.g. config set log-level = message; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"create sharded table schema.table vdb id shardkey key"</literal></expr>, <expr><literal type="string">"e.g. create sharded table test.tb1 vdb 1 shardkey id; "</literal></expr>, <expr><name>SHARD_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"create single table schema.table on group"</literal></expr>, <expr><literal type="string">"e.g. create single table test.tb1 on data1; "</literal></expr>, <expr><name>SHARD_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"create vdb id (groupA:xx, groupB:xx) using method"</literal></expr>, <expr><literal type="string">"Method example: hash(int,4) range(str)"</literal></expr>, <expr><name>SHARD_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"delete allow_ip|deny_ip 'user@address'"</literal></expr>, <expr><literal type="string">"delete address from white or black list"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"delete from user_pwd where user='name'"</literal></expr>, <expr><literal type="string">"delete from user_pwd where user='lede'; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"delete from app_user_pwd where user='name'"</literal></expr>, <expr><literal type="string">"delete from user_pwd where user='lede'; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"delete from backends where [backend_ndx=index|address='ip:port']"</literal></expr>, <expr><literal type="string">"e.g. delete from backends where backend_ndx = 1; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"insert into backends values ('ip:port', '[ro|rw]', 'state')"</literal></expr>, <expr><literal type="string">"add mysql instance to backends list"</literal></expr>, <expr><name>RW_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"insert into backends values ('ip:port@group', '[ro|rw]', 'state')"</literal></expr>, <expr><literal type="string">"add mysql instance to backends list"</literal></expr>, <expr><name>SHARD_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"kill query tid"</literal></expr>, <expr><literal type="string">"kill session when the thread id is equal to tid. e.g. kill query 1; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"refresh_conns"</literal></expr>, <expr><literal type="string">"refresh all server connections. e.g. refresh_conns; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"remove backend where [backend_ndx=index|address='ip:port']"</literal></expr>, <expr><literal type="string">"e.g. remove backend where address='3.1.2.1:6666'; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"remove backend backend_ndx"</literal></expr>, <expr><literal type="string">"e.g. remove backend 1; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"save settings"</literal></expr>, <expr><literal type="string">"save the current running configuration to files. e.g. save settings; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select help"</literal></expr>, <expr><literal type="string">"show this help"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select conn_details from backends"</literal></expr>, <expr><literal type="string">"display the idle conns"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select sharded table"</literal></expr>, <expr><literal type="string">"Show all sharded table"</literal></expr>, <expr><name>SHARD_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select single table"</literal></expr>, <expr><literal type="string">"Show single tables. e.g. select single table; "</literal></expr>, <expr><name>SHARD_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select version"</literal></expr>, <expr><literal type="string">"cetus version. e.g. select version; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select * from help"</literal></expr>, <expr><literal type="string">"show this help"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select * from backends"</literal></expr>, <expr><literal type="string">"list the backends and their state"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select * from groups"</literal></expr>,<expr><literal type="string">"list the backends and their groups"</literal></expr>, <expr><name>SHARD_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select * from user_pwd [where user='name']"</literal></expr>, <expr><literal type="string">"e.g. select * from user_pwd; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select * from app_user_pwd [where user='name']"</literal></expr>, <expr><literal type="string">"e.g. select * from app_user_pwd where user='lede'; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select * from vdb"</literal></expr>, <expr><literal type="string">"Show all vdb"</literal></expr>, <expr><name>SHARD_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"set reduce_conns [true|false]"</literal></expr>, <expr><literal type="string">"reduce idle connections if set to true. e.g. set reduce_conns true; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"set maintain [true|false]"</literal></expr>, <expr><literal type="string">"close all client connections if set to true. e.g. set maintain false; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"set charset_check [true|false]"</literal></expr>, <expr><literal type="string">"check the client charset is equal to the default charset"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show allow_ip|deny_ip"</literal></expr>, <expr><literal type="string">"show allow_ip|deny_ip rules. e.g. show allow_ip; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show connectionlist [num]"</literal></expr>, <expr><literal type="string">"show num connections. e.g. show connectionlist; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show maintain status"</literal></expr>, <expr><literal type="string">"e.g. show maintain status; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show variables [like '%pattern%']"</literal></expr>, <expr><literal type="string">"e.g. show variables like '%proxy%'; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sql log status"</literal></expr>, <expr><literal type="string">"show sql log status"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sql log start"</literal></expr>, <expr><literal type="string">"start sql log thread"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sql log stop"</literal></expr>, <expr><literal type="string">"stop sql log thread"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"stats get [item]"</literal></expr>, <expr><literal type="string">"show query statistics"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"stats reset"</literal></expr>, <expr><literal type="string">"reset query statistics"</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"update user_pwd set password='xx' where user='name'"</literal></expr>, <expr><literal type="string">"e.g. update user_pwd set password='123' where user='lede'; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"update app_user_pwd set password='xx' where user='name'"</literal></expr>, <expr><literal type="string">"e.g. update app_user_pwd set password='123' where user='lede'; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"update backends set (type|state)=x where [backend_ndx=index|address='ip:port']"</literal></expr>, <expr><literal type="string">"e.g. update backends set type = 'rw' where backend_ndx = 3; "</literal></expr>, <expr><name>ALL_HELP</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><name>void</name></type> <name>admin_select_help</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call admin_select_help"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>needed_type</name> <init>= <expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>has_shard_plugin</name></name></expr> ?</condition><then> <expr><name>SHARD_HELP</name></expr> </then><else>: <expr><name>RW_HELP</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_2_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"Command"</literal></expr></argument>, <argument><expr><literal type="string">"Description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sql_help_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pattern</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sql_help_entry_t</name></name><modifier>*</modifier></type> <name>e</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>sql_help_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>needed_type</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pattern</name> <init>= <expr><ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>pattern</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>pattern</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>desc</name> <init>= <expr><ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>desc</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>desc</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>APPEND_ROW_2_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_module_names</name><parameter_list>(<parameter><decl><type><name>chassis</name><modifier>*</modifier></type> <name>chas</name></decl></parameter>, <parameter><decl><type><name>GString</name><modifier>*</modifier></type> <name>plugin_names</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chas</name><operator>-&gt;</operator><name>modules</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_plugin</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>modules</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>plugin_names</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>plugin_names</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>admin_send_overview</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>chassis_private</name><modifier>*</modifier></type> <name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>config</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_3_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"PID"</literal></expr></argument>, <argument><expr><literal type="string">"Status"</literal></expr></argument>, <argument><expr><literal type="string">"Value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cetus_pid_t</name></type> <name>process_id</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>process_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"Cetus version"</literal></expr></argument>, <argument><expr><name>PLUGIN_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>start_time</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>chassis_epoch_to_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>startup_time</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"Startup time"</literal></expr></argument>, <argument><expr><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GString</name><modifier>*</modifier></type> <name>plugin_names</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>get_module_names</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>plugin_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"Loaded modules"</literal></expr></argument>, <argument><expr><name><name>plugin_names</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bsize</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf3</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>network_backends_idle_conns</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"Idle backend connections"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>network_backends_used_conns</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"Used backend connections"</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf3</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"Client connections"</literal></expr></argument>, <argument><expr><name>buf3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>query_stats_t</name><modifier>*</modifier></type> <name>stats</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>qcount</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>qcount</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>client_query</name><operator>.</operator><name>ro</name></name><operator>+</operator><name><name>stats</name><operator>-&gt;</operator><name>client_query</name><operator>.</operator><name>rw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"Query count"</literal></expr></argument>, <argument><expr><name>qcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>has_shard_plugin</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>xacount</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>xacount</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>xa_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"XA count"</literal></expr></argument>, <argument><expr><name>xacount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>qps</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>admin_stats_get_average</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>admin_stats</name></name></expr></argument>, <argument><expr><name>ADMIN_STATS_QPS</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><name>qps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"QPS (1min, 5min, 15min)"</literal></expr></argument>, <argument><expr><name>qps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tps</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>admin_stats_get_average</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>admin_stats</name></name></expr></argument>, <argument><expr><name>ADMIN_STATS_TPS</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><name>tps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"TPS (1min, 5min, 15min)"</literal></expr></argument>, <argument><expr><name>tps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>plugin_names</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
  DATETIME partitions parsed from SQL originally marked as STR type,
  change it to DATETIME here, release the string memory
*/</comment>
<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>convert_datetime_partitions</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>partitions</name></decl></parameter>, <parameter><decl><type><name>sharding_vdb_t</name> <modifier>*</modifier></type><name>vdb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_DATE</name>
        <operator>||</operator> <name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>SHARD_DATA_TYPE_DATETIME</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>sharding_partition_t</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>part</name><operator>-&gt;</operator><name>key_type</name></name> <operator>!=</operator> <name>SHARD_DATA_TYPE_STR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"convert_datetime: date time not string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>part</name><operator>-&gt;</operator><name>method</name></name> <operator>!=</operator> <name>SHARD_METHOD_RANGE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"convert_datetime: date time not using range method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>epoch</name> <init>= <expr><call><name>chassis_epoch_from_string</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>epoch</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Wrong sharding param &lt;datetime format:%s&gt;"</literal></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>FALSE</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_config_remote_sharding_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_config_remote_sharding_callback"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"update remote sharding timeout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_config_remote_sharding_callback over, wait:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>usec</name> <init>= <expr><operator>(</operator><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>-</operator> <literal type="number">1000</literal> <operator>*</operator> <name>sec</name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><name>sec</name></expr>, <expr><name>usec</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_config_remote_sharding_callback, timeout:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>options_success_flag</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"config remote sharding failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>send_admin_resp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call send_admin_resp over"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>admin_config_remote_sharding</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>chassis_config_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s call admin_config_remote_sharding"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>chassis</name><modifier>*</modifier></type> <name>chas</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>options_update_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>asynchronous_type</name></name> <operator>=</operator> <name>ASYNCHRONOUS_CONFIG_REMOTE_SHARD</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><name>admin_config_remote_sharding_callback</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ms_timeout</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>retries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>remote_config_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_waiting_resp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_create_vdb</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>partitions</name></decl></parameter>,
                      <parameter><decl><type><name><name>enum</name> <name>sharding_method_t</name></name></type> <name>method</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shard_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>sharding_vdb_t</name><modifier>*</modifier></type> <name>vdb</name> <init>= <expr><call><name>sharding_vdb_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>method</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name>key_type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vdb</name><operator>-&gt;</operator><name>logic_shard_num</name></name> <operator>=</operator> <name>shard_num</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_partition_t</name><modifier>*</modifier></type> <name>part</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* some verifcations */</comment>
    <decl_stmt><decl><type><name>sharding_partition_t</name><modifier>*</modifier></type> <name>part</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>method</name></name> <operator>!=</operator> <name><name>part</name><operator>-&gt;</operator><name>method</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"method mismatch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sharding_vdb_free</name><argument_list>(<argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>convert_datetime_partitions</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"date time format error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sharding_vdb_free</name><argument_list>(<argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>partitions</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <comment type="block">/* can't guess key_type of hash-vdb while parsing, assign it here */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>vdb</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>SHARD_METHOD_HASH</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name>key_type</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><call><name>sharding_vdb_is_valid</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr></argument>, <argument><expr><name>vdb</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>groups</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call>
        <operator>&amp;&amp;</operator> <call><name>shard_conf_add_vdb</name><argument_list>(<argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Admin: %s"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>shard_conf_write_json</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>admin_config_remote_sharding</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sharding_vdb_free</name><argument_list>(<argument><expr><name>vdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"failed to add vdb"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_create_sharded_table</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>schema</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vdb_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>sharding_table_t</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>sharding_table_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>vdb_id</name></name> <operator>=</operator> <name>vdb_id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>schema</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>pkey</name></name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><call><name>shard_conf_add_sharded_table</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Admin: %s"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>shard_conf_write_json</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>admin_config_remote_sharding</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"failed to add sharded table"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_select_vdb</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>ask_one_worker</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>vdb_list</name> <init>= <expr><call><name>shard_conf_get_vdb_list</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_3_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"VDB id"</literal></expr></argument>, <argument><expr><literal type="string">"Method"</literal></expr></argument>, <argument><expr><literal type="string">"Partitions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>vdb_list</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_vdb_t</name><modifier>*</modifier></type> <name>vdb</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>vdb_id</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>method</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s(%s)"</literal></expr></argument>,
                 <argument><expr><ternary><condition><expr><name><name>vdb</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>SHARD_METHOD_HASH</name></expr>?</condition><then><expr><literal type="string">"hash"</literal></expr></then><else>:<expr><literal type="string">"range"</literal></expr></else></ternary></expr></argument>,
                 <argument><expr><call><name>sharding_key_type_str</name><argument_list>(<argument><expr><name><name>vdb</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sharding_vdb_partitions_to_string</name><argument_list>(<argument><expr><name>vdb</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>partitions</name> <init>= <expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>row</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>vdb_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>partitions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_select_sharded_table</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>ask_one_worker</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>tables</name> <init>= <expr><call><name>shard_conf_get_tables</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_3_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"Table"</literal></expr></argument>, <argument><expr><literal type="string">"VDB id"</literal></expr></argument>, <argument><expr><literal type="string">"Key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>freelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>tables</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sharding_table_t</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>pkey</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>schema</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: table info is not complete"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>vdb_id</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>vdb_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>freelist</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>freelist</name></expr></argument>, <argument><expr><name>vdb_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>freelist</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>freelist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APPEND_ROW_3_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>vdb_id</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>pkey</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>freelist</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>freelist</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type> <name>save_setting</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name></decl></parameter>, <parameter><decl><type><name>gint</name> <modifier>*</modifier></type><name>effected_rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_OK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GKeyFile</name> <modifier>*</modifier></type><name>keyfile</name> <init>= <expr><call><name>g_key_file_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_key_file_set_list_separator</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>free_path</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>current_dir</name> <init>=  <expr><call><name>g_get_current_dir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>free_path</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_path</name></expr></argument>, <argument><expr><name>current_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>free_path</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_path</name></expr></argument>, <argument><expr><literal type="string">"/default.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>free_path</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>current_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>g_path_is_absolute</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>current_dir</name> <init>=  <expr><call><name>g_get_current_dir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>free_path</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_path</name></expr></argument>, <argument><expr><name>current_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>free_path</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>free_path</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_path</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>free_path</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>current_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>free_path</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>free_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* rename config file */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>new_file</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>new_file</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>new_file</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>new_file</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>new_file</name></expr></argument>, <argument><expr><literal type="string">".old"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>remove</name><argument_list>(<argument><expr><name><name>new_file</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"remove operate, filename:%s, errno:%d"</literal></expr></argument>,
                    <argument><expr><ternary><condition><expr><name><name>new_file</name><operator>-&gt;</operator><name>str</name></name> <operator>==</operator> <name>NULL</name></expr>?</condition><then> <expr><literal type="string">""</literal></expr></then><else>:<expr><name><name>new_file</name><operator>-&gt;</operator><name>str</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>, <argument><expr><name><name>new_file</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"rename operate failed, filename:%s, filename:%s, errno:%d"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr></then><else>:<expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name></expr></else></ternary><operator>)</operator></expr></argument>,
                    <argument><expr><operator>(</operator><ternary><condition><expr><name><name>new_file</name><operator>-&gt;</operator><name>str</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr></then><else>:<expr><name><name>new_file</name><operator>-&gt;</operator><name>str</name></name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>new_file</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>ASSIGN_OK</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* save new config */</comment>
        <expr_stmt><expr><operator>*</operator><name>effected_rows</name> <operator>=</operator> <call><name>chassis_options_save</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>gsize</name></type> <name>file_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>file_buf</name> <init>= <expr><call><name>g_key_file_to_data</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>gerr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>FALSE</name> <operator>==</operator> <call><name>g_file_set_contents</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>, <argument><expr><name>file_buf</name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SAVE_ERROR</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>chmod</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name></expr></argument>, <argument><expr><name>S_IRUSR</name><operator>|</operator><name>S_IWUSR</name><operator>|</operator><name>S_IRGRP</name><operator>|</operator><name>S_IWGRP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"remove operate failed, filename:%s, errno:%d"</literal></expr></argument>,
                        <argument><expr><operator>(</operator><ternary><condition><expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name> <operator>==</operator> <name>NULL</name></expr>?</condition><then> <expr><literal type="string">""</literal></expr></then><else>:<expr><name><name>srv</name><operator>-&gt;</operator><name>default_file</name></name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CHMOD_ERROR</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>file_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_key_file_free</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_result</name><parameter_list>(<parameter><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>gint</name></type> <name>ret</name></decl></parameter>, <parameter><decl><type><name>gint</name></type> <name>affected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>ASSIGN_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>affected</name></expr></argument>,
                                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SAVE_ERROR</name></expr>:</case> <expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"save file failed"</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><name>CHMOD_ERROR</name></expr>:</case> <expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"chmod file failed"</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><name>CHANGE_SAVE_ERROR</name></expr>:</case> <expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"change config and save file failed"</literal></expr>;</expr_stmt> <break>break;</break>
        <default>default:</default><expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"unknown error type"</literal></expr>;</expr_stmt> <break>break;</break>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1066</literal></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_save_settings</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>ask_one_worker</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>effected_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><call><name>save_setting</name><argument_list>(<argument><expr><name>srv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>effected_rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>send_result</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>effected_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_compatible_cmd</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_show_databases</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call admin_show_databases"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_1_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"Database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"cetus-admin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_create_single_table</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>schema</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_partition_mode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"no single table for partition"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>ok</name> <init>= <expr><call><name>shard_conf_add_single_table</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Admin: %s"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>chassis_config_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>config_manager</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>shard_conf_write_json</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CHASSIS_CONF_MYSQL</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>admin_config_remote_sharding</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SERVER_STATUS_AUTOCOMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"failed to add single table"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_select_single_table</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>ask_one_worker</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>tables</name> <init>= <expr><call><name>shard_conf_get_single_tables</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_2_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"Table"</literal></expr></argument>, <argument><expr><literal type="string">"Group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name><modifier>*</modifier></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>tables</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>single_table_t</name></name><modifier>*</modifier></type> <name>t</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_sql_log_start</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Unexpected error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>OFF</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"can not start sql log thread, because sql-log-switch = OFF"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>==</operator> <name>SQL_LOG_STOP</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_log_thread_start</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"sql log is running now"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_sql_log_stop</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Unexpected error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>==</operator> <name>SQL_LOG_START</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>=</operator> <name>SQL_LOG_UNKNOWN</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"sql log thread has been stopped"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_sql_log_status</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Unexpected error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>gchar</name><modifier>*</modifier></type> <name>pattern</name> <init>= <expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"%sql-log-%"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><call><name>admin_get_all_options</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_4_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"PID"</literal></expr></argument>, <argument><expr><literal type="string">"Variable_name"</literal></expr></argument>, <argument><expr><literal type="string">"Value"</literal></expr></argument>, <argument><expr><literal type="string">"Property"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cetus_pid_t</name></type> <name>process_id</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>process_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>freelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>options</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_option_t</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/* just support these for now */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sql_pattern_like</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name></type> <name>param</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>param</name><operator>.</operator><name>chas</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>param</name><operator>.</operator><name>opt_type</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>opt_property</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>show_hook</name></name> <operator>!=</operator> <name>NULL</name></expr>?</condition><then> <expr><call><name><name>opt</name><operator>-&gt;</operator><name>show_hook</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>freelist</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>freelist</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APPEND_ROW_4_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
                    <argument><expr><operator>(</operator><ternary><condition><expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>opt_property</name></name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="string">"Dynamic"</literal></expr> </then><else>: <expr><literal type="string">"Static"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>APPEND_ROW_4_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"sql-log-state"</literal></expr></argument>, 
            <argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>==</operator> <name>SQL_LOG_START</name></expr> ?</condition><then> <expr><literal type="string">"running"</literal></expr></then><else>: <expr><literal type="string">"stopped"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"Internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>cached</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>fifo</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_action</name></name> <operator>==</operator> <name>SQL_LOG_START</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cached</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>fifo</name><operator>-&gt;</operator><name>in</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>fifo</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>cached</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_4_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"sql-log-cached"</literal></expr></argument>, <argument><expr><name>cached</name></expr></argument>, <argument><expr><literal type="string">"Internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>cursize</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_cursize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_4_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"sql-log-cursize"</literal></expr></argument>, <argument><expr><name>cursize</name></expr></argument>, <argument><expr><literal type="string">"Internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>APPEND_ROW_4_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"sql-log-fullname"</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_fullname</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"NULL"</literal></expr> </then><else>: <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_fullname</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"Internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>freelist</name></expr></argument>, <argument><expr><name>g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>cached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>cursize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_comment_handle</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_select_version_comment</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MAKE_FIELD_DEF_1_COL</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="string">"@@version_comment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>g_ptr_array_new_with_free_func</name><argument_list>(
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>APPEND_ROW_1_COL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"Cetus proxy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>admin_get_value_by_key</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><call><name>admin_get_all_options</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>options</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_option_t</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name></type> <name>param</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>param</name><operator>.</operator><name>chas</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>param</name><operator>.</operator><name>opt_type</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>opt_property</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>show_hook</name></name> <operator>!=</operator> <name>NULL</name></expr>?</condition><then> <expr><call><name><name>opt</name><operator>-&gt;</operator><name>show_hook</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>value</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
