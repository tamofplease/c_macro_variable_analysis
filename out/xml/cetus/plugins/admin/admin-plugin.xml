<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/plugins/admin/admin-plugin.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_GNU_SOURCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"admin-plugin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-users.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-variable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"character-set.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-monitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server-session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys-pedantic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options-utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-channel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-process-cycle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resultset_merge.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-acl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"admin-lexer.l.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"admin-parser.y.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"admin-commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"admin-stats.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>admin_config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* get config-&gt;has_shard_plugin */</comment>
<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>has_shard_plugin</name><parameter_list>(<parameter><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>modules</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>modules</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><name><name>modules</name><operator>-&gt;</operator><name>pdata</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"shard"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* judge if client_ip is in allowed or denied ip range*/</comment>
<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>ip_range_lookup</name><parameter_list>(<parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>ip_table</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>client_ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>ip_range</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>wildcard</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>ip_range_table</name> <init>= <expr><call><name>g_hash_table_get_keys</name><argument_list>(<argument><expr><name>ip_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>ip_range_table</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%64[0-9.].%s"</literal></expr></argument>, <argument><expr><name>ip_range</name></expr></argument>, <argument><expr><name>wildcard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>strcasestr</name><argument_list>(<argument><expr><name>client_ip</name></expr></argument>, <argument><expr><name>ip_range</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>pos</name> <operator>==</operator> <name>client_ip</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TRUE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>


<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>server_con_init</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_auth_challenge</name> <modifier>*</modifier></type><name>challenge</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>challenge</name> <operator>=</operator> <call><name>network_mysqld_auth_challenge_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>server_version_str</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"5.7 admin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>server_version</name></name>     <operator>=</operator> <literal type="number">50700</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>charset</name></name>            <operator>=</operator> <call><name>charset_get_number</name><argument_list>(<argument><expr><literal type="string">"utf8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>=</operator> <name>CETUS_DEFAULT_FLAGS</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>CLIENT_TRANSACTIONS</name><operator>)</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>|=</operator> <name>CLIENT_SSL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>server_status</name></name>      <operator>=</operator> <name>SERVER_STATUS_AUTOCOMMIT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>challenge</name><operator>-&gt;</operator><name>thread_id</name></name>          <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* generate a random challenge */</comment>
    <expr_stmt><expr><call><name>network_mysqld_auth_challenge_set_challenge</name><argument_list>(<argument><expr><name>challenge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_append_auth_challenge</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>challenge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name></name> <operator>=</operator> <name>challenge</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_HANDSHAKE</name></expr>;</expr_stmt>

    <comment type="block">/* status code of parser */</comment>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>server_read_auth</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>send_sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_auth_response</name> <modifier>*</modifier></type><name>auth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>excepted_response</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>hashed_pwd</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>recv_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>send_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: packet.data is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* decode the packet */</comment>
    <expr_stmt><expr><call><name>network_mysqld_proto_skip_network_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>auth</name> <operator>=</operator> <call><name>network_mysqld_auth_response_new</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>capabilities</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_get_auth_response</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_auth_response_free</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PROTOCOL_41</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <comment type="block">/* should use packet-id 0 */</comment>
            <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>,
                                        <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"\xff\xd7\x07"</literal> <literal type="string">"4.0 protocol is not supported"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_auth_response_free</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name><name>auth</name><operator>-&gt;</operator><name>ssl_request</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>network_ssl_create_connection</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>NETWORK_SSL_SERVER</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"SSL server failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1045</literal></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_auth_response_free</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><call><name>g_queue_pop_tail</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_FRONT_SSL_HANDSHAKE</name></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <name>auth</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>auth</name><operator>-&gt;</operator><name>client_capabilities</name></name> <operator>&amp;</operator> <name>CLIENT_PLUGIN_AUTH</name><operator>)</operator>
            <operator>&amp;&amp;</operator> <operator>(</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"mysql_native_password"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>network_mysqld_proto_append_auth_switch</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"mysql_native_password"</literal></expr></argument>,
                <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_AUTH_RESULT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>auth_result_state</name></name> <operator>=</operator> <name>AUTH_SWITCH</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><call><name>g_queue_pop_tail</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* auth switch response */</comment>
        <decl_stmt><decl><type><name>gsize</name></type> <name>auth_data_len</name> <init>= <expr><name><name>packet</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>NET_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>auth_data</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>auth_data_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_get_gstr_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>auth_data_len</name></expr></argument>, <argument><expr><name>auth_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>auth_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>auth_data</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>auth</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>client_addr_arr</name> <init>= <expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_ip</name> <init>= <expr><name><name>client_addr_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_username</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>can_pass</name> <init>= <expr><call><name>cetus_acl_verify</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>client_username</name></expr></argument>, <argument><expr><name>client_ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>can_pass</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip_err_msg</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"Access denied for user '%s@%s'"</literal></expr></argument>,
                                           <argument><expr><name>client_username</name></expr></argument>, <argument><expr><name>client_ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name>recv_sock</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>ip_err_msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1045</literal></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>ip_err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>client_addr_arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>client_addr_arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check if the password matches */</comment>
    <expr_stmt><expr><name>excepted_response</name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hashed_pwd</name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strleq</name><argument_list>(<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>con</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>admin_username</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>admin_username</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name>send_sock</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"unknown user"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1045</literal></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* close the connection after we have sent this packet */</comment>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>network_mysqld_proto_password_hash</name><argument_list>(<argument><expr><name>hashed_pwd</name></expr></argument>,
                                                  <argument><expr><name><name>con</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>admin_password</name></name></expr></argument>,
                                                  <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>admin_password</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>network_mysqld_proto_password_scramble</name><argument_list>(<argument><expr><name>excepted_response</name></expr></argument>,
                                                      <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name>hashed_pwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name>send_sock</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"scrambling failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1045</literal></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* close the connection after we have sent this packet */</comment>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>g_string_equal</name><argument_list>(<argument><expr><name>excepted_response</name></expr></argument>, <argument><expr><name><name>auth</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name>send_sock</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"password doesn't match"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1045</literal></expr></argument>, <argument><expr><literal type="string">"28000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* close the connection after we have sent this packet */</comment>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name>send_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_AUTH_RESULT</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>hashed_pwd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>excepted_response</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><call><name>g_queue_pop_tail</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: client-recv-queue-len = %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>adminParserAlloc</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallocProc</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>adminParserFree</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freeProc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>adminParser</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yymajor</name></decl></parameter>, <parameter><decl><type><name>token_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>adminParserTrace</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>network_read_sql_resp</name><parameter_list>(<parameter><decl><type><name>int</name> <name>G_GNUC_UNUSED</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: network_read_sql_resp, fd:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cetus_channel_t</name></type>  <name>ch</name></decl>;</decl_stmt>

    <comment type="block">/* read header first */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>cetus_read_channel</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cetus_channel_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cetus_read_channel channel, fd:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NETWORK_SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>--</operator></expr>;</expr_stmt>
        <if_stmt><if>if  <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>socketpair_mutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: channel command: %u, need to read servers:%d"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>command</name></name> <operator>==</operator> <name>CETUS_CMD_ADMIN_RESP</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>--</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type>  <name>unread_len</name> <init>= <expr><name><name>ch</name><operator>.</operator><name>admin_sql_resp_len</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>raw_packet</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>unread_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>raw_packet</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

        <do>do <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>unread_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: resp_len:%d, len:%d, fd:%d"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>unread_len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>unread_len</name> <operator>=</operator> <name>unread_len</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: broken socketpair, resp_len:%d, len:%d, fd:%d"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>unread_len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: resp_len:%d, len:%d, fd:%d"</literal></expr></argument>,
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>unread_len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> while <condition>(<expr><name>unread_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

        <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>network_socket_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_queue_push_tail</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>recv_queue_raw</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>raw_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>recv_queue_raw</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name><name>ch</name><operator>.</operator><name>admin_sql_resp_len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>raw_packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>ch</name><operator>.</operator><name>admin_sql_resp_len</name></name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>network_socket_retval_t</name></type> <name>ret</name> <init>= <expr><call><name>network_mysqld_con_get_packet</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>ret</name> <operator>==</operator> <name>NETWORK_SOCKET_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>is_finished</name> <init>= <expr><call><name>network_mysqld_proto_get_query_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>is_finished</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: read finished"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_mysqld_con_get_packet</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>=</operator> <call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: not admin sql response command"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>socketpair_mutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>socketpair_mutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>recv_queues</name> <init>= <expr><call><name>g_ptr_array_sized_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* get all participants' receive queues */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>servers</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>result_merge_t</name></type> <name>result</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>RM_SUCCESS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>detail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call admin_resultset_merge"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>admin_resultset_merge</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call admin_resultset_merge end"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>network_socket_free</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>recv_queues</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> 
<name>int</name></type> <name>construct_channel_info</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>cycle</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call construct_channel_info, cetus_process_slot:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cetus_process_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cetus_channel_t</name></type>  <name>ch</name></decl>;</decl_stmt> 
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cetus_channel_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>CETUS_CMD_ADMIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name>cetus_pid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name> <operator>=</operator> <name>cetus_process_slot</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>MAX_ADMIN_SQL_LEN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:admin sql is too long:%d, sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"admin sql is too long"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ch</name><operator>.</operator><name>admin_sql</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:cetus_last_process:%d, ch admin sql:%s"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>cetus_last_process</name></expr></argument>, <argument><expr><name><name>ch</name><operator>.</operator><name>admin_sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>ask_the_given_worker</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>process_index</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pass sql info to s:%i pid:%d to:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                    <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>cetus_processes</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <comment type="block">/* TODO: AGAIN */</comment>
            <expr_stmt><expr><call><name>cetus_write_channel</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cetus_channel_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>cetus_processes</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:fd:%d for network_read_sql_resp"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cetus_processes</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>event</name><operator>)</operator></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><name>network_read_sql_resp</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cetus_processes</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>event</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:con num_read_pending:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><name>cetus_last_process</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pass sql info to s:%i pid:%d to:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                    <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ch</name><operator>.</operator><name>basics</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                 <comment type="block">/* TODO: AGAIN */</comment>
                <expr_stmt><expr><call><name>cetus_write_channel</name><argument_list>(<argument><expr><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent_child_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cetus_channel_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:fd:%d for network_read_sql_resp"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>event</name><operator>)</operator></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><name>network_read_sql_resp</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cetus_processes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>event</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name><operator>++</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>ask_one_worker</name></name></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:fd is not valid:%d, num:%d, pending:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:con num_read_pending:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>num_read_pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>network_send_admin_sql_to_workers</name><parameter_list>(<parameter><decl><type><name>int</name> <name>G_GNUC_UNUSED</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if  <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>socketpair_mutex</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>network_send_admin_sql_to_workers</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>socketpair_mutex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>construct_channel_info</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>socketpair_mutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_handle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: network_send_admin_sql_to_workers, fd:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>visit_parser</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
    <expr_stmt><expr><call><name>admin_clear_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* init lexer &amp; parser */</comment>
    <decl_stmt><decl><type><name>yyscan_t</name></type> <name>scanner</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>adminyylex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>YY_BUFFER_STATE</name></type> <name>buf_state</name> <init>= <expr><call><name>adminyy_scan_string</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>parser</name> <init>= <expr><call><name>adminParserAlloc</name><argument_list>(<argument><expr><name>malloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    adminParserTrace(stdout, "---ParserTrace: ");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>last_parsed_token</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>token_t</name></type> <name>token</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>adminyylex</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>token</name><operator>.</operator><name>z</name></name> <operator>=</operator> <call><name>adminyyget_text</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>token</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>adminyyget_leng</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>adminParser</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>last_parsed_token</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>admin_get_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><call><name>admin_get_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>last_parsed_token</name> <operator>!=</operator> <name>TK_SEMI</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>adminParser</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>TK_SEMI</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>adminParser</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>admin_get_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:syntax error"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
           <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"syntax error, 'select help' for usage"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* free lexer &amp; parser */</comment>
    <expr_stmt><expr><call><name>adminParserFree</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>adminyy_delete_buffer</name><argument_list>(<argument><expr><name>buf_state</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>adminyylex_destroy</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>execute_admin_query</argument>)</argument_list></macro>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>config</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name>admin_config</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call execute_admin_query:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>visit_parser</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>network_mysqld_stmt_ret</name></type> <name>admin_process_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name>   <modifier>*</modifier></type><name>chunk</name>  <init>= <expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>NET_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* packet too short */</comment>
        <return>return <expr><name>PROXY_SEND_QUERY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>guchar</name></type> <name>command</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>COM_QUIT</name> <operator>==</operator> <name>command</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>PROXY_CLIENT_QUIT</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>COM_QUERY</name> <operator>==</operator> <name>command</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* we need some more data after the COM_QUERY */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROXY_SEND_QUERY</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <operator>(</operator><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
                        <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <operator>(</operator><name>NET_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:admin sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>ask_one_worker</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>ask_the_given_worker</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>admin_read_merge</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>candidate_config_changed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>visit_parser</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>direct_answer</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if  <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>socketpair_mutex</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EV_TIMEOUT</name></expr></argument>, <argument><expr><name>network_send_admin_sql_to_workers</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>PROXY_WAIT_QUERY_RESULT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>socketpair_mutex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>construct_channel_info</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>socketpair_mutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>PROXY_WAIT_QUERY_RESULT</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * gets called after a query has been read
 */</comment>
<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>server_read_query</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call server_read_query"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_stmt_ret</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>req_recv_time</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_admin_client</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>worker_processes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_processed_by_subordinate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>recv_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: client-recv-queue-len = %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                  <argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>admin_process_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PROXY_WAIT_QUERY_RESULT</name></expr>:</case>
        <return>return <expr><name>NETWORK_SOCKET_WAIT_FOR_EVENT</name></expr>;</return>
    <case>case <expr><name>PROXY_NO_DECISION</name></expr>:</case>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
            <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"request error, \"select * from help\" for usage"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>PROXY_SEND_RESULT</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>PROXY_CLIENT_QUIT</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLIENT_QUIT</name></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
            <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"network packet error, closing connection"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><call><name>g_queue_pop_tail</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>server_timeout</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_ERROR</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call server_timeout"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/**
 * cleanup the admin specific data on the current connection
 *
 * @return NETWORK_SOCKET_SUCCESS
 */</comment>
<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>admin_disconnect_client</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>


<function><type><specifier>static</specifier> <name>int</name></type> <name>network_mysqld_server_connection_init</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_init</name></name>             <operator>=</operator> <name>server_con_init</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_auth</name></name>        <operator>=</operator> <name>server_read_auth</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_query</name></name>       <operator>=</operator> <name>server_read_query</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_timeout</name></name>          <operator>=</operator> <name>server_timeout</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_exectute_sql</name></name>     <operator>=</operator> <name>execute_admin_query</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_cleanup</name></name>          <operator>=</operator> <name>admin_disconnect_client</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>chassis_plugin_config</name> <modifier>*</modifier></type><name>network_mysqld_admin_plugin_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>chassis_plugin_config</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>config</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>network_mysqld_admin_plugin_free</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* the socket will be freed by network_mysqld_free() */</comment>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_config_unregister_service</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>admin_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>admin_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>allow_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>deny_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>admin_stats</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>admin_stats_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>admin_stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_admin_address</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_admin_username</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>admin_username</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>config</name><operator>-&gt;</operator><name>admin_username</name></name></expr></then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>admin_username</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>admin_username</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type>
<name>show_admin_password</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name><modifier>*</modifier></type> <name>hashed_pwd</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>network_mysqld_proto_password_hash</name><argument_list>(<argument><expr><name>hashed_pwd</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>admin_password</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pwdhex</name> <init>= <expr><call><name>g_malloc0</name><argument_list>(<argument><expr><name><name>hashed_pwd</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bytes_to_hex_str</name><argument_list>(<argument><expr><name><name>hashed_pwd</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>hashed_pwd</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>pwdhex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>hashed_pwd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>pwdhex</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>admin_password</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * add the proxy specific options to the cmdline interface
 */</comment>
<function><type><specifier>static</specifier> <name>GList</name> <modifier>*</modifier></type>
<name>network_mysqld_admin_plugin_get_options</name><parameter_list>(<parameter><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis_options_t</name></type> <name>opts</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"admin-address"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>address</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"listening address:port of the admin-server (default: :4041)"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;host:port&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_admin_address</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"admin-username"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>admin_username</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"username to allow to log in"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_admin_username</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"admin-password"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>admin_password</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"password to allow to log in"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_admin_password</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"admin-allow-ip"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>allow_ip</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"ip address allowed to connect to admin"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"admin-deny-ip"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>deny_ip</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"ip address denyed to connect to admin"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>opts</name><operator>.</operator><name>options</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CMD_OR_PATH_LEN</name></cpp:macro> <cpp:value>108</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_unix_socket_if_stale</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>command</name><index>[<expr><name>MAX_CMD_OR_PATH_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_CMD_OR_PATH_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"netstat -npl|grep '%s'"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>proxy_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>popen</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition>  <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>result</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:call unlink"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* no matter if it does not exist */</comment>
            <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>unix_socket_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_allowed_running</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_CMD_OR_PATH_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>proxy_address</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>MAX_CMD_OR_PATH_LEN</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:ip:port string is too long"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> ,<argument><expr><name>MAX_CMD_OR_PATH_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"/tmp/%s"</literal></expr></argument>, <argument><expr><name><name>chas</name><operator>-&gt;</operator><name>proxy_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>unix_socket_name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>remove_unix_socket_if_stale</name><argument_list>(<argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:create socket error"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>


    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type>  <name>un</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>un</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>un</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name>  <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>unix_socket_name</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>un</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:already running"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * init the plugin with the parsed config
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>network_mysqld_admin_plugin_apply_config</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>,
        <parameter><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:close listen socket"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>ev_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_socket_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:call network_mysqld_admin_plugin_apply_config"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>listen_sock</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">":4041"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>proxy_address</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"set admin address for chassis:%s"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_REUSEPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>enable_admin_listen</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>check_allowed_running</name><argument_list>(<argument><expr><name>chas</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>admin_username</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: --admin-username needs to be set"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>admin_password</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: --admin-password needs to be set"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>admin_password</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: --admin-password cannot be empty"</literal></expr></argument>,
                <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>allow_ip</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_acl_add_rules</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>ACL_WHITELIST</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>allow_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>deny_ip</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_acl_add_rules</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>ACL_BLACKLIST</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>deny_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>network_mysqld_con_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_add_connection</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * create a connection handle for the listen socket
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>enable_admin_listen</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:enable_admin_listen true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name></name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>listen_sock</name> <operator>=</operator> <call><name>network_socket_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>listen_sock</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:before set hooks"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * set the plugin hooks as we want to apply them to the new
     * connections too later
     */</comment>
    <expr_stmt><expr><call><name>network_mysqld_server_connection_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:after set hooks"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>chas</name><operator>-&gt;</operator><name>enable_admin_listen</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* FIXME: network_socket_set_address() */</comment>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>network_address_set_address</name><argument_list>(<argument><expr><name><name>listen_sock</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>,
                    <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>network_socket_bind</name><argument_list>(<argument><expr><name>listen_sock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" format="doxygen">/**
         * call network_mysqld_con_accept() with this connection when we are done
         */</comment>
        <expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>listen_sock</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>listen_sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
                <argument><expr><name>EV_READ</name><operator>|</operator><name>EV_PERSIST</name></expr></argument>, <argument><expr><name>network_mysqld_con_accept</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>chassis_event_add</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>listen_sock</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>chas</name><operator>-&gt;</operator><name>admin_plugin</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>plugins</name></name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>has_shard_plugin</name></name> <operator>=</operator> <call><name>has_shard_plugin</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>modules</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_config_register_service</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><literal type="string">"admin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>admin_stats</name></name> <operator>=</operator> <call><name>admin_stats_init</name><argument_list>(<argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>admin_config</name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 
<name>network_mysqld_admin_plugin_stop_listening</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>,
        <parameter><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:call network_mysqld_admin_plugin_stop_listening"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:close listen socket:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_socket_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>network_mysqld_con</name><modifier>*</modifier></type> <name>con</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>cons</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:close socket:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_socket_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>G_MODULE_EXPORT</name> <name>int</name></type> <name>plugin_init</name><parameter_list>(<parameter><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>magic</name></name>        <operator>=</operator> <name>CHASSIS_PLUGIN_MAGIC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name>         <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"admin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>version</name></name>		<operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>PLUGIN_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>init</name></name>         <operator>=</operator> <name>network_mysqld_admin_plugin_new</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_options</name></name>  <operator>=</operator> <name>network_mysqld_admin_plugin_get_options</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apply_config</name></name> <operator>=</operator> <name>network_mysqld_admin_plugin_apply_config</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stop_listening</name></name> <operator>=</operator> <name>network_mysqld_admin_plugin_stop_listening</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>destroy</name></name>      <operator>=</operator> <name>network_mysqld_admin_plugin_free</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
