<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/plugins/admin/admin-stats.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"admin-stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"admin-plugin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>

<comment type="block">/* ring buffer from: https://github.com/AndersKaloer/Ring-Buffer */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RING_BUFFER_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define> <comment type="block">/* must be power of 2, !! index [0, 126] !!*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RING_BUFFER_MASK</name></cpp:macro> <cpp:value>(RING_BUFFER_SIZE-1)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>ring_buffer_t</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>head</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tail</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint64</name></type> <name><name>buffer</name><index>[<expr><name>RING_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ring_buffer_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ring_buffer_add</name><parameter_list>(<parameter><decl><type><name>ring_buffer_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>guint64</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>head</name></name> <operator>-</operator> <name><name>buffer</name><operator>-&gt;</operator><name>tail</name></name><operator>)</operator> <operator>&amp;</operator> <name>RING_BUFFER_MASK</name><operator>)</operator> <operator>==</operator> <name>RING_BUFFER_MASK</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>tail</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>RING_BUFFER_MASK</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>buffer</name><operator>-&gt;</operator><name>head</name></name></expr>]</index></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>RING_BUFFER_MASK</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>guint64</name></type> <name>ring_buffer_get</name><parameter_list>(<parameter><decl><type><name>ring_buffer_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>head</name></name> <operator>-</operator> <name><name>buffer</name><operator>-&gt;</operator><name>tail</name></name><operator>)</operator> <operator>&amp;</operator> <name>RING_BUFFER_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>data_index</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>tail</name></name> <operator>+</operator> <name>index</name><operator>)</operator> <operator>&amp;</operator> <name>RING_BUFFER_MASK</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>data_index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<struct>struct <name>admin_stats_t</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> <name>sampling_timer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name><modifier>*</modifier></type> <name>chas</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ring_buffer_t</name></type> <name>sql_count_ring</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ring_buffer_t</name></type> <name>trx_count_ring</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* sample interval is 10-sec, 127 samples takes about 21-min */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sql_stats_sampling_func</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>admin_stats_t</name><modifier>*</modifier></type> <name>a</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>query_stats_t</name><modifier>*</modifier></type> <name>stats</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>chas</name><operator>-&gt;</operator><name>query_stats</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ring_buffer_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>sql_count_ring</name></name></expr></argument>,
                    <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>client_query</name><operator>.</operator><name>ro</name></name> <operator>+</operator> <name><name>stats</name><operator>-&gt;</operator><name>client_query</name><operator>.</operator><name>rw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ring_buffer_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>trx_count_ring</name></name></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>xa_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>ten_sec</name> <init>= <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <comment type="block">/* EV_PERSIST not work for libevent1.4, re-activate timer each time */</comment>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>chas</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>sampling_timer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ten_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>admin_stats_t</name><modifier>*</modifier></type> <name>admin_stats_init</name><parameter_list>(<parameter><decl><type><name>chassis</name><modifier>*</modifier></type> <name>chas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>admin_stats_t</name><modifier>*</modifier></type> <name>stats</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr><name>admin_stats_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>chas</name></name> <operator>=</operator> <name>chas</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>sql_count_ring</name><operator>.</operator><name>head</name></name> <operator>=</operator> <literal type="number">126</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>trx_count_ring</name><operator>.</operator><name>head</name></name> <operator>=</operator> <literal type="number">126</literal></expr>;</expr_stmt>

    <comment type="block">/* EV_PERSIST not working for libevent 1.4 */</comment>
    <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>sampling_timer</name></name></expr></argument>, <argument><expr><name>sql_stats_sampling_func</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>ten_sec</name> <init>= <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>sampling_timer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ten_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>stats</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_stats_free</name><parameter_list>(<parameter><decl><type><name>admin_stats_t</name><modifier>*</modifier></type> <name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>evtimer_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>sampling_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>admin_stats_get_average</name><parameter_list>(<parameter><decl><type><name>admin_stats_t</name><modifier>*</modifier></type> <name>stats</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ring_buffer_t</name><modifier>*</modifier></type> <name>ring</name> <init>= <expr><ternary><condition><expr><name>type</name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>sql_count_ring</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>trx_count_ring</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOST_RECENT</name> <init>= <expr><literal type="number">126</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint64</name></type> <name>c_now</name> <init>= <expr><call><name>ring_buffer_get</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><name>MOST_RECENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint64</name></type> <name>c_1min</name> <init>= <expr><call><name>ring_buffer_get</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><name>MOST_RECENT</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint64</name></type> <name>c_5min</name> <init>= <expr><call><name>ring_buffer_get</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><name>MOST_RECENT</name> <operator>-</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>guint64</name></type> <name>c_15min</name> <init>= <expr><call><name>ring_buffer_get</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><name>MOST_RECENT</name> <operator>-</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%.2f, %.2f, %.2f"</literal></expr></argument>,
             <argument><expr><operator>(</operator><name>c_now</name><operator>-</operator><name>c_1min</name><operator>)</operator><operator>/</operator><literal type="number">60.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>c_now</name><operator>-</operator><name>c_5min</name><operator>)</operator><operator>/</operator><literal type="number">300.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>c_now</name><operator>-</operator><name>c_15min</name><operator>)</operator><operator>/</operator><literal type="number">900.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
