<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/cetus/plugins/proxy/proxy-plugin.c"><comment type="block">/* $%BEGINLICENSE%$
 Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; version 2 of the
 License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 02110-1301  USA

 $%ENDLICENSE%$ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_FILIO_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/filio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_SOCKLEN_T</name></cpp:ifndef>
<typedef>typedef <type><name>int</name></type> <name>socklen_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysqld_error.h&gt;</cpp:file></cpp:include> <comment type="block" format="doxygen">/** for ER_UNKNOWN_ERROR */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-mysqld-packet.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-conn-pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-conn-pool-wrap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys-pedantic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-injection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-backend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql-filter-variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glib-ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-timings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"character-set.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-users.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plugin-common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-options-utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chassis-sql-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cetus-acl.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PLUGIN_VERSION</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHASSIS_BUILD_TAG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLUGIN_VERSION</name></cpp:macro> <cpp:value>CHASSIS_BUILD_TAG</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLUGIN_VERSION</name></cpp:macro> <cpp:value>PACKAGE_VERSION</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{
    <decl><name>PROXY_QUEUE_ADD_PREPEND</name></decl>,
    <decl><name>PROXY_QUEUE_ADD_APPEND</name></decl>
}</block></enum></type> <name>proxy_queue_add_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
    <decl><name>INJ_ID_COM_DEFAULT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>INJ_ID_CHANGE_DB</name></decl>,
    <decl><name>INJ_ID_COM_QUERY</name></decl>,
    <decl><name>INJ_ID_COM_STMT_PREPARE</name></decl>,
    <decl><name>INJ_ID_CHAR_SET_CLT</name></decl>,
    <decl><name>INJ_ID_CHAR_SET_CONN</name></decl>,
    <decl><name>INJ_ID_CHAR_SET_RESULTS</name></decl>,
    <decl><name>INJ_ID_SET_NAMES</name></decl>,
    <decl><name>INJ_ID_CHANGE_MULTI_STMT</name></decl>,
    <decl><name>INJ_ID_CHANGE_SQL_MODE</name></decl>,
    <decl><name>INJ_ID_CHANGE_USER</name></decl>,
    <decl><name>INJ_ID_RESET_CONNECTION</name></decl>,
}</block></enum></type> <name>proxy_inj_id_t</name>;</typedef>

<struct>struct <name>chassis_plugin_config</name> <block>{
    <comment type="block" format="doxygen">/**&lt; listening address of the proxy */</comment>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>address</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**&lt; read-write backends */</comment>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>backend_addresses</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**&lt; read-only  backends */</comment>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>read_only_backend_addresses</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>listen_con</name></decl>;</decl_stmt>

    <comment type="block">/* exposed in the config as double */</comment>
    <decl_stmt><decl><type><name>gdouble</name></type> <name>connect_timeout_dbl</name></decl>;</decl_stmt>
    <comment type="block">/* exposed in the config as double */</comment>
    <decl_stmt><decl><type><name>gdouble</name></type> <name>read_timeout_dbl</name></decl>;</decl_stmt>
    <comment type="block">/* exposed in the config as double */</comment>
    <decl_stmt><decl><type><name>gdouble</name></type> <name>write_timeout_dbl</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>allow_ip</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>deny_ip</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>read_master_percentage</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>gboolean</name></type> <name>proxy_get_backend_ndx</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>force_slave</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>g_fast_stream_hexdump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>hex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>_s</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>hex</name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><literal type="string">"[%04"</literal> <name>G_GSIZE_MODIFIER</name> <literal type="string">"x]  "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"  "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>g_ascii_isprint</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"\n  "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">16</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* fill up the line */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>-</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>-</operator> <operator>(</operator><name>len</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>g_ascii_isprint</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"(%s) %"</literal> <name>G_GSIZE_FORMAT</name> <literal type="string">" bytes:\n  %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>hex</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * handle event-timeouts on the different states
 *
 * @note con-&gt;state points to the current state
 *
 */</comment>
<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_timeout</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>current_time</name></name> <operator>-</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>update_time</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idle_timeout</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>client_idle_timeout</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>idle_timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>incomplete_tran_idle_timeout</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>maintain_close_mode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>idle_timeout</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>maintained_client_idle_timeout</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:call proxy_timeout, idle timeout:%d, diff:%d"</literal></expr></argument>, 
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>idle_timeout</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ST_READ_QUERY</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>idle_timeout</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>network_pool_add_conn</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:conn to pool failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:conn returned to pool"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:state is set ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><name>ST_READ_QUERY_RESULT</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>resultset_is_needed</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>candidate_fast_streamed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s, fast_stream_last_exec_index:%d, need more:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, 
                        <argument><expr><name><name>con</name><operator>-&gt;</operator><name>fast_stream_last_exec_index</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>fast_stream_need_more</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s, eof_last_met:%d, eof_met_cnt:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, 
                        <argument><expr><name><name>con</name><operator>-&gt;</operator><name>eof_last_met</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>eof_met_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s, partically_record_left_cnt:%d, analysis_next_pos:%d, cur_resp_len:%d"</literal></expr></argument>, 
                        <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>partically_record_left_cnt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>analysis_next_pos</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>cur_resp_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s, last_payload_len:%d, last_record_payload_len:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, 
                        <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_payload_len</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_record_payload_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_fast_stream_hexdump</name><argument_list>(<argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>record_last_payload</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_record_payload_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p read query result timeout, sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
                    <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Read query result timeout"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_ABORTING_CONNECTION</name></expr></argument>, <argument><expr><literal type="string">"29001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_ERROR</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    <default>default:</default>
        <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <name>idle_timeout</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_ERROR</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>store_server_ndx_in_prepared_resp</name><parameter_list>(<parameter><decl><type><name>proxy_resultset_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>result_queue</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>       <comment type="block">/* skip the network-header */</comment>
    <expr_stmt><expr><name><name>s</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>network_mysqld_proto_change_stmt_id_from_ok_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>network_mysqld_stmt_ret</name></type>
<name>proxy_c_read_query_result</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>send_sock</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>injection</name> <modifier>*</modifier></type><name>inj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_stmt_ret</name></type> <name>ret</name> <init>= <expr><name>PROXY_NO_DECISION</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>PROXY_NO_DECISION</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>inj</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>result_queue</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</expr_stmt>

    <comment type="block">/* fields, rows */</comment>
    <decl_stmt><decl><type><name>proxy_resultset_t</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>proxy_resultset_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>inj</name><operator>-&gt;</operator><name>resultset_is_needed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>inj</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>binary_encoded</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>result_queue</name></name> <operator>=</operator> <name><name>inj</name><operator>-&gt;</operator><name>result_queue</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>qstat</name></name> <operator>=</operator> <name><name>inj</name><operator>-&gt;</operator><name>qstat</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <name><name>inj</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>inj</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>is_continue</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check inj id:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>inj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>inj</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>INJ_ID_COM_DEFAULT</name></expr>:</case>
    <case>case <expr><name>INJ_ID_COM_QUERY</name></expr>:</case>
    <case>case <expr><name>INJ_ID_COM_STMT_PREPARE</name></expr>:</case>
        <expr_stmt><expr><name>is_continue</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>INJ_ID_RESET_CONNECTION</name></expr>:</case>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PROXY_IGNORE_RESULT</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>INJ_ID_CHANGE_USER</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_changed_user_failed</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: change user failed for user '%s'@'%s'"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                      <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
                                               <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Access denied for serving requests"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_ACCESS_DENIED_ERROR</name></expr></argument>,
                                               <argument><expr><literal type="string">"29001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PROXY_NO_DECISION</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PROXY_IGNORE_RESULT</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><name>INJ_ID_CHANGE_DB</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>query</name> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>==</operator> <name>MYSQLD_PACKET_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set server db to client db for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PROXY_IGNORE_RESULT</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PROXY_IGNORE_RESULT</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name><name>inj</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;</operator> <name>INJ_ID_COM_STMT_PREPARE</name> <operator>&amp;&amp;</operator> <name><name>inj</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <name>INJ_ID_RESET_CONNECTION</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>query_status</name></name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_err_met</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_continue</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>query_status</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_changed_user_when_quit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check is_in_transaction here:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>inj</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>INJ_ID_COM_STMT_PREPARE</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>server_status</name></name> <operator>&amp;</operator> <name>SERVER_STATUS_IN_TRANS</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>recv_sock</name><operator>-&gt;</operator><name>is_read_only</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: SERVER_STATUS_IN_TRANS true from read server"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_in_transaction true for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_in_transaction false for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_in_transaction true:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_calc_found_rows</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_server_conn_reserved true for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_prepared</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_in_sess_context</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_server_conn_reserved false"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_server_conn_reserved true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: is_in_transaction true:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: con multiple_server_mode:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>multiple_server_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>multiple_server_mode</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>inj</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>INJ_ID_COM_STMT_PREPARE</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>store_server_ndx_in_prepared_resp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PROXY_NO_DECISION</name></expr>:</case>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: PROXY_NO_DECISION here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>sent_resultset</name></name></expr>)</condition> <block>{<block_content>
                <comment type="block" format="doxygen">/**
                 * make sure we send only one result-set per client-query
                 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_changed_user_failed</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>g_queue_is_empty</name><argument_list>(<argument><expr><name><name>send_sock</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: exchange queue"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>network_queue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name></name> <operator>=</operator> <name>queue</name></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_queue_peek_tail</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>packet</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>last_packet_id</name></name> <operator>=</operator> <call><name>network_mysqld_proto_get_packet_id</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: packet is nil"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: client send queue is not empty"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
                    <while>while <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>network_mysqld_queue_append_raw</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>sent_resultset</name></name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>sent_resultset</name></name><operator>++</operator></expr>;</expr_stmt>

        <comment type="block">/* fall through */</comment>
    <case>case <expr><name>PROXY_IGNORE_RESULT</name></expr>:</case>
        <comment type="block">/* trash the packets for the injection query */</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>resultset_is_needed</name></name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>send_sock</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>proxy_resultset_free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>injection_free</name><argument_list>(<argument><expr><name>inj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_read_auth</argument>)</argument_list></macro>
<block>{<block_content>
    <return>return <expr><call><name>do_read_auth</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>network_mysqld_con_handle_insert_id_response</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last_packet_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>rows</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>fields</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddefs_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>network_mysqld_proto_fielddef_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MYSQL_TYPE_LONGLONG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name>g_ptr_array_new_with_free_func</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network_mysqld_mysql_field_row_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GPtrArray</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>g_ptr_array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>last_packet_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_add</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_send_resultset</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_proto_fielddefs_free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_non_trans_prepare_stmt</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_prepared</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>visit_slave</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>is_orig_ro_server</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>is_orig_ro_server</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call process_non_trans_prepare_stmt"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* TODO:prepare does not support select for update until now */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>master_preferred</name></name> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>STMT_SELECT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>visit_slave</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set read only true for ps"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>prepare_stmt_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_orig_ro_server</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: try to get from slave"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* use ro server */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>BACKEND_TYPE_RO</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>proxy_get_backend_ndx</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>visit_slave</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>slave_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>visit_slave</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: slave down,move to master"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: original server null"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>visit_slave</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>is_orig_ro_server</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>BACKEND_TYPE_RW</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>proxy_get_backend_ndx</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:PROXY_NO_CONNECTION"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* no master connection */</comment>
                <return>return <expr><name>PROXY_NO_CONNECTION</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>PROXY_NO_DECISION</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_other_set_command</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>mysqld_query_attr_t</name> <modifier>*</modifier></type><name>query_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: vist process_other_set_command"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"character_set_client"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>charset_client</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>charset_client_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"character_set_connection"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>charset_connection</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>charset_connection_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"character_set_results"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>charset_results</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>charset_results_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"sql_mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>sql_mode</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>sql_mode_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_set_names</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>mysqld_query_attr_t</name> <modifier>*</modifier></type><name>query_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>charset_client</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>charset_connection</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>charset_results</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>charset_client_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>charset_connection_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>charset_results_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>charset_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>charset_code</name></name> <operator>=</operator> <call><name>charset_get_number</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sock</name><operator>-&gt;</operator><name>charset_code</name></name> <operator>==</operator> <name>DEFAULT_CHARSET</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: charset code:%d, charset:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>charset_code</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"NULL"</literal></expr></then><else>:<expr><name>s</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_trans_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: visit process_trans_query here:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>STMT_SET</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><call><name>sql_context_is_autocommit_off</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: autocommit off"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sql_context_is_autocommit_on</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_in_tran_and_auto_commit_received</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>multiple_server_mode</name></name></expr>)</condition> <block>{<block_content>
                  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>proxy_get_backend_ndx</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RW</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s:serious error when change from slave to master"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>PROXY_NO_CONNECTION</name></expr>;</return>
                  </block_content>}</block></if></if_stmt>
               </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit_trans_buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: autocommit on"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>PROXY_NO_DECISION</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_filter_for_trans_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>mysqld_query_attr_t</name> <modifier>*</modifier></type><name>query_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>is_orig_ro_server</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>need_to_visit_master</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>STMT_SET_NAMES</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>charset_name</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>process_set_names</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>charset_name</name></expr></argument>, <argument><expr><name>query_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>STMT_SET</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>set_list</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>set_list</name> <operator>&amp;&amp;</operator> <name><name>set_list</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>set_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>expr</name> <operator>&amp;&amp;</operator> <name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_EQ</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>left</name> <operator>||</operator> <operator>!</operator><name>right</name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>sql_filter_vars_is_silent</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name><name>right</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"silent variable: %s"</literal></expr></argument>, <argument><expr><name><name>left</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>PROXY_NO_DECISION</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_non_trans_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>mysqld_query_attr_t</name> <modifier>*</modifier></type><name>query_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>is_orig_ro_server</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>need_to_visit_master</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>is_orig_ro_server</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>STMT_SELECT</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><operator>(</operator><name>sql_select_t</name> <operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_calc_found_rows</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>select</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SF_CALC_FOUND_ROWS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">": is_calc_found_rows: %d"</literal></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>is_calc_found_rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last_insert_id_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gboolean</name></type> <name>is_insert_id</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><name><name>select</name><operator>-&gt;</operator><name>columns</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cols</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>cols</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>sql_expr_is_function</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"LAST_INSERT_ID"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_insert_id</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>last_insert_id_name</name> <operator>=</operator> <literal type="string">"LAST_INSERT_ID()"</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sql_expr_is_id</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"LAST_INSERT_ID"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>is_insert_id</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>last_insert_id_name</name> <operator>=</operator> <literal type="string">"@@LAST_INSERT_ID"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>is_insert_id</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: buffered last insert id:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>con</name><operator>-&gt;</operator><name>last_insert_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_handle_insert_id_response</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>last_insert_id_name</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_insert_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>last_record_updated</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>need_to_visit_master</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>STMT_SET_NAMES</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>charset_name</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>process_set_names</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>charset_name</name></expr></argument>, <argument><expr><name>query_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>STMT_SET</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>sql_expr_list_t</name> <modifier>*</modifier></type><name>set_list</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>set_list</name> <operator>&amp;&amp;</operator> <name><name>set_list</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name>set_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>expr</name> <operator>&amp;&amp;</operator> <name><name>expr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_EQ</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>left</name> <operator>||</operator> <operator>!</operator><name>right</name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>sql_filter_vars_is_silent</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name><name>right</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>network_mysqld_con_send_ok</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"silent variable: %s"</literal></expr></argument>, <argument><expr><name><name>left</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* set autocommit = x */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>sql_context_is_autocommit_off</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_changed_user_when_quit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit_trans_buffered</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: autocommit off, now in transaction"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>need_to_visit_master</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sql_context_is_autocommit_on</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_in_tran_and_auto_commit_received</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit_trans_buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>need_to_visit_master</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: autocommit on"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <comment type="block">/* set charsetxxx = xxx */</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>TK_ID</name> <operator>&amp;&amp;</operator> <name><name>right</name><operator>-&gt;</operator><name>token_text</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>process_other_set_command</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>left</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name><name>right</name><operator>-&gt;</operator><name>token_text</name></name></expr></argument>, <argument><expr><name>query_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>STMT_UPDATE</name></expr>:</case>
    <case>case <expr><name>STMT_INSERT</name></expr>:</case>
    <case>case <expr><name>STMT_DELETE</name></expr>:</case>
        <break>break;</break>
    <default>default:</default>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>STMT_USE</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set default db:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></switch>                           <comment type="block">/* end switch */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>master_preferred</name></name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_WRITE</name> <operator>||</operator> <name>need_to_visit_master</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:rw here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* rw operation */</comment>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name><operator>.</operator><name>client_query</name><operator>.</operator><name>rw</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>is_orig_ro_server</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gboolean</name></type> <name>success</name> <init>= <expr><call><name>proxy_get_backend_ndx</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RW</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:PROXY_NO_CONNECTION"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>PROXY_NO_CONNECTION</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>                    <comment type="block">/* ro operation */</comment>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:ro here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name><operator>.</operator><name>client_query</name><operator>.</operator><name>ro</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_read_ro_server_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_cache_enabled</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>sql_context_is_cacheable</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>try_to_get_resp_from_query_cache</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>read_master_percentage</name></name> <operator>!=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_orig_ro_server</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>gboolean</name></type> <name>success</name> <init>= <expr><call><name>proxy_get_backend_ndx</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RO</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>slave_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:PROXY_NO_CONNECTION"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>is_orig_ro_server</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>gboolean</name></type> <name>success</name> <init>= <expr><call><name>proxy_get_backend_ndx</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RW</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:PROXY_NO_CONNECTION"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>PROXY_NO_CONNECTION</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>PROXY_NO_DECISION</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 
<name>proxy_inject_packet</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resp_type</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>,
        <parameter><decl><type><name>gboolean</name></type> <name>resultset_is_needed</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>is_fast_streamed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>injection</name> <modifier>*</modifier></type><name>inj</name> <init>= <expr><call><name>injection_new</name><argument_list>(<argument><expr><name>resp_type</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>ON</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>ts_read_query</name></name> <operator>=</operator> <call><name>get_timer_microseconds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>resultset_is_needed</name></name> <operator>=</operator> <name>resultset_is_needed</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>is_fast_streamed</name></name> <operator>=</operator> <name>is_fast_streamed</name></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PROXY_QUEUE_ADD_APPEND</name></expr>:</case>
        <expr_stmt><expr><call><name>network_injection_queue_append</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>inj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>PROXY_QUEUE_ADD_PREPEND</name></expr>:</case>
        <expr_stmt><expr><call><name>network_injection_queue_prepend</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>inj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>change_stmt_id</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>stmt_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>stmt_id</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:index:%d, stmt id:%d is too big, servers len:%d"</literal></expr></argument>,
                      <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>stmt_id</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SERVER_NUM_FOR_PREPARE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"change conn:%p, server:%p stmt_id:%d, fd:%d, new back ndx:%d"</literal></expr></argument>,
                <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>stmt_id</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>injection</name> <modifier>*</modifier></type><name>inj</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>inj</name> <operator>=</operator> <call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>inj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>inj</name><operator>-&gt;</operator><name>query</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>network_mysqld_proto_change_stmt_id_from_clt_stmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>change_server_by_rw</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backend_ndx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>backend_ndx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name>backend_ndx</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"conn:%p, change_server_by_rw,ndx:%d, index:%d, st ndx:%d"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name> <operator>=</operator> <name>backend_ndx</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: get backend ndx failed: %d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>adjust_sql_mode</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>mysqld_query_attr_t</name> <modifier>*</modifier></type><name>query_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>clt_sql_mode</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srv_sql_mode</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>sql_mode</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>clt_sql_mode</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>clt_sql_mode</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>sql_mode</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>sql_mode</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>srv_sql_mode</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>srv_sql_mode</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>sql_mode</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>query_attr</name><operator>-&gt;</operator><name>sql_mode_set</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>clt_sql_mode</name></expr></argument>, <argument><expr><name>srv_sql_mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>clt_sql_mode</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"SET sql_mode='"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>sql_mode</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>sql_mode</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_PREPEND</name></expr></argument>, <argument><expr><name>INJ_ID_CHANGE_SQL_MODE</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"SET sql_mode=''"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_PREPEND</name></expr></argument>, <argument><expr><name>INJ_ID_CHANGE_SQL_MODE</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>sql_mode</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>sql_mode</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>sql_mode</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>sql_mode</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>sql_mode</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>sql_mode</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>adjust_charset</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>mysqld_query_attr_t</name> <modifier>*</modifier></type><name>query_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>charset_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>query_attr</name><operator>-&gt;</operator><name>charset_set</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>charset</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>charset</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>charset_reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>charset_str</name> <operator>=</operator> <name><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_client</name></name></expr></argument>, <argument><expr><name><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>charset</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_connection</name></name></expr></argument>, <argument><expr><name><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>charset</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_results</name></name></expr></argument>, <argument><expr><name><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>charset</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>charset</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>charset</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>charset</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>charset_check</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: client charset:%s, default charset:%s, client address:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
                    <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_charset</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>query_attr</name><operator>-&gt;</operator><name>charset_client_set</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_client</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_client</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_client</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"SET character_set_client = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_client</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_PREPEND</name></expr></argument>, <argument><expr><name>INJ_ID_CHAR_SET_CLT</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>charset_client</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_client</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_client</name></name></expr></argument>, <argument><expr><name><name>charset_client</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>charset_client</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>charset_client</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_client</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_client</name></name></expr></argument>, <argument><expr><name><name>charset_client</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>charset_client</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>query_attr</name><operator>-&gt;</operator><name>charset_connection_set</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_connection</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_connection</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_connection</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"SET character_set_connection = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_connection</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_PREPEND</name></expr></argument>, <argument><expr><name>INJ_ID_CHAR_SET_CONN</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>charset_conn</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_connection</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_connection</name></name></expr></argument>, <argument><expr><name><name>charset_conn</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>charset_conn</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>charset_conn</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_connection</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_connection</name></name></expr></argument>, <argument><expr><name><name>charset_conn</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>charset_conn</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>query_attr</name><operator>-&gt;</operator><name>charset_results_set</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_string_equal</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_results</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_results</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_results</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"SET character_set_results = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_results</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_PREPEND</name></expr></argument>, <argument><expr><name>INJ_ID_CHAR_SET_RESULTS</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"SET character_set_results = NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_PREPEND</name></expr></argument>, <argument><expr><name>INJ_ID_CHAR_SET_RESULTS</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>charset_results</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_results</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_results</name></name></expr></argument>, <argument><expr><name><name>charset_results</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>charset_results</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>charset_results</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_results</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_assign_len</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>charset_results</name></name></expr></argument>, <argument><expr><name><name>charset_results</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>charset_results</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>query_attr</name><operator>-&gt;</operator><name>charset_reset</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"SET NAMES "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: client charset is empty:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="string">"''"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>charset_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_PREPEND</name></expr></argument>, <argument><expr><name>INJ_ID_SET_NAMES</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>adjust_default_db</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>enum_server_command</name></name></type> <name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>clt_default_db</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>srv_default_db</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" default client db:%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>clt_default_db</name></expr> ?</condition><then> <expr><name><name>clt_default_db</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">" default server db:%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>srv_default_db</name></expr> ?</condition><then> <expr><name><name>srv_default_db</name><operator>-&gt;</operator><name>str</name></name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>clt_default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>g_string_equal</name><argument_list>(<argument><expr><name>clt_default_db</name></expr></argument>, <argument><expr><name>srv_default_db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_INIT_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>clt_default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>clt_default_db</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_PREPEND</name></expr></argument>, <argument><expr><name>INJ_ID_CHANGE_DB</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: adjust default db"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>reset_connection</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_RESET_CONNECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_PREPEND</name></expr></argument>, <argument><expr><name>INJ_ID_RESET_CONNECTION</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_in_sess_context</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>adjust_user</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: user:%s try to robs conn from user:%s, server:%p for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>,
            <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>hashed_password</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cetus_users_get_hashed_server_pwd</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>users</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>hashed_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>hashed_password</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: user:%s  hashed password is null"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>hashed_password</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>mysqld_change_user_packet_t</name></type> <name>chuser</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>chuser</name><operator>.</operator><name>username</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chuser</name><operator>.</operator><name>auth_plugin_data</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>challenge</name><operator>-&gt;</operator><name>auth_plugin_data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chuser</name><operator>.</operator><name>hashed_pwd</name></name> <operator>=</operator> <name>hashed_password</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_db</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>chuser</name><operator>.</operator><name>database</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chuser</name><operator>.</operator><name>charset</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_code</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: charset:%d when change user"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>charset_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>payload</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>mysqld_proto_append_change_user_packet</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chuser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_PREPEND</name></expr></argument>, <argument><expr><name>INJ_ID_CHANGE_USER</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_in_sess_context</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>hashed_password</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>adjust_multi_stmt</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>enum_server_command</name></name></type> <name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name> <operator>!=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>COM_SET_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_PREPEND</name></expr></argument>, <argument><expr><name>INJ_ID_CHANGE_MULTI_STMT</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: adjust multi stmt"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_multi_stmt_set</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type>
<name>network_mysqld_con_is_trx_feature_changed</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>st</name><operator>-&gt;</operator><name>trx_read_write</name></name> <operator>!=</operator> <name>TF_READ_WRITE</name> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>!=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>internal_trx_isolation_level</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_con_reset_trx_feature</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>trx_read_write</name></name> <operator>=</operator> <name>TF_READ_WRITE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>internal_trx_isolation_level</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_handle_local_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>STMT_SELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>sql_select_t</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sql_expr_t</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sql_expr_is_function</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"CURRENT_DATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_current_date</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="string">"CURRENT_DATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sql_expr_is_function</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"CETUS_VERSION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_cetus_version</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_quit_cmd</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backend_ndx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>backend_ndx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>network_mysqld_con_is_trx_feature_changed</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: quit, backend ndx:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_NONE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: server is null while ndx:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_NONE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>||</operator> <call><name>network_mysqld_con_is_trx_feature_changed</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: change user when COM_QUIT:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_reset_conn_supported</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: reset conn when COM_QUIT:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>reset_connection</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>adjust_user</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_changed_user_when_quit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_reset_trx_feature</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_INJECTION</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: unbelievable for COM_QUIT:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>forced_visit</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_in_sess_context</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_sess_context</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_NO_DECISION</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:use previous conn for forced_visit"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_FORCE_MASTER</name><operator>)</operator></expr>
        ?</condition><then> <expr><name>BACKEND_TYPE_RW</name></expr> </then><else>: <expr><name>BACKEND_TYPE_RO</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BACKEND_TYPE_RO</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>use_slave_forced</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gboolean</name></type> <name>success</name> <init>= <expr><call><name>proxy_get_backend_ndx</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
                                                 <argument><expr><name><name>context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_FORCE_SLAVE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BACKEND_TYPE_RO</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>slave_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:slave_conn_shortaged is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>proxy_get_backend_ndx</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RW</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:PROXY_NO_CONNECTION"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_NO_CONNECTION</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_rw_split</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
                 <parameter><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>mysqld_query_attr_t</name> <modifier>*</modifier></type><name>query_attr</name></decl></parameter>,
                 <parameter><decl><type><name>int</name></type> <name>is_under_sess_scope</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_under_sess_scope</name> <operator>&amp;&amp;</operator> <name>command</name> <operator>==</operator> <name>COM_QUERY</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* send all non-transactional SELECTs to a slave */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>process_non_trans_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>query_attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>PROXY_NO_CONNECTION</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_NO_CONNECTION</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><name>PROXY_SEND_RESULT</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>command</name> <operator>==</operator> <name>COM_QUERY</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>process_filter_for_trans_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>query_attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>PROXY_SEND_RESULT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name><operator>.</operator><name>client_query</name><operator>.</operator><name>rw</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>command</name> <operator>==</operator> <name>COM_QUERY</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>process_trans_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>command</name> <operator>==</operator> <name>COM_STMT_PREPARE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_prepared</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>command</name> <operator>==</operator> <name>COM_STMT_PREPARE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_prepared</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>process_non_trans_prepare_stmt</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PROXY_NO_CONNECTION</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_NO_CONNECTION</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>prepare_stmt_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_sess_context</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>query_attr</name><operator>-&gt;</operator><name>conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_query_or_stmt_prepare</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
                              <parameter><decl><type><name>network_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>mysqld_query_attr_t</name> <modifier>*</modifier></type><name>query_attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disp_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gsize</name></type> <name>sql_len</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_get_gstr_len</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>sql_len</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 2 more NULL for lexer EOB */</comment>
    <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sql_context_parse_len</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s process query:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>rc</name></name> <operator>==</operator> <name>PARSE_SYNTAX_ERR</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>message</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s SQL syntax error: %s. while parsing: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_SYNTAX_ERROR</name></expr></argument>, <argument><expr><literal type="string">"42000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>rc</name></name> <operator>==</operator> <name>PARSE_NOT_SUPPORT</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_sql_special_processed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>message</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(
            <argument><expr><literal type="string">"%s SQL unsupported: %s. while parsing: %s for con:%p, clt:%s"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>,
            <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><name>ER_NOT_SUPPORTED_YET</name></expr></argument>, <argument><expr><literal type="string">"42000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>rc</name></name> <operator>==</operator> <name>PARSE_UNRECOGNIZED</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s SQL unrecognized: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* forbid force write on slave */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_FORCE_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><operator>(</operator><operator>(</operator><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>check_sql_loosely</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <name>CF_WRITE</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s Comment usage error. SQL: %s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Force transaction on read-only slave"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"Force write on read-only slave"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>clause_flags</name></name> <operator>&amp;</operator> <name>CF_LOCAL_QUERY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <call><name>proxy_handle_local_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* query statistics */</comment>
    <decl_stmt><decl><type><name>query_stats_t</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>STMT_SHOW_WARNINGS</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: show warnings is met"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>STMT_DROP_DATABASE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>sql_drop_database_t</name> <modifier>*</modifier></type><name>drop_database</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>drop_database</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>truncate_default_db_when_drop_database</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>drop_database</name><operator>-&gt;</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>rw_flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>CF_FORCE_MASTER</name> <operator>|</operator> <name>CF_FORCE_SLAVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>forced_visit</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>is_under_sess_scope</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>STMT_SET_TRANSACTION</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>is_under_sess_scope</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:call set tran here"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>sql_set_transaction_t</name> <modifier>*</modifier></type><name>feat</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>feat</name> <operator>=</operator> <operator>(</operator><name>sql_set_transaction_t</name> <operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>sql_statement</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>feat</name><operator>-&gt;</operator><name>scope</name></name> <operator>==</operator> <name>SCOPE_SESSION</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:set session transaction sql:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>feat</name><operator>-&gt;</operator><name>rw_feature</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>trx_read_write</name></name> <operator>=</operator> <name><name>feat</name><operator>-&gt;</operator><name>rw_feature</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>feat</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>=</operator> <name><name>feat</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:unexpected transaction feature:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_con_is_trx_feature_changed</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:transact feature changed for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>gboolean</name></type> <name>success</name> <init>= <expr><call><name>proxy_get_backend_ndx</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RW</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:PROXY_NO_CONNECTION"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>*</operator><name>disp_flag</name> <operator>=</operator> <name>PROXY_NO_CONNECTION</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_sess_context</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>is_under_sess_scope</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* rw split */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_rw_split</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>query_attr</name></expr></argument>, <argument><expr><name>is_under_sess_scope</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>network_mysqld_stmt_ret</name></type>
<name>network_read_query</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>recv_queue</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name>recv_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: chunk is null"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"(proxy) unable to retrieve command"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_db</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_string_assign</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set default db:%s for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>default_db</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>mysqld_query_attr_t</name></type> <name>query_attr</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_conn_shortaged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>slave_conn_shortaged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>use_slave_forced</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>candidate_fast_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_injection_queue_reset</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>backend_ndx</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* check if it is a read request */</comment>
    <decl_stmt><decl><type><name>guint8</name></type> <name>command</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>network_mysqld_proto_skip_network_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_get_int8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"(proxy) unable to retrieve command"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_sess_context</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: command:%d, backend ndx:%d, con:%p, orig sql:%s"</literal></expr></argument>,
            <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: still in tran, backend ndx:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>disp_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>COM_QUIT</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_quit_cmd</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>backend_ndx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>disp_flag</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>COM_BINLOG_DUMP</name></expr>:</case>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"(proxy) unable to process binlog dump"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
    <case>case <expr><name>COM_STMT_PREPARE</name></expr>:</case>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>candidate_tcp_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <case>case <expr><name>COM_QUERY</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_query_or_stmt_prepare</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_attr</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp_flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>disp_flag</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <break>break;</break>
    <case>case <expr><name>COM_CHANGE_USER</name></expr>:</case>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"(proxy) unable to process change user"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>                           <comment type="block">/* end switch */</comment>

    <decl_stmt><decl><type><name>gboolean</name></type> <name>last_resort</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>log_sql_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>last_resort</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_prepared</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>last_resort</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>last_resort</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: con server is null"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* we try to get a connection */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>proxy_get_backend_ndx</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>BACKEND_TYPE_RW</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:PROXY_NO_CONNECTION"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>PROXY_NO_CONNECTION</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_sess_context</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_in_sess_context</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_in_sess_context true for con server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_in_sess_context</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_in_sess_context false for con server:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>backend</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_conn_shortaged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s:backend is null"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PROXY_NO_CONNECTION</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_read_only</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name> <operator>&amp;&amp;</operator> <name><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><name>command</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>COM_STMT_PREPARE</name></expr>:</case>
        <case>case <expr><name>COM_STMT_EXECUTE</name></expr>:</case>
        <case>case <expr><name>COM_QUERY</name></expr>:</case><block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
                                               <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"proxy stops serving requests now"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_ABORTING_CONNECTION</name></expr></argument>, <argument><expr><literal type="string">"29001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">": ER_ABORTING_CONNECTION, proxy stops serving requests"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
        </block_content>}</block>
        <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name><operator>.</operator><name>proxyed_query</name><operator>.</operator><name>rw</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name><operator>.</operator><name>server_query_details</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr>]</index></name><operator>.</operator><name>rw</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name><operator>.</operator><name>proxyed_query</name><operator>.</operator><name>ro</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>query_stats</name><operator>.</operator><name>server_query_details</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr>]</index></name><operator>.</operator><name>ro</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>is_read_only</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_record_updated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* ! Normal packets also sent out through "injection" interface */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>payload_len</name> <init>= <expr><name><name>packet</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>NET_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>payload</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>calculate_alloc_len</name><argument_list>(<argument><expr><name>payload_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>g_string_append_len</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name><name>packet</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name>NET_HEADER_SIZE</name></expr></argument>, <argument><expr><name>payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>sql_context_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>command</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>COM_QUERY</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>STMT_SELECT</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>is_read_ro_server_allowed</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_fast_stream_enabled</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name><operator>)</operator> <operator>||</operator>
                        <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>!=</operator> <name>ON</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>!=</operator> <name>REALTIME</name><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_APPEND</name></expr></argument>, <argument><expr><name>INJ_ID_COM_QUERY</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_APPEND</name></expr></argument>, <argument><expr><name>INJ_ID_COM_QUERY</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_APPEND</name></expr></argument>, <argument><expr><name>INJ_ID_COM_QUERY</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_APPEND</name></expr></argument>, <argument><expr><name>INJ_ID_COM_QUERY</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><name>COM_STMT_PREPARE</name></expr>:</case>
        <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_APPEND</name></expr></argument>, <argument><expr><name>INJ_ID_COM_STMT_PREPARE</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>proxy_inject_packet</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>PROXY_QUEUE_ADD_APPEND</name></expr></argument>, <argument><expr><name>INJ_ID_COM_DEFAULT</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>STMT_SHOW_WARNINGS</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_injection_queue_reset</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_send_ok_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>PROXY_SEND_INJECTION</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>multiple_server_mode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>query_attr</name><operator>.</operator><name>conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>command</name> <operator>==</operator> <name>COM_STMT_EXECUTE</name> <operator>||</operator> <name>command</name> <operator>==</operator> <name>COM_STMT_CLOSE</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_proto_get_stmt_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>change_stmt_id</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
                         <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"change stmt id failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_ABORTING_CONNECTION</name></expr></argument>, <argument><expr><literal type="string">"29001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>command</name> <operator>==</operator> <name>COM_QUERY</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>change_server_by_rw</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>query_attr</name><operator>.</operator><name>conn_reserved</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set is_server_conn_reserved true:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>adjust_sql_mode</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>adjust_charset</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <name>COM_INIT_DB</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>rob_other_conn</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>adjust_default_db</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <name>COM_SET_OPTION</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>adjust_multi_stmt</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>rob_other_conn</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>rob_other_conn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>adjust_user</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_injection_queue_reset</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_mysqld_con_send_error_full</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
                                               <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"proxy stops serving requests"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ER_NO_SUCH_USER</name></expr></argument>, <argument><expr><literal type="string">"29001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: ER_NO_SUCH_USER, proxy stops serving requests"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>PROXY_SEND_RESULT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>PROXY_SEND_INJECTION</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * gets called after a query has been read
 *
 * @see network_mysqld_con_handle_proxy_stmt
 */</comment>
<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_read_query</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>send_sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>proxy_query</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>quietly_quit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_mysqld_stmt_ret</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resp_too_long</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_reset_query_state</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>send_sock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>recv_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>sent_resultset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>server_attr_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_client_to_be_closed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_in_tran_and_auto_commit_received</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s server_to_be_closed is true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s send queue is not empty"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>last_backend_type</name></name> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s server_attr_changed, last backend type:%d, now type:%d"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>last_backend_type</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>server_attr_changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UP</name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_prepared</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>is_manual_down</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s Could not continue to process prepare stmt"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>server_attr_changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_client_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>server_attr_changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s backend state:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>server_attr_changed</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_server_conn_reserved</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s server attr changed and conn_reserved true, stop process"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_con_send_error</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="string">"(proxy) unable to continue processing command"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PROXY_SEND_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>server_attr_changed</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s server_attr_changed and add to pool"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>network_pool_add_conn</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:conn to pool failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>network_read_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_warning_met</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_backend_type</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_backend_type</name></name> <operator>=</operator> <name>BACKEND_TYPE_UNKNOWN</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block" format="doxygen">/**
     * if we disconnected in read_query_result() we have no connection open
     * when we try to execute the next query
     *
     * for PROXY_SEND_RESULT we don't need a server
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>PROXY_SEND_NONE</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>PROXY_SEND_RESULT</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>PROXY_NO_CONNECTION</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: I have no server backend, con:%p for user:%s"</literal></expr></argument>,
                    <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>response</name><operator>-&gt;</operator><name>username</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>master_unavailable</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><name>NETWORK_SOCKET_ERROR_RETRY</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GQueue</name> <modifier>*</modifier></type><name>chunks</name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PROXY_NO_DECISION</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: discarding %d elements from the queue."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_injection_queue_reset</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* fall through */</comment>
    <case>case <expr><name>PROXY_SEND_QUERY</name></expr>:</case>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"error: this assumes to dead path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>send_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>;</expr_stmt>

        <comment type="block">/* no injection, pass on the chunks as is */</comment>
        <while>while <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>network_mysqld_queue_append_raw</name><argument_list>(<argument><expr><name>send_sock</name></expr></argument>, <argument><expr><name><name>send_sock</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <comment type="block">/* we don't want to buffer the result-set */</comment>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resultset_is_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <break>break;</break>
    <case>case <expr><name>PROXY_SEND_RESULT</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>gboolean</name></type> <name>is_first_packet</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>proxy_query</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>send_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>chunks</name> <operator>=</operator> <name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</expr_stmt>
        <comment type="block">/* flush the recv-queue and track the command-states */</comment>
        <while>while <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>is_first_packet</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>network_packet</name></type> <name>p</name></decl>;</decl_stmt>

                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>network_mysqld_con_reset_command_response_state</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call network_mysqld_con_command_states_init for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>network_mysqld_con_command_states_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: states init failure"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>is_first_packet</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>PROXY_SEND_INJECTION</name></expr>:</case><block>{<block_content>
        <decl_stmt><decl><type><name>injection</name> <modifier>*</modifier></type><name>inj</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>inj</name> <operator>=</operator> <call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resultset_is_needed</name></name> <operator>=</operator> <name><name>inj</name><operator>-&gt;</operator><name>resultset_is_needed</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>candidate_fast_streamed</name></name> <operator>=</operator> <name><name>inj</name><operator>-&gt;</operator><name>is_fast_streamed</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>send_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name>send_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name>send_sock</name></expr></argument>, <argument><expr><name><name>send_sock</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>inj</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_queue_clear</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>PROXY_SEND_NONE</name></expr>:</case><block>{<block_content>
        <expr_stmt><expr><name>quietly_quit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"%s:ret:%d "</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>proxy_query</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>quietly_quit</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLIENT_QUIT</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

        <comment type="block">/*
         * if we don't send the query to the backend,
         * it won't be tracked. So track it here instead
         * to get the packet tracking right (LOAD DATA LOCAL INFILE, ...)
         */</comment>

        <for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>send_sock</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>network_packet</name></type> <name>p</name></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>p</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>network_mysqld_proto_get_query_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>proxy_get_backend_ndx</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>force_slave</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>max_retry_serv_cnt</name></name> <operator>=</operator> <literal type="number">72</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_unavailable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BACKEND_TYPE_RO</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>force_slave</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>network_backends_get_ro_ndx</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>g_random_int_range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name><name>con</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>read_master_percentage</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>network_backends_get_rw_ndx</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>network_backends_get_ro_ndx</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><name>G_STRLOC</name> <literal type="string">": %d, read_master_percentage: %d, read: %d"</literal></expr></argument>,
                    <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>read_master_percentage</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>                    <comment type="block">/* type == BACKEND_TYPE_RW */</comment>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>network_backends_get_rw_ndx</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BACKEND_TYPE_RW</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s: free server conn to pool:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>network_pool_add_conn</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:conn to pool failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>master_unavailable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>max_retry_serv_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: no need to change server:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>send_sock</name> <init>= <expr><call><name>network_connection_pool_swap</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>send_sock</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>send_sock</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * decide about the next state after the result-set has been written
 * to the client
 *
 * if we still have data in the queue, back to proxy_send_query()
 * otherwise back to proxy_read_query() to pick up a new client query
 *
 * @note we should only send one result back to the client
 */</comment>
<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_send_query_result</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>send_sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>injection</name> <modifier>*</modifier></type><name>inj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>


    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_in_tran_and_auto_commit_received</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_client_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLOSE_CLIENT</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:client needs to closed for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_QUERY</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>g_queue_pop_head</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>

            <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:server needs to closed for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_closed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_client_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CLOSE_CLIENT</name></expr>;</expr_stmt>
                <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_changed_user_failed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_changed_user_failed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:state is set ST_ERROR"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>send_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * if we don't have a backend, don't try to forward queries
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>send_sock</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>network_injection_queue_reset</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* we have nothing more to send, let's see what the next state is */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>STMT_DROP_DATABASE</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>com_query</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>com_query</name> <operator>&amp;&amp;</operator> <name><name>com_query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>==</operator> <name>MYSQLD_PACKET_OK</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_string_truncate</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>default_db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:truncate server database for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_QUERY</name></expr>;</expr_stmt>

        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* looks like we still have queries in the queue,
     * push the next one
     */</comment>
    <expr_stmt><expr><name>inj</name> <operator>=</operator> <call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>resultset_is_needed</name></name> <operator>=</operator> <name><name>inj</name><operator>-&gt;</operator><name>resultset_is_needed</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>inj</name><operator>-&gt;</operator><name>resultset_is_needed</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>sent_resultset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
         * we already sent a resultset to the client and the next query
         * wants to forward it's result-set too, that can't work
         */</comment>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: append() mul-queries without true rs set."</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>NETWORK_SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>inj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>send_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name>send_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_queue_append</name><argument_list>(<argument><expr><name>send_sock</name></expr></argument>, <argument><expr><name><name>send_sock</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>inj</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call reset_command_response_state for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_con_reset_command_response_state</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY</name></expr>;</expr_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/**
 * handle the query-result we received from the server
 *
 * - decode the result-set to track if we are finished already
 * - handles BUG#25371 if requested
 * - if the packet is finished,
 *
 * @see network_mysqld_con_handle_proxy_resultset
 */</comment>
<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_read_query_result</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_packet</name></type> <name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>recv_sock</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>send_sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>injection</name> <modifier>*</modifier></type><name>inj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>recv_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>send_sock</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>

    <comment type="block">/* check if the last packet is valid */</comment>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>g_queue_peek_tail</name><argument_list>(<argument><expr><name><name>recv_sock</name><operator>-&gt;</operator><name>recv_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>inj</name> <operator>=</operator> <call><name>g_queue_peek_head</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: here we visit network_mysqld_proto_get_query_result for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>resp_too_long</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* TODO if attribute adjustment fails, then the backend connection should not be put to pool */</comment>
        <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>COM_QUERY</name></expr>:</case>
        <case>case <expr><name>COM_PROCESS_INFO</name></expr>:</case>
        <case>case <expr><name>COM_STMT_EXECUTE</name></expr>:</case><block>{<block_content>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: read finished: %p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>query</name> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>query_status</name></name> <operator>==</operator> <name>MYSQLD_PACKET_ERR</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>packet</name><operator>.</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NET_HEADER_SIZE</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>network_mysqld_err_packet_t</name> <modifier>*</modifier></type><name>err_packet</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>err_packet</name> <operator>=</operator> <call><name>network_mysqld_err_packet_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>network_mysqld_proto_get_err_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:dst:%s,sql:%s,errmsg:%s"</literal></expr></argument>,
                              <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>err_packet</name><operator>-&gt;</operator><name>errmsg</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:dst:%s,sql:%s"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>orig_sql</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>network_mysqld_err_packet_free</name><argument_list>(<argument><expr><name>err_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>COM_STMT_PREPARE</name></expr>:</case><block>{<block_content>
            <decl_stmt><decl><type><name>network_mysqld_com_stmt_prep_result_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MYSQLD_PACKET_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>prepare_stmt_count</name></name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: prepare stmt not ok for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>COM_INIT_DB</name></expr>:</case>
            <break>break;</break>
        <case>case <expr><name>COM_CHANGE_USER</name></expr>:</case>
            <break>break;</break>
        <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>network_mysqld_stmt_ret</name></type> <name>ret</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * the resultset handler might decide to trash the send-queue
     *
     */</comment>

    <if_stmt><if>if <condition>(<expr><name>inj</name></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>command</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>COM_QUERY</name></expr>:</case>
            <case>case <expr><name>COM_STMT_EXECUTE</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>network_mysqld_com_query_result_t</name> <modifier>*</modifier></type><name>com_query</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>parse</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>com_query</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <name><name>com_query</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>was_resultset</name></name> <operator>=</operator> <name><name>com_query</name><operator>-&gt;</operator><name>was_resultset</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>binary_encoded</name></name> <operator>=</operator> <name><name>com_query</name><operator>-&gt;</operator><name>binary_encoded</name></name></expr>;</expr_stmt>

                    <comment type="block">/* INSERTs have a affected_rows */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>com_query</name><operator>-&gt;</operator><name>was_resultset</name></name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>com_query</name><operator>-&gt;</operator><name>affected_rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_record_updated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>affected_rows</name></name> <operator>=</operator> <name><name>com_query</name><operator>-&gt;</operator><name>affected_rows</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>insert_id</name></name> <operator>=</operator> <name><name>com_query</name><operator>-&gt;</operator><name>insert_id</name></name></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>inj</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>insert_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>last_insert_id</name></name> <operator>=</operator> <name><name>inj</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>insert_id</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: last insert id:%d for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>con</name><operator>-&gt;</operator><name>last_insert_id</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>server_status</name></name> <operator>=</operator> <name><name>com_query</name><operator>-&gt;</operator><name>server_status</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>warning_count</name></name> <operator>=</operator> <name><name>com_query</name><operator>-&gt;</operator><name>warning_count</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>qstat</name><operator>.</operator><name>query_status</name></name> <operator>=</operator> <name><name>com_query</name><operator>-&gt;</operator><name>query_status</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: server status, got: %d, con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>com_query</name><operator>-&gt;</operator><name>server_status</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
            <case>case <expr><name>COM_INIT_DB</name></expr>:</case>
                <break>break;</break>
            <case>case <expr><name>COM_CHANGE_USER</name></expr>:</case>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: no chance to get server status"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>ON</name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>sql_mgr</name><operator>-&gt;</operator><name>sql_log_switch</name></name> <operator>==</operator> <name>REALTIME</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>inj</name><operator>-&gt;</operator><name>ts_read_query_result_last</name></name> <operator>=</operator> <call><name>get_timer_microseconds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log_sql_backend</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>inj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* reset the packet-id checks as the server-side is finished */</comment>
    <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name>recv_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>proxy_c_read_query_result</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: after proxy_c_read_query_result,ret:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>PROXY_IGNORE_RESULT</name> <operator>!=</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* reset the packet-id checks, if we sent something to the client */</comment>
        <expr_stmt><expr><call><name>network_mysqld_queue_reset</name><argument_list>(<argument><expr><name>send_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" format="doxygen">/**
     * if the send-queue is empty, we have nothing to send
     * and can read the next query */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>send_sock</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: send queue is not empty:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name><name>send_sock</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_SEND_QUERY_RESULT</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/*
         * we already forwarded the resultset,
         * no way someone has flushed the resultset-queue
         */</comment>
        <expr_stmt><expr><call><name>g_assert_cmpint</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>resultset_is_needed</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_READ_QUERY</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/**
 * connect to a backend
 *
 * @return
 *   NETWORK_SOCKET_SUCCESS        - connected successfully
 *   NETWORK_SOCKET_ERROR_RETRY    - connecting backend failed,
 *                                   call again to connect to another backend
 *   NETWORK_SOCKET_ERROR          - no backends available,
 *                                   adds a ERR packet to the client queue
 */</comment>
<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_connect_server</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>do_connect_cetus</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>backend</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>backend_ndx</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>proxy_plugin_con_t</name> <modifier>*</modifier></type>
<name>proxy_plugin_con_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>proxy_plugin_con_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name> <operator>=</operator> <call><name>network_injection_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>st</name></expr>;</return>
</block_content>}</block></function>

<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_init</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>config</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>proxy_plugin_con_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* TODO: this should inside "st"_new, but now "st" shared by many plugins */</comment>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>sql_context_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_context_init</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>trx_read_write</name></name> <operator>=</operator> <name>TF_READ_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>trx_isolation_level</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>srv</name><operator>-&gt;</operator><name>internal_trx_isolation_level</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_CONNECT_SERVER</name></expr>;</expr_stmt>

    <comment type="block">/* set the connection specific timeouts
     *
     * TODO: expose these settings at runtime
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_timeval_from_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>connect_timeout</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_timeval_from_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>chassis_timeval_from_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>write_timeout</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>network_mysqld_stmt_ret</name></type>
<name>proxy_c_disconnect_client</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call proxy_c_disconnect_client: %p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>gboolean</name></type> <name>client_abnormal_close</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_READ_QUERY_RESULT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>client_abnormal_close</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set client_abnormal_close true: %p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>&gt;</operator> <name>ST_READ_QUERY</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>client_abnormal_close</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set client_abnormal_close true: %p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>client_abnormal_close</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_changed_user_when_quit</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>is_start_tran_command</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: auto commit true"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>is_in_transaction</name></name> <operator>||</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>is_auto_commit</name></name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>is_in_sess_context</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>network_pool_add_conn</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:conn returned to pool failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>PROXY_NO_DECISION</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mysqld_con_reserved_connections_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>srv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>srv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>checked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SERVER_NUM_FOR_PREPARE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* rw-edition: after filtering, now [i] is a valid backend index */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><call><name>network_backends_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>CHECK_PENDING_EVENT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>network_socket_send_quit_and_free</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connected_clients sub, con:%p, now clients:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>checked</name><operator>++</operator></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>checked</name> <operator>&gt;=</operator> <name><name>con</name><operator>-&gt;</operator><name>servers</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_ptr_array_free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>proxy_plugin_con_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: call proxy_plugin_con_free con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>network_injection_queue_free</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>injected</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If con still has server list, then all are closed */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mysqld_con_reserved_connections_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: connected_clients sub, con:%p, now clients:%d"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>connected_clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>backend_ndx_array</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"%s: st backend_ndx_array is not nill for con:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * cleanup the proxy specific data on the current connection
 *
 * move the server connection into the connection pool in case it is a
 * good client-side close
 *
 * @return NETWORK_SOCKET_SUCCESS
 * @see plugin_call_cleanup
 */</comment>
<macro><name>NETWORK_MYSQLD_PLUGIN_PROTO</name><argument_list>(<argument>proxy_disconnect_client</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxy_plugin_con_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>network_mysqld_stmt_ret</name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>proxy_c_disconnect_client</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PROXY_NO_DECISION</name></expr>:</case>
        <comment type="block">/* just go on */</comment>

        <break>break;</break>
    <case>case <expr><name>PROXY_IGNORE_RESULT</name></expr>:</case>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"%s: ... "</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>server_to_be_closed</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_CLOSE_CLIENT</name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>&lt;=</operator> <name>ST_READ_QUERY</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* move the connection to the connection pool
             *
             * this disconnects con-&gt;server and safes it
             * from getting free()ed later
             */</comment>

            <if_stmt><if>if <condition>(<expr><call><name>network_pool_add_conn</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s, con:%p:server conn returned to pool failed"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>servers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s: conn server list is not freed:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>network_mysqld_con_reset_query_state</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* TODO: this should inside "st"_free, but now "st" shared by many plugins */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sql_context_destroy</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>sql_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>proxy_plugin_con_free</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugin_con_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set plugin_con_state null:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * walk all pools and clean them up
     */</comment>

    <return>return <expr><name>NETWORK_SOCKET_SUCCESS</name></expr>;</return>
</block_content>}</block>

<function><type><name>int</name></type>
<name>network_mysqld_proxy_connection_init</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_init</name></name> <operator>=</operator> <name>proxy_init</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_connect_server</name></name> <operator>=</operator> <name>proxy_connect_server</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_handshake</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_auth</name></name> <operator>=</operator> <name>proxy_read_auth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_auth_result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_query</name></name> <operator>=</operator> <name>proxy_read_query</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_get_server_conn_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_read_query_result</name></name> <operator>=</operator> <name>proxy_read_query_result</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_send_query_result</name></name> <operator>=</operator> <name>proxy_send_query_result</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_cleanup</name></name> <operator>=</operator> <name>proxy_disconnect_client</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>plugins</name><operator>.</operator><name>con_timeout</name></name> <operator>=</operator> <name>proxy_timeout</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * free the global scope which is shared between all connections
 *
 * make sure that is called after all connections are closed
 */</comment>
<function><type><name>void</name></type>
<name>network_mysqld_proxy_free</name><parameter_list>(<parameter><decl><type><name>network_mysqld_con</name> <name>G_GNUC_UNUSED</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<decl_stmt><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>

<function><type><name>chassis_plugin_config</name> <modifier>*</modifier></type>
<name>network_mysqld_proxy_plugin_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>chassis_plugin_config</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* use negative values as defaults to make them ignored */</comment>
    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>;</expr_stmt>

    <return>return <expr><name>config</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>network_mysqld_proxy_plugin_free</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>read_only_backend_addresses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* free the global scope */</comment>
        <expr_stmt><expr><call><name>network_mysqld_proxy_free</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>chassis_config_unregister_service</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sql_filter_vars_destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_address</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_read_only_backend_address</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>free_str</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>old_backend</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>old_backend</name> <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RO</name>
                        <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_DELETED</name> <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_MAINTAINING</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>old_backend</name><operator>-&gt;</operator><name>address</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>old_backend</name><operator>-&gt;</operator><name>server_weight</name></name></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append_c</name><argument_list>(
                      <argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="char">'0'</literal> <operator>+</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>server_weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_backend_addresses</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_backends_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>backends</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>free_str</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>backends</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>network_backend_t</name> <modifier>*</modifier></type><name>old_backend</name> <init>= <expr><call><name>g_ptr_array_index</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>old_backend</name> <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BACKEND_TYPE_RW</name>
                        <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_DELETED</name> <operator>&amp;&amp;</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>BACKEND_STATE_MAINTAINING</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>old_backend</name><operator>-&gt;</operator><name>address</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>old_backend</name><operator>-&gt;</operator><name>server_weight</name></name></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append_c</name><argument_list>(
                      <argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="char">'0'</literal> <operator>+</operator> <name><name>old_backend</name><operator>-&gt;</operator><name>server_weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* handle defaults */</comment>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:3306"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_connect_timeout</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf (s)"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* handle default */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>assign_proxy_connect_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gdouble</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name>try_get_double_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_read_timeout</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf (s)"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* handle default */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>assign_proxy_read_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gdouble</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name>try_get_double_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_write_timeout</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf (s)"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>assign_proxy_write_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gdouble</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name>try_get_double_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_read_master_percentage</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SHOW_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>read_master_percentage</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* handle default */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>read_master_percentage</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>read_master_percentage</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>assign_read_master_percentage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gint</name></type> <name>ret</name> <init>= <expr><name>ASSIGN_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_ASSIGN_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>!=</operator> <name>newval</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>gint</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name>try_get_int_value</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>read_master_percentage</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_OK</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ASSIGN_VALUE_INVALID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_allow_ip</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>acl</name><operator>-&gt;</operator><name>whitelist</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>free_str</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>cetus_acl_entry_t</name></name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gchar</name><modifier>*</modifier></type>
<name>show_proxy_deny_ip</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>external_param</name></name> <modifier>*</modifier></type><name>opt_param</name> <init>= <expr><operator>(</operator>struct <name>external_param</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gint</name></type> <name>opt_type</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>opt_type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>opt_param</name><operator>-&gt;</operator><name>chas</name><operator>-&gt;</operator><name>priv</name><operator>-&gt;</operator><name>acl</name><operator>-&gt;</operator><name>blacklist</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>CAN_SAVE_OPTS_PROPERTY</name><argument_list>(<argument><expr><name>opt_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>free_str</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>cetus_acl_entry_t</name></name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>free_str</name> <operator>=</operator> <call><name>g_string_append</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name><index>[<expr><name><name>free_str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>free_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>free_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * plugin options
 */</comment>
<function><type><specifier>static</specifier> <name>GList</name> <modifier>*</modifier></type>
<name>network_mysqld_proxy_plugin_get_options</name><parameter_list>(<parameter><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chassis_options_t</name></type> <name>opts</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-address"</literal></expr></argument>,
                        <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>address</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"listening address:port of the proxy-server (default: :4040)"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;host:port&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_proxy_address</name></expr></argument>, <argument><expr><name>SHOW_OPTS_PROPERTY</name><operator>|</operator><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-read-only-backend-addresses"</literal></expr></argument>,
                        <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING_ARRAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>read_only_backend_addresses</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"address:port of the remote slave-server (default: not set)"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;host:port&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_proxy_read_only_backend_address</name></expr></argument>, <argument><expr><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-backend-addresses"</literal></expr></argument>,
                        <argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING_ARRAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"address:port of the remote backend-servers (default: 127.0.0.1:3306)"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;host:port&gt;"</literal></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_proxy_backend_addresses</name></expr></argument>, <argument><expr><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-connect-timeout"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>connect_timeout_dbl</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"connect timeout in seconds (default: 2.0 seconds)"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>assign_proxy_connect_timeout</name></expr></argument>, <argument><expr><name>show_proxy_connect_timeout</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-read-timeout"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>read_timeout_dbl</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"read timeout in seconds (default: 600 seconds)"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>assign_proxy_read_timeout</name></expr></argument>, <argument><expr><name>show_proxy_read_timeout</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-write-timeout"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>write_timeout_dbl</name></name><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="string">"write timeout in seconds (default: 600 seconds)"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>assign_proxy_write_timeout</name></expr></argument>, <argument><expr><name>show_proxy_write_timeout</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-allow-ip"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>allow_ip</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"allow user@IP for proxy permission"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_proxy_allow_ip</name></expr></argument>, <argument><expr><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"proxy-deny-ip"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>deny_ip</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"deny user@IP for proxy permission"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_proxy_deny_ip</name></expr></argument>, <argument><expr><name>SAVE_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>chassis_options_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"read-master-percentage"</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPTION_ARG_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>read_master_percentage</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"range [0, 100]"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>assign_read_master_percentage</name></expr></argument>, <argument><expr><name>show_read_master_percentage</name></expr></argument>, <argument><expr><name>ALL_OPTS_PROPERTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>opts</name><operator>.</operator><name>options</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * init the plugin with the parsed config
 */</comment>
<function><type><name>int</name></type>
<name>network_mysqld_proxy_plugin_apply_config</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>, <parameter><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>network_mysqld_con</name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>network_socket</name> <modifier>*</modifier></type><name>listen_sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chassis_private</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>chas</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">":4040"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1:3306"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>allow_ip</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_acl_add_rules</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>ACL_WHITELIST</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>allow_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>deny_ip</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cetus_acl_add_rules</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>ACL_BLACKLIST</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>deny_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" format="doxygen">/**
     * create a connection handle for the listen socket
     */</comment>
    <expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>network_mysqld_con_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>network_mysqld_add_connection</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name></name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>listen_sock</name> <operator>=</operator> <call><name>network_socket_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>listen_sock</name></expr>;</expr_stmt>

    <comment type="block">/*
     * set the plugin hooks as we want to apply them
     * to the new connections too later
     */</comment>
    <expr_stmt><expr><call><name>network_mysqld_proxy_connection_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_address_set_address</name><argument_list>(<argument><expr><name><name>listen_sock</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_socket_bind</name><argument_list>(<argument><expr><name>listen_sock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"proxy listening on port %s, con:%p"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>plugin_add_backends</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>backend_addresses</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>read_only_backend_addresses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * call network_mysqld_con_accept() with this connection when we are done
     */</comment>

    <expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>listen_sock</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>listen_sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>, <argument><expr><name>network_mysqld_con_accept</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>event_base_set</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>event_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>listen_sock</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>listen_sock</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:listen sock, ev:%p"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>, <argument><expr><operator>(</operator><operator>&amp;</operator><name><name>listen_sock</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>network_backends_load_config</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>backends</name></name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>update_timer_event</name></name></expr></argument>, <argument><expr><name>update_time_func</name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>update_time_interval</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>update_timer_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>update_time_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>network_connection_pool_create_conns</name><argument_list>(<argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>auto_create_conns_event</name></name></expr></argument>, <argument><expr><name>check_and_create_conns_func</name></expr></argument>, <argument><expr><name>chas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>check_interval</name> <init>= <expr><block>{<expr><literal type="number">30</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>chassis_event_add_with_timeout</name><argument_list>(<argument><expr><name>chas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chas</name><operator>-&gt;</operator><name>auto_create_conns_event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"%s:set callback check_and_create_conns_func"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>chassis_config_register_service</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><literal type="string">"proxy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sql_filter_vars_load_default_rules</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>var_json</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>chassis_config_query_object</name><argument_list>(<argument><expr><name><name>chas</name><operator>-&gt;</operator><name>config_manager</name></name></expr></argument>, <argument><expr><literal type="string">"variables"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_json</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"reading variable rules"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sql_filter_vars_load_str_rules</name><argument_list>(<argument><expr><name>var_json</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"variable rule load error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>var_json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 
<name>network_mysqld_proxy_plugin_stop_listening</name><parameter_list>(<parameter><decl><type><name>chassis</name> <modifier>*</modifier></type><name>chas</name></decl></parameter>,
        <parameter><decl><type><name>chassis_plugin_config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:call network_mysqld_proxy_plugin_stop_listening"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"%s:close listen socket"</literal></expr></argument>, <argument><expr><name>G_STRLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>network_socket_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>listen_con</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>G_MODULE_EXPORT</name> <name>int</name></type>
<name>plugin_init</name><parameter_list>(<parameter><decl><type><name>chassis_plugin</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>CHASSIS_PLUGIN_MAGIC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"proxy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>PLUGIN_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>network_mysqld_proxy_plugin_new</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_options</name></name> <operator>=</operator> <name>network_mysqld_proxy_plugin_get_options</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apply_config</name></name> <operator>=</operator> <name>network_mysqld_proxy_plugin_apply_config</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stop_listening</name></name> <operator>=</operator> <name>network_mysqld_proxy_plugin_stop_listening</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>destroy</name></name> <operator>=</operator> <name>network_mysqld_proxy_plugin_free</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
