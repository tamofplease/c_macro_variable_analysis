<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/research/durchschlag.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_RESEARCH_DURCHSCHLAG_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_RESEARCH_DURCHSCHLAG_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * Generate a dictionary for given samples.
 *
 * @param dictionary_size_limit maximal dictionary size
 * @param slice_len text slice size
 * @param block_len score block length
 * @param sample_sizes vector with sample sizes
 * @param sample_data concatenated samples
 * @return generated dictionary
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>durchschlag_generate</name><argument_list>(
    <argument>size_t dictionary_size_limit</argument>, <argument>size_t slice_len</argument>, <argument>size_t block_len</argument>,
    <argument>const std::vector&lt;size_t&gt;&amp; sample_sizes</argument>, <argument>const uint8_t* sample_data</argument>)</argument_list></macro></expr>;</expr_stmt>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Lower level API for repetitive dictionary generation.</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="block">/* Pointer to position in text. */</comment>
<typedef>typedef <type><name>uint32_t</name></type> <name>DurchschlagTextIdx</name>;</typedef>

<comment type="block">/* Context is made public for flexible serialization / deserialization. */</comment>
<typedef>typedef <type><struct>struct <name>DurchschlagContext</name> <block>{
  <decl_stmt><decl><type><name>DurchschlagTextIdx</name></type> <name>dataSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DurchschlagTextIdx</name></type> <name>sliceLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DurchschlagTextIdx</name></type> <name>numUniqueSlices</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DurchschlagTextIdx</name></expr></argument>&gt;</argument_list></name> <name>offsets</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DurchschlagTextIdx</name></expr></argument>&gt;</argument_list></name> <name>sliceMap</name></expr>;</expr_stmt>
}</block></struct></type> <name>DurchschlagContext</name>;</typedef>

<decl_stmt><decl><type><name>DurchschlagContext</name></type> <name>durchschlag_prepare</name><argument_list>(<argument><expr><name>size_t</name> <name>slice_len</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>sample_sizes</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name><operator>*</operator> <name>sample_data</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>DurchschalgResourceStrategy</name> <block>{
  <comment type="line">// Faster</comment>
  <decl><name>DURCHSCHLAG_EXCLUSIVE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
  <comment type="line">// Uses much less memory</comment>
  <decl><name>DURCHSCHLAG_COLLABORATIVE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>DurchschalgResourceStrategy</name>;</typedef>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>durchschlag_generate</name><argument_list>(<argument>DurchschalgResourceStrategy strategy</argument>,
    <argument>size_t dictionary_size_limit</argument>, <argument>size_t block_len</argument>,
    <argument>const DurchschlagContext&amp; context</argument>, <argument>const uint8_t* sample_data</argument>)</argument_list></macro></expr>;</expr_stmt>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Suffix Array based preparation.</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<typedef>typedef <type><struct>struct <name>DurchschlagIndex</name> <block>{
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DurchschlagTextIdx</name></expr></argument>&gt;</argument_list></name> <name>lcp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DurchschlagTextIdx</name></expr></argument>&gt;</argument_list></name> <name>sa</name></expr>;</expr_stmt>
}</block></struct></type> <name>DurchschlagIndex</name>;</typedef>

<decl_stmt><decl><type><name>DurchschlagIndex</name></type> <name>durchschlag_index</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>data</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DurchschlagContext</name></type> <name>durchschlag_prepare</name><argument_list>(<argument><expr><name>size_t</name> <name>slice_len</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>sample_sizes</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>DurchschlagIndex</name><operator>&amp;</operator> <name>index</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Data preparation.</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="block" format="doxygen">/**
 * Cut out unique slices.
 *
 * Both @p sample_sizes and @p sample_data are modified in-place. Number of
 * samples remains unchanged, but some samples become shorter.
 *
 * @param slice_len (unique) slice size
 * @param minimum_population minimum non-unique slice occurrence
 * @param sample_sizes [in / out] vector with sample sizes
 * @param sample_data [in / out] concatenated samples
 */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>durchschlag_distill</name><argument_list>(<argument><expr><name>size_t</name> <name>slice_len</name></expr></argument>, <argument><expr><name>size_t</name> <name>minimum_population</name></expr></argument>,
    <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>sample_sizes</name></expr></argument>, <argument><expr><name>uint8_t</name><operator>*</operator> <name>sample_data</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Replace unique slices with zeroes.
 *
 * @p sample_data is modified in-place. Number of samples and their length
 * remain unchanged.
 *
 * @param slice_len (unique) slice size
 * @param minimum_population minimum non-unique slice occurrence
 * @param sample_sizes vector with sample sizes
 * @param sample_data [in / out] concatenated samples
 */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>durchschlag_purify</name><argument_list>(<argument><expr><name>size_t</name> <name>slice_len</name></expr></argument>, <argument><expr><name>size_t</name> <name>minimum_population</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>sample_sizes</name></expr></argument>, <argument><expr><name>uint8_t</name><operator>*</operator> <name>sample_data</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// BROTLI_RESEARCH_DURCHSCHLAG_H_</comment>
</unit>
