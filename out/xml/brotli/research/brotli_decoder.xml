<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/research/brotli_decoder.c"><comment type="block">/* Copyright 2018 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/decode.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fdopen</name></cpp:macro> <cpp:value>_fdopen</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDIN_FILENO</name></cpp:macro> <cpp:value>_fileno(stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDOUT_FILENO</name></cpp:macro> <cpp:value>_fileno(stdout)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>(1u &lt;&lt; 20)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Context</name> <block>{
  <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fin</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fout</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>input_buffer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>output_buffer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BrotliDecoderState</name><modifier>*</modifier></type> <name>decoder</name></decl>;</decl_stmt>
}</block></struct></type> <name>Context</name>;</typedef>

<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanup</name><parameter_list>(<parameter><decl><type><name>Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>decoder</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>BrotliDecoderDestroyInstance</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>output_buffer</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>input_buffer</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fout</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fin</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fail</name><parameter_list>(<parameter><decl><type><name>Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Context</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BrotliDecoderResult</name></type> <name>result</name> <init>= <expr><name>BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>available_in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>next_in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>available_out</name> <init>= <expr><name>BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>next_out</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>fin</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>.</operator><name>fin</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"can't open input file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>fout</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>.</operator><name>fout</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"can't open output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>input_buffer</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>.</operator><name>input_buffer</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"out of memory / input buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>output_buffer</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>.</operator><name>output_buffer</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"out of memory / output buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>decoder</name></name> <operator>=</operator> <call><name>BrotliDecoderCreateInstance</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>.</operator><name>decoder</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"out of memory / decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>BrotliDecoderSetParameter</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>BROTLI_DECODER_PARAM_LARGE_WINDOW</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>next_out</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>output_buffer</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>fin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>available_in</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>input_buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>BUFFER_SIZE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>fin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>next_in</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>input_buffer</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>fin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <name>BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>output_buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>BUFFER_SIZE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>fout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>fout</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>available_out</name> <operator>=</operator> <name>BUFFER_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>next_out</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>output_buffer</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>BrotliDecoderDecompressStream</name><argument_list>(
        <argument><expr><name><name>ctx</name><operator>.</operator><name>decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>available_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>available_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>next_out</name> <operator>!=</operator> <name><name>ctx</name><operator>.</operator><name>output_buffer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>output_buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>next_out</name> <operator>-</operator> <name><name>ctx</name><operator>.</operator><name>output_buffer</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>fout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>==</operator> <name>BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT</name><operator>)</operator> <operator>||</operator> <call><name>ferror</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>fout</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"failed to write output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>result</name> <operator>!=</operator> <name>BROTLI_DECODER_RESULT_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"corrupt input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
