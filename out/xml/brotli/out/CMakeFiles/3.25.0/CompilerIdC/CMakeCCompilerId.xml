<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/out/CMakeFiles/3.25.0/CompilerIdC/CMakeCCompilerId.c"><cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"A C++ compiler has been selected for C."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__18CXX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ID_VOID_MAIN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLASSIC_C__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* cv-qualifiers did not exist in K&amp;R C */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>const</name></cpp:macro></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>volatile</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_include</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* If the compiler does not have __has_include, pretend the answer is
   always no.  */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>__has_include</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ICC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"Intel"</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_ID</name></cpp:macro> <cpp:value>"MSVC"</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_ID</name></cpp:macro> <cpp:value>"GNU"</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
     except that a few beta releases use the old format with V=2021.  */</comment>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>__INTEL_COMPILER</name> <operator>&lt;</operator> <literal type="number">2021</literal> <operator>||</operator> <name>__INTEL_COMPILER</name> <operator>==</operator> <literal type="number">202110</literal> <operator>||</operator> <name>__INTEL_COMPILER</name> <operator>==</operator> <literal type="number">202111</literal></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__INTEL_COMPILER/100)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__INTEL_COMPILER/10 % 10)</cpp:value></cpp:define>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER_UPDATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__INTEL_COMPILER_UPDATE)</cpp:value></cpp:define>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__INTEL_COMPILER   % 10)</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__INTEL_COMPILER)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__INTEL_COMPILER_UPDATE)</cpp:value></cpp:define>
   <comment type="block">/* The third version component from --version is an update index,
      but no macro is provided for it.  */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(0)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER_BUILD_DATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <comment type="block">/* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_TWEAK</name></cpp:macro> <cpp:value>DEC(__INTEL_COMPILER_BUILD_DATE)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <comment type="block">/* _MSC_VER = VVRR */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(_MSC_VER / 100)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(_MSC_VER % 100)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__GNUC__)</cpp:value></cpp:define>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUG__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__GNUG__)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC_MINOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__GNUC_MINOR__)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC_PATCHLEVEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__GNUC_PATCHLEVEL__)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_CLANG_COMPILER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_LLVM_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"IntelLLVM"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_ID</name></cpp:macro> <cpp:value>"MSVC"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_ID</name></cpp:macro> <cpp:value>"GNU"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
 * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
 * VVVV is no smaller than the current year when a version is released.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__INTEL_LLVM_COMPILER</name> <operator>&lt;</operator> <literal type="number">1000000L</literal></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__INTEL_LLVM_COMPILER/100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__INTEL_LLVM_COMPILER/10 % 10)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__INTEL_LLVM_COMPILER    % 10)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__INTEL_LLVM_COMPILER/10000)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__INTEL_LLVM_COMPILER/100 % 100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__INTEL_LLVM_COMPILER     % 100)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* _MSC_VER = VVRR */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(_MSC_VER / 100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(_MSC_VER % 100)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__GNUC__)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUG__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__GNUG__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC_MINOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__GNUC_MINOR__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC_PATCHLEVEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__GNUC_PATCHLEVEL__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PATHCC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"PathScale"</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__PATHCC__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__PATHCC_MINOR__)</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PATHCC_PATCHLEVEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__PATHCC_PATCHLEVEL__)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CODEGEARC_VERSION__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"Embarcadero"</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>HEX(__CODEGEARC_VERSION__&gt;&gt;24 &amp; 0x00FF)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>HEX(__CODEGEARC_VERSION__&gt;&gt;16 &amp; 0x00FF)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__CODEGEARC_VERSION__     &amp; 0xFFFF)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"Borland"</cpp:value></cpp:define>
  <comment type="block">/* __BORLANDC__ = 0xVRR */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>HEX(__BORLANDC__&gt;&gt;8)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>HEX(__BORLANDC__ &amp; 0xFF)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__WATCOMC__</name> <operator>&lt;</operator> <literal type="number">1200</literal></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"Watcom"</cpp:value></cpp:define>
   <comment type="block">/* __WATCOMC__ = VVRR */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__WATCOMC__ / 100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC((__WATCOMC__ / 10) % 10)</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__WATCOMC__</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__WATCOMC__ % 10)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"OpenWatcom"</cpp:value></cpp:define>
   <comment type="block">/* __WATCOMC__ = VVRP + 1100 */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC((__WATCOMC__ - 1100) / 100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC((__WATCOMC__ / 10) % 10)</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__WATCOMC__</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__WATCOMC__ % 10)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_C</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"SunPro"</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>__SUNPRO_C</name> <operator>&gt;=</operator> <literal type="number">0x5100</literal></expr></cpp:if>
   <comment type="block">/* __SUNPRO_C = 0xVRRP */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>HEX(__SUNPRO_C&gt;&gt;12)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>HEX(__SUNPRO_C&gt;&gt;4 &amp; 0xFF)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>HEX(__SUNPRO_C    &amp; 0xF)</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
   <comment type="block">/* __SUNPRO_CC = 0xVRP */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>HEX(__SUNPRO_C&gt;&gt;8)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>HEX(__SUNPRO_C&gt;&gt;4 &amp; 0xF)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>HEX(__SUNPRO_C    &amp; 0xF)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HP_cc</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"HP"</cpp:value></cpp:define>
  <comment type="block">/* __HP_cc = VVRRPP */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__HP_cc/10000)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__HP_cc/100 % 100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__HP_cc     % 100)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"Compaq"</cpp:value></cpp:define>
  <comment type="block">/* __DECC_VER = VVRRTPPPP */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__DECC_VER/10000000)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__DECC_VER/100000  % 100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__DECC_VER         % 10000)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__IBMC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__COMPILER_VER__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"zOS"</cpp:value></cpp:define>
  <comment type="block">/* __IBMC__ = VRP */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__IBMC__/100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__IBMC__/10 % 10)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__IBMC__    % 10)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__open_xl__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"IBMClang"</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__open_xl_version__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__open_xl_release__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__open_xl_modification__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_TWEAK</name></cpp:macro> <cpp:value>DEC(__open_xl_ptf_fix_level__)</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ibmxl__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"XLClang"</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__ibmxl_version__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__ibmxl_release__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__ibmxl_modification__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_TWEAK</name></cpp:macro> <cpp:value>DEC(__ibmxl_ptf_fix_level__)</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__IBMC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__COMPILER_VER__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__IBMC__</name> <operator>&gt;=</operator> <literal type="number">800</literal></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"XL"</cpp:value></cpp:define>
  <comment type="block">/* __IBMC__ = VRP */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__IBMC__/100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__IBMC__/10 % 10)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__IBMC__    % 10)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__IBMC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__COMPILER_VER__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__IBMC__</name> <operator>&lt;</operator> <literal type="number">800</literal></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"VisualAge"</cpp:value></cpp:define>
  <comment type="block">/* __IBMC__ = VRP */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__IBMC__/100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__IBMC__/10 % 10)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__IBMC__    % 10)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NVCOMPILER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"NVHPC"</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__NVCOMPILER_MAJOR__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__NVCOMPILER_MINOR__)</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NVCOMPILER_PATCHLEVEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__NVCOMPILER_PATCHLEVEL__)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"PGI"</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__PGIC__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__PGIC_MINOR__)</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PGIC_PATCHLEVEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__PGIC_PATCHLEVEL__)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_CRAYC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"Cray"</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(_RELEASE_MAJOR)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(_RELEASE_MINOR)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TI_COMPILER_VERSION__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"TI"</cpp:value></cpp:define>
  <comment type="block">/* __TI_COMPILER_VERSION__ = VVVRRRPPP */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__TI_COMPILER_VERSION__/1000000)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__TI_COMPILER_VERSION__/1000   % 1000)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__TI_COMPILER_VERSION__        % 1000)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_FUJITSU</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"FujitsuClang"</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__FCC_major__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__FCC_minor__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__FCC_patchlevel__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_INTERNAL_STR</name></cpp:macro> <cpp:value>__clang_version__</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FUJITSU</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"Fujitsu"</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FCC_version__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION</name></cpp:macro> <cpp:value>__FCC_version__</cpp:value></cpp:define>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FCC_major__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__FCC_major__)</cpp:value></cpp:define>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__FCC_minor__)</cpp:value></cpp:define>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__FCC_patchlevel__)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__fcc_version</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_INTERNAL</name></cpp:macro> <cpp:value>DEC(__fcc_version)</cpp:value></cpp:define>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FCC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_INTERNAL</name></cpp:macro> <cpp:value>DEC(__FCC_VERSION)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ghs__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"GHS"</cpp:value></cpp:define>
<comment type="block">/* __GHS_VERSION_NUMBER = VVVVRP */</comment>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>__GHS_VERSION_NUMBER</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__GHS_VERSION_NUMBER / 100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__GHS_VERSION_NUMBER / 10 % 10)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__GHS_VERSION_NUMBER      % 10)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TASKING__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"Tasking"</cpp:value></cpp:define>
  <cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__VERSION__/1000)</cpp:value></cpp:define>
  <cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__VERSION__ % 100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_INTERNAL</name></cpp:macro> <cpp:value>DEC(__VERSION__)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TINYC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"TinyCC"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BCC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"Bruce"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SCO_VERSION__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"SCO"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"ARMCC"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARMCC_VERSION</name> <operator>&gt;=</operator> <literal type="number">1000000</literal></expr></cpp:if>
  <comment type="block">/* __ARMCC_VERSION = VRRPPPP */</comment>
  <cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__ARMCC_VERSION/1000000)</cpp:value></cpp:define>
  <cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__ARMCC_VERSION/10000 % 100)</cpp:value></cpp:define>
  <cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__ARMCC_VERSION     % 10000)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* __ARMCC_VERSION = VRPPPP */</comment>
  <cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__ARMCC_VERSION/100000)</cpp:value></cpp:define>
  <cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__ARMCC_VERSION/10000 % 10)</cpp:value></cpp:define>
  <cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__ARMCC_VERSION    % 10000)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__apple_build_version__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"AppleClang"</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_ID</name></cpp:macro> <cpp:value>"MSVC"</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__clang_major__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__clang_minor__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__clang_patchlevel__)</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <comment type="block">/* _MSC_VER = VVRR */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(_MSC_VER / 100)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(_MSC_VER % 100)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_TWEAK</name></cpp:macro> <cpp:value>DEC(__apple_build_version__)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARMCOMPILER_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"ARMClang"</cpp:value></cpp:define>
  <cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__ARMCOMPILER_VERSION/1000000)</cpp:value></cpp:define>
  <cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__ARMCOMPILER_VERSION/10000 % 100)</cpp:value></cpp:define>
  <cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__ARMCOMPILER_VERSION     % 10000)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_INTERNAL</name></cpp:macro> <cpp:value>DEC(__ARMCOMPILER_VERSION)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"Clang"</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_ID</name></cpp:macro> <cpp:value>"MSVC"</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__clang_major__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__clang_minor__)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__clang_patchlevel__)</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <comment type="block">/* _MSC_VER = VVRR */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(_MSC_VER / 100)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(_MSC_VER % 100)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LCC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUG__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MCST__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"LCC"</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(1)</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LCC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__LCC__- 100)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LCC_MINOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__LCC_MINOR__)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC_MINOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_ID</name></cpp:macro> <cpp:value>"GNU"</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__GNUC__)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__GNUC_MINOR__)</cpp:value></cpp:define>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC_PATCHLEVEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>SIMULATE_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__GNUC_PATCHLEVEL__)</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"GNU"</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__GNUC__)</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC_MINOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__GNUC_MINOR__)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC_PATCHLEVEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__GNUC_PATCHLEVEL__)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"MSVC"</cpp:value></cpp:define>
  <comment type="block">/* _MSC_VER = VVRR */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(_MSC_VER / 100)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(_MSC_VER % 100)</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_FULL_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>
    <comment type="block">/* _MSC_FULL_VER = VVRRPPPPP */</comment>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(_MSC_FULL_VER % 100000)</cpp:value></cpp:define>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* _MSC_FULL_VER = VVRRPPPP */</comment>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(_MSC_FULL_VER % 10000)</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_TWEAK</name></cpp:macro> <cpp:value>DEC(_MSC_BUILD)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ADI_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"ADSP"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VERSIONNUM__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* __VERSIONNUM__ = 0xVVRRPPTT */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__VERSIONNUM__ &gt;&gt; 24 &amp; 0xFF)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__VERSIONNUM__ &gt;&gt; 16 &amp; 0xFF)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__VERSIONNUM__ &gt;&gt; 8 &amp; 0xFF)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_TWEAK</name></cpp:macro> <cpp:value>DEC(__VERSIONNUM__ &amp; 0xFF)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__IAR_SYSTEMS_ICC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__IAR_SYSTEMS_ICC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"IAR"</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VER__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ICCARM__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC((__VER__) / 1000000)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(((__VER__) / 1000) % 1000)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC((__VER__) % 1000)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_INTERNAL</name></cpp:macro> <cpp:value>DEC(__IAR_SYSTEMS_ICC__)</cpp:value></cpp:define>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VER__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ICCAVR__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ICCRX__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ICCRH850__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ICCRL78__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ICC430__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ICCRISCV__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ICCV850__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ICC8051__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ICCSTM8__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC((__VER__) / 100)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC((__VER__) - (((__VER__) / 100)*100))</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__SUBVERSION__)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_INTERNAL</name></cpp:macro> <cpp:value>DEC(__IAR_SYSTEMS_ICC__)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SDCC_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SDCC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"SDCC"</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SDCC_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(__SDCC_VERSION_MAJOR)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(__SDCC_VERSION_MINOR)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(__SDCC_VERSION_PATCH)</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* SDCC = VRP */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MAJOR</name></cpp:macro> <cpp:value>DEC(SDCC/100)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_MINOR</name></cpp:macro> <cpp:value>DEC(SDCC/10 % 10)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_VERSION_PATCH</name></cpp:macro> <cpp:value>DEC(SDCC    % 10)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__hpua</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>"HP"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* unknown compiler */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ID</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */</comment>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>info_compiler</name> <init>= <expr><literal type="string">"INFO"</literal> <literal type="string">":"</literal> <literal type="string">"compiler["</literal> <name>COMPILER_ID</name> <literal type="string">"]"</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIMULATE_ID</name></cpp:ifdef>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>info_simulate</name> <init>= <expr><literal type="string">"INFO"</literal> <literal type="string">":"</literal> <literal type="string">"simulate["</literal> <name>SIMULATE_ID</name> <literal type="string">"]"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__QNXNTO__</name></cpp:ifdef>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>qnxnto</name> <init>= <expr><literal type="string">"INFO"</literal> <literal type="string">":"</literal> <literal type="string">"qnxnto[]"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CRAYXT_COMPUTE_LINUX_TARGET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>info_cray</name> <init>= <expr><literal type="string">"INFO"</literal> <literal type="string">":"</literal> <literal type="string">"compiler_wrapper[CrayPrgEnv]"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGIFY_HELPER</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#X</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGIFY</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STRINGIFY_HELPER(X)</cpp:value></cpp:define>

<comment type="block">/* Identify known platforms by name.  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>linux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"Linux"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MSYS__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"MSYS"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"Cygwin"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"MinGW"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"Darwin"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__WIN32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"Windows"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"FreeBSD"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"NetBSD"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OPENBSD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"OpenBSD"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>sun</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"SunOS"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AIX__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aix</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aix__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"AIX"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__hpux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"HP-UX"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAIKU__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"Haiku"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BeOS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__BEOS__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_BEOS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"BeOS"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__QNX__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__QNXNTO__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"QNX"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__tru64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_tru64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TRU64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"Tru64"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__riscos</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__riscos__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"RISCos"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sinix</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sinix__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SINIX__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"SINIX"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIX_SV__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"UNIX_SV"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__bsdos__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"BSDOS"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MPRAS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MPRAS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"MP-RAS"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__osf</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__osf__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"OSF1"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SCO_SV</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SCO_SV</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>sco_sv</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"SCO_SV"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ultrix</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ultrix__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_ULTRIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"ULTRIX"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__XENIX__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_XENIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>XENIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"Xenix"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LINUX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"Linux"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DOS__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"DOS"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"OS2"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"Windows3x"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VXWORKS__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"VxWorks"</cpp:value></cpp:define>

<cpp:else># <cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* unknown platform */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEGRITY</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INT_178B</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"Integrity178"</cpp:value></cpp:define>

<cpp:else># <cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* regular Integrity */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"Integrity"</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ADI_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro> <cpp:value>"ADSP"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* unknown platform */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_ID</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_IA64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"IA64"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM64EC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"ARM64EC"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"x64"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"X86"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"ARM64"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>_M_ARM</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"ARMV4I"</cpp:value></cpp:define>
<cpp:elif>#  <cpp:directive>elif</cpp:directive> <expr><name>_M_ARM</name> <operator>==</operator> <literal type="number">5</literal></expr></cpp:elif>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"ARMV5I"</cpp:value></cpp:define>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"ARMV" STRINGIFY(_M_ARM)</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"MIPS"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_SH</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"SHx"</cpp:value></cpp:define>

<cpp:else># <cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* unknown architecture */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_I86</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"I86"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"X86"</cpp:value></cpp:define>

<cpp:else># <cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* unknown architecture */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__IAR_SYSTEMS_ICC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__IAR_SYSTEMS_ICC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ICCARM__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"ARM"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ICCRX__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"RX"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ICCRH850__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"RH850"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ICCRL78__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"RL78"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ICCRISCV__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"RISCV"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ICCAVR__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"AVR"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ICC430__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"MSP430"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ICCV850__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"V850"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ICC8051__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"8051"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ICCSTM8__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"STM8"</cpp:value></cpp:define>

<cpp:else># <cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* unknown architecture */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ghs__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PPC64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"PPC64"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"PPC"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"ARM"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"x64"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"X86"</cpp:value></cpp:define>

<cpp:else># <cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* unknown architecture */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TI_COMPILER_VERSION__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TI_ARM__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"ARM"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MSP430__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"MSP430"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TMS320C28XX__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"TMS320C28x"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TMS320C6X__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_TMS320C6X</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"TMS320C6x"</cpp:value></cpp:define>

<cpp:else># <cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* unknown architecture */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ADSPSHARC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"SHARC"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ADSPBLACKFIN__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"Blackfin"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TASKING__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CTC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CPTC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"TriCore"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CMCS__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"MCS"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CARM__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"ARM"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CARC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"ARC"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__C51__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"8051"</cpp:value></cpp:define>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CPCP__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>"PCP"</cpp:value></cpp:define>

<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHITECTURE_ID</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Convert integer to decimal digit literals.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>                   \
  <cpp:value>('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))</cpp:value></cpp:define>

<comment type="block">/* Convert integer to hex digit literals.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>             \
  <cpp:value>('0' + ((n)&gt;&gt;28 &amp; 0xF)), \
  ('0' + ((n)&gt;&gt;24 &amp; 0xF)), \
  ('0' + ((n)&gt;&gt;20 &amp; 0xF)), \
  ('0' + ((n)&gt;&gt;16 &amp; 0xF)), \
  ('0' + ((n)&gt;&gt;12 &amp; 0xF)), \
  ('0' + ((n)&gt;&gt;8  &amp; 0xF)), \
  ('0' + ((n)&gt;&gt;4  &amp; 0xF)), \
  ('0' + ((n)     &amp; 0xF))</cpp:value></cpp:define>

<comment type="block">/* Construct a string literal encoding the version number. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>COMPILER_VERSION</name></cpp:ifdef>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>info_version</name> <init>= <expr><literal type="string">"INFO"</literal> <literal type="string">":"</literal> <literal type="string">"compiler_version["</literal> <name>COMPILER_VERSION</name> <literal type="string">"]"</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Construct a string literal encoding the version number components. */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier></type> <name><name>info_version</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">':'</literal></expr>,
  <expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'m'</literal></expr>,<expr><literal type="char">'p'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'_'</literal></expr>,<expr><literal type="char">'v'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'s'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'['</literal></expr>,
  <expr><name>COMPILER_VERSION_MAJOR</name></expr>,
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>COMPILER_VERSION_MINOR</name></cpp:ifdef>
  <expr><literal type="char">'.'</literal></expr>, <expr><name>COMPILER_VERSION_MINOR</name></expr>,
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>COMPILER_VERSION_PATCH</name></cpp:ifdef>
   <expr><literal type="char">'.'</literal></expr>, <expr><name>COMPILER_VERSION_PATCH</name></expr>,
<cpp:ifdef>#   <cpp:directive>ifdef</cpp:directive> <name>COMPILER_VERSION_TWEAK</name></cpp:ifdef>
    <expr><literal type="char">'.'</literal></expr>, <expr><name>COMPILER_VERSION_TWEAK</name></expr>,
<cpp:endif>#   <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><literal type="char">']'</literal></expr>,<expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Construct a string literal encoding the internal version number. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>COMPILER_VERSION_INTERNAL</name></cpp:ifdef>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier></type> <name><name>info_version_internal</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">':'</literal></expr>,
  <expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'m'</literal></expr>,<expr><literal type="char">'p'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'_'</literal></expr>,<expr><literal type="char">'v'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'s'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'_'</literal></expr>,
  <expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'['</literal></expr>,
  <expr><name>COMPILER_VERSION_INTERNAL</name></expr>,<expr><literal type="char">']'</literal></expr>,<expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_VERSION_INTERNAL_STR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>info_version_internal</name> <init>= <expr><literal type="string">"INFO"</literal> <literal type="string">":"</literal> <literal type="string">"compiler_version_internal["</literal> <name>COMPILER_VERSION_INTERNAL_STR</name> <literal type="string">"]"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Construct a string literal encoding the version number components. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIMULATE_VERSION_MAJOR</name></cpp:ifdef>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier></type> <name><name>info_simulate_version</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">':'</literal></expr>,
  <expr><literal type="char">'s'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'m'</literal></expr>,<expr><literal type="char">'u'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'_'</literal></expr>,<expr><literal type="char">'v'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'s'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'['</literal></expr>,
  <expr><name>SIMULATE_VERSION_MAJOR</name></expr>,
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>SIMULATE_VERSION_MINOR</name></cpp:ifdef>
  <expr><literal type="char">'.'</literal></expr>, <expr><name>SIMULATE_VERSION_MINOR</name></expr>,
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>SIMULATE_VERSION_PATCH</name></cpp:ifdef>
   <expr><literal type="char">'.'</literal></expr>, <expr><name>SIMULATE_VERSION_PATCH</name></expr>,
<cpp:ifdef>#   <cpp:directive>ifdef</cpp:directive> <name>SIMULATE_VERSION_TWEAK</name></cpp:ifdef>
    <expr><literal type="char">'.'</literal></expr>, <expr><name>SIMULATE_VERSION_TWEAK</name></expr>,
<cpp:endif>#   <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><literal type="char">']'</literal></expr>,<expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */</comment>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>info_platform</name> <init>= <expr><literal type="string">"INFO"</literal> <literal type="string">":"</literal> <literal type="string">"platform["</literal> <name>PLATFORM_ID</name> <literal type="string">"]"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>info_arch</name> <init>= <expr><literal type="string">"INFO"</literal> <literal type="string">":"</literal> <literal type="string">"arch["</literal> <name>ARCHITECTURE_ID</name> <literal type="string">"]"</literal></expr></init></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ibmxl__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__IBMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>C_VERSION</name></cpp:macro> <cpp:value>"90"</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>C_VERSION</name></cpp:macro></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;</operator> <literal type="number">201710L</literal></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>C_VERSION</name></cpp:macro> <cpp:value>"23"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201710L</literal></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>C_VERSION</name></cpp:macro> <cpp:value>"17"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201000L</literal></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>C_VERSION</name></cpp:macro> <cpp:value>"11"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>C_VERSION</name></cpp:macro> <cpp:value>"99"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>C_VERSION</name></cpp:macro> <cpp:value>"90"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>info_language_standard_default</name> <init>=
  <expr><literal type="string">"INFO"</literal> <literal type="string">":"</literal> <literal type="string">"standard_default["</literal> <name>C_VERSION</name> <literal type="string">"]"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>info_language_extensions_default</name> <init>= <expr><literal type="string">"INFO"</literal> <literal type="string">":"</literal> <literal type="string">"extensions_default["</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__xlC__</name></expr></argument>)</argument_list></call> <operator>||</operator>           \
     <call><name>defined</name><argument_list>(<argument><expr><name>__TI_COMPILER_VERSION__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>                                     \
  <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STRICT_ANSI__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <literal type="string">"ON"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <literal type="string">"OFF"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"]"</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*--------------------------------------------------------------------------*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ID_VOID_MAIN</name></cpp:ifdef>
<function><type><name>void</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLASSIC_C__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> main<argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list> <name>int</name> <name>argc</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>require</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>require</name> <operator>+=</operator> <name><name>info_compiler</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>require</name> <operator>+=</operator> <name><name>info_platform</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>require</name> <operator>+=</operator> <name><name>info_arch</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>COMPILER_VERSION_MAJOR</name></cpp:ifdef>
  <expr_stmt><expr><name>require</name> <operator>+=</operator> <name><name>info_version</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>COMPILER_VERSION_INTERNAL</name></cpp:ifdef>
  <expr_stmt><expr><name>require</name> <operator>+=</operator> <name><name>info_version_internal</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIMULATE_ID</name></cpp:ifdef>
  <expr_stmt><expr><name>require</name> <operator>+=</operator> <name><name>info_simulate</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIMULATE_VERSION_MAJOR</name></cpp:ifdef>
  <expr_stmt><expr><name>require</name> <operator>+=</operator> <name><name>info_simulate_version</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CRAYXT_COMPUTE_LINUX_TARGET</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>require</name> <operator>+=</operator> <name><name>info_cray</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>require</name> <operator>+=</operator> <name><name>info_language_standard_default</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>require</name> <operator>+=</operator> <name><name>info_language_extensions_default</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>
  <return>return <expr><name>require</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
