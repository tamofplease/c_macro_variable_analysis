<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/include/brotli/port.h"><comment type="block">/* Copyright 2016 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Macros for compiler / platform specific API declarations. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_COMMON_PORT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_COMMON_PORT_H_</name></cpp:macro></cpp:define>

<comment type="block">/* The following macros were borrowed from https://github.com/nemequ/hedley
 * with permission of original author - Evan Nemerson &lt;evan@nemerson.com&gt; */</comment>

<comment type="block">/* &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; hedley macros */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_MAKE_VERSION</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>revision</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(((major) * 1000000) + ((minor) * 1000) + (revision))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC_PATCHLEVEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_GNUC_VERSION</name></cpp:macro> \
  <cpp:value>BROTLI_MAKE_VERSION(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_GNUC_VERSION</name></cpp:macro> <cpp:value>BROTLI_MAKE_VERSION(__GNUC__, __GNUC_MINOR__, 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_GNUC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_GNUC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(BROTLI_GNUC_VERSION &gt;= BROTLI_MAKE_VERSION(major, minor, patch))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_GNUC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_FULL_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_FULL_VER</name> <operator>&gt;=</operator> <literal type="number">140000000</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_MSVC_VERSION</name></cpp:macro>                                \
  <cpp:value>BROTLI_MAKE_VERSION((_MSC_FULL_VER / 10000000),          \
                      (_MSC_FULL_VER % 10000000) / 100000, \
                      (_MSC_FULL_VER % 100000) / 100)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_FULL_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_MSVC_VERSION</name></cpp:macro>                              \
  <cpp:value>BROTLI_MAKE_VERSION((_MSC_FULL_VER / 1000000),         \
                      (_MSC_FULL_VER % 1000000) / 10000, \
                      (_MSC_FULL_VER % 10000) / 10)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_MSVC_VERSION</name></cpp:macro> \
  <cpp:value>BROTLI_MAKE_VERSION(_MSC_VER / 100, _MSC_VER % 100, 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_MSVC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_MSVC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(_MSC_FULL_VER &gt;= ((major * 10000000) + (minor * 100000) + (patch)))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1200</literal><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_MSVC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(_MSC_FULL_VER &gt;= ((major * 1000000) + (minor * 10000) + (patch)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_MSVC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(_MSC_VER &gt;= ((major * 100) + (minor)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER_UPDATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_INTEL_VERSION</name></cpp:macro>                   \
  <cpp:value>BROTLI_MAKE_VERSION(__INTEL_COMPILER / 100,  \
                      __INTEL_COMPILER % 100,  \
                      __INTEL_COMPILER_UPDATE)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_INTEL_VERSION</name></cpp:macro> \
  <cpp:value>BROTLI_MAKE_VERSION(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_INTEL_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_INTEL_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(BROTLI_INTEL_VERSION &gt;= BROTLI_MAKE_VERSION(major, minor, patch))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_INTEL_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>__PGIC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PGIC_MINOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PGIC_PATCHLEVEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_PGI_VERSION</name></cpp:macro> \
  <cpp:value>BROTLI_MAKE_VERSION(__PGIC__, __PGIC_MINOR__, __PGIC_PATCHLEVEL__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_PGI_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_PGI_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(BROTLI_PGI_VERSION &gt;= BROTLI_MAKE_VERSION(major, minor, patch))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_PGI_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__SUNPRO_C</name> <operator>&gt;</operator> <literal type="number">0x1000</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_SUNPRO_VERSION</name></cpp:macro>                                       \
  <cpp:value>BROTLI_MAKE_VERSION(                                              \
    (((__SUNPRO_C &gt;&gt; 16) &amp; 0xf) * 10) + ((__SUNPRO_C &gt;&gt; 12) &amp; 0xf), \
    (((__SUNPRO_C &gt;&gt; 8) &amp; 0xf) * 10) + ((__SUNPRO_C &gt;&gt; 4) &amp; 0xf),   \
    (__SUNPRO_C &amp; 0xf) * 10)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_C</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_SUNPRO_VERSION</name></cpp:macro>                  \
  <cpp:value>BROTLI_MAKE_VERSION((__SUNPRO_C &gt;&gt; 8) &amp; 0xf, \
                      (__SUNPRO_C &gt;&gt; 4) &amp; 0xf, \
                      (__SUNPRO_C) &amp; 0xf)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__SUNPRO_CC</name> <operator>&gt;</operator> <literal type="number">0x1000</literal><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_SUNPRO_VERSION</name></cpp:macro>                                         \
  <cpp:value>BROTLI_MAKE_VERSION(                                                \
    (((__SUNPRO_CC &gt;&gt; 16) &amp; 0xf) * 10) + ((__SUNPRO_CC &gt;&gt; 12) &amp; 0xf), \
    (((__SUNPRO_CC &gt;&gt; 8) &amp; 0xf) * 10) + ((__SUNPRO_CC &gt;&gt; 4) &amp; 0xf),   \
    (__SUNPRO_CC &amp; 0xf) * 10)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_SUNPRO_VERSION</name></cpp:macro>                   \
  <cpp:value>BROTLI_MAKE_VERSION((__SUNPRO_CC &gt;&gt; 8) &amp; 0xf, \
                      (__SUNPRO_CC &gt;&gt; 4) &amp; 0xf, \
                      (__SUNPRO_CC) &amp; 0xf)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_SUNPRO_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_SUNPRO_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(BROTLI_SUNPRO_VERSION &gt;= BROTLI_MAKE_VERSION(major, minor, patch))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_SUNPRO_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CC_ARM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARMCOMPILER_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ARM_VERSION</name></cpp:macro>                                       \
  <cpp:value>BROTLI_MAKE_VERSION((__ARMCOMPILER_VERSION / 1000000),         \
                      (__ARMCOMPILER_VERSION % 1000000) / 10000, \
                      (__ARMCOMPILER_VERSION % 10000) / 100)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CC_ARM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ARM_VERSION</name></cpp:macro>                                 \
  <cpp:value>BROTLI_MAKE_VERSION((__ARMCC_VERSION / 1000000),         \
                      (__ARMCC_VERSION % 1000000) / 10000, \
                      (__ARMCC_VERSION % 10000) / 100)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_ARM_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ARM_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(BROTLI_ARM_VERSION &gt;= BROTLI_MAKE_VERSION(major, minor, patch))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ARM_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ibmxl__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_IBM_VERSION</name></cpp:macro>                    \
  <cpp:value>BROTLI_MAKE_VERSION(__ibmxl_version__,      \
                      __ibmxl_release__,      \
                      __ibmxl_modification__)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__xlC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__xlC_ver__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_IBM_VERSION</name></cpp:macro> \
  <cpp:value>BROTLI_MAKE_VERSION(__xlC__ &gt;&gt; 8, __xlC__ &amp; 0xff, (__xlC_ver__ &gt;&gt; 8) &amp; 0xff)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__xlC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_IBM_VERSION</name></cpp:macro> <cpp:value>BROTLI_MAKE_VERSION(__xlC__ &gt;&gt; 8, __xlC__ &amp; 0xff, 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_IBM_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_IBM_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(BROTLI_IBM_VERSION &gt;= BROTLI_MAKE_VERSION(major, minor, patch))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_IBM_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TI_COMPILER_VERSION__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TI_VERSION</name></cpp:macro>                                         \
  <cpp:value>BROTLI_MAKE_VERSION((__TI_COMPILER_VERSION__ / 1000000),        \
                      (__TI_COMPILER_VERSION__ % 1000000) / 1000, \
                      (__TI_COMPILER_VERSION__ % 1000))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_TI_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TI_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(BROTLI_TI_VERSION &gt;= BROTLI_MAKE_VERSION(major, minor, patch))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TI_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__IAR_SYSTEMS_ICC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__VER__</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_IAR_VERSION</name></cpp:macro>                     \
  <cpp:value>BROTLI_MAKE_VERSION((__VER__ / 1000000),     \
                      (__VER__ / 1000) % 1000, \
                      (__VER__ % 1000))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_IAR_VERSION</name></cpp:macro> <cpp:value>BROTLI_MAKE_VERSION(VER / 100, __VER__ % 100, 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_IAR_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_IAR_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(BROTLI_IAR_VERSION &gt;= BROTLI_MAKE_VERSION(major, minor, patch))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_IAR_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__TINYC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TINYC_VERSION</name></cpp:macro> \
  <cpp:value>BROTLI_MAKE_VERSION(__TINYC__ / 1000, (__TINYC__ / 100) % 10, __TINYC__ % 100)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_TINYC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TINYC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(BROTLI_TINYC_VERSION &gt;= BROTLI_MAKE_VERSION(major, minor, patch))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TINYC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_GNUC_HAS_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>__has_attribute(attribute)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_GNUC_HAS_ATTRIBUTE</name><parameter_list>(<parameter><type><name>attribute</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>BROTLI_GNUC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_builtin</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_GNUC_HAS_BUILTIN</name><parameter_list>(<parameter><type><name>builtin</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>__has_builtin(builtin)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_GNUC_HAS_BUILTIN</name><parameter_list>(<parameter><type><name>builtin</name></type></parameter>, <parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>BROTLI_GNUC_VERSION_CHECK(major, minor, patch)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HAS_FEATURE</name><parameter_list>(<parameter><type><name>feature</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__has_feature(feature)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HAS_FEATURE</name><parameter_list>(<parameter><type><name>feature</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_PUBLIC</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>BROTLI_GNUC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>                         \
    <call><name>BROTLI_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>                             \
    <call><name>BROTLI_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">16</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>                         \
    <call><name>BROTLI_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>                            \
    <call><name>BROTLI_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>                           \
    <call><name>BROTLI_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">11</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>                        \
    <operator>(</operator><call><name>BROTLI_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>                            \
     <call><name>defined</name><argument_list>(<argument><expr><name>__TI_GNU_ATTRIBUTE_SUPPORT__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_EABI__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_PUBLIC</name></cpp:macro> <cpp:value>__attribute__ ((visibility ("default")))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_PUBLIC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* BROTLI_INTERNAL could be defined to override visibility, e.g. for tests. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_INTERNAL</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>BROTLI_GNUC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>                         \
    <call><name>BROTLI_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>                             \
    <call><name>BROTLI_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">16</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>                         \
    <call><name>BROTLI_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>                            \
    <call><name>BROTLI_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>                           \
    <call><name>BROTLI_SUNPRO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">11</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>                        \
    <operator>(</operator><call><name>BROTLI_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>                            \
     <call><name>defined</name><argument_list>(<argument><expr><name>__TI_GNU_ATTRIBUTE_SUPPORT__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TI_EABI__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_INTERNAL</name></cpp:macro> <cpp:value>__attribute__ ((visibility ("hidden")))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_INTERNAL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal><operator>)</operator> <operator>&amp;&amp;</operator>   \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_NO_VLA__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>           \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGIC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__TINYC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ARRAY_PARAM</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(name)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ARRAY_PARAM</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* &lt;&lt;&lt; &lt;&lt;&lt; &lt;&lt;&lt; end of hedley macros. */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_SHARED_COMPILATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLICOMMON_SHARED_COMPILATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_COMMON_API</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_COMMON_API</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLICOMMON_SHARED_COMPILATION */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLIDEC_SHARED_COMPILATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_DEC_API</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_DEC_API</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLIDEC_SHARED_COMPILATION */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLIENC_SHARED_COMPILATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_API</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_API</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLIENC_SHARED_COMPILATION */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* _WIN32 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_COMMON_API</name></cpp:macro> <cpp:value>BROTLI_PUBLIC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_DEC_API</name></cpp:macro> <cpp:value>BROTLI_PUBLIC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_API</name></cpp:macro> <cpp:value>BROTLI_PUBLIC</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* _WIN32 */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* BROTLI_SHARED_COMPILATION */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_COMMON_API</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_DEC_API</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_API</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_BUILD_ENC_EXTRA_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_EXTRA_API</name></cpp:macro> <cpp:value>BROTLI_ENC_API</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_EXTRA_API</name></cpp:macro> <cpp:value>BROTLI_INTERNAL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_COMMON_PORT_H_ */</comment>
</unit>
