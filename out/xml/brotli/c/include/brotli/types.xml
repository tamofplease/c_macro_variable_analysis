<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/include/brotli/types.h"><comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block" format="doxygen">/**
 * @file
 * Common types used in decoder and encoder API.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_COMMON_TYPES_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_COMMON_TYPES_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>  <comment type="block">/* for size_t */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1600</literal><operator>)</operator></expr></cpp:if>
<typedef>typedef <type><name>__int8</name></type> <name>int8_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int8</name></type> <name>uint8_t</name>;</typedef>
<typedef>typedef <type><name>__int16</name></type> <name>int16_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int16</name></type> <name>uint16_t</name>;</typedef>
<typedef>typedef <type><name>__int32</name></type> <name>int32_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int32</name></type> <name>uint32_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uint64_t</name>;</typedef>
<typedef>typedef <type><name>__int64</name></type> <name>int64_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* defined(_MSC_VER) &amp;&amp; (_MSC_VER &lt; 1600) */</comment>

<comment type="block" format="doxygen">/**
 * A portable @c bool replacement.
 *
 * ::BROTLI_BOOL is a "documentation" type: actually it is @c int, but in API it
 * denotes a type, whose only values are ::BROTLI_TRUE and ::BROTLI_FALSE.
 *
 * ::BROTLI_BOOL values passed to Brotli should either be ::BROTLI_TRUE or
 * ::BROTLI_FALSE, or be a result of ::TO_BROTLI_BOOL macros.
 *
 * ::BROTLI_BOOL values returned by Brotli should not be tested for equality
 * with @c true, @c false, ::BROTLI_TRUE, ::BROTLI_FALSE, but rather should be
 * evaluated, for example: @code{.cpp}
 * if (SomeBrotliFunction(encoder, BROTLI_TRUE) &amp;&amp;
 *     !OtherBrotliFunction(decoder, BROTLI_FALSE)) {
 *   bool x = !!YetAnotherBrotliFunction(encoder, TO_BROLTI_BOOL(2 * 2 == 4));
 *   DoSomething(x);
 * }
 * @endcode
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_BOOL</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<comment type="block" format="doxygen">/** Portable @c true replacement. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<comment type="block" format="doxygen">/** Portable @c false replacement. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<comment type="block" format="doxygen">/** @c bool to ::BROTLI_BOOL conversion macros. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_BROTLI_BOOL</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!!(X) ? BROTLI_TRUE : BROTLI_FALSE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_MAKE_UINT64_T</name><parameter_list>(<parameter><type><name>high</name></type></parameter>, <parameter><type><name>low</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((uint64_t)(high)) &lt;&lt; 32) | low)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_UINT32_MAX</name></cpp:macro> <cpp:value>(~((uint32_t)0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_SIZE_MAX</name></cpp:macro> <cpp:value>(~((size_t)0))</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
 * Allocating function pointer type.
 *
 * @param opaque custom memory manager handle provided by client
 * @param size requested memory region size; can not be @c 0
 * @returns @c 0 in the case of failure
 * @returns a valid pointer to a memory region of at least @p size bytes
 *          long otherwise
 */</comment>
<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>brotli_alloc_func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<comment type="block" format="doxygen">/**
 * Deallocating function pointer type.
 *
 * This function @b SHOULD do nothing if @p address is @c 0.
 *
 * @param opaque custom memory manager handle provided by client
 * @param address memory region pointer returned by ::brotli_alloc_func, or @c 0
 */</comment>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>brotli_free_func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_COMMON_TYPES_H_ */</comment>
</unit>
