<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/include/brotli/shared_dictionary.h"><comment type="block">/* Copyright 2017 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* (Opaque) Shared Dictionary definition and utilities. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_COMMON_SHARED_DICTIONARY_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_COMMON_SHARED_DICTIONARY_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/port.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARED_BROTLI_MIN_DICTIONARY_WORD_LENGTH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARED_BROTLI_MAX_DICTIONARY_WORD_LENGTH</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARED_BROTLI_NUM_DICTIONARY_CONTEXTS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARED_BROTLI_MAX_COMPOUND_DICTS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
 * Opaque structure that holds shared dictionary data.
 *
 * Allocated and initialized with ::BrotliSharedDictionaryCreateInstance.
 * Cleaned up and deallocated with ::BrotliSharedDictionaryDestroyInstance.
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>BrotliSharedDictionaryStruct</name></name></type> <name>BrotliSharedDictionary</name>;</typedef>

<comment type="block" format="doxygen">/**
 * Input data type for ::BrotliSharedDictionaryAttach.
 */</comment>
<typedef>typedef <type><enum>enum <name>BrotliSharedDictionaryType</name> <block>{
  <comment type="block" format="doxygen">/** Raw LZ77 prefix dictionary. */</comment>
  <decl><name>BROTLI_SHARED_DICTIONARY_RAW</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
  <comment type="block" format="doxygen">/** Serialized shared dictionary. */</comment>
  <decl><name>BROTLI_SHARED_DICTIONARY_SERIALIZED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>BrotliSharedDictionaryType</name>;</typedef>

<comment type="block" format="doxygen">/**
 * Creates an instance of ::BrotliSharedDictionary.
 *
 * Fresh instance has default word dictionary and transforms
 * and no LZ77 prefix dictionary.
 *
 * @p alloc_func and @p free_func @b MUST be both zero or both non-zero. In the
 * case they are both zero, default memory allocators are used. @p opaque is
 * passed to @p alloc_func and @p free_func when they are called. @p free_func
 * has to return without doing anything when asked to free a NULL pointer.
 *
 * @param alloc_func custom memory allocation function
 * @param free_func custom memory free function
 * @param opaque custom memory manager handle
 * @returns @c 0 if instance can not be allocated or initialized
 * @returns pointer to initialized ::BrotliSharedDictionary otherwise
 */</comment>
<function_decl><type><name>BROTLI_COMMON_API</name> <name>BrotliSharedDictionary</name><modifier>*</modifier></type> <name>BrotliSharedDictionaryCreateInstance</name><parameter_list>(
    <parameter><decl><type><name>brotli_alloc_func</name></type> <name>alloc_func</name></decl></parameter>, <parameter><decl><type><name>brotli_free_func</name></type> <name>free_func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Deinitializes and frees ::BrotliSharedDictionary instance.
 *
 * @param dict shared dictionary instance to be cleaned up and deallocated
 */</comment>
<function_decl><type><name>BROTLI_COMMON_API</name> <name>void</name></type> <name>BrotliSharedDictionaryDestroyInstance</name><parameter_list>(
    <parameter><decl><type><name>BrotliSharedDictionary</name><modifier>*</modifier></type> <name>dict</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Attaches dictionary to a given instance of ::BrotliSharedDictionary.
 *
 * Dictionary to be attached is represented in a serialized format as a region
 * of memory.
 *
 * Provided data it partially referenced by a resulting (compound) dictionary,
 * and should be kept untouched, while at least one compound dictionary uses it.
 * This way memory overhead is kept minimal by the cost of additional resource
 * management.
 *
 * @param dict dictionary to extend
 * @param type type of dictionary to attach
 * @param data_size size of @p data
 * @param data serialized dictionary of type @p type, with at least @p data_size
 *        addressable bytes
 * @returns ::BROTLI_TRUE if provided dictionary is successfully attached
 * @returns ::BROTLI_FALSE otherwise
 */</comment>
<function_decl><type><name>BROTLI_COMMON_API</name> <name>BROTLI_BOOL</name></type> <name>BrotliSharedDictionaryAttach</name><parameter_list>(
    <parameter><decl><type><name>BrotliSharedDictionary</name><modifier>*</modifier></type> <name>dict</name></decl></parameter>, <parameter><decl><type><name>BrotliSharedDictionaryType</name></type> <name>type</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>data</name><index>[<expr><call><name>BROTLI_ARRAY_PARAM</name><argument_list>(<argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_COMMON_SHARED_DICTIONARY_H_ */</comment>
</unit>
