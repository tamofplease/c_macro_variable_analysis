<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/dec/huffman.h"><comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Utilities for building Huffman decoding tables. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_DEC_HUFFMAN_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_DEC_HUFFMAN_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HUFFMAN_MAX_CODE_LENGTH</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<comment type="block">/* BROTLI_NUM_BLOCK_LEN_SYMBOLS == 26 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HUFFMAN_MAX_SIZE_26</name></cpp:macro> <cpp:value>396</cpp:value></cpp:define>
<comment type="block">/* BROTLI_MAX_BLOCK_TYPE_SYMBOLS == 258 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HUFFMAN_MAX_SIZE_258</name></cpp:macro> <cpp:value>632</cpp:value></cpp:define>
<comment type="block">/* BROTLI_MAX_CONTEXT_MAP_SYMBOLS == 272 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HUFFMAN_MAX_SIZE_272</name></cpp:macro> <cpp:value>646</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_TARGET_ARMV7</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_TARGET_ARMV8_32</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> \
  <call><name>BROTLI_GNUC_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>aligned</name><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">7</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HUFFMAN_CODE_FAST_LOAD</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_HUFFMAN_CODE_FAST_LOAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Do not create this struct directly - use the ConstructHuffmanCode
 * constructor below! */</comment>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>bits</name></decl>;</decl_stmt>    <comment type="block">/* number of bits used for this symbol */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>value</name></decl>;</decl_stmt>  <comment type="block">/* symbol value or table offset */</comment>
}</block></struct></type> <name>HuffmanCode</name>;</typedef>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>HuffmanCode</name></type> <name>ConstructHuffmanCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>bits</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>HuffmanCode</name></type> <name>h</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>h</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>h</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Please use the following macros to optimize HuffmanCode accesses in hot
 * paths.
 *
 * For example, assuming |table| contains a HuffmanCode pointer:
 *
 *   BROTLI_HC_MARK_TABLE_FOR_FAST_LOAD(table);
 *   BROTLI_HC_ADJUST_TABLE_INDEX(table, index_into_table);
 *   *bits = BROTLI_HC_GET_BITS(table);
 *   *value = BROTLI_HC_GET_VALUE(table);
 *   BROTLI_HC_ADJUST_TABLE_INDEX(table, offset);
 *   *bits2 = BROTLI_HC_GET_BITS(table);
 *   *value2 = BROTLI_HC_GET_VALUE(table);
 *
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HC_MARK_TABLE_FOR_FAST_LOAD</name><parameter_list>(<parameter><type><name>H</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HC_ADJUST_TABLE_INDEX</name><parameter_list>(<parameter><type><name>H</name></type></parameter>, <parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H += (V)</cpp:value></cpp:define>

<comment type="block">/* These must be given a HuffmanCode pointer! */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HC_FAST_LOAD_BITS</name><parameter_list>(<parameter><type><name>H</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(H-&gt;bits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HC_FAST_LOAD_VALUE</name><parameter_list>(<parameter><type><name>H</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(H-&gt;value)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* BROTLI_HUFFMAN_CODE_FAST_LOAD */</comment>

<typedef>typedef <macro><name>BROTLI_ALIGNED</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro> <type><name>uint32_t</name></type> <name>HuffmanCode</name>;</typedef>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>HuffmanCode</name></type> <name>ConstructHuffmanCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>bits</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>HuffmanCode</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HC_MARK_TABLE_FOR_FAST_LOAD</name><parameter_list>(<parameter><type><name>H</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>uint32_t __fastload_##H = (*H)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HC_ADJUST_TABLE_INDEX</name><parameter_list>(<parameter><type><name>H</name></type></parameter>, <parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H += (V); __fastload_##H = (*H)</cpp:value></cpp:define>

<comment type="block">/* These must be given a HuffmanCode pointer! */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HC_FAST_LOAD_BITS</name><parameter_list>(<parameter><type><name>H</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((__fastload_##H) &amp; 0xFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HC_FAST_LOAD_VALUE</name><parameter_list>(<parameter><type><name>H</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((__fastload_##H) &gt;&gt; 16)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BROTLI_HUFFMAN_CODE_FAST_LOAD */</comment>

<comment type="block">/* Builds Huffman lookup table assuming code lengths are in symbol order. */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliBuildCodeLengthsHuffmanTable</name><parameter_list>(<parameter><decl><type><name>HuffmanCode</name><modifier>*</modifier></type> <name>root_table</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <specifier>const</specifier></type> <name>code_lengths</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Builds Huffman lookup table assuming code lengths are in symbol order.
   Returns size of resulting table. */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>uint32_t</name></type> <name>BrotliBuildHuffmanTable</name><parameter_list>(<parameter><decl><type><name>HuffmanCode</name><modifier>*</modifier></type> <name>root_table</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>root_bits</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name><modifier>*</modifier> <specifier>const</specifier></type> <name>symbol_lists</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Builds a simple Huffman table. The |num_symbols| parameter is to be
   interpreted as follows: 0 means 1 symbol, 1 means 2 symbols,
   2 means 3 symbols, 3 means 4 symbols with lengths [2, 2, 2, 2],
   4 means 4 symbols with lengths [1, 2, 3, 3]. */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>uint32_t</name></type> <name>BrotliBuildSimpleHuffmanTable</name><parameter_list>(<parameter><decl><type><name>HuffmanCode</name><modifier>*</modifier></type> <name>table</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>root_bits</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>symbols</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_symbols</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Contains a collection of Huffman trees with the same alphabet size. */</comment>
<comment type="block">/* alphabet_size_limit is needed due to simple codes, since
   log2(alphabet_size_max) could be greater than log2(alphabet_size_limit). */</comment>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>HuffmanCode</name><modifier>*</modifier><modifier>*</modifier></type> <name>htrees</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HuffmanCode</name><modifier>*</modifier></type> <name>codes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>alphabet_size_max</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>alphabet_size_limit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>num_htrees</name></decl>;</decl_stmt>
}</block></struct></type> <name>HuffmanTreeGroup</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_DEC_HUFFMAN_H_ */</comment>
</unit>
