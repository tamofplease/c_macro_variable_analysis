<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/dec/bit_reader.h"><comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Bit reading helpers */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_DEC_BIT_READER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_DEC_BIT_READER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>  <comment type="block">/* memcpy */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_SHORT_FILL_BIT_WINDOW_READ</name></cpp:macro> <cpp:value>(sizeof(brotli_reg_t) &gt;&gt; 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <specifier>extern</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>kBrotliBitMask</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>BitMask</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_CONSTANT</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>BROTLI_HAS_UBFX</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Masking with this expression turns to a single
       "Unsigned Bit Field Extract" UBFX instruction on ARM. */</comment>
    <return>return <expr><operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">0xFFFFFFFFu</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name><name>kBrotliBitMask</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>brotli_reg_t</name></type> <name>val_</name></decl>;</decl_stmt>       <comment type="block">/* pre-fetched bits */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_pos_</name></decl>;</decl_stmt>       <comment type="block">/* current bit-reading position in val_ */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>next_in</name></decl>;</decl_stmt>  <comment type="block">/* the byte we're reading from */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>avail_in</name></decl>;</decl_stmt>
}</block></struct></type> <name>BrotliBitReader</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>brotli_reg_t</name></type> <name>val_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_pos_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>next_in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>avail_in</name></decl>;</decl_stmt>
}</block></struct></type> <name>BrotliBitReaderState</name>;</typedef>

<comment type="block">/* Initializes the BrotliBitReader fields. */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliInitBitReader</name><parameter_list>(<parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Ensures that accumulator is not empty.
   May consume up to sizeof(brotli_reg_t) - 1 bytes of input.
   Returns BROTLI_FALSE if data is required but there is no input available.
   For !BROTLI_UNALIGNED_READ_FAST this function also prepares bit reader for
   aligned reading. */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>BROTLI_BOOL</name></type> <name>BrotliWarmupBitReader</name><parameter_list>(<parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Fallback for BrotliSafeReadBits32. Extracted as noninlined method to unburden
   the main code-path. Never called for RFC brotli streams, required only for
   "large-window" mode and other extensions. */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>BROTLI_NOINLINE</name> <name>BROTLI_BOOL</name></type> <name>BrotliSafeReadBits32Slow</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n_bits</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>BrotliBitReaderSaveState</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>BrotliBitReaderState</name><modifier>*</modifier></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>val_</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>val_</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>bit_pos_</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>bit_pos_</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>BrotliBitReaderRestoreState</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>BrotliBitReaderState</name><modifier>*</modifier></type> <name>from</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>val_</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>val_</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>bit_pos_</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>bit_pos_</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>BrotliGetAvailableBits</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>BrotliBitReader</name><modifier>*</modifier></type> <name>br</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>BROTLI_64_BITS</name></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary><operator>)</operator> <operator>-</operator> <name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns amount of unread bytes the bit reader still has buffered from the
   BrotliInput, including whole bytes in br-&gt;val_. Result is capped with
   maximal ring-buffer size (larger number won't be utilized anyway). */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name></type> <name>BrotliGetRemainingBytes</name><parameter_list>(<parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier></type> <name>br</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>kCap</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>BROTLI_LARGE_MAX_WBITS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;</operator> <name>kCap</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>kCap</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>+</operator> <operator>(</operator><call><name>BrotliGetAvailableBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Checks if there is at least |num| bytes left in the input ring-buffer
   (excluding the bits remaining in br-&gt;val_). */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>BROTLI_BOOL</name></type> <name>BrotliCheckInputAmount</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>TO_BROTLI_BOOL</name><argument_list>(<argument><expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;=</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Guarantees that there are at least |n_bits| + 1 bits in accumulator.
   Precondition: accumulator contains at least 1 bit.
   |n_bits| should be in the range [1..24] for regular build. For portable
   non-64-bit little-endian build only 16 bits are safe to request. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>BrotliFillBitWindow</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>BROTLI_64_BITS</name><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>BROTLI_UNALIGNED_READ_FAST</name> <operator>&amp;&amp;</operator> <call><name>BROTLI_IS_CONSTANT</name><argument_list>(<argument><expr><name>n_bits</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>n_bits</name> <operator>&lt;=</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_pos</name> <init>= <expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bit_pos</name> <operator>&gt;=</operator> <literal type="number">56</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>=</operator>
          <operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>BROTLI_UNALIGNED_LOAD64LE</name><argument_list>(<argument><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name> <operator>=</operator>
          <name>bit_pos</name> <operator>^</operator> <literal type="number">56</literal></expr>;</expr_stmt> <comment type="block">/* here same as -= 56 because of the if condition */</comment>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>BROTLI_UNALIGNED_READ_FAST</name> <operator>&amp;&amp;</operator> <call><name>BROTLI_IS_CONSTANT</name><argument_list>(<argument><expr><name>n_bits</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
             <operator>(</operator><name>n_bits</name> <operator>&lt;=</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_pos</name> <init>= <expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bit_pos</name> <operator>&gt;=</operator> <literal type="number">48</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>=</operator>
          <operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>BROTLI_UNALIGNED_LOAD64LE</name><argument_list>(<argument><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name> <operator>=</operator>
          <name>bit_pos</name> <operator>^</operator> <literal type="number">48</literal></expr>;</expr_stmt> <comment type="block">/* here same as -= 48 because of the if condition */</comment>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_pos</name> <init>= <expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bit_pos</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>=</operator> <operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator>
                 <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>BROTLI_UNALIGNED_LOAD32LE</name><argument_list>(<argument><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name> <operator>=</operator>
          <name>bit_pos</name> <operator>^</operator> <literal type="number">32</literal></expr>;</expr_stmt> <comment type="block">/* here same as -= 32 because of the if condition */</comment>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <name>BROTLI_SHORT_FILL_BIT_WINDOW_READ</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <name>BROTLI_SHORT_FILL_BIT_WINDOW_READ</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name>BROTLI_UNALIGNED_READ_FAST</name> <operator>&amp;&amp;</operator> <call><name>BROTLI_IS_CONSTANT</name><argument_list>(<argument><expr><name>n_bits</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>n_bits</name> <operator>&lt;=</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_pos</name> <init>= <expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bit_pos</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>=</operator>
          <operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>BROTLI_UNALIGNED_LOAD32LE</name><argument_list>(<argument><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name> <operator>=</operator>
          <name>bit_pos</name> <operator>^</operator> <literal type="number">24</literal></expr>;</expr_stmt> <comment type="block">/* here same as -= 24 because of the if condition */</comment>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_pos</name> <init>= <expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bit_pos</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>=</operator> <operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
                 <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>BROTLI_UNALIGNED_LOAD16LE</name><argument_list>(<argument><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name> <operator>=</operator>
          <name>bit_pos</name> <operator>^</operator> <literal type="number">16</literal></expr>;</expr_stmt> <comment type="block">/* here same as -= 16 because of the if condition */</comment>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <name>BROTLI_SHORT_FILL_BIT_WINDOW_READ</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <name>BROTLI_SHORT_FILL_BIT_WINDOW_READ</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Mostly like BrotliFillBitWindow, but guarantees only 16 bits and reads no
   more than BROTLI_SHORT_FILL_BIT_WINDOW_READ bytes of input. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>BrotliFillBitWindow16</name><parameter_list>(<parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BrotliFillBitWindow</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Tries to pull one byte of input to accumulator.
   Returns BROTLI_FALSE if there is no input available. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>BROTLI_BOOL</name></type> <name>BrotliPullByte</name><parameter_list>(<parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>BROTLI_64_BITS</name><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>*</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
  <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns currently available bits.
   The number of valid bits could be calculated by BrotliGetAvailableBits. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>brotli_reg_t</name></type> <name>BrotliGetBitsUnmasked</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>&gt;&gt;</operator> <name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Like BrotliGetBits, but does not mask the result.
   The result contains at least 16 valid bits. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>BrotliGet16BitsUnmasked</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BrotliFillBitWindow</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>BrotliGetBitsUnmasked</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns the specified number of bits from |br| without advancing bit
   position. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>BrotliGetBits</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BrotliFillBitWindow</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>n_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>BrotliGetBitsUnmasked</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>BitMask</name><argument_list>(<argument><expr><name>n_bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Tries to peek the specified amount of bits. Returns BROTLI_FALSE, if there
   is not enough input. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>BROTLI_BOOL</name></type> <name>BrotliSafeGetBits</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n_bits</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><call><name>BrotliGetAvailableBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>n_bits</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BrotliPullByte</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>BrotliGetBitsUnmasked</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>BitMask</name><argument_list>(<argument><expr><name>n_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Advances the bit pos by |n_bits|. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>BrotliDropBits</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name> <operator>+=</operator> <name>n_bits</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>BrotliBitReaderUnload</name><parameter_list>(<parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier></type> <name>br</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>unused_bytes</name> <init>= <expr><call><name>BrotliGetAvailableBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>unused_bits</name> <init>= <expr><name>unused_bytes</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>+=</operator> <name>unused_bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>-=</operator> <name>unused_bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>unused_bits</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>br</name><operator>-&gt;</operator><name>val_</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>val_</name></name> <operator>&lt;&lt;=</operator> <name>unused_bits</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name> <operator>+=</operator> <name>unused_bits</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Reads the specified number of bits from |br| and advances the bit pos.
   Precondition: accumulator MUST contain at least |n_bits|. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>BrotliTakeBits</name><parameter_list>(
  <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n_bits</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>BrotliGetBitsUnmasked</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>BitMask</name><argument_list>(<argument><expr><name>n_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"[BrotliTakeBits]  %d %d %d val: %6x\n"</literal><operator>,</operator>
      <operator>(</operator><name>int</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>br</name><operator>-&gt;</operator><name>bit_pos_</name></name><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n_bits</name><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BrotliDropBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>n_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Reads the specified number of bits from |br| and advances the bit pos.
   Assumes that there is enough input to perform BrotliFillBitWindow.
   Up to 24 bits are allowed to be requested from this method. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>BrotliReadBits24</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name>n_bits</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>BROTLI_64_BITS</name> <operator>||</operator> <operator>(</operator><name>n_bits</name> <operator>&lt;=</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BrotliFillBitWindow</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>n_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BrotliTakeBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>n_bits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>val</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>low_val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>high_val</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BrotliFillBitWindow</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BrotliTakeBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>low_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BrotliFillBitWindow</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BrotliTakeBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>n_bits</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>high_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>low_val</name> <operator>|</operator> <operator>(</operator><name>high_val</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Same as BrotliReadBits24, but allows reading up to 32 bits. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>BrotliReadBits32</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name>n_bits</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>BROTLI_64_BITS</name> <operator>||</operator> <operator>(</operator><name>n_bits</name> <operator>&lt;=</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BrotliFillBitWindow</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>n_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BrotliTakeBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>n_bits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>val</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>low_val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>high_val</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BrotliFillBitWindow</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BrotliTakeBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>low_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BrotliFillBitWindow</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BrotliTakeBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>n_bits</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>high_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>low_val</name> <operator>|</operator> <operator>(</operator><name>high_val</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Tries to read the specified amount of bits. Returns BROTLI_FALSE, if there
   is not enough input. |n_bits| MUST be positive.
   Up to 24 bits are allowed to be requested from this method. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>BROTLI_BOOL</name></type> <name>BrotliSafeReadBits</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n_bits</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name>n_bits</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>BrotliGetAvailableBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>n_bits</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BrotliPullByte</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>BrotliTakeBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>n_bits</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Same as BrotliSafeReadBits, but allows reading up to 32 bits. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>BROTLI_BOOL</name></type> <name>BrotliSafeReadBits32</name><parameter_list>(
    <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>br</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n_bits</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name>n_bits</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>BROTLI_64_BITS</name> <operator>||</operator> <operator>(</operator><name>n_bits</name> <operator>&lt;=</operator> <literal type="number">24</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><call><name>BrotliGetAvailableBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>n_bits</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BrotliPullByte</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>BrotliTakeBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>n_bits</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>BrotliSafeReadBits32Slow</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>n_bits</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Advances the bit reader position to the next byte boundary and verifies
   that any skipped bits are set to zero. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>BROTLI_BOOL</name></type> <name>BrotliJumpToByteBoundary</name><parameter_list>(<parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier></type> <name>br</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pad_bits_count</name> <init>= <expr><call><name>BrotliGetAvailableBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pad_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pad_bits_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>BrotliTakeBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>pad_bits_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>TO_BROTLI_BOOL</name><argument_list>(<argument><expr><name>pad_bits</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Copies remaining input bytes stored in the bit reader to the output. Value
   |num| may not be larger than BrotliGetRemainingBytes. The bit reader must be
   warmed up again after this. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>BrotliCopyBytes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>,
                                          <parameter><decl><type><name>BrotliBitReader</name><modifier>*</modifier></type> <name>br</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><call><name>BrotliGetAvailableBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>BrotliGetBitsUnmasked</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BrotliDropBits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>dest</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name>num</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <name>num</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_DEC_BIT_READER_H_ */</comment>
</unit>
