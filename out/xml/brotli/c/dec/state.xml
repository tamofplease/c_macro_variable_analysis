<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/dec/state.h"><comment type="block">/* Copyright 2015 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Brotli state for partial streaming decoding. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_DEC_STATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_DEC_STATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/shared_dictionary.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/dictionary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/transform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_reader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"huffman.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Graphviz diagram that describes state transitions:

digraph States {
  graph [compound=true]
  concentrate=true
  node [shape="box"]

  UNINITED -&gt; {LARGE_WINDOW_BITS -&gt; INITIALIZE}
  subgraph cluster_metablock_workflow {
    style="rounded"
    label=&lt; &lt;B&gt;METABLOCK CYCLE&lt;/B&gt; &gt;
    METABLOCK_BEGIN -&gt; METABLOCK_HEADER
    METABLOCK_HEADER:sw -&gt; METADATA
    METABLOCK_HEADER:s -&gt; UNCOMPRESSED
    METABLOCK_HEADER:se -&gt; METABLOCK_DONE:ne
    METADATA:s -&gt; METABLOCK_DONE:w
    UNCOMPRESSED:s -&gt; METABLOCK_DONE:n
    METABLOCK_DONE:e -&gt; METABLOCK_BEGIN:e [constraint="false"]
  }
  INITIALIZE -&gt; METABLOCK_BEGIN
  METABLOCK_DONE -&gt; DONE

  subgraph cluster_compressed_metablock {
    style="rounded"
    label=&lt; &lt;B&gt;COMPRESSED METABLOCK&lt;/B&gt; &gt;

    subgraph cluster_command {
      style="rounded"
      label=&lt; &lt;B&gt;HOT LOOP&lt;/B&gt; &gt;

      _METABLOCK_DONE_PORT_ [shape=point style=invis]

      {
        // Set different shape for nodes returning from "compressed metablock".
        node [shape=invhouse]; CMD_INNER CMD_POST_DECODE_LITERALS;
        CMD_POST_WRAP_COPY; CMD_INNER_WRITE; CMD_POST_WRITE_1;
      }

      CMD_BEGIN -&gt; CMD_INNER -&gt; CMD_POST_DECODE_LITERALS -&gt; CMD_POST_WRAP_COPY

      // IO ("write") nodes are not in the hot loop!
      CMD_INNER_WRITE [style=dashed]
      CMD_INNER -&gt; CMD_INNER_WRITE
      CMD_POST_WRITE_1 [style=dashed]
      CMD_POST_DECODE_LITERALS -&gt; CMD_POST_WRITE_1
      CMD_POST_WRITE_2 [style=dashed]
      CMD_POST_WRAP_COPY -&gt; CMD_POST_WRITE_2

      CMD_POST_WRITE_1 -&gt; CMD_BEGIN:s [constraint="false"]
      CMD_INNER_WRITE -&gt; {CMD_INNER CMD_POST_DECODE_LITERALS}
          [constraint="false"]
      CMD_BEGIN:ne -&gt; CMD_POST_DECODE_LITERALS [constraint="false"]
      CMD_POST_WRAP_COPY -&gt; CMD_BEGIN [constraint="false"]
      CMD_POST_DECODE_LITERALS -&gt; CMD_BEGIN:ne [constraint="false"]
      CMD_POST_WRITE_2 -&gt; CMD_POST_WRAP_COPY [constraint="false"]
      {rank=same; CMD_BEGIN; CMD_INNER; CMD_POST_DECODE_LITERALS;
          CMD_POST_WRAP_COPY}
      {rank=same; CMD_INNER_WRITE; CMD_POST_WRITE_1; CMD_POST_WRITE_2}

      {CMD_INNER CMD_POST_DECODE_LITERALS CMD_POST_WRAP_COPY} -&gt;
          _METABLOCK_DONE_PORT_ [style=invis]
      {CMD_INNER_WRITE CMD_POST_WRITE_1} -&gt; _METABLOCK_DONE_PORT_
          [constraint="false" style=invis]
    }

    BEFORE_COMPRESSED_METABLOCK_HEADER:s -&gt; HUFFMAN_CODE_0:n
    HUFFMAN_CODE_0 -&gt; HUFFMAN_CODE_1 -&gt; HUFFMAN_CODE_2 -&gt; HUFFMAN_CODE_3
    HUFFMAN_CODE_0 -&gt; METABLOCK_HEADER_2 -&gt; CONTEXT_MODES -&gt; CONTEXT_MAP_1
    CONTEXT_MAP_1 -&gt; CONTEXT_MAP_2 -&gt; TREE_GROUP
    TREE_GROUP -&gt; BEFORE_COMPRESSED_METABLOCK_BODY:e
    BEFORE_COMPRESSED_METABLOCK_BODY:s -&gt; CMD_BEGIN:n

    HUFFMAN_CODE_3:e -&gt; HUFFMAN_CODE_0:ne [constraint="false"]
    {rank=same; HUFFMAN_CODE_0; HUFFMAN_CODE_1; HUFFMAN_CODE_2; HUFFMAN_CODE_3}
    {rank=same; METABLOCK_HEADER_2; CONTEXT_MODES; CONTEXT_MAP_1; CONTEXT_MAP_2;
        TREE_GROUP}
  }
  METABLOCK_HEADER:e -&gt; BEFORE_COMPRESSED_METABLOCK_HEADER:n

  _METABLOCK_DONE_PORT_ -&gt; METABLOCK_DONE:se
      [constraint="false" ltail=cluster_command]

  UNINITED [shape=Mdiamond];
  DONE [shape=Msquare];
}


 */</comment>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>BROTLI_STATE_UNINITED</name></decl>,
  <decl><name>BROTLI_STATE_LARGE_WINDOW_BITS</name></decl>,
  <decl><name>BROTLI_STATE_INITIALIZE</name></decl>,
  <decl><name>BROTLI_STATE_METABLOCK_BEGIN</name></decl>,
  <decl><name>BROTLI_STATE_METABLOCK_HEADER</name></decl>,
  <decl><name>BROTLI_STATE_METABLOCK_HEADER_2</name></decl>,
  <decl><name>BROTLI_STATE_CONTEXT_MODES</name></decl>,
  <decl><name>BROTLI_STATE_COMMAND_BEGIN</name></decl>,
  <decl><name>BROTLI_STATE_COMMAND_INNER</name></decl>,
  <decl><name>BROTLI_STATE_COMMAND_POST_DECODE_LITERALS</name></decl>,
  <decl><name>BROTLI_STATE_COMMAND_POST_WRAP_COPY</name></decl>,
  <decl><name>BROTLI_STATE_UNCOMPRESSED</name></decl>,
  <decl><name>BROTLI_STATE_METADATA</name></decl>,
  <decl><name>BROTLI_STATE_COMMAND_INNER_WRITE</name></decl>,
  <decl><name>BROTLI_STATE_METABLOCK_DONE</name></decl>,
  <decl><name>BROTLI_STATE_COMMAND_POST_WRITE_1</name></decl>,
  <decl><name>BROTLI_STATE_COMMAND_POST_WRITE_2</name></decl>,
  <decl><name>BROTLI_STATE_BEFORE_COMPRESSED_METABLOCK_HEADER</name></decl>,
  <decl><name>BROTLI_STATE_HUFFMAN_CODE_0</name></decl>,
  <decl><name>BROTLI_STATE_HUFFMAN_CODE_1</name></decl>,
  <decl><name>BROTLI_STATE_HUFFMAN_CODE_2</name></decl>,
  <decl><name>BROTLI_STATE_HUFFMAN_CODE_3</name></decl>,
  <decl><name>BROTLI_STATE_CONTEXT_MAP_1</name></decl>,
  <decl><name>BROTLI_STATE_CONTEXT_MAP_2</name></decl>,
  <decl><name>BROTLI_STATE_TREE_GROUP</name></decl>,
  <decl><name>BROTLI_STATE_BEFORE_COMPRESSED_METABLOCK_BODY</name></decl>,
  <decl><name>BROTLI_STATE_DONE</name></decl>
}</block></enum></type> <name>BrotliRunningState</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>BROTLI_STATE_METABLOCK_HEADER_NONE</name></decl>,
  <decl><name>BROTLI_STATE_METABLOCK_HEADER_EMPTY</name></decl>,
  <decl><name>BROTLI_STATE_METABLOCK_HEADER_NIBBLES</name></decl>,
  <decl><name>BROTLI_STATE_METABLOCK_HEADER_SIZE</name></decl>,
  <decl><name>BROTLI_STATE_METABLOCK_HEADER_UNCOMPRESSED</name></decl>,
  <decl><name>BROTLI_STATE_METABLOCK_HEADER_RESERVED</name></decl>,
  <decl><name>BROTLI_STATE_METABLOCK_HEADER_BYTES</name></decl>,
  <decl><name>BROTLI_STATE_METABLOCK_HEADER_METADATA</name></decl>
}</block></enum></type> <name>BrotliRunningMetablockHeaderState</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>BROTLI_STATE_UNCOMPRESSED_NONE</name></decl>,
  <decl><name>BROTLI_STATE_UNCOMPRESSED_WRITE</name></decl>
}</block></enum></type> <name>BrotliRunningUncompressedState</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>BROTLI_STATE_TREE_GROUP_NONE</name></decl>,
  <decl><name>BROTLI_STATE_TREE_GROUP_LOOP</name></decl>
}</block></enum></type> <name>BrotliRunningTreeGroupState</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>BROTLI_STATE_CONTEXT_MAP_NONE</name></decl>,
  <decl><name>BROTLI_STATE_CONTEXT_MAP_READ_PREFIX</name></decl>,
  <decl><name>BROTLI_STATE_CONTEXT_MAP_HUFFMAN</name></decl>,
  <decl><name>BROTLI_STATE_CONTEXT_MAP_DECODE</name></decl>,
  <decl><name>BROTLI_STATE_CONTEXT_MAP_TRANSFORM</name></decl>
}</block></enum></type> <name>BrotliRunningContextMapState</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>BROTLI_STATE_HUFFMAN_NONE</name></decl>,
  <decl><name>BROTLI_STATE_HUFFMAN_SIMPLE_SIZE</name></decl>,
  <decl><name>BROTLI_STATE_HUFFMAN_SIMPLE_READ</name></decl>,
  <decl><name>BROTLI_STATE_HUFFMAN_SIMPLE_BUILD</name></decl>,
  <decl><name>BROTLI_STATE_HUFFMAN_COMPLEX</name></decl>,
  <decl><name>BROTLI_STATE_HUFFMAN_LENGTH_SYMBOLS</name></decl>
}</block></enum></type> <name>BrotliRunningHuffmanState</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>BROTLI_STATE_DECODE_UINT8_NONE</name></decl>,
  <decl><name>BROTLI_STATE_DECODE_UINT8_SHORT</name></decl>,
  <decl><name>BROTLI_STATE_DECODE_UINT8_LONG</name></decl>
}</block></enum></type> <name>BrotliRunningDecodeUint8State</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>BROTLI_STATE_READ_BLOCK_LENGTH_NONE</name></decl>,
  <decl><name>BROTLI_STATE_READ_BLOCK_LENGTH_SUFFIX</name></decl>
}</block></enum></type> <name>BrotliRunningReadBlockLengthState</name>;</typedef>

<comment type="block">/* BrotliDecoderState addon, used for Compound Dictionary functionality. */</comment>
<typedef>typedef <type><struct>struct <name>BrotliDecoderCompoundDictionary</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>num_chunks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>total_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>br_index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>br_offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>br_length</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>br_copied</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name><name>chunks</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>chunk_offsets</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>block_bits</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>block_map</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>BrotliDecoderCompoundDictionary</name>;</typedef>

<typedef>typedef <type><struct>struct <name>BrotliMetablockHeaderArena</name> <block>{
  <decl_stmt><decl><type><name>BrotliRunningTreeGroupState</name></type> <name>substate_tree_group</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BrotliRunningContextMapState</name></type> <name>substate_context_map</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BrotliRunningHuffmanState</name></type> <name>substate_huffman</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>sub_loop_counter</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>repeat_code_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>prev_code_len</name></decl>;</decl_stmt>

  <comment type="block">/* For ReadHuffmanCode. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>symbol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>repeat</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>space</name></decl>;</decl_stmt>

  <comment type="block">/* Huffman table for "histograms". */</comment>
  <decl_stmt><decl><type><name>HuffmanCode</name></type> <name><name>table</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
  <comment type="block">/* List of heads of symbol chains. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>symbol_lists</name></decl>;</decl_stmt>
  <comment type="block">/* Storage from symbol_lists. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name><name>symbols_lists_array</name><index>[<expr><name>BROTLI_HUFFMAN_MAX_CODE_LENGTH</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>
                               <name>BROTLI_NUM_COMMAND_SYMBOLS</name></expr>]</index></name></decl>;</decl_stmt>
  <comment type="block">/* Tails of symbol chains. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>next_symbol</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>code_length_code_lengths</name><index>[<expr><name>BROTLI_CODE_LENGTH_CODES</name></expr>]</index></name></decl>;</decl_stmt>
  <comment type="block">/* Population counts for the code lengths. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name><name>code_length_histo</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* For HuffmanTreeGroupDecode. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>htree_index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HuffmanCode</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

  <comment type="block">/* For DecodeContextMap. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>context_index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>max_run_length_prefix</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HuffmanCode</name></type> <name><name>context_map_table</name><index>[<expr><name>BROTLI_HUFFMAN_MAX_SIZE_272</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>BrotliMetablockHeaderArena</name>;</typedef>

<typedef>typedef <type><struct>struct <name>BrotliMetablockBodyArena</name> <block>{
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>dist_extra_bits</name><index>[<expr><literal type="number">544</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>dist_offset</name><index>[<expr><literal type="number">544</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>BrotliMetablockBodyArena</name>;</typedef>

<struct>struct <name>BrotliDecoderStateStruct</name> <block>{
  <decl_stmt><decl><type><name>BrotliRunningState</name></type> <name>state</name></decl>;</decl_stmt>

  <comment type="block">/* This counter is reused for several disjoint loops. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>loop_counter</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>BrotliBitReader</name></type> <name>br</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>brotli_alloc_func</name></type> <name>alloc_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>brotli_free_func</name></type> <name>free_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>memory_manager_opaque</name></decl>;</decl_stmt>

  <comment type="block">/* Temporary storage for remaining input. Brotli stream format is designed in
     a way, that 64 bits are enough to make progress in decoding. */</comment>
  <union>union <block>{
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>u8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
  }</block> <decl><name>buffer</name></decl>;</union>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>buffer_length</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>max_backward_distance</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>max_distance</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ringbuffer_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ringbuffer_mask</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>dist_rb_idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>dist_rb</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>error_code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer_end</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HuffmanCode</name><modifier>*</modifier></type> <name>htree_command</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>context_lookup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>context_map_slice</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dist_context_map_slice</name></decl>;</decl_stmt>

  <comment type="block">/* This ring buffer holds a few past copy distances that will be used by
     some special distance codes. */</comment>
  <decl_stmt><decl><type><name>HuffmanTreeGroup</name></type> <name>literal_hgroup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HuffmanTreeGroup</name></type> <name>insert_copy_hgroup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HuffmanTreeGroup</name></type> <name>distance_hgroup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HuffmanCode</name><modifier>*</modifier></type> <name>block_type_trees</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HuffmanCode</name><modifier>*</modifier></type> <name>block_len_trees</name></decl>;</decl_stmt>
  <comment type="block">/* This is true if the literal context map histogram type always matches the
     block type. It is then not needed to keep the context (faster decoding). */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>trivial_literal_context</name></decl>;</decl_stmt>
  <comment type="block">/* Distance context is actual after command is decoded and before distance is
     computed. After distance computation it is used as a temporary variable. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>distance_context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>meta_block_remaining_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>block_length_index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>block_length</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>num_block_types</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>block_type_rb</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>distance_postfix_bits</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>num_direct_distance_codes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>num_dist_htrees</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dist_context_map</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HuffmanCode</name><modifier>*</modifier></type> <name>literal_htree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>dist_htree_index</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>copy_length</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>distance_code</name></decl>;</decl_stmt>

  <comment type="block">/* For partial write operations. */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>rb_roundtrips</name></decl>;</decl_stmt>  <comment type="block">/* how many times we went around the ring-buffer */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>partial_pos_out</name></decl>;</decl_stmt>  <comment type="block">/* how much output to the user in total */</comment>

  <comment type="block">/* For InverseMoveToFrontTransform. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>mtf_upper_bound</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>mtf</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Less used attributes are at the end of this struct. */</comment>

  <comment type="block">/* For reporting. */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>used_input</name></decl>;</decl_stmt>  <comment type="block">/* how many bytes of input are consumed */</comment>

  <comment type="block">/* States inside function calls. */</comment>
  <decl_stmt><decl><type><name>BrotliRunningMetablockHeaderState</name></type> <name>substate_metablock_header</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BrotliRunningUncompressedState</name></type> <name>substate_uncompressed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BrotliRunningDecodeUint8State</name></type> <name>substate_decode_uint8</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BrotliRunningReadBlockLengthState</name></type> <name>substate_read_block_length</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>is_last_metablock</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>is_uncompressed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>is_metadata</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>should_wrap_ringbuffer</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>canny_ringbuffer_allocation</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>large_window</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size_nibbles</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>window_bits</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>new_ringbuffer_size</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>num_literal_htrees</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>context_map</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>context_modes</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>BrotliSharedDictionary</name><modifier>*</modifier></type> <name>dictionary</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BrotliDecoderCompoundDictionary</name><modifier>*</modifier></type> <name>compound_dictionary</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>trivial_literal_contexts</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* 256 bits */</comment>

  <union>union <block>{
    <decl_stmt><decl><type><name>BrotliMetablockHeaderArena</name></type> <name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BrotliMetablockBodyArena</name></type> <name>body</name></decl>;</decl_stmt>
  }</block> <decl><name>arena</name></decl>;</union>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>BrotliDecoderStateStruct</name></name></type> <name>BrotliDecoderStateInternal</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BrotliDecoderState</name></cpp:macro> <cpp:value>BrotliDecoderStateInternal</cpp:value></cpp:define>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>BROTLI_BOOL</name></type> <name>BrotliDecoderStateInit</name><parameter_list>(<parameter><decl><type><name>BrotliDecoderState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>,
    <parameter><decl><type><name>brotli_alloc_func</name></type> <name>alloc_func</name></decl></parameter>, <parameter><decl><type><name>brotli_free_func</name></type> <name>free_func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliDecoderStateCleanup</name><parameter_list>(<parameter><decl><type><name>BrotliDecoderState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliDecoderStateMetablockBegin</name><parameter_list>(<parameter><decl><type><name>BrotliDecoderState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliDecoderStateCleanupAfterMetablock</name><parameter_list>(
    <parameter><decl><type><name>BrotliDecoderState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>BROTLI_BOOL</name></type> <name>BrotliDecoderHuffmanTreeGroupInit</name><parameter_list>(
    <parameter><decl><type><name>BrotliDecoderState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>HuffmanTreeGroup</name><modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>alphabet_size_max</name></decl></parameter>,
    <parameter><decl><type><name>uint32_t</name></type> <name>alphabet_size_limit</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ntrees</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_DECODER_ALLOC</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>S-&gt;alloc_func(S-&gt;memory_manager_opaque, L)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_DECODER_FREE</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{          \
  S-&gt;free_func(S-&gt;memory_manager_opaque, X); \
  X = NULL;                                  \
}</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_DEC_STATE_H_ */</comment>
</unit>
