<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/fuzz/decode_fuzzer.c"><comment type="line">// Copyright 2015 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/decode.h&gt;</cpp:file></cpp:include>

<comment type="line">// Entry point for LibFuzzer.</comment>
<function><type><name>int</name></type> <name>LLVMFuzzerTestOneInput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>addend</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>addend</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>next_in</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kBufferSize</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buffer</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>kBufferSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// OOM is out-of-scope here.</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* The biggest "magic number" in brotli is 16MiB - 16, so no need to check
     the cases with much longer output. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>total_out_limit</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>addend</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>total_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>BrotliDecoderState</name><modifier>*</modifier></type> <name>state</name> <init>= <expr><call><name>BrotliDecoderCreateInstance</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>addend</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>addend</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <comment type="block">/* Test both fast (addend == size) and slow (addend &lt;= 7) decoding paths. */</comment>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>next_i</name> <init>= <expr><name>i</name> <operator>+</operator> <name>addend</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>next_i</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>next_i</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>avail_in</name> <init>= <expr><name>next_i</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>next_i</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BrotliDecoderResult</name></type> <name>result</name> <init>= <expr><name>BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>result</name> <operator>==</operator> <name>BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>avail_out</name> <init>= <expr><name>kBufferSize</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>next_out</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>BrotliDecoderDecompressStream</name><argument_list>(
          <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>total_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>total_out</name> <operator>&gt;</operator> <name>total_out_limit</name></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>total_out</name> <operator>&gt;</operator> <name>total_out_limit</name></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT</name></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>BrotliDecoderDestroyInstance</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
