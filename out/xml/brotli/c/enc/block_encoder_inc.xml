<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/block_encoder_inc.h"><comment type="block">/* NOLINT(build/header_guard) */</comment>
<comment type="block">/* Copyright 2014 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* template parameters: FN */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HistogramType</name></cpp:macro> <cpp:value>FN(Histogram)</cpp:value></cpp:define>

<comment type="block">/* Creates entropy codes for all block types and stores them to the bit
   stream. */</comment>
<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>BuildAndStoreEntropyCodes</name>)<parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>BlockEncoder</name><modifier>*</modifier></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>HistogramType</name><modifier>*</modifier></type> <name>histograms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>histograms_size</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>alphabet_size</name></decl></parameter>, <parameter><decl><type><name>HuffmanTree</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>storage_ix</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>table_size</name> <init>= <expr><name>histograms_size</name> <operator>*</operator> <name><name>self</name><operator>-&gt;</operator><name>histogram_length_</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>depths_</name></name> <operator>=</operator> <call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>bits_</name></name> <operator>=</operator> <call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>histograms_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>ix</name> <init>= <expr><name>i</name> <operator>*</operator> <name><name>self</name><operator>-&gt;</operator><name>histogram_length_</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>BuildAndStoreHuffmanTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>histograms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>histogram_length_</name></name></expr></argument>,
          <argument><expr><name>alphabet_size</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>depths_</name><index>[<expr><name>ix</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>bits_</name><index>[<expr><name>ix</name></expr>]</index></name></expr></argument>,
          <argument><expr><name>storage_ix</name></expr></argument>, <argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HistogramType</name></cpp:undef>
</unit>
