<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/quality.h"><comment type="block">/* Copyright 2016 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Constants and formulas that affect speed-ratio trade-offs and thus define
   quality levels. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_QUALITY_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_QUALITY_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/encode.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"params.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_ONE_PASS_COMPRESSION_QUALITY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_TWO_PASS_COMPRESSION_QUALITY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZOPFLIFICATION_QUALITY</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HQ_ZOPFLIFICATION_QUALITY</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_QUALITY_FOR_STATIC_ENTROPY_CODES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_QUALITY_FOR_BLOCK_SPLIT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_QUALITY_FOR_NONZERO_DISTANCE_PARAMS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_QUALITY_FOR_OPTIMIZE_HISTOGRAMS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_QUALITY_FOR_CONTEXT_MODELING</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_QUALITY_FOR_HQ_CONTEXT_MODELING</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_QUALITY_FOR_HQ_BLOCK_SPLITTING</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<comment type="block">/* For quality below MIN_QUALITY_FOR_BLOCK_SPLIT there is no block splitting,
   so we buffer at most this much literals and commands. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NUM_DELAYED_SYMBOLS</name></cpp:macro> <cpp:value>0x2FFF</cpp:value></cpp:define>

<comment type="block">/* Returns hash-table size for quality levels 0 and 1. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name></type> <name>MaxHashTableSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name>quality</name> <operator>==</operator> <name>FAST_ONE_PASS_COMPRESSION_QUALITY</name></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr> </then><else>: <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The maximum length for which the zopflification uses distinct distances. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ZOPFLI_LEN_QUALITY_10</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ZOPFLI_LEN_QUALITY_11</name></cpp:macro> <cpp:value>325</cpp:value></cpp:define>

<comment type="block">/* Do not thoroughly search when a long copy is found. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_LONG_COPY_QUICK_STEP</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name></type> <name>MaxZopfliLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr> ?</condition><then>
      <expr><name>MAX_ZOPFLI_LEN_QUALITY_10</name></expr> </then><else>:
      <expr><name>MAX_ZOPFLI_LEN_QUALITY_11</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Number of best candidates to evaluate to expand Zopfli chain. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name></type> <name>MaxZopfliCandidates</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>SanitizeParams</name><parameter_list>(<parameter><decl><type><name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>BROTLI_MAX_QUALITY</name></expr></argument>,
      <argument><expr><call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>BROTLI_MIN_QUALITY</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;=</operator> <name>MAX_QUALITY_FOR_STATIC_ENTROPY_CODES</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>large_window</name></name> <operator>=</operator> <name>BROTLI_FALSE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name> <operator>&lt;</operator> <name>BROTLI_MIN_WINDOW_BITS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name> <operator>=</operator> <name>BROTLI_MIN_WINDOW_BITS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>max_lgwin</name> <init>= <expr><ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>large_window</name></name></expr> ?</condition><then> <expr><name>BROTLI_LARGE_MAX_WINDOW_BITS</name></expr> </then><else>:
                                           <expr><name>BROTLI_MAX_WINDOW_BITS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name> <operator>&gt;</operator> <name>max_lgwin</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name> <operator>=</operator> <name>max_lgwin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Returns optimized lg_block value. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>int</name></type> <name>ComputeLgBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>lgblock</name> <init>= <expr><name><name>params</name><operator>-&gt;</operator><name>lgblock</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>==</operator> <name>FAST_ONE_PASS_COMPRESSION_QUALITY</name> <operator>||</operator>
      <name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>==</operator> <name>FAST_TWO_PASS_COMPRESSION_QUALITY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>lgblock</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <name>MIN_QUALITY_FOR_BLOCK_SPLIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>lgblock</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lgblock</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>lgblock</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name> <operator>&gt;</operator> <name>lgblock</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lgblock</name> <operator>=</operator> <call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>lgblock</name> <operator>=</operator> <call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>BROTLI_MAX_INPUT_BLOCK_BITS</name></expr></argument>,
        <argument><expr><call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>BROTLI_MIN_INPUT_BLOCK_BITS</name></expr></argument>, <argument><expr><name>lgblock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>lgblock</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns log2 of the size of main ring buffer area.
   Allocate at least lgwin + 1 bits for the ring buffer so that the newly
   added block fits there completely and we still get lgwin bits and at least
   read_block_size_bits + 1 bits because the copy tail length needs to be
   smaller than ring-buffer size. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>int</name></type> <name>ComputeRbBits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>lgblock</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name></type> <name>MaxMetablockSize</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>=
      <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><call><name>ComputeRbBits</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BROTLI_MAX_INPUT_BLOCK_BITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* When searching for backward references and have not seen matches for a long
   time, we can skip some match lookups. Unsuccessful match lookups are very
   expensive and this kind of a heuristic speeds up compression quite a lot.
   At first 8 byte strides are taken and every second byte is put to hasher.
   After 4x more literals stride by 16 bytes, every put 4-th byte to hasher.
   Applied only to qualities 2 to 9. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name></type> <name>LiteralSpreeLengthForSparseSearch</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">9</literal></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">512</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>ChooseHasher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
                                       <parameter><decl><type><name>BrotliHasherParams</name><modifier>*</modifier></type> <name>hparams</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>params</name><operator>-&gt;</operator><name>size_hint</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">54</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>quality</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">40</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">9</literal></expr> ?</condition><then> <expr><literal type="number">41</literal></expr> </then><else>: <expr><literal type="number">42</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>size_hint</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name> <operator>&gt;=</operator> <literal type="number">19</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>block_bits</name></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>bucket_bits</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>num_last_distances_to_check</name></name> <operator>=</operator>
        <ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">9</literal></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>block_bits</name></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>bucket_bits</name></name> <operator>=</operator> <ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">14</literal></expr> </then><else>: <expr><literal type="number">15</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>num_last_distances_to_check</name></name> <operator>=</operator>
        <ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">9</literal></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Different hashers for large window brotli: not for qualities &lt;= 2,
       these are too fast for large window. Not for qualities &gt;= 10: their
       hasher already works well with large window. So the changes are:
       H3 --&gt; H35: for quality 3.
       H54 --&gt; H55: for quality 4 with size hint &gt; 1MB
       H6 --&gt; H65: for qualities 5, 6, 7, 8, 9. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hparams</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>hparams</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">54</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">55</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>hparams</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>hparams</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">65</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_QUALITY_H_ */</comment>
</unit>
