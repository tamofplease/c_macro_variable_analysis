<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/metablock_inc.h"><comment type="block">/* NOLINT(build/header_guard) */</comment>
<comment type="block">/* Copyright 2015 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* template parameters: FN */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HistogramType</name></cpp:macro> <cpp:value>FN(Histogram)</cpp:value></cpp:define>

<comment type="block">/* Greedy block splitter for one block category (literal, command or distance).
*/</comment>
<typedef>typedef <function><type><name><name>struct</name> <name>FN</name></name></type>(<name>BlockSplitter</name>) <block>{<block_content>
  <comment type="block">/* Alphabet size of particular block category. */</comment>
  <type><name>size_t</name></type> <name>alphabet_size_</name>;
  <comment type="block">/* We collect at least this many symbols for each block. */</comment>
  <type><name>size_t</name></type> <name>min_block_size_</name>;
  <comment type="block">/* We merge histograms A and B if
       entropy(A+B) &lt; entropy(A) + entropy(B) + split_threshold_,
     where A is the current histogram and B is the histogram of the last or the
     second last block type. */</comment>
  <type><name>double</name></type> <name>split_threshold_</name>;

  <type><name>size_t</name></type> <name>num_blocks_</name>;
  <type><name>BlockSplit</name><modifier>*</modifier></type> <name>split_</name>;  <comment type="block">/* not owned */</comment>
  <type><name>HistogramType</name><modifier>*</modifier></type> <name>histograms_</name>;  <comment type="block">/* not owned */</comment>
  <type><name>size_t</name><modifier>*</modifier></type> <name>histograms_size_</name>;  <comment type="block">/* not owned */</comment>

  <comment type="block">/* Temporary storage for BlockSplitterFinishBlock. */</comment>
  <type><name>HistogramType</name></type> <name><name>combined_histo</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>;

  <comment type="block">/* The number of symbols that we want to collect before deciding on whether
     or not to merge the block with a previous one or emit a new block. */</comment>
  <type><name>size_t</name></type> <name>target_block_size_</name>;
  <comment type="block">/* The number of symbols in the current histogram. */</comment>
  <type><name>size_t</name></type> <name>block_size_</name>;
  <comment type="block">/* Offset of the current histogram. */</comment>
  <type><name>size_t</name></type> <name>curr_histogram_ix_</name>;
  <comment type="block">/* Offset of the histograms of the previous two block types. */</comment>
  <type><name>size_t</name></type> <name><name>last_histogram_ix_</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>;
  <comment type="block">/* Entropy of the previous two block types. */</comment>
  <type><name>double</name></type> <name><name>last_entropy_</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>;
  <comment type="block">/* The number of times we merged the current block with the last one. */</comment>
  <type><name>size_t</name></type> <name>merge_last_count_</name>;
</block_content>}</block></function></typedef> <expr_stmt><expr><call><name>FN</name><argument_list>(<argument><expr><name>BlockSplitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>FN</name></type><argument_list>(<argument><expr><name>InitBlockSplitter</name></expr></argument>)</argument_list><argument_list>(
    <argument><expr><name>MemoryManager</name><operator>*</operator> <name>m</name></expr></argument>, <argument><expr><call><name>FN</name><argument_list>(<argument><expr><name>BlockSplitter</name></expr></argument>)</argument_list></call><operator>*</operator> <name>self</name></expr></argument>, <argument><expr><name>size_t</name> <name>alphabet_size</name></expr></argument>,
    <argument><expr><name>size_t</name> <name>min_block_size</name></expr></argument>, <argument><expr><name>double</name> <name>split_threshold</name></expr></argument>, <argument><expr><name>size_t</name> <name>num_symbols</name></expr></argument>,
    <argument><expr><name>BlockSplit</name><operator>*</operator> <name>split</name></expr></argument>, <argument><expr><name>HistogramType</name><operator>*</operator><operator>*</operator> <name>histograms</name></expr></argument>, <argument><expr><name>size_t</name><operator>*</operator> <name>histograms_size</name></expr></argument>)</argument_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>max_num_blocks</name> <init>= <expr><name>num_symbols</name> <operator>/</operator> <name>min_block_size</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* We have to allocate one more histogram than the maximum number of block
     types for the current histogram when the meta-block is too big. */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>max_num_types</name> <init>=
      <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>max_num_blocks</name></expr></argument>, <argument><expr><name>BROTLI_MAX_NUMBER_OF_BLOCK_TYPES</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>alphabet_size_</name></name> <operator>=</operator> <name>alphabet_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>min_block_size_</name></name> <operator>=</operator> <name>min_block_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>split_threshold_</name></name> <operator>=</operator> <name>split_threshold</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>num_blocks_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>split_</name></name> <operator>=</operator> <name>split</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>histograms_size_</name></name> <operator>=</operator> <name>histograms_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>target_block_size_</name></name> <operator>=</operator> <name>min_block_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>curr_histogram_ix_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>merge_last_count_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_ENSURE_CAPACITY</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>,
      <argument><expr><name><name>split</name><operator>-&gt;</operator><name>types</name></name></expr></argument>, <argument><expr><name><name>split</name><operator>-&gt;</operator><name>types_alloc_size</name></name></expr></argument>, <argument><expr><name>max_num_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_ENSURE_CAPACITY</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>,
      <argument><expr><name><name>split</name><operator>-&gt;</operator><name>lengths</name></name></expr></argument>, <argument><expr><name><name>split</name><operator>-&gt;</operator><name>lengths_alloc_size</name></name></expr></argument>, <argument><expr><name>max_num_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>split_</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <name>max_num_blocks</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><operator>*</operator><name>histograms</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>histograms_size</name> <operator>=</operator> <name>max_num_types</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>histograms</name> <operator>=</operator> <call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HistogramType</name></expr></argument>, <argument><expr><operator>*</operator><name>histograms_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>histograms_</name></name> <operator>=</operator> <operator>*</operator><name>histograms</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><operator>*</operator><name>histograms</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <comment type="block">/* Clear only current histogram. */</comment>
  <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramClear</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>histograms_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>last_histogram_ix_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>last_histogram_ix_</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="block">/* Does either of three things:
     (1) emits the current block with a new block type;
     (2) emits the current block with the type of the second last block;
     (3) merges the current block with the last block. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>FN</name></type><argument_list>(<argument><expr><name>BlockSplitterFinishBlock</name></expr></argument>)</argument_list><argument_list>(
    <argument><expr><call><name>FN</name><argument_list>(<argument><expr><name>BlockSplitter</name></expr></argument>)</argument_list></call><operator>*</operator> <name>self</name></expr></argument>, <argument><expr><name>BROTLI_BOOL</name> <name>is_final</name></expr></argument>)</argument_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BlockSplit</name><modifier>*</modifier></type> <name>split</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>split_</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>last_entropy</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>last_entropy_</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>histograms</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>histograms_</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name> <operator>=</operator>
      <call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>min_block_size_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>num_blocks_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Create first block. */</comment>
    <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>last_entropy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
        <call><name>BitsEntropy</name><argument_list>(<argument><expr><name><name>histograms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data_</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>alphabet_size_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>last_entropy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>last_entropy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>self</name><operator>-&gt;</operator><name>num_blocks_</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>split</name><operator>-&gt;</operator><name>num_types</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>self</name><operator>-&gt;</operator><name>curr_histogram_ix_</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>curr_histogram_ix_</name></name> <operator>&lt;</operator> <operator>*</operator><name><name>self</name><operator>-&gt;</operator><name>histograms_size_</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramClear</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>histograms</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>curr_histogram_ix_</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>entropy</name> <init>= <expr><call><name>BitsEntropy</name><argument_list>(<argument><expr><name><name>histograms</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>curr_histogram_ix_</name></name></expr>]</index></name><operator>.</operator><name>data_</name></expr></argument>,
                                 <argument><expr><name><name>self</name><operator>-&gt;</operator><name>alphabet_size_</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name><name>combined_entropy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name><name>diff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>last_histogram_ix</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>last_histogram_ix_</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>combined_histo</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>histograms</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>curr_histogram_ix_</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramAddHistogram</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>combined_histo</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
          <argument><expr><operator>&amp;</operator><name><name>histograms</name><index>[<expr><name>last_histogram_ix</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>combined_entropy</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>BitsEntropy</name><argument_list>(
          <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>combined_histo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>data_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>alphabet_size_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>diff</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>combined_entropy</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>entropy</name> <operator>-</operator> <name><name>last_entropy</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>split</name><operator>-&gt;</operator><name>num_types</name></name> <operator>&lt;</operator> <name>BROTLI_MAX_NUMBER_OF_BLOCK_TYPES</name> <operator>&amp;&amp;</operator>
        <name><name>diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>self</name><operator>-&gt;</operator><name>split_threshold_</name></name> <operator>&amp;&amp;</operator>
        <name><name>diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>self</name><operator>-&gt;</operator><name>split_threshold_</name></name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Create new block. */</comment>
      <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>lengths</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>num_blocks_</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>types</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>num_blocks_</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>split</name><operator>-&gt;</operator><name>num_types</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>last_histogram_ix_</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>last_histogram_ix_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>last_histogram_ix_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>split</name><operator>-&gt;</operator><name>num_types</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>last_entropy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>last_entropy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>last_entropy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>entropy</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name><name>self</name><operator>-&gt;</operator><name>num_blocks_</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name><name>split</name><operator>-&gt;</operator><name>num_types</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name><name>self</name><operator>-&gt;</operator><name>curr_histogram_ix_</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>curr_histogram_ix_</name></name> <operator>&lt;</operator> <operator>*</operator><name><name>self</name><operator>-&gt;</operator><name>histograms_size_</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramClear</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>histograms</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>curr_histogram_ix_</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>merge_last_count_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>target_block_size_</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>min_block_size_</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">20.0</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Combine this block with second last block. */</comment>
      <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>lengths</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>num_blocks_</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>types</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>num_blocks_</name></name></expr>]</index></name> <operator>=</operator> <name><name>split</name><operator>-&gt;</operator><name>types</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>num_blocks_</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>BROTLI_SWAP</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>last_histogram_ix_</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>histograms</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>last_histogram_ix_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>combined_histo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>last_entropy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>last_entropy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>last_entropy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>combined_entropy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name><name>self</name><operator>-&gt;</operator><name>num_blocks_</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramClear</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>histograms</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>curr_histogram_ix_</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>merge_last_count_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>target_block_size_</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>min_block_size_</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="block">/* Combine this block with last block. */</comment>
      <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>lengths</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>num_blocks_</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>histograms</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>last_histogram_ix_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>combined_histo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>last_entropy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>combined_entropy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>split</name><operator>-&gt;</operator><name>num_types</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>last_entropy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>last_entropy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramClear</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>histograms</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>curr_histogram_ix_</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>self</name><operator>-&gt;</operator><name>merge_last_count_</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>target_block_size_</name></name> <operator>+=</operator> <name><name>self</name><operator>-&gt;</operator><name>min_block_size_</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>is_final</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name><name>self</name><operator>-&gt;</operator><name>histograms_size_</name></name> <operator>=</operator> <name><name>split</name><operator>-&gt;</operator><name>num_types</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>num_blocks_</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="block">/* Adds the next symbol to the current histogram. When the current histogram
   reaches the target size, decides on merging the block. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>FN</name></type><argument_list>(<argument><expr><name>BlockSplitterAddSymbol</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>FN</name><argument_list>(<argument><expr><name>BlockSplitter</name></expr></argument>)</argument_list></call><operator>*</operator> <name>self</name></expr></argument>, <argument><expr><name>size_t</name> <name>symbol</name></expr></argument>)</argument_list> <block>{<block_content>
  <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramAdd</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>histograms_</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>curr_histogram_ix_</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>block_size_</name></name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>target_block_size_</name></name></expr>)</condition> <block>{<block_content>
    <function_decl><type><name>FN</name></type>(<name>BlockSplitterFinishBlock</name>)<parameter_list>(<parameter><decl><type><name>self</name></type></decl></parameter>, <comment type="block">/* is_final = */</comment> <parameter><decl><type><name>BROTLI_FALSE</name></type></decl></parameter>)</parameter_list>;</function_decl>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HistogramType</name></cpp:undef>
</unit>
