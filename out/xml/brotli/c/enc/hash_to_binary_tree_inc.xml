<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/hash_to_binary_tree_inc.h"><comment type="block">/* NOLINT(build/header_guard) */</comment>
<comment type="block">/* Copyright 2016 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* template parameters: FN, BUCKET_BITS, MAX_TREE_COMP_LENGTH,
                        MAX_TREE_SEARCH_DEPTH */</comment>

<comment type="block">/* A (forgetful) hash table where each hash bucket contains a binary tree of
   sequences whose first 4 bytes share the same hash code.
   Each sequence is MAX_TREE_COMP_LENGTH long and is identified by its starting
   position in the input data. The binary tree is sorted by the lexicographic
   order of the sequences, and it is also a max-heap with respect to the
   starting positions. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HashToBinaryTree</name></cpp:macro> <cpp:value>HASHER()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; BUCKET_BITS)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>HashTypeLength</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">4</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>StoreLookahead</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>MAX_TREE_COMP_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name> <name>FN</name></type>(<name>HashBytes</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><call><name>BROTLI_UNALIGNED_LOAD32LE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>kHashMul32</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* The higher bits contain more mixture from the multiplication,
     so we take our results from there. */</comment>
  <return>return <expr><name>h</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>BUCKET_BITS</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>HashToBinaryTree</name> <block>{
  <comment type="block">/* The window size minus 1 */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>window_mask_</name></decl>;</decl_stmt>

  <comment type="block">/* Hash table that maps the 4-byte hashes of the sequence to the last
     position where this hash was found, which is the root of the binary
     tree of sequences that share this hash bucket. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>buckets_</name></decl>;</decl_stmt>  <comment type="block">/* uint32_t[BUCKET_SIZE]; */</comment>

  <comment type="block">/* A position used to mark a non-existent sequence, i.e. a tree is empty if
     its root is at invalid_pos_ and a node is a leaf if both its children
     are at invalid_pos_. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>invalid_pos_</name></decl>;</decl_stmt>

  <comment type="block">/* --- Dynamic size members --- */</comment>

  <comment type="block">/* The union of the binary trees of each hash bucket. The root of the tree
     corresponding to a hash is a sequence starting at buckets_[hash] and
     the left and right children of a sequence starting at pos are
     forest_[2 * pos] and forest_[2 * pos + 1]. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>forest_</name></decl>;</decl_stmt>  <comment type="block">/* uint32_t[2 * num_nodes] */</comment>
}</block></struct></type> <name>HashToBinaryTree</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>Initialize</name>)<parameter_list>(
    <parameter><decl><type><name>HasherCommon</name><modifier>*</modifier></type> <name>common</name></decl></parameter>, <parameter><decl><type><name>HashToBinaryTree</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>buckets_</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>common</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>forest_</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>common</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>window_mask_</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1u</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>invalid_pos_</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">0</literal> <operator>-</operator> <name><name>self</name><operator>-&gt;</operator><name>window_mask_</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>Prepare</name>)
    <parameter_list>(<parameter><decl><type><name>HashToBinaryTree</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>one_shot</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>input_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>invalid_pos</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>invalid_pos_</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>buckets</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>buckets_</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>one_shot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BUCKET_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>invalid_pos</name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>HashMemAllocInBytes</name>)<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>one_shot</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>input_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>alloc_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_nodes</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>one_shot</name> <operator>&amp;&amp;</operator> <name>input_size</name> <operator>&lt;</operator> <name>num_nodes</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>num_nodes</name> <operator>=</operator> <name>input_size</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>alloc_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BUCKET_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alloc_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_nodes</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>LeftChildIndex</name>)<parameter_list>(
    <parameter><decl><type><name>HashToBinaryTree</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>window_mask_</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>RightChildIndex</name>)<parameter_list>(
    <parameter><decl><type><name>HashToBinaryTree</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>window_mask_</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Stores the hash of the next 4 bytes and in a single tree-traversal, the
   hash bucket's binary tree is searched for matches and is re-rooted at the
   current position.

   If less than MAX_TREE_COMP_LENGTH data is available, the hash bucket of the
   current position is searched for matches, but the state of the hash table
   is not changed, since we can not know the final sorting order of the
   current (incomplete) sequence.

   This function must be called with increasing cur_ix positions. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>BackwardMatch</name><modifier>*</modifier> <name>FN</name></type>(<name>StoreAndFindMatches</name>)<parameter_list>(
    <parameter><decl><type><name>HashToBinaryTree</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>cur_ix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ring_buffer_mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_length</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_backward</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier> <specifier>const</specifier> <name>BROTLI_RESTRICT</name></type> <name>best_len</name></decl></parameter>,
    <parameter><decl><type><name>BackwardMatch</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>matches</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>cur_ix_masked</name> <init>= <expr><name>cur_ix</name> <operator>&amp;</operator> <name>ring_buffer_mask</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_comp_len</name> <init>=
      <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>max_length</name></expr></argument>, <argument><expr><name>MAX_TREE_COMP_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>BROTLI_BOOL</name></type> <name>should_reroot_tree</name> <init>=
      <expr><call><name>TO_BROTLI_BOOL</name><argument_list>(<argument><expr><name>max_length</name> <operator>&gt;=</operator> <name>MAX_TREE_COMP_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>key</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HashBytes</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>cur_ix_masked</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>buckets</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>buckets_</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>forest</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>forest_</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>prev_ix</name> <init>= <expr><name><name>buckets</name><index>[<expr><name>key</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* The forest index of the rightmost node of the left subtree of the new
     root, updated as we traverse and re-root the tree of the hash bucket. */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>node_left</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>LeftChildIndex</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>cur_ix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/* The forest index of the leftmost node of the right subtree of the new
     root, updated as we traverse and re-root the tree of the hash bucket. */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>node_right</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>RightChildIndex</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>cur_ix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/* The match length of the rightmost node of the left subtree of the new
     root, updated as we traverse and re-root the tree of the hash bucket. */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>best_len_left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* The match length of the leftmost node of the right subtree of the new
     root, updated as we traverse and re-root the tree of the hash bucket. */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>best_len_right</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>depth_remaining</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>should_reroot_tree</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>buckets</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cur_ix</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>depth_remaining</name> <operator>=</operator> <name>MAX_TREE_SEARCH_DEPTH</name></expr>;</init> <condition>;</condition> <incr><expr><operator>--</operator><name>depth_remaining</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>backward</name> <init>= <expr><name>cur_ix</name> <operator>-</operator> <name>prev_ix</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>prev_ix_masked</name> <init>= <expr><name>prev_ix</name> <operator>&amp;</operator> <name>ring_buffer_mask</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>backward</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>backward</name> <operator>&gt;</operator> <name>max_backward</name> <operator>||</operator> <name>depth_remaining</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>should_reroot_tree</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>forest</name><index>[<expr><name>node_left</name></expr>]</index></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>invalid_pos_</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>forest</name><index>[<expr><name>node_right</name></expr>]</index></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>invalid_pos_</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>cur_len</name> <init>= <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>best_len_left</name></expr></argument>, <argument><expr><name>best_len_right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name>cur_len</name> <operator>&lt;=</operator> <name>MAX_TREE_COMP_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <name>cur_len</name> <operator>+</operator>
          <call><name>FindMatchLengthWithLimit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>cur_ix_masked</name> <operator>+</operator> <name>cur_len</name></expr>]</index></name></expr></argument>,
                                   <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>prev_ix_masked</name> <operator>+</operator> <name>cur_len</name></expr>]</index></name></expr></argument>,
                                   <argument><expr><name>max_length</name> <operator>-</operator> <name>cur_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(
          <argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>cur_ix_masked</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>prev_ix_masked</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>matches</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <operator>*</operator><name>best_len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>best_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitBackwardMatch</name><argument_list>(<argument><expr><name>matches</name><operator>++</operator></expr></argument>, <argument><expr><name>backward</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>max_comp_len</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>should_reroot_tree</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>forest</name><index>[<expr><name>node_left</name></expr>]</index></name> <operator>=</operator> <name><name>forest</name><index>[<expr><call><call><name>FN</name><argument_list>(<argument><expr><name>LeftChildIndex</name></expr></argument>)</argument_list></call><argument><expr><operator>(</operator><name>self</name><operator>,</operator> <name>prev_ix</name><operator>)</operator></expr></argument></call></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>forest</name><index>[<expr><name>node_right</name></expr>]</index></name> <operator>=</operator> <name><name>forest</name><index>[<expr><call><call><name>FN</name><argument_list>(<argument><expr><name>RightChildIndex</name></expr></argument>)</argument_list></call><argument><expr><operator>(</operator><name>self</name><operator>,</operator> <name>prev_ix</name><operator>)</operator></expr></argument></call></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>cur_ix_masked</name> <operator>+</operator> <name>len</name></expr>]</index></name> <operator>&gt;</operator> <name><name>data</name><index>[<expr><name>prev_ix_masked</name> <operator>+</operator> <name>len</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>best_len_left</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>should_reroot_tree</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>forest</name><index>[<expr><name>node_left</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>prev_ix</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>node_left</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>RightChildIndex</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>prev_ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>prev_ix</name> <operator>=</operator> <name><name>forest</name><index>[<expr><name>node_left</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>best_len_right</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>should_reroot_tree</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>forest</name><index>[<expr><name>node_right</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>prev_ix</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>node_right</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>LeftChildIndex</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>prev_ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>prev_ix</name> <operator>=</operator> <name><name>forest</name><index>[<expr><name>node_right</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
  </block_content>}</block></for>
  <return>return <expr><name>matches</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Finds all backward matches of &amp;data[cur_ix &amp; ring_buffer_mask] up to the
   length of max_length and stores the position cur_ix in the hash table.

   Sets *num_matches to the number of matches found, and stores the found
   matches in matches[0] to matches[*num_matches - 1]. The matches will be
   sorted by strictly increasing length and (non-strictly) increasing
   distance. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>FindAllMatches</name>)<parameter_list>(
    <parameter><decl><type><name>HashToBinaryTree</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderDictionary</name><modifier>*</modifier></type> <name>dictionary</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ring_buffer_mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>cur_ix</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_backward</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dictionary_distance</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
    <parameter><decl><type><name>BackwardMatch</name><modifier>*</modifier></type> <name>matches</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BackwardMatch</name><modifier>*</modifier> <specifier>const</specifier></type> <name>orig_matches</name> <init>= <expr><name>matches</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>cur_ix_masked</name> <init>= <expr><name>cur_ix</name> <operator>&amp;</operator> <name>ring_buffer_mask</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>best_len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>short_match_max_backward</name> <init>=
      <expr><ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>!=</operator> <name>HQ_ZOPFLIFICATION_QUALITY</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>stop</name> <init>= <expr><name>cur_ix</name> <operator>-</operator> <name>short_match_max_backward</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>dict_matches</name><index>[<expr><name>BROTLI_MAX_STATIC_DICTIONARY_MATCH_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cur_ix</name> <operator>&lt;</operator> <name>short_match_max_backward</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>stop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>cur_ix</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>stop</name> <operator>&amp;&amp;</operator> <name>best_len</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>prev_ix</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>backward</name> <init>= <expr><name>cur_ix</name> <operator>-</operator> <name>prev_ix</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>BROTLI_PREDICT_FALSE</name><argument_list>(<argument><expr><name>backward</name> <operator>&gt;</operator> <name>max_backward</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>prev_ix</name> <operator>&amp;=</operator> <name>ring_buffer_mask</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>cur_ix_masked</name></expr>]</index></name> <operator>!=</operator> <name><name>data</name><index>[<expr><name>prev_ix</name></expr>]</index></name> <operator>||</operator>
        <name><name>data</name><index>[<expr><name>cur_ix_masked</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>data</name><index>[<expr><name>prev_ix</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>=
          <expr><call><name>FindMatchLengthWithLimit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>prev_ix</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>cur_ix_masked</name></expr>]</index></name></expr></argument>,
                                   <argument><expr><name>max_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>best_len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>best_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitBackwardMatch</name><argument_list>(<argument><expr><name>matches</name><operator>++</operator></expr></argument>, <argument><expr><name>backward</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>best_len</name> <operator>&lt;</operator> <name>max_length</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>matches</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>StoreAndFindMatches</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>cur_ix</name></expr></argument>,
        <argument><expr><name>ring_buffer_mask</name></expr></argument>, <argument><expr><name>max_length</name></expr></argument>, <argument><expr><name>max_backward</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_len</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>BROTLI_MAX_STATIC_DICTIONARY_MATCH_LEN</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>dict_matches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>kInvalidMatch</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>minlen</name> <init>= <expr><call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>best_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>BrotliFindAllStaticDictionaryMatches</name><argument_list>(<argument><expr><name>dictionary</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>cur_ix_masked</name></expr>]</index></name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>, <argument><expr><name>max_length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dict_matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>maxlen</name> <init>= <expr><call><name>BROTLI_MIN</name><argument_list>(
          <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>BROTLI_MAX_STATIC_DICTIONARY_MATCH_LEN</name></expr></argument>, <argument><expr><name>max_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>minlen</name></expr>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <name>maxlen</name></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>dict_id</name> <init>= <expr><name><name>dict_matches</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dict_id</name> <operator>&lt;</operator> <name>kInvalidMatch</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>size_t</name></type> <name>distance</name> <init>= <expr><name>dictionary_distance</name> <operator>+</operator> <operator>(</operator><name>dict_id</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&lt;=</operator> <name><name>params</name><operator>-&gt;</operator><name>dist</name><operator>.</operator><name>max_distance</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>InitDictionaryBackwardMatch</name><argument_list>(<argument><expr><name>matches</name><operator>++</operator></expr></argument>, <argument><expr><name>distance</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>dict_id</name> <operator>&amp;</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>matches</name> <operator>-</operator> <name>orig_matches</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Stores the hash of the next 4 bytes and re-roots the binary tree at the
   current sequence, without returning any matches.
   REQUIRES: ix + MAX_TREE_COMP_LENGTH &lt;= end-of-current-block */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>Store</name>)<parameter_list>(<parameter><decl><type><name>HashToBinaryTree</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* Maximum distance is window size - 16, see section 9.1. of the spec. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_backward</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>window_mask_</name></name> <operator>-</operator> <name>BROTLI_WINDOW_GAP</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>FN</name></type>(<name>StoreAndFindMatches</name>)<parameter_list>(<parameter><decl><type><name>self</name></type></decl></parameter>, <parameter><decl><type><name>data</name></type></decl></parameter>, <parameter><decl><type><name>ix</name></type></decl></parameter>, <parameter><decl><type><name>mask</name></type></decl></parameter>, <parameter><decl><type><name>MAX_TREE_COMP_LENGTH</name></type></decl></parameter>,
      <parameter><decl><type><name>max_backward</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>StoreRange</name>)<parameter_list>(<parameter><decl><type><name>HashToBinaryTree</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>mask</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ix_start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ix_end</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>ix_start</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name>ix_start</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ix_start</name> <operator>+</operator> <literal type="number">63</literal> <operator>&lt;=</operator> <name>ix_end</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>ix_end</name> <operator>-</operator> <literal type="number">63</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ix_start</name> <operator>+</operator> <literal type="number">512</literal> <operator>&lt;=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
      <function_decl><type><name>FN</name></type>(<name>Store</name>)<parameter_list>(<parameter><decl><type><name>self</name></type></decl></parameter>, <parameter><decl><type><name>data</name></type></decl></parameter>, <parameter><decl><type><name>mask</name></type></decl></parameter>, <parameter><decl><type><name>j</name></type></decl></parameter>)</parameter_list>;</function_decl>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ix_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <function_decl><type><name>FN</name></type>(<name>Store</name>)<parameter_list>(<parameter><decl><type><name>self</name></type></decl></parameter>, <parameter><decl><type><name>data</name></type></decl></parameter>, <parameter><decl><type><name>mask</name></type></decl></parameter>, <parameter><decl><type><name>i</name></type></decl></parameter>)</parameter_list>;</function_decl>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>StitchToPreviousBlock</name>)<parameter_list>(
    <parameter><decl><type><name>HashToBinaryTree</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>num_bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>ringbuffer_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>&gt;=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>HashTypeLength</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
      <name>position</name> <operator>&gt;=</operator> <name>MAX_TREE_COMP_LENGTH</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Store the last `MAX_TREE_COMP_LENGTH - 1` positions in the hasher.
       These could not be calculated before, since they require knowledge
       of both the previous and the current block. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_start</name> <init>= <expr><name>position</name> <operator>-</operator> <name>MAX_TREE_COMP_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_end</name> <init>= <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>i_start</name> <operator>+</operator> <name>num_bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>i_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <comment type="block">/* Maximum distance is window size - 16, see section 9.1. of the spec.
         Furthermore, we have to make sure that we don't look further back
         from the start of the next block than the window size, otherwise we
         could access already overwritten areas of the ring-buffer. */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_backward</name> <init>=
          <expr><name><name>self</name><operator>-&gt;</operator><name>window_mask_</name></name> <operator>-</operator> <call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>,
                                          <argument><expr><name>BROTLI_WINDOW_GAP</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
                                          <argument><expr><name>position</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="block">/* We know that i + MAX_TREE_COMP_LENGTH &lt;= position + num_bytes, i.e. the
         end of the current block and that we have at least
         MAX_TREE_COMP_LENGTH tail in the ring-buffer. */</comment>
      <function_decl><type><name>FN</name></type>(<name>StoreAndFindMatches</name>)<parameter_list>(<parameter><decl><type><name>self</name></type></decl></parameter>, <parameter><decl><type><name>ringbuffer</name></type></decl></parameter>, <parameter><decl><type><name>i</name></type></decl></parameter>, <parameter><decl><type><name>ringbuffer_mask</name></type></decl></parameter>,
          <parameter><decl><type><name>MAX_TREE_COMP_LENGTH</name></type></decl></parameter>, <parameter><decl><type><name>max_backward</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>)</parameter_list>;</function_decl>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUCKET_SIZE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HashToBinaryTree</name></cpp:undef>
</unit>
