<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/hash_rolling_inc.h"><comment type="block">/* NOLINT(build/header_guard) */</comment>
<comment type="block">/* Copyright 2018 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* template parameters: FN, JUMP, NUMBUCKETS, MASK, CHUNKLEN */</comment>
<comment type="block">/* NUMBUCKETS / (MASK + 1) = probability of storing and using hash code. */</comment>
<comment type="block">/* JUMP = skip bytes for speedup */</comment>

<comment type="block">/* Rolling hash for long distance long string matches. Stores one position
   per bucket, bucket key is computed over a long region. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HashRolling</name></cpp:macro> <cpp:value>HASHER()</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>FN</name><parameter_list>(<parameter><decl><type><name>kRollingHashMul32</name></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">69069</literal></expr></init>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>FN</name><parameter_list>(<parameter><decl><type><name>kInvalidPos</name></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0xffffffff</literal></expr></init>;</function_decl>

<comment type="block">/* This hasher uses a longer forward length, but returning a higher value here
   will hurt compression by the main hasher when combined with a composite
   hasher. The hasher tests for forward itself instead. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>HashTypeLength</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">4</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>StoreLookahead</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">4</literal></expr>;</return> </block_content>}</block></function>

<comment type="block">/* Computes a code from a single byte. A lookup table of 256 values could be
   used, but simply adding 1 works about as good. */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name> <name>FN</name></type>(<name>HashByte</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>byte</name> <operator>+</operator> <literal type="number">1u</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name> <name>FN</name></type>(<name>HashRollingFunctionInitial</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>add</name></decl></parameter>,
                                               <parameter><decl><type><name>uint32_t</name></type> <name>factor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>factor</name> <operator>*</operator> <name>state</name> <operator>+</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>HashByte</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name> <name>FN</name></type>(<name>HashRollingFunction</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>add</name></decl></parameter>,
                                        <parameter><decl><type><name>uint8_t</name></type> <name>rem</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>factor</name></decl></parameter>,
                                        <parameter><decl><type><name>uint32_t</name></type> <name>factor_remove</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>factor</name> <operator>*</operator> <name>state</name> <operator>+</operator>
      <call><call><name>FN</name><argument_list>(<argument><expr><name>HashByte</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>factor_remove</name> <operator>*</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>HashByte</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>rem</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>HashRolling</name> <block>{
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>table</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>next_ix</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>chunk_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>factor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>factor_remove</name></decl>;</decl_stmt>
}</block></struct></type> <name>HashRolling</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>Initialize</name>)<parameter_list>(
    <parameter><decl><type><name>HasherCommon</name><modifier>*</modifier></type> <name>common</name></decl></parameter>, <parameter><decl><type><name>HashRolling</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>next_ix</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>factor</name></name> <operator>=</operator> <call><name>FN</name><argument_list>(<argument><expr><name>kRollingHashMul32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Compute the factor of the oldest byte to remove: factor**steps modulo
     0xffffffff (the multiplications rely on 32-bit overflow) */</comment>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>factor_remove</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHUNKLEN</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>JUMP</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>factor_remove</name></name> <operator>*=</operator> <name><name>self</name><operator>-&gt;</operator><name>factor</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>common</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUMBUCKETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FN</name><argument_list>(<argument><expr><name>kInvalidPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>Prepare</name>)<parameter_list>(<parameter><decl><type><name>HashRolling</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>one_shot</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>input_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <comment type="block">/* Too small size, cannot use this hasher. */</comment>
  <if_stmt><if>if <condition>(<expr><name>input_size</name> <operator>&lt;</operator> <name>CHUNKLEN</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHUNKLEN</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>JUMP</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>HashRollingFunctionInitial</name></expr></argument>)</argument_list></call><argument_list>(
        <argument><expr><name><name>self</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>one_shot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>HashMemAllocInBytes</name>)<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>one_shot</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>input_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>alloc_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>one_shot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alloc_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUMBUCKETS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>Store</name>)<parameter_list>(<parameter><decl><type><name>HashRolling</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>StoreRange</name>)<parameter_list>(<parameter><decl><type><name>HashRolling</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>mask</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ix_start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ix_end</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>ix_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>ix_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>StitchToPreviousBlock</name>)<parameter_list>(
    <parameter><decl><type><name>HashRolling</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>num_bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>ring_buffer_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* In this case we must re-initialize the hasher from scratch from the
     current position. */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>position_masked</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>available</name> <init>= <expr><name>num_bytes</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>position</name> <operator>&amp;</operator> <operator>(</operator><name>JUMP</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>diff</name> <init>= <expr><name>JUMP</name> <operator>-</operator> <operator>(</operator><name>position</name> <operator>&amp;</operator> <operator>(</operator><name>JUMP</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>available</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>diff</name> <operator>&gt;</operator> <name>available</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>available</name> <operator>-</operator> <name>diff</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>position</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>position_masked</name> <operator>=</operator> <name>position</name> <operator>&amp;</operator> <name>ring_buffer_mask</name></expr>;</expr_stmt>
  <comment type="block">/* wrapping around ringbuffer not handled. */</comment>
  <if_stmt><if>if <condition>(<expr><name>available</name> <operator>&gt;</operator> <name>ring_buffer_mask</name> <operator>-</operator> <name>position_masked</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>available</name> <operator>=</operator> <name>ring_buffer_mask</name> <operator>-</operator> <name>position_masked</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>Prepare</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>BROTLI_FALSE</name></expr></argument>, <argument><expr><name>available</name></expr></argument>,
      <argument><expr><name>ringbuffer</name> <operator>+</operator> <operator>(</operator><name>position</name> <operator>&amp;</operator> <name>ring_buffer_mask</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>next_ix</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>num_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>PrepareDistanceCache</name>)<parameter_list>(
    <parameter><decl><type><name>HashRolling</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><name>int</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>distance_cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>distance_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>FindLongestMatch</name>)<parameter_list>(
    <parameter><decl><type><name>HashRolling</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderDictionary</name><modifier>*</modifier></type> <name>dictionary</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ring_buffer_mask</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>distance_cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>cur_ix</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_backward</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dictionary_distance</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_distance</name></decl></parameter>,
    <parameter><decl><type><name>HasherSearchResult</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>cur_ix_masked</name> <init>= <expr><name>cur_ix</name> <operator>&amp;</operator> <name>ring_buffer_mask</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cur_ix</name> <operator>&amp;</operator> <operator>(</operator><name>JUMP</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Not enough lookahead */</comment>
  <if_stmt><if>if <condition>(<expr><name>max_length</name> <operator>&lt;</operator> <name>CHUNKLEN</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>next_ix</name></name></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;=</operator> <name>cur_ix</name></expr>;</condition> <incr><expr><name>pos</name> <operator>+=</operator> <name>JUMP</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>MASK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name>rem</name> <init>= <expr><name><name>data</name><index>[<expr><name>pos</name> <operator>&amp;</operator> <name>ring_buffer_mask</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>add</name> <init>= <expr><name><name>data</name><index>[<expr><operator>(</operator><name>pos</name> <operator>+</operator> <name>CHUNKLEN</name><operator>)</operator> <operator>&amp;</operator> <name>ring_buffer_mask</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>found_ix</name> <init>= <expr><call><name>FN</name><argument_list>(<argument><expr><name>kInvalidPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>HashRollingFunction</name></expr></argument>)</argument_list></call><argument_list>(
        <argument><expr><name><name>self</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>rem</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>factor</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>factor_remove</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <name>NUMBUCKETS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>found_ix</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>code</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>pos</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>cur_ix</name> <operator>&amp;&amp;</operator> <name>found_ix</name> <operator>!=</operator> <call><name>FN</name><argument_list>(<argument><expr><name>kInvalidPos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* The cast to 32-bit makes backward distances up to 4GB work even
           if cur_ix is above 4GB, despite using 32-bit values in the table. */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>backward</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>cur_ix</name> <operator>-</operator> <name>found_ix</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>backward</name> <operator>&lt;=</operator> <name>max_backward</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>found_ix_masked</name> <init>= <expr><name>found_ix</name> <operator>&amp;</operator> <name>ring_buffer_mask</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>FindMatchLengthWithLimit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>found_ix_masked</name></expr>]</index></name></expr></argument>,
                                                      <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>cur_ix_masked</name></expr>]</index></name></expr></argument>,
                                                      <argument><expr><name>max_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <name><name>out</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>score_t</name></type> <name>score</name> <init>= <expr><call><name>BackwardReferenceScore</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name><name>out</name><operator>-&gt;</operator><name>score</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>distance</name></name> <operator>=</operator> <name>backward</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>len_code_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>next_ix</name></name> <operator>=</operator> <name>cur_ix</name> <operator>+</operator> <name>JUMP</name></expr>;</expr_stmt>

  <comment type="block">/* NOTE: this hasher does not search in the dictionary. It is used as
     backup-hasher, the main hasher already searches in it. */</comment>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>dictionary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>distance_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>dictionary_distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>max_distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HashRolling</name></cpp:undef>
</unit>
