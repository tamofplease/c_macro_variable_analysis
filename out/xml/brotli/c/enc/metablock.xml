<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/metablock.h"><comment type="block">/* Copyright 2015 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Algorithms for distributing the literals and commands of a metablock between
   block types and contexts. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_METABLOCK_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_METABLOCK_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"block_splitter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"histogram.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quality.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>MetaBlockSplit</name> <block>{
  <decl_stmt><decl><type><name>BlockSplit</name></type> <name>literal_split</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BlockSplit</name></type> <name>command_split</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BlockSplit</name></type> <name>distance_split</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>literal_context_map</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>literal_context_map_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>distance_context_map</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>distance_context_map_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HistogramLiteral</name><modifier>*</modifier></type> <name>literal_histograms</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>literal_histograms_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HistogramCommand</name><modifier>*</modifier></type> <name>command_histograms</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>command_histograms_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HistogramDistance</name><modifier>*</modifier></type> <name>distance_histograms</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>distance_histograms_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>MetaBlockSplit</name>;</typedef>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>InitMetaBlockSplit</name><parameter_list>(<parameter><decl><type><name>MetaBlockSplit</name><modifier>*</modifier></type> <name>mb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BrotliInitBlockSplit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>literal_split</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BrotliInitBlockSplit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>command_split</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BrotliInitBlockSplit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>distance_split</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>literal_context_map</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>literal_context_map_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>distance_context_map</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>distance_context_map_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>literal_histograms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>literal_histograms_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>command_histograms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>command_histograms_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>distance_histograms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>distance_histograms_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>DestroyMetaBlockSplit</name><parameter_list>(
    <parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>MetaBlockSplit</name><modifier>*</modifier></type> <name>mb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BrotliDestroyBlockSplit</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>literal_split</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BrotliDestroyBlockSplit</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>command_split</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BrotliDestroyBlockSplit</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mb</name><operator>-&gt;</operator><name>distance_split</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>mb</name><operator>-&gt;</operator><name>literal_context_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>mb</name><operator>-&gt;</operator><name>distance_context_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>mb</name><operator>-&gt;</operator><name>literal_histograms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>mb</name><operator>-&gt;</operator><name>command_histograms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>mb</name><operator>-&gt;</operator><name>distance_histograms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Uses the slow shortest-path block splitter and does context clustering.
   The distance parameters are dynamically selected based on the commands
   which get recomputed under the new distance parameters. The new distance
   parameters are stored into *params. */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliBuildMetaBlock</name><parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>,
                                          <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer</name></decl></parameter>,
                                          <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>pos</name></decl></parameter>,
                                          <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>mask</name></decl></parameter>,
                                          <parameter><decl><type><name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
                                          <parameter><decl><type><name>uint8_t</name></type> <name>prev_byte</name></decl></parameter>,
                                          <parameter><decl><type><name>uint8_t</name></type> <name>prev_byte2</name></decl></parameter>,
                                          <parameter><decl><type><name>Command</name><modifier>*</modifier></type> <name>cmds</name></decl></parameter>,
                                          <parameter><decl><type><name>size_t</name></type> <name>num_commands</name></decl></parameter>,
                                          <parameter><decl><type><name>ContextType</name></type> <name>literal_context_mode</name></decl></parameter>,
                                          <parameter><decl><type><name>MetaBlockSplit</name><modifier>*</modifier></type> <name>mb</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Uses a fast greedy block splitter that tries to merge current block with the
   last or the second last block and uses a static context clustering which
   is the same for all block types. */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliBuildMetaBlockGreedy</name><parameter_list>(
    <parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mask</name></decl></parameter>,
    <parameter><decl><type><name>uint8_t</name></type> <name>prev_byte</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>prev_byte2</name></decl></parameter>, <parameter><decl><type><name>ContextLut</name></type> <name>literal_context_lut</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>num_contexts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>static_context_map</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>Command</name><modifier>*</modifier></type> <name>commands</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n_commands</name></decl></parameter>, <parameter><decl><type><name>MetaBlockSplit</name><modifier>*</modifier></type> <name>mb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliOptimizeHistograms</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>num_distance_codes</name></decl></parameter>,
                                              <parameter><decl><type><name>MetaBlockSplit</name><modifier>*</modifier></type> <name>mb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliInitDistanceParams</name><parameter_list>(<parameter><decl><type><name>BrotliDistanceParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
    <parameter><decl><type><name>uint32_t</name></type> <name>npostfix</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ndirect</name></decl></parameter>, <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>large_window</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_METABLOCK_H_ */</comment>
</unit>
