<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/state.h"><comment type="block">/* Copyright 2022 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Encoder state. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_STATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_STATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compress_fragment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compress_fragment_two_pass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ringbuffer.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>BrotliEncoderStreamState</name> <block>{
  <comment type="block">/* Default state. */</comment>
  <decl><name>BROTLI_STREAM_PROCESSING</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
  <comment type="block">/* Intermediate state; after next block is emitted, byte-padding should be
     performed before getting back to default state. */</comment>
  <decl><name>BROTLI_STREAM_FLUSH_REQUESTED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <comment type="block">/* Last metablock was produced; no more input is acceptable. */</comment>
  <decl><name>BROTLI_STREAM_FINISHED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
  <comment type="block">/* Flushing compressed block and writing meta-data block header. */</comment>
  <decl><name>BROTLI_STREAM_METADATA_HEAD</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
  <comment type="block">/* Writing metadata block body. */</comment>
  <decl><name>BROTLI_STREAM_METADATA_BODY</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>BrotliEncoderStreamState</name>;</typedef>

<typedef>typedef <type><enum>enum <name>BrotliEncoderFlintState</name> <block>{
  <decl><name>BROTLI_FLINT_NEEDS_2_BYTES</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
  <decl><name>BROTLI_FLINT_NEEDS_1_BYTE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>BROTLI_FLINT_WAITING_FOR_PROCESSING</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
  <decl><name>BROTLI_FLINT_WAITING_FOR_FLUSHING</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
  <decl><name>BROTLI_FLINT_DONE</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>BrotliEncoderFlintState</name>;</typedef>

<typedef>typedef <type><struct>struct <name>BrotliEncoderStateStruct</name> <block>{
  <decl_stmt><decl><type><name>BrotliEncoderParams</name></type> <name>params</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>MemoryManager</name></type> <name>memory_manager_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>input_pos_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>RingBuffer</name></type> <name>ringbuffer_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>cmd_alloc_size_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Command</name><modifier>*</modifier></type> <name>commands_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_commands_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_literals_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>last_insert_len_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>last_flush_pos_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>last_processed_pos_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>dist_cache_</name><index>[<expr><name>BROTLI_NUM_DISTANCE_SHORT_CODES</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>saved_dist_cache_</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>last_bytes_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>last_bytes_bits_</name></decl>;</decl_stmt>
  <comment type="block">/* "Flint" is a tiny uncompressed block emitted before the continuation
     block to unwire literal context from previous data. Despite being int8_t,
     field is actually BrotliEncoderFlintState enum. */</comment>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>flint_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>prev_byte_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>prev_byte2_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>storage_size_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>storage_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Hasher</name></type> <name>hasher_</name></decl>;</decl_stmt>

  <comment type="block">/* Hash table for FAST_ONE_PASS_COMPRESSION_QUALITY mode. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>small_table_</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* 4KiB */</comment>
  <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>large_table_</name></decl>;</decl_stmt>          <comment type="block">/* Allocated only when needed */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>large_table_size_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>BrotliOnePassArena</name><modifier>*</modifier></type> <name>one_pass_arena_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BrotliTwoPassArena</name><modifier>*</modifier></type> <name>two_pass_arena_</name></decl>;</decl_stmt>

  <comment type="block">/* Command and literal buffers for FAST_TWO_PASS_COMPRESSION_QUALITY. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>command_buf_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>literal_buf_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>total_in_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>next_out_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>available_out_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>total_out_</name></decl>;</decl_stmt>
  <comment type="block">/* Temporary buffer for padding flush bits or metadata block header / body. */</comment>
  <union>union <block>{
    <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>u64</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>u8</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  }</block> <decl><name>tiny_buf_</name></decl>;</union>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>remaining_metadata_bytes_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BrotliEncoderStreamState</name></type> <name>stream_state_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>BROTLI_BOOL</name></type> <name>is_last_block_emitted_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BROTLI_BOOL</name></type> <name>is_initialized_</name></decl>;</decl_stmt>
}</block></struct></type> <name>BrotliEncoderStateStruct</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>BrotliEncoderStateStruct</name></name></type> <name>BrotliEncoderStateInternal</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BrotliEncoderState</name></cpp:macro> <cpp:value>BrotliEncoderStateInternal</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// BROTLI_ENC_STATE_H_</comment>
</unit>
