<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/hash_composite_inc.h"><comment type="block">/* NOLINT(build/header_guard) */</comment>
<comment type="block">/* Copyright 2018 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* template parameters: FN, HASHER_A, HASHER_B */</comment>

<comment type="block">/* Composite hasher: This hasher allows to combine two other hashers, HASHER_A
   and HASHER_B. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HashComposite</name></cpp:macro> <cpp:value>HASHER()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_A</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPAND_CAT(X, HASHER_A)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_B</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPAND_CAT(X, HASHER_B)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>HashTypeLength</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>a</name> <init>=  <expr><call><call><name>FN_A</name><argument_list>(<argument><expr><name>HashTypeLength</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>b</name> <init>=  <expr><call><call><name>FN_B</name><argument_list>(<argument><expr><name>HashTypeLength</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>StoreLookahead</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>a</name> <init>=  <expr><call><call><name>FN_A</name><argument_list>(<argument><expr><name>StoreLookahead</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>b</name> <init>=  <expr><call><call><name>FN_B</name><argument_list>(<argument><expr><name>StoreLookahead</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>HashComposite</name> <block>{
  <decl_stmt><decl><type><name>HASHER_A</name></type> <name>ha</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HASHER_B</name></type> <name>hb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HasherCommon</name></type> <name>ha_common</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HasherCommon</name></type> <name>hb_common</name></decl>;</decl_stmt>

  <comment type="block">/* Shortcuts. */</comment>
  <decl_stmt><decl><type><name>HasherCommon</name><modifier>*</modifier></type> <name>common</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>BROTLI_BOOL</name></type> <name>fresh</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl>;</decl_stmt>
}</block></struct></type> <name>HashComposite</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>Initialize</name>)<parameter_list>(<parameter><decl><type><name>HasherCommon</name><modifier>*</modifier></type> <name>common</name></decl></parameter>,
    <parameter><decl><type><name>HashComposite</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>common</name></name> <operator>=</operator> <name>common</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ha_common</name></name> <operator>=</operator> <operator>*</operator><name><name>self</name><operator>-&gt;</operator><name>common</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>hb_common</name></name> <operator>=</operator> <operator>*</operator><name><name>self</name><operator>-&gt;</operator><name>common</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>fresh</name></name> <operator>=</operator> <name>BROTLI_TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>
  <comment type="block">/* TODO(lode): Initialize of the hashers is deferred to Prepare (and params
     remembered here) because we don't get the one_shot and input_size params
     here that are needed to know the memory size of them. Instead provide
     those params to all hashers FN(Initialize) */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>Prepare</name>)<parameter_list>(
    <parameter><decl><type><name>HashComposite</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>one_shot</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>input_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>fresh</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>fresh</name></name> <operator>=</operator> <name>BROTLI_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ha_common</name><operator>.</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>common</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ha_common</name><operator>.</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>common</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ha_common</name><operator>.</operator><name>extra</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ha_common</name><operator>.</operator><name>extra</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>hb_common</name><operator>.</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>common</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>hb_common</name><operator>.</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>common</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>hb_common</name><operator>.</operator><name>extra</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>hb_common</name><operator>.</operator><name>extra</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><call><name>FN_A</name><argument_list>(<argument><expr><name>Initialize</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ha_common</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ha</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><call><name>FN_B</name><argument_list>(<argument><expr><name>Initialize</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>hb_common</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>hb</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><call><name>FN_A</name><argument_list>(<argument><expr><name>Prepare</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ha</name></name></expr></argument>, <argument><expr><name>one_shot</name></expr></argument>, <argument><expr><name>input_size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><call><name>FN_B</name><argument_list>(<argument><expr><name>Prepare</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>hb</name></name></expr></argument>, <argument><expr><name>one_shot</name></expr></argument>, <argument><expr><name>input_size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>HashMemAllocInBytes</name>)<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>one_shot</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>input_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>alloc_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name><name>alloc_size_a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name><name>alloc_size_b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>FN_A</name></type>(<name>HashMemAllocInBytes</name>)<parameter_list>(<parameter><decl><type><name>params</name></type></decl></parameter>, <parameter><decl><type><name>one_shot</name></type></decl></parameter>, <parameter><decl><type><name>input_size</name></type></decl></parameter>, <parameter><decl><type><name>alloc_size_a</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>FN_B</name></type>(<name>HashMemAllocInBytes</name>)<parameter_list>(<parameter><decl><type><name>params</name></type></decl></parameter>, <parameter><decl><type><name>one_shot</name></type></decl></parameter>, <parameter><decl><type><name>input_size</name></type></decl></parameter>, <parameter><decl><type><name>alloc_size_b</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <comment type="block">/* Should never happen. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>alloc_size_a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>alloc_size_a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>alloc_size_b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>alloc_size_b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>alloc_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>alloc_size_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alloc_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>alloc_size_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alloc_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>alloc_size_b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alloc_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>alloc_size_b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>Store</name>)<parameter_list>(<parameter><decl><type><name>HashComposite</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><call><name>FN_A</name><argument_list>(<argument><expr><name>Store</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ha</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><call><name>FN_B</name><argument_list>(<argument><expr><name>Store</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>hb</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>StoreRange</name>)<parameter_list>(
    <parameter><decl><type><name>HashComposite</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ix_start</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ix_end</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><call><name>FN_A</name><argument_list>(<argument><expr><name>StoreRange</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ha</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>ix_start</name></expr></argument>, <argument><expr><name>ix_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><call><name>FN_B</name><argument_list>(<argument><expr><name>StoreRange</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>hb</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>ix_start</name></expr></argument>, <argument><expr><name>ix_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>StitchToPreviousBlock</name>)<parameter_list>(
    <parameter><decl><type><name>HashComposite</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>num_bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>ring_buffer_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><call><name>FN_A</name><argument_list>(<argument><expr><name>StitchToPreviousBlock</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ha</name></name></expr></argument>, <argument><expr><name>num_bytes</name></expr></argument>, <argument><expr><name>position</name></expr></argument>,
      <argument><expr><name>ringbuffer</name></expr></argument>, <argument><expr><name>ring_buffer_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><call><name>FN_B</name><argument_list>(<argument><expr><name>StitchToPreviousBlock</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>hb</name></name></expr></argument>, <argument><expr><name>num_bytes</name></expr></argument>, <argument><expr><name>position</name></expr></argument>,
      <argument><expr><name>ringbuffer</name></expr></argument>, <argument><expr><name>ring_buffer_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>PrepareDistanceCache</name>)<parameter_list>(
    <parameter><decl><type><name>HashComposite</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>distance_cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><call><name>FN_A</name><argument_list>(<argument><expr><name>PrepareDistanceCache</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ha</name></name></expr></argument>, <argument><expr><name>distance_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><call><name>FN_B</name><argument_list>(<argument><expr><name>PrepareDistanceCache</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>hb</name></name></expr></argument>, <argument><expr><name>distance_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>FindLongestMatch</name>)<parameter_list>(
    <parameter><decl><type><name>HashComposite</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderDictionary</name><modifier>*</modifier></type> <name>dictionary</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ring_buffer_mask</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>distance_cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>cur_ix</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_backward</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dictionary_distance</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_distance</name></decl></parameter>,
    <parameter><decl><type><name>HasherSearchResult</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><call><name>FN_A</name><argument_list>(<argument><expr><name>FindLongestMatch</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ha</name></name></expr></argument>, <argument><expr><name>dictionary</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ring_buffer_mask</name></expr></argument>,
      <argument><expr><name>distance_cache</name></expr></argument>, <argument><expr><name>cur_ix</name></expr></argument>, <argument><expr><name>max_length</name></expr></argument>, <argument><expr><name>max_backward</name></expr></argument>, <argument><expr><name>dictionary_distance</name></expr></argument>,
      <argument><expr><name>max_distance</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><call><name>FN_B</name><argument_list>(<argument><expr><name>FindLongestMatch</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>hb</name></name></expr></argument>, <argument><expr><name>dictionary</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ring_buffer_mask</name></expr></argument>,
      <argument><expr><name>distance_cache</name></expr></argument>, <argument><expr><name>cur_ix</name></expr></argument>, <argument><expr><name>max_length</name></expr></argument>, <argument><expr><name>max_backward</name></expr></argument>, <argument><expr><name>dictionary_distance</name></expr></argument>,
      <argument><expr><name>max_distance</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HashComposite</name></cpp:undef>
</unit>
