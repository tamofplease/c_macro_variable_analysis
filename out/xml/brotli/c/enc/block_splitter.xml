<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/block_splitter.h"><comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Block split point selection utilities. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_BLOCK_SPLITTER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_BLOCK_SPLITTER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quality.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>BlockSplit</name> <block>{
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_types</name></decl>;</decl_stmt>  <comment type="block">/* Amount of distinct types */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_blocks</name></decl>;</decl_stmt>  <comment type="block">/* Amount of values in types and length */</comment>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>types</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>lengths</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>types_alloc_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>lengths_alloc_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>BlockSplit</name>;</typedef>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliInitBlockSplit</name><parameter_list>(<parameter><decl><type><name>BlockSplit</name><modifier>*</modifier></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliDestroyBlockSplit</name><parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>,
                                             <parameter><decl><type><name>BlockSplit</name><modifier>*</modifier></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliSplitBlock</name><parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>Command</name><modifier>*</modifier></type> <name>cmds</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_commands</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>offset</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>mask</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
                                      <parameter><decl><type><name>BlockSplit</name><modifier>*</modifier></type> <name>literal_split</name></decl></parameter>,
                                      <parameter><decl><type><name>BlockSplit</name><modifier>*</modifier></type> <name>insert_and_copy_split</name></decl></parameter>,
                                      <parameter><decl><type><name>BlockSplit</name><modifier>*</modifier></type> <name>dist_split</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_BLOCK_SPLITTER_H_ */</comment>
</unit>
