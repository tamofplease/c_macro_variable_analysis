<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/entropy_encode.h"><comment type="block">/* Copyright 2010 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Entropy encoding (Huffman) utilities. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_ENTROPY_ENCODE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_ENTROPY_ENCODE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* A node of a Huffman tree. */</comment>
<typedef>typedef <type><struct>struct <name>HuffmanTree</name> <block>{
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>total_count_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>index_left_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>index_right_or_value_</name></decl>;</decl_stmt>
}</block></struct></type> <name>HuffmanTree</name>;</typedef>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>InitHuffmanTree</name><parameter_list>(<parameter><decl><type><name>HuffmanTree</name><modifier>*</modifier></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>,
    <parameter><decl><type><name>int16_t</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>total_count_</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>index_left_</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>index_right_or_value_</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Returns 1 is assignment of depths succeeded, otherwise 0. */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>BROTLI_BOOL</name></type> <name>BrotliSetDepth</name><parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>HuffmanTree</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_depth</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* This function will create a Huffman tree.

   The (data,length) contains the population counts.
   The tree_limit is the maximum bit depth of the Huffman codes.

   The depth contains the tree, i.e., how many bits are used for
   the symbol.

   The actual Huffman tree is constructed in the tree[] array, which has to
   be at least 2 * length + 1 long.

   See http://en.wikipedia.org/wiki/Huffman_coding */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliCreateHuffmanTree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
                                             <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name></decl></parameter>,
                                             <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>tree_limit</name></decl></parameter>,
                                             <parameter><decl><type><name>HuffmanTree</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>,
                                             <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Change the population counts in a way that the consequent
   Huffman tree compression, especially its RLE-part will be more
   likely to compress this data more efficiently.

   length contains the size of the histogram.
   counts contains the population counts.
   good_for_rle is a buffer of at least length size */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliOptimizeHuffmanCountsForRle</name><parameter_list>(
    <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>counts</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>good_for_rle</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Write a Huffman tree from bit depths into the bit-stream representation
   of a Huffman tree. The generated Huffman tree is to be compressed once
   more using a Huffman tree */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliWriteHuffmanTree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>depth</name></decl></parameter>,
                                            <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>,
                                            <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>tree_size</name></decl></parameter>,
                                            <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>,
                                            <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>extra_bits_data</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Get the actual bit values for a tree of bit depths. */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliConvertBitDepthsToSymbols</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>depth</name></decl></parameter>,
                                                     <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                                                     <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>bits</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <specifier>extern</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>kBrotliShellGaps</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<comment type="block">/* Input size optimized Shell sort. */</comment>
<typedef>typedef <function_decl><type><name>BROTLI_BOOL</name></type> (<modifier>*</modifier><name>HuffmanTreeComparator</name>)<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>HuffmanTree</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HuffmanTree</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>SortHuffmanTreeItems</name><parameter_list>(<parameter><decl><type><name>HuffmanTree</name><modifier>*</modifier></type> <name>items</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>HuffmanTreeComparator</name></type> <name>comparator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Insertion sort. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>HuffmanTree</name></type> <name>tmp</name> <init>= <expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>k</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name>comparator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>items</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>j</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name><name>items</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* Shell sort. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">57</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>g</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>gap</name> <init>= <expr><name><name>kBrotliShellGaps</name><index>[<expr><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>gap</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HuffmanTree</name></type> <name>tmp</name> <init>= <expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <name>gap</name> <operator>&amp;&amp;</operator> <call><name>comparator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>items</name><index>[<expr><name>j</name> <operator>-</operator> <name>gap</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name> <operator>-=</operator> <name>gap</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name><name>items</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>items</name><index>[<expr><name>j</name> <operator>-</operator> <name>gap</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>items</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_ENTROPY_ENCODE_H_ */</comment>
</unit>
