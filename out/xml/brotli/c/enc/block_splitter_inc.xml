<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/block_splitter_inc.h"><comment type="block">/* NOLINT(build/header_guard) */</comment>
<comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* template parameters: FN, DataType */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HistogramType</name></cpp:macro> <cpp:value>FN(Histogram)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>InitialEntropyCodes</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DataType</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                                    <parameter><decl><type><name>size_t</name></type> <name>stride</name></decl></parameter>,
                                    <parameter><decl><type><name>size_t</name></type> <name>num_histograms</name></decl></parameter>,
                                    <parameter><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>histograms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>seed</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>block_length</name> <init>= <expr><name>length</name> <operator>/</operator> <name>num_histograms</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <function_decl><type><name>FN</name></type>(<name>ClearHistograms</name>)<parameter_list>(<parameter><decl><type><name>histograms</name></type></decl></parameter>, <parameter><decl><type><name>num_histograms</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_histograms</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><name>length</name> <operator>*</operator> <name>i</name> <operator>/</operator> <name>num_histograms</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>MyRand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>block_length</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>stride</name> <operator>&gt;=</operator> <name>length</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>length</name> <operator>-</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramAddVector</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>histograms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>RandomSample</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>seed</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>DataType</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
                             <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                             <parameter><decl><type><name>size_t</name></type> <name>stride</name></decl></parameter>,
                             <parameter><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>sample</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>stride</name> <operator>&gt;=</operator> <name>length</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>stride</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>MyRand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><name>length</name> <operator>-</operator> <name>stride</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramAddVector</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>RefineEntropyCodes</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DataType</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                                   <parameter><decl><type><name>size_t</name></type> <name>stride</name></decl></parameter>,
                                   <parameter><decl><type><name>size_t</name></type> <name>num_histograms</name></decl></parameter>,
                                   <parameter><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>histograms</name></decl></parameter>,
                                   <parameter><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>tmp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>iters</name> <init>=
      <expr><name>kIterMulForRefining</name> <operator>*</operator> <name>length</name> <operator>/</operator> <name>stride</name> <operator>+</operator> <name>kMinItersForRefining</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>seed</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>iter</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>iters</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>iters</name> <operator>+</operator> <name>num_histograms</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>num_histograms</name><operator>)</operator> <operator>*</operator> <name>num_histograms</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>iters</name></expr>;</condition> <incr><expr><operator>++</operator><name>iter</name></expr></incr>)</control> <block>{<block_content>
    <function_decl><type><name>FN</name></type>(<name>HistogramClear</name>)<parameter_list>(<parameter><decl><type><name>tmp</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>RandomSample</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramAddHistogram</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>histograms</name><index>[<expr><name>iter</name> <operator>%</operator> <name>num_histograms</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Assigns a block id from the range [0, num_histograms) to each data element
   in data[0..length) and fills in block_id[0..length) with the assigned values.
   Returns the number of blocks, i.e. one plus the number of block switches. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name> <name>FN</name></type>(<name>FindBlocks</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DataType</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name>block_switch_bitcost</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_histograms</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>HistogramType</name><modifier>*</modifier></type> <name>histograms</name></decl></parameter>,
                             <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>insert_cost</name></decl></parameter>,
                             <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>cost</name></decl></parameter>,
                             <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>switch_signal</name></decl></parameter>,
                             <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>block_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>alphabet_size</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramDataSize</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bitmap_len</name> <init>= <expr><operator>(</operator><name>num_histograms</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_blocks</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>byte_ix</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name>num_histograms</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Trivial case: single historgram -&gt; single block type. */</comment>
  <if_stmt><if>if <condition>(<expr><name>num_histograms</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>block_id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Fill bitcost for each symbol of all histograms.
   * Non-existing symbol cost: 2 + log2(total_count).
   * Regular symbol cost: -log2(symbol_count / total_count). */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>insert_cost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
         <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>insert_cost</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>alphabet_size</name> <operator>*</operator> <name>num_histograms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_histograms</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>insert_cost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FastLog2</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>histograms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_count_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>alphabet_size</name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control> <block>{<block_content>
    <comment type="block">/* Reverse order to use the 0-th row as a temporary storage. */</comment>
    <expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_histograms</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>insert_cost</name><index>[<expr><name>i</name> <operator>*</operator> <name>num_histograms</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator>
          <name><name>insert_cost</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <call><name>BitCost</name><argument_list>(<argument><expr><name><name>histograms</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>data_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <comment type="block">/* After each iteration of this loop, cost[k] will contain the difference
     between the minimum cost of arriving at the current byte position using
     entropy code k, and the minimum cost of arriving at the current byte
     position. This difference is capped at the block switch cost, and if it
     reaches block switch cost, it means that when we trace back from the last
     position, we need to switch here. */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_histograms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>switch_signal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>switch_signal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>length</name> <operator>*</operator> <name>bitmap_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>byte_ix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>byte_ix</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>byte_ix</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ix</name> <init>= <expr><name>byte_ix</name> <operator>*</operator> <name>bitmap_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>symbol</name> <init>= <expr><name><name>data</name><index>[<expr><name>byte_ix</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>insert_cost_ix</name> <init>= <expr><name>symbol</name> <operator>*</operator> <name>num_histograms</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>min_cost</name> <init>= <expr><literal type="number">1e99</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>block_switch_cost</name> <init>= <expr><name>block_switch_bitcost</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num_histograms</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
      <comment type="block">/* We are coding the symbol with entropy code k. */</comment>
      <expr_stmt><expr><name><name>cost</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name><name>insert_cost</name><index>[<expr><name>insert_cost_ix</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>cost</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name>min_cost</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>min_cost</name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>block_id</name><index>[<expr><name>byte_ix</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>k</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* More blocks for the beginning. */</comment>
    <if_stmt><if>if <condition>(<expr><name>byte_ix</name> <operator>&lt;</operator> <literal type="number">2000</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>block_switch_cost</name> <operator>*=</operator> <literal type="number">0.77</literal> <operator>+</operator> <literal type="number">0.07</literal> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>byte_ix</name> <operator>/</operator> <literal type="number">2000</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num_histograms</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>cost</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-=</operator> <name>min_cost</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>cost</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;=</operator> <name>block_switch_cost</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>cost</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>block_switch_cost</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <name>bitmap_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>switch_signal</name><index>[<expr><name>ix</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><name>byte_ix</name> <operator>=</operator> <name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <block>{<block_content>  <comment type="block">/* Trace back from the last position and switch at the marked places. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ix</name> <init>= <expr><name>byte_ix</name> <operator>*</operator> <name>bitmap_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>cur_id</name> <init>= <expr><name><name>block_id</name><index>[<expr><name>byte_ix</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>byte_ix</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>cur_id</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>cur_id</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <name>bitmap_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator><name>byte_ix</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ix</name> <operator>-=</operator> <name>bitmap_len</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>switch_signal</name><index>[<expr><name>ix</name> <operator>+</operator> <operator>(</operator><name>cur_id</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cur_id</name> <operator>!=</operator> <name><name>block_id</name><index>[<expr><name>byte_ix</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>cur_id</name> <operator>=</operator> <name><name>block_id</name><index>[<expr><name>byte_ix</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>++</operator><name>num_blocks</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>block_id</name><index>[<expr><name>byte_ix</name></expr>]</index></name> <operator>=</operator> <name>cur_id</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block>
  <return>return <expr><name>num_blocks</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name> <name>FN</name></type>(<name>RemapBlockIds</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>block_ids</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name></decl></parameter>,
                                <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>new_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_histograms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name>kInvalidId</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>next_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_histograms</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>new_id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>kInvalidId</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name><name>block_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>num_histograms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>new_id</name><index>[<expr><name><name>block_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name>kInvalidId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>new_id</name><index>[<expr><name><name>block_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>next_id</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>block_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>new_id</name><index>[<expr><name><name>block_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name><name>block_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>num_histograms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name>next_id</name> <operator>&lt;=</operator> <name>num_histograms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>next_id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>BuildBlockHistograms</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DataType</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>block_ids</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_histograms</name></decl></parameter>,
                                     <parameter><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>histograms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <function_decl><type><name>FN</name></type>(<name>ClearHistograms</name>)<parameter_list>(<parameter><decl><type><name>histograms</name></type></decl></parameter>, <parameter><decl><type><name>num_histograms</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramAdd</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>histograms</name><index>[<expr><name><name>block_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Given the initial partitioning build partitioning with limited number
 * of histograms (and block types). */</comment>
<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>ClusterBlocks</name>)<parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>DataType</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_blocks</name></decl></parameter>,
                              <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>block_ids</name></decl></parameter>,
                              <parameter><decl><type><name>BlockSplit</name><modifier>*</modifier></type> <name>split</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>histogram_symbols</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>num_blocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>u32</name> <init>=
      <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>num_blocks</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>HISTOGRAMS_PER_BATCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>expected_num_clusters</name> <init>= <expr><name>CLUSTERS_PER_BATCH</name> <operator>*</operator>
      <operator>(</operator><name>num_blocks</name> <operator>+</operator> <name>HISTOGRAMS_PER_BATCH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>HISTOGRAMS_PER_BATCH</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>all_histograms_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>all_histograms_capacity</name> <init>= <expr><name>expected_num_clusters</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>all_histograms</name> <init>=
      <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HistogramType</name></expr></argument>, <argument><expr><name>all_histograms_capacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>cluster_size_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>cluster_size_capacity</name> <init>= <expr><name>expected_num_clusters</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>cluster_size</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>cluster_size_capacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_clusters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>histograms</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HistogramType</name></expr></argument>,
      <argument><expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>num_blocks</name></expr></argument>, <argument><expr><name>HISTOGRAMS_PER_BATCH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>max_num_pairs</name> <init>=
      <expr><name>HISTOGRAMS_PER_BATCH</name> <operator>*</operator> <name>HISTOGRAMS_PER_BATCH</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pairs_capacity</name> <init>= <expr><name>max_num_pairs</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HistogramPair</name><modifier>*</modifier></type> <name>pairs</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HistogramPair</name></expr></argument>, <argument><expr><name>pairs_capacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>clusters</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_final_clusters</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>kInvalidIndex</name> <init>= <expr><name>BROTLI_UINT32_MAX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>new_index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name> <specifier>const</specifier></type> <name>sizes</name> <init>= <expr><name>u32</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>HISTOGRAMS_PER_BATCH</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name> <specifier>const</specifier></type> <name>new_clusters</name> <init>= <expr><name>u32</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>HISTOGRAMS_PER_BATCH</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name> <specifier>const</specifier></type> <name>symbols</name> <init>= <expr><name>u32</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>HISTOGRAMS_PER_BATCH</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name> <specifier>const</specifier></type> <name>remap</name> <init>= <expr><name>u32</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>HISTOGRAMS_PER_BATCH</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name> <specifier>const</specifier></type> <name>block_lengths</name> <init>=
      <expr><name>u32</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>HISTOGRAMS_PER_BATCH</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* TODO(eustas): move to arena? */</comment>
  <decl_stmt><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HistogramType</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>histogram_symbols</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>all_histograms</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>cluster_size</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>histograms</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>pairs</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>u32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>num_blocks</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>HISTOGRAMS_PER_BATCH</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Calculate block lengths (convert repeating values -&gt; series length). */</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>block_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name>block_idx</name> <operator>&lt;</operator> <name>num_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name><name>block_lengths</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>length</name> <operator>||</operator> <name><name>block_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>block_ids</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>block_idx</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name>block_idx</name> <operator>==</operator> <name>num_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <comment type="block">/* Pre-cluster blocks (cluster batches). */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_blocks</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>HISTOGRAMS_PER_BATCH</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_to_combine</name> <init>=
        <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>num_blocks</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>HISTOGRAMS_PER_BATCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>num_new_clusters</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_to_combine</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>block_length</name> <init>= <expr><name><name>block_lengths</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramClear</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>histograms</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>block_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramAdd</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>histograms</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>histograms</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>bit_cost_</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliPopulationCost</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>histograms</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_clusters</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>j</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>symbols</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>j</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sizes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>num_new_clusters</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliHistogramCombine</name></expr></argument>)</argument_list></call><argument_list>(
        <argument><expr><name>histograms</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>sizes</name></expr></argument>, <argument><expr><name>symbols</name></expr></argument>, <argument><expr><name>new_clusters</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>num_to_combine</name></expr></argument>,
        <argument><expr><name>num_to_combine</name></expr></argument>, <argument><expr><name>HISTOGRAMS_PER_BATCH</name></expr></argument>, <argument><expr><name>max_num_pairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BROTLI_ENSURE_CAPACITY</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HistogramType</name></expr></argument>, <argument><expr><name>all_histograms</name></expr></argument>,
        <argument><expr><name>all_histograms_capacity</name></expr></argument>, <argument><expr><name>all_histograms_size</name> <operator>+</operator> <name>num_new_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BROTLI_ENSURE_CAPACITY</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>cluster_size</name></expr></argument>,
        <argument><expr><name>cluster_size_capacity</name></expr></argument>, <argument><expr><name>cluster_size_size</name> <operator>+</operator> <name>num_new_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_new_clusters</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>all_histograms</name><index>[<expr><name>all_histograms_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>histograms</name><index>[<expr><name><name>new_clusters</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cluster_size</name><index>[<expr><name>cluster_size_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>sizes</name><index>[<expr><name><name>new_clusters</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>remap</name><index>[<expr><name><name>new_clusters</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>j</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_to_combine</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>histogram_symbols</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>num_clusters</name> <operator>+</operator> <name><name>remap</name><index>[<expr><name><name>symbols</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>num_clusters</name> <operator>+=</operator> <name>num_new_clusters</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name>num_clusters</name> <operator>==</operator> <name>cluster_size_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name>num_clusters</name> <operator>==</operator> <name>all_histograms_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>histograms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Final clustering. */</comment>
  <expr_stmt><expr><name>max_num_pairs</name> <operator>=</operator>
      <call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <name>num_clusters</name></expr></argument>, <argument><expr><operator>(</operator><name>num_clusters</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>num_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pairs_capacity</name> <operator>&lt;</operator> <name>max_num_pairs</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pairs</name> <operator>=</operator> <call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HistogramPair</name></expr></argument>, <argument><expr><name>max_num_pairs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>pairs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>clusters</name> <operator>=</operator> <call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>num_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>clusters</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_clusters</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>clusters</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>num_final_clusters</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliHistogramCombine</name></expr></argument>)</argument_list></call><argument_list>(
      <argument><expr><name>all_histograms</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>cluster_size</name></expr></argument>, <argument><expr><name>histogram_symbols</name></expr></argument>, <argument><expr><name>clusters</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>,
      <argument><expr><name>num_clusters</name></expr></argument>, <argument><expr><name>num_blocks</name></expr></argument>, <argument><expr><name>BROTLI_MAX_NUMBER_OF_BLOCK_TYPES</name></expr></argument>,
      <argument><expr><name>max_num_pairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Assign blocks to final histograms. */</comment>
  <expr_stmt><expr><name>new_index</name> <operator>=</operator> <call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>num_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>new_index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_clusters</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>new_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>kInvalidIndex</name></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>next_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_blocks</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>best_out</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>best_bits</name></decl>;</decl_stmt>
      <function_decl><type><name>FN</name></type>(<name>HistogramClear</name>)<parameter_list>(<parameter><decl><type><name>tmp</name></type></decl></parameter>)</parameter_list>;</function_decl>
      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>block_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <function_decl><type><name>FN</name></type>(<name>HistogramAdd</name>)<parameter_list>(<parameter><decl><type><name>tmp</name></type></decl></parameter>, <parameter><decl><type><name><name>data</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>
      </block_content>}</block></for>
      <comment type="block">/* Among equally good histograms prefer last used. */</comment>
      <comment type="block">/* TODO(eustas): should we give a block-switch discount here? */</comment>
      <expr_stmt><expr><name>best_out</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>histogram_symbols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>histogram_symbols</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>best_bits</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliHistogramBitCostDistance</name></expr></argument>)</argument_list></call><argument_list>(
          <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>all_histograms</name><index>[<expr><name>best_out</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_final_clusters</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>cur_bits</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliHistogramBitCostDistance</name></expr></argument>)</argument_list></call><argument_list>(
            <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>all_histograms</name><index>[<expr><name><name>clusters</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cur_bits</name> <operator>&lt;</operator> <name>best_bits</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>best_bits</name> <operator>=</operator> <name>cur_bits</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>best_out</name> <operator>=</operator> <name><name>clusters</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>histogram_symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>best_out</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>new_index</name><index>[<expr><name>best_out</name></expr>]</index></name> <operator>==</operator> <name>kInvalidIndex</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>new_index</name><index>[<expr><name>best_out</name></expr>]</index></name> <operator>=</operator> <name>next_index</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>all_histograms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_ENSURE_CAPACITY</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>split</name><operator>-&gt;</operator><name>types</name></name></expr></argument>, <argument><expr><name><name>split</name><operator>-&gt;</operator><name>types_alloc_size</name></name></expr></argument>, <argument><expr><name>num_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_ENSURE_CAPACITY</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>split</name><operator>-&gt;</operator><name>lengths</name></name></expr></argument>, <argument><expr><name><name>split</name><operator>-&gt;</operator><name>lengths_alloc_size</name></name></expr></argument>, <argument><expr><name>num_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Rewrite final assignment to block-split. There might be less blocks
   * than |num_blocks| due to clustering. */</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>block_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>max_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_blocks</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>cur_length</name> <operator>+=</operator> <name><name>block_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>num_blocks</name> <operator>||</operator>
          <name><name>histogram_symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>histogram_symbols</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>new_index</name><index>[<expr><name><name>histogram_symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>block_idx</name></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>lengths</name><index>[<expr><name>block_idx</name></expr>]</index></name> <operator>=</operator> <name>cur_length</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>max_type</name> <operator>=</operator> <call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>max_type</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>block_idx</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <name>block_idx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>num_types</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>max_type</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>new_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>u32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>histogram_symbols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Create BlockSplit (partitioning) given the limits, estimates and "effort"
 * parameters.
 *
 * NB: max_histograms is often less than number of histograms allowed by format;
 *     this is done intentionally, to save some "space" for context-aware
 *     clustering (here entropy is estimated for context-free symbols). */</comment>
<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>SplitByteVector</name>)<parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>DataType</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>symbols_per_histogram</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_histograms</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sampling_stride_length</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name>block_switch_cost</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
                                <parameter><decl><type><name>BlockSplit</name><modifier>*</modifier></type> <name>split</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>data_size</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramDataSize</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>histograms</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>tmp</name></decl>;</decl_stmt>
  <comment type="block">/* Calculate number of histograms; initial estimate is one histogram per
   * specified amount of symbols; however, this value is capped. */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_histograms</name> <init>= <expr><name>length</name> <operator>/</operator> <name>symbols_per_histogram</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num_histograms</name> <operator>&gt;</operator> <name>max_histograms</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>num_histograms</name> <operator>=</operator> <name>max_histograms</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Corner case: no input. */</comment>
  <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>num_types</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <name>kMinLengthForBlockSplitting</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>BROTLI_ENSURE_CAPACITY</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>,
        <argument><expr><name><name>split</name><operator>-&gt;</operator><name>types</name></name></expr></argument>, <argument><expr><name><name>split</name><operator>-&gt;</operator><name>types_alloc_size</name></name></expr></argument>, <argument><expr><name><name>split</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BROTLI_ENSURE_CAPACITY</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>,
        <argument><expr><name><name>split</name><operator>-&gt;</operator><name>lengths</name></name></expr></argument>, <argument><expr><name><name>split</name><operator>-&gt;</operator><name>lengths_alloc_size</name></name></expr></argument>, <argument><expr><name><name>split</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>num_types</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>types</name><index>[<expr><name><name>split</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>lengths</name><index>[<expr><name><name>split</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>num_blocks</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>histograms</name> <operator>=</operator> <call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HistogramType</name></expr></argument>, <argument><expr><name>num_histograms</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>histograms</name> <operator>+</operator> <name>num_histograms</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>histograms</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <comment type="block">/* Find good entropy codes. */</comment>
  <function_decl><type><name>FN</name></type>(<name>InitialEntropyCodes</name>)<parameter_list>(<parameter><decl><type><name>data</name></type></decl></parameter>, <parameter><decl><type><name>length</name></type></decl></parameter>,
                          <parameter><decl><type><name>sampling_stride_length</name></type></decl></parameter>,
                          <parameter><decl><type><name>num_histograms</name></type></decl></parameter>, <parameter><decl><type><name>histograms</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>FN</name></type>(<name>RefineEntropyCodes</name>)<parameter_list>(<parameter><decl><type><name>data</name></type></decl></parameter>, <parameter><decl><type><name>length</name></type></decl></parameter>,
                         <parameter><decl><type><name>sampling_stride_length</name></type></decl></parameter>,
                         <parameter><decl><type><name>num_histograms</name></type></decl></parameter>, <parameter><decl><type><name>histograms</name></type></decl></parameter>, <parameter><decl><type><name>tmp</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <block>{<block_content>
    <comment type="block">/* Find a good path through literals with the good entropy codes. */</comment>
    <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>block_ids</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>num_blocks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bitmaplen</name> <init>= <expr><operator>(</operator><name>num_histograms</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>insert_cost</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>data_size</name> <operator>*</operator> <name>num_histograms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>cost</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>num_histograms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>switch_signal</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <name>bitmaplen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>new_id</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>num_histograms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>iters</name> <init>= <expr><ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <name>HQ_ZOPFLIFICATION_QUALITY</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>block_ids</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>insert_cost</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>cost</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>switch_signal</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>new_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iters</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>num_blocks</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>FindBlocks</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                                  <argument><expr><name>block_switch_cost</name></expr></argument>,
                                  <argument><expr><name>num_histograms</name></expr></argument>, <argument><expr><name>histograms</name></expr></argument>,
                                  <argument><expr><name>insert_cost</name></expr></argument>, <argument><expr><name>cost</name></expr></argument>, <argument><expr><name>switch_signal</name></expr></argument>,
                                  <argument><expr><name>block_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>num_histograms</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>RemapBlockIds</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>block_ids</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                                         <argument><expr><name>new_id</name></expr></argument>, <argument><expr><name>num_histograms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <function_decl><type><name>FN</name></type>(<name>BuildBlockHistograms</name>)<parameter_list>(<parameter><decl><type><name>data</name></type></decl></parameter>, <parameter><decl><type><name>length</name></type></decl></parameter>, <parameter><decl><type><name>block_ids</name></type></decl></parameter>,
                               <parameter><decl><type><name>num_histograms</name></type></decl></parameter>, <parameter><decl><type><name>histograms</name></type></decl></parameter>)</parameter_list>;</function_decl>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>insert_cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>switch_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>new_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>histograms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>FN</name></type>(<name>ClusterBlocks</name>)<parameter_list>(<parameter><decl><type><name>m</name></type></decl></parameter>, <parameter><decl><type><name>data</name></type></decl></parameter>, <parameter><decl><type><name>length</name></type></decl></parameter>, <parameter><decl><type><name>num_blocks</name></type></decl></parameter>, <parameter><decl><type><name>block_ids</name></type></decl></parameter>, <parameter><decl><type><name>split</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>block_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HistogramType</name></cpp:undef>
</unit>
