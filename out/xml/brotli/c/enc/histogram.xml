<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/histogram.h"><comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Models the histograms of literals, commands and distance codes. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_HISTOGRAM_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_HISTOGRAM_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>  <comment type="block">/* memset */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"block_splitter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The distance symbols effectively used by "Large Window Brotli" (32-bit). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_NUM_HISTOGRAM_DISTANCE_SYMBOLS</name></cpp:macro> <cpp:value>544</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X ## Literal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_SIZE</name></cpp:macro> <cpp:value>BROTLI_NUM_LITERAL_SYMBOLS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DataType</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"histogram_inc.h"</cpp:file></cpp:include>  <comment type="block">/* NOLINT(build/include) */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DataType</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DATA_SIZE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FN</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X ## Command</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DataType</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_SIZE</name></cpp:macro> <cpp:value>BROTLI_NUM_COMMAND_SYMBOLS</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"histogram_inc.h"</cpp:file></cpp:include>  <comment type="block">/* NOLINT(build/include) */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DATA_SIZE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FN</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X ## Distance</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_SIZE</name></cpp:macro> <cpp:value>BROTLI_NUM_HISTOGRAM_DISTANCE_SYMBOLS</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"histogram_inc.h"</cpp:file></cpp:include>  <comment type="block">/* NOLINT(build/include) */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DataType</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DATA_SIZE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FN</name></cpp:undef>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliBuildHistogramsWithContext</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>Command</name><modifier>*</modifier></type> <name>cmds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_commands</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>BlockSplit</name><modifier>*</modifier></type> <name>literal_split</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BlockSplit</name><modifier>*</modifier></type> <name>insert_and_copy_split</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>BlockSplit</name><modifier>*</modifier></type> <name>dist_split</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>prev_byte</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>prev_byte2</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>ContextType</name><modifier>*</modifier></type> <name>context_modes</name></decl></parameter>, <parameter><decl><type><name>HistogramLiteral</name><modifier>*</modifier></type> <name>literal_histograms</name></decl></parameter>,
    <parameter><decl><type><name>HistogramCommand</name><modifier>*</modifier></type> <name>insert_and_copy_histograms</name></decl></parameter>,
    <parameter><decl><type><name>HistogramDistance</name><modifier>*</modifier></type> <name>copy_dist_histograms</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_HISTOGRAM_H_ */</comment>
</unit>
