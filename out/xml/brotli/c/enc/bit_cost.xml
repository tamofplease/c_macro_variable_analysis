<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/bit_cost.h"><comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Functions to estimate the bit cost of Huffman trees. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_BIT_COST_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_BIT_COST_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fast_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"histogram.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>double</name></type> <name>ShannonEntropy</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>population</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>total</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>population_end</name> <init>= <expr><name>population</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>p</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>odd_number_of_elements_left</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name>population</name> <operator>&lt;</operator> <name>population_end</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>population</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>retval</name> <operator>-=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>p</name> <operator>*</operator> <call><name>FastLog2</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <label><name>odd_number_of_elements_left</name>:</label>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>population</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>retval</name> <operator>-=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>p</name> <operator>*</operator> <call><name>FastLog2</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>sum</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retval</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>sum</name> <operator>*</operator> <call><name>FastLog2</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>total</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
  <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>double</name></type> <name>BitsEntropy</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>population</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>retval</name> <init>= <expr><call><name>ShannonEntropy</name><argument_list>(<argument><expr><name>population</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&lt;</operator> <operator>(</operator><name>double</name><operator>)</operator><name>sum</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* At least one bit per literal is needed. */</comment>
    <expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>sum</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>double</name></type> <name>BrotliPopulationCostLiteral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HistogramLiteral</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>double</name></type> <name>BrotliPopulationCostCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HistogramCommand</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>double</name></type> <name>BrotliPopulationCostDistance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HistogramDistance</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_BIT_COST_H_ */</comment>
</unit>
