<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/compress_fragment_two_pass.h"><comment type="block">/* Copyright 2015 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Function for fast encoding of an input fragment, independently from the input
   history. This function uses two-pass processing: in the first pass we save
   the found backward matches and literal bytes into a buffer, and in the
   second pass we emit them into the bit stream using prefix codes built based
   on the actual command and literal byte histograms. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_COMPRESS_FRAGMENT_TWO_PASS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_COMPRESS_FRAGMENT_TWO_PASS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entropy_encode.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* TODO(eustas): turn to macro. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>kCompressFragmentTwoPassBlockSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>BrotliTwoPassArena</name> <block>{
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>lit_histo</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>lit_depth</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name><name>lit_bits</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>cmd_histo</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd_depth</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name><name>cmd_bits</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* BuildAndStoreCommandPrefixCode */</comment>
  <decl_stmt><decl><type><name>HuffmanTree</name></type> <name><name>tmp_tree</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>BROTLI_NUM_LITERAL_SYMBOLS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_depth</name><index>[<expr><name>BROTLI_NUM_COMMAND_SYMBOLS</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name><name>tmp_bits</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>BrotliTwoPassArena</name>;</typedef>

<comment type="block">/* Compresses "input" string to the "*storage" buffer as one or more complete
   meta-blocks, and updates the "*storage_ix" bit position.

   If "is_last" is 1, emits an additional empty last meta-block.

   REQUIRES: "input_size" is greater than zero, or "is_last" is 1.
   REQUIRES: "input_size" is less or equal to maximal metablock size (1 &lt;&lt; 24).
   REQUIRES: "command_buf" and "literal_buf" point to at least
              kCompressFragmentTwoPassBlockSize long arrays.
   REQUIRES: All elements in "table[0..table_size-1]" are initialized to zero.
   REQUIRES: "table_size" is a power of two
   OUTPUT: maximal copy distance &lt;= |input_size|
   OUTPUT: maximal copy distance &lt;= BROTLI_MAX_BACKWARD_LIMIT(18) */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliCompressFragmentTwoPass</name><parameter_list>(<parameter><decl><type><name>BrotliTwoPassArena</name><modifier>*</modifier></type> <name>s</name></decl></parameter>,
                                                   <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>input</name></decl></parameter>,
                                                   <parameter><decl><type><name>size_t</name></type> <name>input_size</name></decl></parameter>,
                                                   <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>is_last</name></decl></parameter>,
                                                   <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>command_buf</name></decl></parameter>,
                                                   <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>literal_buf</name></decl></parameter>,
                                                   <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>table</name></decl></parameter>,
                                                   <parameter><decl><type><name>size_t</name></type> <name>table_size</name></decl></parameter>,
                                                   <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>storage_ix</name></decl></parameter>,
                                                   <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_COMPRESS_FRAGMENT_TWO_PASS_H_ */</comment>
</unit>
