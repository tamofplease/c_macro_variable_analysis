<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/compound_dictionary.h"><comment type="block">/* Copyright 2017 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_PREPARED_DICTIONARY_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_PREPARED_DICTIONARY_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/shared_dictionary.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>

<comment type="block">/* "Fat" prepared dictionary, could be cooked outside of C implementation,
 * e.g. on Java side. LZ77 data is copied inside PreparedDictionary struct. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>kPreparedDictionaryMagic</name> <init>= <expr><literal type="number">0xDEBCEDE0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>kSharedDictionaryMagic</name> <init>= <expr><literal type="number">0xDEBCEDE1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>kManagedDictionaryMagic</name> <init>= <expr><literal type="number">0xDEBCEDE2</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* "Lean" prepared dictionary. LZ77 data is referenced. It is the responsibility
 * of caller of "prepare dictionary" to keep the LZ77 data while prepared
 * dictionary is in use. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>kLeanPreparedDictionaryMagic</name> <init>= <expr><literal type="number">0xDEBCEDE3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name>kPreparedDictionaryHashMul64Long</name> <init>=
    <expr><call><name>BROTLI_MAKE_UINT64_T</name><argument_list>(<argument><expr><literal type="number">0x1FE35A7Bu</literal></expr></argument>, <argument><expr><literal type="number">0xD3579BD3u</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>PreparedDictionary</name> <block>{
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>num_items</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>source_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash_bits</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>bucket_bits</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>slot_bits</name></decl>;</decl_stmt>

  <comment type="block">/* --- Dynamic size members --- */</comment>

  <comment type="block">/* uint32_t slot_offsets[1 &lt;&lt; slot_bits]; */</comment>
  <comment type="block">/* uint16_t heads[1 &lt;&lt; bucket_bits]; */</comment>
  <comment type="block">/* uint32_t items[variable]; */</comment>

  <comment type="block">/* [maybe] uint8_t* source_ref, depending on magic. */</comment>
  <comment type="block">/* [maybe] uint8_t source[source_size], depending on magic. */</comment>
}</block></struct></type> <name>PreparedDictionary</name>;</typedef>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>PreparedDictionary</name><modifier>*</modifier></type> <name>CreatePreparedDictionary</name><parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>source_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>DestroyPreparedDictionary</name><parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>,
    <parameter><decl><type><name>PreparedDictionary</name><modifier>*</modifier></type> <name>dictionary</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>CompoundDictionary</name> <block>{
  <comment type="block">/* LZ77 prefix, compound dictionary */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_chunks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>total_size</name></decl>;</decl_stmt>
  <comment type="block">/* Client instances. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>PreparedDictionary</name><modifier>*</modifier></type> <name><name>chunks</name><index>[<expr><name>SHARED_BROTLI_MAX_COMPOUND_DICTS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name><name>chunk_source</name><index>[<expr><name>SHARED_BROTLI_MAX_COMPOUND_DICTS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name><name>chunk_offsets</name><index>[<expr><name>SHARED_BROTLI_MAX_COMPOUND_DICTS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>num_prepared_instances_</name></decl>;</decl_stmt>
  <comment type="block">/* Owned instances. */</comment>
  <decl_stmt><decl><type><name>PreparedDictionary</name><modifier>*</modifier></type> <name><name>prepared_instances_</name><index>[<expr><name>SHARED_BROTLI_MAX_COMPOUND_DICTS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CompoundDictionary</name>;</typedef>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>BROTLI_BOOL</name></type> <name>AttachPreparedDictionary</name><parameter_list>(
    <parameter><decl><type><name>CompoundDictionary</name><modifier>*</modifier></type> <name>compound</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PreparedDictionary</name><modifier>*</modifier></type> <name>dictionary</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BROTLI_ENC_PREPARED_DICTIONARY */</comment>
</unit>
