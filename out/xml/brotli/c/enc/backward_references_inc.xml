<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/backward_references_inc.h"><comment type="block">/* NOLINT(build/header_guard) */</comment>
<comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* template parameters: EXPORT_FN, FN */</comment>

<function><type><specifier>static</specifier> <name>BROTLI_NOINLINE</name> <name>void</name> <name>EXPORT_FN</name></type>(<name>CreateBackwardReferences</name>)<parameter_list>(
    <parameter><decl><type><name>size_t</name></type> <name>num_bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>position</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ringbuffer_mask</name></decl></parameter>,
    <parameter><decl><type><name>ContextLut</name></type> <name>literal_context_lut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
    <parameter><decl><type><name>Hasher</name><modifier>*</modifier></type> <name>hasher</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>dist_cache</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>last_insert_len</name></decl></parameter>,
    <parameter><decl><type><name>Command</name><modifier>*</modifier></type> <name>commands</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>num_commands</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>num_literals</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>HASHER</name><argument_list>()</argument_list></call><operator>*</operator> <name>privat</name> <operator>=</operator> <operator>&amp;</operator><call><name><name>hasher</name><operator>-&gt;</operator><name>privat</name><operator>.</operator><name>FN</name></name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Set maximum distance, see section 9.1. of the spec. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_backward_limit</name> <init>= <expr><call><name>BROTLI_MAX_BACKWARD_LIMIT</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>lgwin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>position_offset</name> <init>= <expr><name><name>params</name><operator>-&gt;</operator><name>stream_offset</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>Command</name><modifier>*</modifier> <specifier>const</specifier></type> <name>orig_commands</name> <init>= <expr><name>commands</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>insert_length</name> <init>= <expr><operator>*</operator><name>last_insert_len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>pos_end</name> <init>= <expr><name>position</name> <operator>+</operator> <name>num_bytes</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>store_end</name> <init>= <expr><ternary><condition><expr><name>num_bytes</name> <operator>&gt;=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>StoreLookahead</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr> ?</condition><then>
      <expr><name>position</name> <operator>+</operator> <name>num_bytes</name> <operator>-</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>StoreLookahead</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>position</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <comment type="block">/* For speed up heuristics for random data. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>random_heuristics_window_size</name> <init>=
      <expr><call><name>LiteralSpreeLengthForSparseSearch</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>apply_random_heuristics</name> <init>= <expr><name>position</name> <operator>+</operator> <name>random_heuristics_window_size</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>gap</name> <init>= <expr><name><name>params</name><operator>-&gt;</operator><name>dictionary</name><operator>.</operator><name>compound</name><operator>.</operator><name>total_size</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Minimum score to accept a backward reference. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>score_t</name></type> <name>kMinScore</name> <init>= <expr><name>BROTLI_SCORE_BASE</name> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>

  <function_decl><type><name>FN</name></type>(<name>PrepareDistanceCache</name>)<parameter_list>(<parameter><decl><type><name>privat</name></type></decl></parameter>, <parameter><decl><type><name>dist_cache</name></type></decl></parameter>)</parameter_list>;</function_decl>

  <while>while <condition>(<expr><name>position</name> <operator>+</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>HashTypeLength</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>pos_end</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>max_length</name> <init>= <expr><name>pos_end</name> <operator>-</operator> <name>position</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>max_distance</name> <init>= <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>max_backward_limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>dictionary_start</name> <init>= <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>,
        <argument><expr><name>position</name> <operator>+</operator> <name>position_offset</name></expr></argument>, <argument><expr><name>max_backward_limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HasherSearchResult</name></type> <name>sr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dict_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>p1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>p2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>dictionary</name><operator>.</operator><name>contextual</name><operator>.</operator><name>context_based</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p1</name> <operator>=</operator> <ternary><condition><expr><name>position</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> ?</condition><then>
          <expr><name><name>ringbuffer</name><index>[<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>position</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>ringbuffer_mask</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>p2</name> <operator>=</operator> <ternary><condition><expr><name>position</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> ?</condition><then>
          <expr><name><name>ringbuffer</name><index>[<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>position</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <name>ringbuffer_mask</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>dict_id</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>dictionary</name><operator>.</operator><name>contextual</name><operator>.</operator><name>context_map</name><index>[
          <expr><call><name>BROTLI_CONTEXT</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>literal_context_lut</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>sr</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sr</name><operator>.</operator><name>len_code_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sr</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sr</name><operator>.</operator><name>score</name></name> <operator>=</operator> <name>kMinScore</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>FindLongestMatch</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>privat</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>dictionary</name><operator>.</operator><name>contextual</name><operator>.</operator><name>dict</name><index>[<expr><name>dict_id</name></expr>]</index></name></expr></argument>,
        <argument><expr><name>ringbuffer</name></expr></argument>, <argument><expr><name>ringbuffer_mask</name></expr></argument>, <argument><expr><name>dist_cache</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>max_length</name></expr></argument>,
        <argument><expr><name>max_distance</name></expr></argument>, <argument><expr><name>dictionary_start</name> <operator>+</operator> <name>gap</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>dist</name><operator>.</operator><name>max_distance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ENABLE_COMPOUND_DICTIONARY</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>LookupCompoundDictionaryMatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>dictionary</name><operator>.</operator><name>compound</name></name></expr></argument>, <argument><expr><name>ringbuffer</name></expr></argument>,
          <argument><expr><name>ringbuffer_mask</name></expr></argument>, <argument><expr><name>dist_cache</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>max_length</name></expr></argument>,
          <argument><expr><name>dictionary_start</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>dist</name><operator>.</operator><name>max_distance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sr</name><operator>.</operator><name>score</name></name> <operator>&gt;</operator> <name>kMinScore</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Found a match. Let's look for something even better ahead. */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>delayed_backward_references_in_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>--</operator><name>max_length</name></expr>;</expr_stmt>
      <for>for <control>(<init>;</init><condition>;</condition> <incr><expr><operator>--</operator><name>max_length</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>score_t</name></type> <name>cost_diff_lazy</name> <init>= <expr><literal type="number">175</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HasherSearchResult</name></type> <name>sr2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>sr2</name><operator>.</operator><name>len</name></name> <operator>=</operator> <ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <name>MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH</name></expr> ?</condition><then>
            <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>sr</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_length</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sr2</name><operator>.</operator><name>len_code_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sr2</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sr2</name><operator>.</operator><name>score</name></name> <operator>=</operator> <name>kMinScore</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>max_distance</name> <operator>=</operator> <call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>position</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_backward_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dictionary_start</name> <operator>=</operator> <call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>,
            <argument><expr><name>position</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>position_offset</name></expr></argument>, <argument><expr><name>max_backward_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>dictionary</name><operator>.</operator><name>contextual</name><operator>.</operator><name>context_based</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>p1</name> <operator>=</operator> <name><name>ringbuffer</name><index>[<expr><name>position</name> <operator>&amp;</operator> <name>ringbuffer_mask</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>dict_id</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>dictionary</name><operator>.</operator><name>contextual</name><operator>.</operator><name>context_map</name><index>[
              <expr><call><name>BROTLI_CONTEXT</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>literal_context_lut</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>FindLongestMatch</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>privat</name></expr></argument>,
            <argument><expr><name><name>params</name><operator>-&gt;</operator><name>dictionary</name><operator>.</operator><name>contextual</name><operator>.</operator><name>dict</name><index>[<expr><name>dict_id</name></expr>]</index></name></expr></argument>,
            <argument><expr><name>ringbuffer</name></expr></argument>, <argument><expr><name>ringbuffer_mask</name></expr></argument>, <argument><expr><name>dist_cache</name></expr></argument>, <argument><expr><name>position</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_length</name></expr></argument>,
            <argument><expr><name>max_distance</name></expr></argument>, <argument><expr><name>dictionary_start</name> <operator>+</operator> <name>gap</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>dist</name><operator>.</operator><name>max_distance</name></name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>sr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ENABLE_COMPOUND_DICTIONARY</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>LookupCompoundDictionaryMatch</name><argument_list>(
              <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>dictionary</name><operator>.</operator><name>compound</name></name></expr></argument>, <argument><expr><name>ringbuffer</name></expr></argument>,
              <argument><expr><name>ringbuffer_mask</name></expr></argument>, <argument><expr><name>dist_cache</name></expr></argument>, <argument><expr><name>position</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_length</name></expr></argument>,
              <argument><expr><name>dictionary_start</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>dist</name><operator>.</operator><name>max_distance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>sr2</name><operator>.</operator><name>score</name></name> <operator>&gt;=</operator> <name><name>sr</name><operator>.</operator><name>score</name></name> <operator>+</operator> <name>cost_diff_lazy</name></expr>)</condition> <block>{<block_content>
          <comment type="block">/* Ok, let's just write one byte for now and start a match from the
             next byte. */</comment>
          <expr_stmt><expr><operator>++</operator><name>position</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>++</operator><name>insert_length</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>sr</name> <operator>=</operator> <name>sr2</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>++</operator><name>delayed_backward_references_in_row</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
              <name>position</name> <operator>+</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>HashTypeLength</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>pos_end</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></for>
      <expr_stmt><expr><name>apply_random_heuristics</name> <operator>=</operator>
          <name>position</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sr</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name>random_heuristics_window_size</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>dictionary_start</name> <operator>=</operator> <call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>,
          <argument><expr><name>position</name> <operator>+</operator> <name>position_offset</name></expr></argument>, <argument><expr><name>max_backward_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <block>{<block_content>
        <comment type="block">/* The first 16 codes are special short-codes,
           and the minimum offset is 1. */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>distance_code</name> <init>= <expr><call><name>ComputeDistanceCode</name><argument_list>(
            <argument><expr><name><name>sr</name><operator>.</operator><name>distance</name></name></expr></argument>, <argument><expr><name>dictionary_start</name> <operator>+</operator> <name>gap</name></expr></argument>, <argument><expr><name>dist_cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sr</name><operator>.</operator><name>distance</name></name> <operator>&lt;=</operator> <operator>(</operator><name>dictionary_start</name> <operator>+</operator> <name>gap</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>distance_code</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>dist_cache</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dist_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>dist_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dist_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>dist_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dist_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>dist_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>sr</name><operator>.</operator><name>distance</name></name></expr>;</expr_stmt>
          <function_decl><type><name>FN</name></type>(<name>PrepareDistanceCache</name>)<parameter_list>(<parameter><decl><type><name>privat</name></type></decl></parameter>, <parameter><decl><type><name>dist_cache</name></type></decl></parameter>)</parameter_list>;</function_decl>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>InitCommand</name><argument_list>(<argument><expr><name>commands</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>dist</name></name></expr></argument>, <argument><expr><name>insert_length</name></expr></argument>,
            <argument><expr><name><name>sr</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>sr</name><operator>.</operator><name>len_code_delta</name></name></expr></argument>, <argument><expr><name>distance_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
      <expr_stmt><expr><operator>*</operator><name>num_literals</name> <operator>+=</operator> <name>insert_length</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>insert_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <comment type="block">/* Put the hash keys into the table, if there are enough bytes left.
         Depending on the hasher implementation, it can push all positions
         in the given range or only a subset of them.
         Avoid hash poisoning with RLE data. */</comment>
      <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>range_start</name> <init>= <expr><name>position</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>range_end</name> <init>= <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>position</name> <operator>+</operator> <name><name>sr</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>store_end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>sr</name><operator>.</operator><name>distance</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>sr</name><operator>.</operator><name>len</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>range_start</name> <operator>=</operator> <call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>range_end</name></expr></argument>, <argument><expr><call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>,
              <argument><expr><name>range_start</name></expr></argument>, <argument><expr><name>position</name> <operator>+</operator> <name><name>sr</name><operator>.</operator><name>len</name></name> <operator>-</operator> <operator>(</operator><name><name>sr</name><operator>.</operator><name>distance</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <function_decl><type><name>FN</name></type>(<name>StoreRange</name>)<parameter_list>(<parameter><decl><type><name>privat</name></type></decl></parameter>, <parameter><decl><type><name>ringbuffer</name></type></decl></parameter>, <parameter><decl><type><name>ringbuffer_mask</name></type></decl></parameter>, <parameter><decl><type><name>range_start</name></type></decl></parameter>,
                       <parameter><decl><type><name>range_end</name></type></decl></parameter>)</parameter_list>;</function_decl>
      </block_content>}</block>
      <expr_stmt><expr><name>position</name> <operator>+=</operator> <name><name>sr</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>insert_length</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>position</name></expr>;</expr_stmt>
      <comment type="block">/* If we have not seen matches for a long time, we can skip some
         match lookups. Unsuccessful match lookups are very very expensive
         and this kind of a heuristic speeds up compression quite
         a lot. */</comment>
      <if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;</operator> <name>apply_random_heuristics</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Going through uncompressible data, jump. */</comment>
        <if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;</operator>
            <name>apply_random_heuristics</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>random_heuristics_window_size</name></expr>)</condition> <block>{<block_content>
          <comment type="block">/* It is quite a long time since we saw a copy, so we assume
             that this data is not compressible, and store hashes less
             often. Hashes of non compressible data are less likely to
             turn out to be useful in the future, too, so we store less of
             them to not to flood out the hash table of good compressible
             data. */</comment>
          <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>kMargin</name> <init>=
              <expr><call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>StoreLookahead</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>size_t</name></type> <name>pos_jump</name> <init>=
              <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>position</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>pos_end</name> <operator>-</operator> <name>kMargin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init>;</init> <condition><expr><name>position</name> <operator>&lt;</operator> <name>pos_jump</name></expr>;</condition> <incr><expr><name>position</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
            <function_decl><type><name>FN</name></type>(<name>Store</name>)<parameter_list>(<parameter><decl><type><name>privat</name></type></decl></parameter>, <parameter><decl><type><name>ringbuffer</name></type></decl></parameter>, <parameter><decl><type><name>ringbuffer_mask</name></type></decl></parameter>, <parameter><decl><type><name>position</name></type></decl></parameter>)</parameter_list>;</function_decl>
            <expr_stmt><expr><name>insert_length</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>kMargin</name> <init>=
              <expr><call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>StoreLookahead</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>size_t</name></type> <name>pos_jump</name> <init>=
              <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>position</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pos_end</name> <operator>-</operator> <name>kMargin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init>;</init> <condition><expr><name>position</name> <operator>&lt;</operator> <name>pos_jump</name></expr>;</condition> <incr><expr><name>position</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
            <function_decl><type><name>FN</name></type>(<name>Store</name>)<parameter_list>(<parameter><decl><type><name>privat</name></type></decl></parameter>, <parameter><decl><type><name>ringbuffer</name></type></decl></parameter>, <parameter><decl><type><name>ringbuffer_mask</name></type></decl></parameter>, <parameter><decl><type><name>position</name></type></decl></parameter>)</parameter_list>;</function_decl>
            <expr_stmt><expr><name>insert_length</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>insert_length</name> <operator>+=</operator> <name>pos_end</name> <operator>-</operator> <name>position</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>last_insert_len</name> <operator>=</operator> <name>insert_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>num_commands</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>commands</name> <operator>-</operator> <name>orig_commands</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
