<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/cluster_inc.h"><comment type="block">/* NOLINT(build/header_guard) */</comment>
<comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* template parameters: FN, CODE */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HistogramType</name></cpp:macro> <cpp:value>FN(Histogram)</cpp:value></cpp:define>

<comment type="block">/* Computes the bit cost reduction by combining out[idx1] and out[idx2] and if
   it is below a threshold, stores the pair (idx1, idx2) in the *pairs queue. */</comment>
<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <name>void</name> <name>FN</name></type><argument_list>(<argument><expr><name>BrotliCompareAndPushToQueue</name></expr></argument>)</argument_list><argument_list>(
    <argument><expr><specifier>const</specifier> <name>HistogramType</name><operator>*</operator> <name>out</name></expr></argument>, <argument><expr><name>HistogramType</name><operator>*</operator> <name>tmp</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint32_t</name><operator>*</operator> <name>cluster_size</name></expr></argument>,
    <argument><expr><name>uint32_t</name> <name>idx1</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>idx2</name></expr></argument>, <argument><expr><name>size_t</name> <name>max_num_pairs</name></expr></argument>, <argument><expr><name>HistogramPair</name><operator>*</operator> <name>pairs</name></expr></argument>,
    <argument><expr><name>size_t</name><operator>*</operator> <name>num_pairs</name></expr></argument>)</argument_list> <name>CODE</name><argument_list>(<block>{<block_content>
  <decl_stmt><decl><type><name>BROTLI_BOOL</name></type> <name>is_good_pair</name> <init>= <expr><name>BROTLI_FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HistogramPair</name></type> <name>p</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>idx1</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>idx2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>cost_diff</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>cost_combo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx1</name> <operator>==</operator> <name>idx2</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx2</name> <operator>&lt;</operator> <name>idx1</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name> <init>= <expr><name>idx2</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>idx2</name> <operator>=</operator> <name>idx1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>idx1</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>idx1</name></name> <operator>=</operator> <name>idx1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>idx2</name></name> <operator>=</operator> <name>idx2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>cost_diff</name></name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <call><name>ClusterCostDiff</name><argument_list>(<argument><expr><name><name>cluster_size</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cluster_size</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>cost_diff</name></name> <operator>-=</operator> <name><name>out</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>bit_cost_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>cost_diff</name></name> <operator>-=</operator> <name><name>out</name><index>[<expr><name>idx2</name></expr>]</index></name><operator>.</operator><name>bit_cost_</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>out</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>total_count_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>cost_combo</name></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>idx2</name></expr>]</index></name><operator>.</operator><name>bit_cost_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>is_good_pair</name> <operator>=</operator> <name>BROTLI_TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>out</name><index>[<expr><name>idx2</name></expr>]</index></name><operator>.</operator><name>total_count_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>cost_combo</name></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>bit_cost_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>is_good_pair</name> <operator>=</operator> <name>BROTLI_TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>threshold</name> <init>= <expr><ternary><condition><expr><operator>*</operator><name>num_pairs</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1e99</literal></expr> </then><else>:
        <expr><call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cost_diff</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>cost_combo</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <name><name>out</name><index>[<expr><name>idx1</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramAddHistogram</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cost_combo</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliPopulationCost</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cost_combo</name> <operator>&lt;</operator> <name>threshold</name> <operator>-</operator> <name><name>p</name><operator>.</operator><name>cost_diff</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>.</operator><name>cost_combo</name></name> <operator>=</operator> <name>cost_combo</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>is_good_pair</name> <operator>=</operator> <name>BROTLI_TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>is_good_pair</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>cost_diff</name></name> <operator>+=</operator> <name><name>p</name><operator>.</operator><name>cost_combo</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>num_pairs</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>HistogramPairIsLess</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Replace the top of the queue if needed. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>num_pairs</name> <operator>&lt;</operator> <name>max_num_pairs</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pairs</name><index>[<expr><operator>*</operator><name>num_pairs</name></expr>]</index></name> <operator>=</operator> <name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>num_pairs</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>num_pairs</name> <operator>&lt;</operator> <name>max_num_pairs</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pairs</name><index>[<expr><operator>*</operator><name>num_pairs</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>num_pairs</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></argument_list></decl></decl_stmt>)

<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <name>size_t</name> <name>FN</name></type><argument_list>(<argument><expr><name>BrotliHistogramCombine</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>HistogramType</name><operator>*</operator> <name>out</name></expr></argument>,
                                                  <argument><expr><name>HistogramType</name><operator>*</operator> <name>tmp</name></expr></argument>,
                                                  <argument><expr><name>uint32_t</name><operator>*</operator> <name>cluster_size</name></expr></argument>,
                                                  <argument><expr><name>uint32_t</name><operator>*</operator> <name>symbols</name></expr></argument>,
                                                  <argument><expr><name>uint32_t</name><operator>*</operator> <name>clusters</name></expr></argument>,
                                                  <argument><expr><name>HistogramPair</name><operator>*</operator> <name>pairs</name></expr></argument>,
                                                  <argument><expr><name>size_t</name> <name>num_clusters</name></expr></argument>,
                                                  <argument><expr><name>size_t</name> <name>symbols_size</name></expr></argument>,
                                                  <argument><expr><name>size_t</name> <name>max_clusters</name></expr></argument>,
                                                  <argument><expr><name>size_t</name> <name>max_num_pairs</name></expr></argument>)</argument_list> <name>CODE</name><argument_list>(<block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>cost_diff_threshold</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>min_cluster_size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_pairs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <block>{<block_content>
    <comment type="block">/* We maintain a vector of histogram pairs, with the property that the pair
       with the maximum bit cost reduction is the first. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>idx1</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>idx1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx1</name> <operator>&lt;</operator> <name>num_clusters</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx1</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>idx2</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>idx2</name> <operator>=</operator> <name>idx1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx2</name> <operator>&lt;</operator> <name>num_clusters</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx2</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliCompareAndPushToQueue</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>cluster_size</name></expr></argument>, <argument><expr><name><name>clusters</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>,
            <argument><expr><name><name>clusters</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>, <argument><expr><name>max_num_pairs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_pairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block>

  <while>while <condition>(<expr><name>num_clusters</name> <operator>&gt;</operator> <name>min_cluster_size</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>best_idx1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>best_idx2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cost_diff</name> <operator>&gt;=</operator> <name>cost_diff_threshold</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cost_diff_threshold</name> <operator>=</operator> <literal type="number">1e99</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>min_cluster_size</name> <operator>=</operator> <name>max_clusters</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Take the best pair from the top of heap. */</comment>
    <expr_stmt><expr><name>best_idx1</name> <operator>=</operator> <name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>idx1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>best_idx2</name> <operator>=</operator> <name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>idx2</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramAddHistogram</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><name>best_idx1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><name>best_idx2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><index>[<expr><name>best_idx1</name></expr>]</index></name><operator>.</operator><name>bit_cost_</name> <operator>=</operator> <name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cost_combo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cluster_size</name><index>[<expr><name>best_idx1</name></expr>]</index></name> <operator>+=</operator> <name><name>cluster_size</name><index>[<expr><name>best_idx2</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>symbols_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>best_idx2</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>best_idx1</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_clusters</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>clusters</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>best_idx2</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clusters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>clusters</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
                <argument><expr><operator>(</operator><name>num_clusters</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>clusters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><operator>--</operator><name>num_clusters</name></expr>;</expr_stmt>
    <block>{<block_content>
      <comment type="block">/* Remove pairs intersecting the just combined best pair. */</comment>
      <decl_stmt><decl><type><name>size_t</name></type> <name>copy_to_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pairs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>HistogramPair</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>idx1</name></name> <operator>==</operator> <name>best_idx1</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>idx2</name></name> <operator>==</operator> <name>best_idx1</name> <operator>||</operator>
            <name><name>p</name><operator>-&gt;</operator><name>idx1</name></name> <operator>==</operator> <name>best_idx2</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>idx2</name></name> <operator>==</operator> <name>best_idx2</name></expr>)</condition> <block>{<block_content>
          <comment type="block">/* Remove invalid pair from the queue. */</comment>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>HistogramPairIsLess</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <comment type="block">/* Replace the top of the queue if needed. */</comment>
          <decl_stmt><decl><type><name>HistogramPair</name></type> <name>front</name> <init>= <expr><name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pairs</name><index>[<expr><name>copy_to_idx</name></expr>]</index></name> <operator>=</operator> <name>front</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pairs</name><index>[<expr><name>copy_to_idx</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>copy_to_idx</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>num_pairs</name> <operator>=</operator> <name>copy_to_idx</name></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* Push new pairs formed with the combined histogram to the heap. */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_clusters</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliCompareAndPushToQueue</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>cluster_size</name></expr></argument>, <argument><expr><name>best_idx1</name></expr></argument>,
          <argument><expr><name><name>clusters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>max_num_pairs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_pairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>
  <return>return <expr><name>num_clusters</name></expr>;</return>
</block_content>}</block></argument_list></decl></decl_stmt>)

<comment type="block">/* What is the bit cost of moving histogram from cur_symbol to candidate. */</comment>
<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <name>double</name> <name>FN</name></type><argument_list>(<argument><expr><name>BrotliHistogramBitCostDistance</name></expr></argument>)</argument_list><argument_list>(
    <argument><expr><specifier>const</specifier> <name>HistogramType</name><operator>*</operator> <name>histogram</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>HistogramType</name><operator>*</operator> <name>candidate</name></expr></argument>,
    <argument><expr><name>HistogramType</name><operator>*</operator> <name>tmp</name></expr></argument>)</argument_list> <name>CODE</name><argument_list>(<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>histogram</name><operator>-&gt;</operator><name>total_count_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0.0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <operator>*</operator><name>histogram</name></expr>;</expr_stmt>
    <function_decl><type><name>FN</name></type>(<name>HistogramAddHistogram</name>)<parameter_list>(<parameter><decl><type><name>tmp</name></type></decl></parameter>, <parameter><decl><type><name>candidate</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <return>return <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliPopulationCost</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>candidate</name><operator>-&gt;</operator><name>bit_cost_</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></argument_list></decl></decl_stmt>)

<comment type="block">/* Find the best 'out' histogram for each of the 'in' histograms.
   When called, clusters[0..num_clusters) contains the unique values from
   symbols[0..in_size), but this property is not preserved in this function.
   Note: we assume that out[]-&gt;bit_cost_ is already up-to-date. */</comment>
<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <name>void</name> <name>FN</name></type><argument_list>(<argument><expr><name>BrotliHistogramRemap</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>HistogramType</name><operator>*</operator> <name>in</name></expr></argument>,
    <argument><expr><name>size_t</name> <name>in_size</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint32_t</name><operator>*</operator> <name>clusters</name></expr></argument>, <argument><expr><name>size_t</name> <name>num_clusters</name></expr></argument>,
    <argument><expr><name>HistogramType</name><operator>*</operator> <name>out</name></expr></argument>, <argument><expr><name>HistogramType</name><operator>*</operator> <name>tmp</name></expr></argument>, <argument><expr><name>uint32_t</name><operator>*</operator> <name>symbols</name></expr></argument>)</argument_list> <name>CODE</name><argument_list>(<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>in_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>best_out</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>symbols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>symbols</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>best_bits</name> <init>=
        <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliHistogramBitCostDistance</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><name>best_out</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_clusters</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>cur_bits</name> <init>=
          <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliHistogramBitCostDistance</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><name><name>clusters</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>cur_bits</name> <operator>&lt;</operator> <name>best_bits</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>best_bits</name> <operator>=</operator> <name>cur_bits</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>best_out</name> <operator>=</operator> <name><name>clusters</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>best_out</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Recompute each out based on raw and symbols. */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_clusters</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramClear</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><name><name>clusters</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>in_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramAddHistogram</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></argument_list></decl></decl_stmt>)

<comment type="block">/* Reorders elements of the out[0..length) array and changes values in
   symbols[0..length) array in the following way:
     * when called, symbols[] contains indexes into out[], and has N unique
       values (possibly N &lt; length)
     * on return, symbols'[i] = f(symbols[i]) and
                  out'[symbols'[i]] = out[symbols[i]], for each 0 &lt;= i &lt; length,
       where f is a bijection between the range of symbols[] and [0..N), and
       the first occurrences of values in symbols'[i] come in consecutive
       increasing order.
   Returns N, the number of unique values in symbols[]. */</comment>
<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <name>size_t</name> <name>FN</name></type><argument_list>(<argument><expr><name>BrotliHistogramReindex</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>MemoryManager</name><operator>*</operator> <name>m</name></expr></argument>,
    <argument><expr><name>HistogramType</name><operator>*</operator> <name>out</name></expr></argument>, <argument><expr><name>uint32_t</name><operator>*</operator> <name>symbols</name></expr></argument>, <argument><expr><name>size_t</name> <name>length</name></expr></argument>)</argument_list> <name>CODE</name><argument_list>(<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>kInvalidIndex</name> <init>= <expr><name>BROTLI_UINT32_MAX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>new_index</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>next_index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>new_index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>new_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>kInvalidIndex</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>next_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>new_index</name><index>[<expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name>kInvalidIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>new_index</name><index>[<expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>next_index</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>next_index</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <comment type="block">/* TODO(eustas): by using idea of "cycle-sort" we can avoid allocation of
     tmp and reduce the number of copying by the factor of 2. */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HistogramType</name></expr></argument>, <argument><expr><name>next_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>next_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>new_index</name><index>[<expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name>next_index</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>next_index</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>next_index</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>new_index</name><index>[<expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>new_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>next_index</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>next_index</name></expr>;</return>
</block_content>}</block></argument_list></decl></decl_stmt>)

<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <name>void</name> <name>FN</name></type><argument_list>(<argument><expr><name>BrotliClusterHistograms</name></expr></argument>)</argument_list><argument_list>(
    <argument><expr><name>MemoryManager</name><operator>*</operator> <name>m</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>HistogramType</name><operator>*</operator> <name>in</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>size_t</name> <name>in_size</name></expr></argument>,
    <argument><expr><name>size_t</name> <name>max_histograms</name></expr></argument>, <argument><expr><name>HistogramType</name><operator>*</operator> <name>out</name></expr></argument>, <argument><expr><name>size_t</name><operator>*</operator> <name>out_size</name></expr></argument>,
    <argument><expr><name>uint32_t</name><operator>*</operator> <name>histogram_symbols</name></expr></argument>)</argument_list> <name>CODE</name><argument_list>(<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>cluster_size</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>clusters</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_clusters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_input_histograms</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pairs_capacity</name> <init>= <expr><name>max_input_histograms</name> <operator>*</operator> <name>max_input_histograms</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* For the first pass of clustering, we allow all pairs. */</comment>
  <decl_stmt><decl><type><name>HistogramPair</name><modifier>*</modifier></type> <name>pairs</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HistogramPair</name></expr></argument>, <argument><expr><name>pairs_capacity</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/* TODO(eustas): move to "persistent" arena? */</comment>
  <decl_stmt><decl><type><name>HistogramType</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>BROTLI_ALLOC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HistogramType</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>cluster_size</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>clusters</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>pairs</name></expr></argument>)</argument_list></call><operator>||</operator> <call><name>BROTLI_IS_NULL</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>in_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>cluster_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>in_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit_cost_</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliPopulationCost</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>histogram_symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>in_size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>max_input_histograms</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>num_to_combine</name> <init>=
        <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>in_size</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>max_input_histograms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>num_new_clusters</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_to_combine</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>clusters</name><index>[<expr><name>num_clusters</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <name>j</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>num_new_clusters</name> <operator>=</operator>
        <call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliHistogramCombine</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>cluster_size</name></expr></argument>,
                                   <argument><expr><operator>&amp;</operator><name><name>histogram_symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                   <argument><expr><operator>&amp;</operator><name><name>clusters</name><index>[<expr><name>num_clusters</name></expr>]</index></name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>,
                                   <argument><expr><name>num_to_combine</name></expr></argument>, <argument><expr><name>num_to_combine</name></expr></argument>,
                                   <argument><expr><name>max_histograms</name></expr></argument>, <argument><expr><name>pairs_capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>num_clusters</name> <operator>+=</operator> <name>num_new_clusters</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <block>{<block_content>
    <comment type="block">/* For the second pass, we limit the total number of histogram pairs.
       After this limit is reached, we only keep searching for the best pair. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>max_num_pairs</name> <init>= <expr><call><name>BROTLI_MIN</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>,
        <argument><expr><literal type="number">64</literal> <operator>*</operator> <name>num_clusters</name></expr></argument>, <argument><expr><operator>(</operator><name>num_clusters</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>num_clusters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BROTLI_ENSURE_CAPACITY</name><argument_list>(
        <argument><expr><name>m</name></expr></argument>, <argument><expr><name>HistogramPair</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>pairs_capacity</name></expr></argument>, <argument><expr><name>max_num_pairs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Collapse similar histograms. */</comment>
    <expr_stmt><expr><name>num_clusters</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliHistogramCombine</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>cluster_size</name></expr></argument>,
                                              <argument><expr><name>histogram_symbols</name></expr></argument>, <argument><expr><name>clusters</name></expr></argument>,
                                              <argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>num_clusters</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>,
                                              <argument><expr><name>max_histograms</name></expr></argument>, <argument><expr><name>max_num_pairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Find the optimal map from original histograms to the final ones. */</comment>
  <function_decl><type><name>FN</name></type>(<name>BrotliHistogramRemap</name>)<parameter_list>(<parameter><decl><type><name>in</name></type></decl></parameter>, <parameter><decl><type><name>in_size</name></type></decl></parameter>, <parameter><decl><type><name>clusters</name></type></decl></parameter>, <parameter><decl><type><name>num_clusters</name></type></decl></parameter>,
                           <parameter><decl><type><name>out</name></type></decl></parameter>, <parameter><decl><type><name>tmp</name></type></decl></parameter>, <parameter><decl><type><name>histogram_symbols</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_FREE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Convert the context map to a canonical form. */</comment>
  <expr_stmt><expr><operator>*</operator><name>out_size</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>BrotliHistogramReindex</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>histogram_symbols</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>BROTLI_IS_OOM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></argument_list></decl></decl_stmt>)

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HistogramType</name></cpp:undef>
</unit>
