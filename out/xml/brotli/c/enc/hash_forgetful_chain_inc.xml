<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/hash_forgetful_chain_inc.h"><comment type="block">/* NOLINT(build/header_guard) */</comment>
<comment type="block">/* Copyright 2016 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* template parameters: FN, BUCKET_BITS, NUM_BANKS, BANK_BITS,
                        NUM_LAST_DISTANCES_TO_CHECK */</comment>

<comment type="block">/* A (forgetful) hash table to the data seen by the compressor, to
   help create backward references to previous data.

   Hashes are stored in chains which are bucketed to groups. Group of chains
   share a storage "bank". When more than "bank size" chain nodes are added,
   oldest nodes are replaced; this way several chains may share a tail. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HashForgetfulChain</name></cpp:macro> <cpp:value>HASHER()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BANK_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; BANK_BITS)</cpp:value></cpp:define>

<comment type="block">/* Number of hash buckets. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; BUCKET_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPPED_CHAINS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>HashTypeLength</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">4</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>StoreLookahead</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">4</literal></expr>;</return> </block_content>}</block></function>

<comment type="block">/* HashBytes is the function that chooses the bucket to place the address in.*/</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>HashBytes</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>h</name> <init>= <expr><call><name>BROTLI_UNALIGNED_LOAD32LE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>kHashMul32</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* The higher bits contain more mixture from the multiplication,
     so we take our results from there. */</comment>
  <return>return <expr><name>h</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>BUCKET_BITS</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function><type><name><name>struct</name> <name>FN</name></name></type>(<name>Slot</name>) <block>{<block_content>
  <type><name>uint16_t</name></type> <name>delta</name>;
  <type><name>uint16_t</name></type> <name>next</name>;
</block_content>}</block></function></typedef> <expr_stmt><expr><call><name>FN</name><argument_list>(<argument><expr><name>Slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <function><type><name><name>struct</name> <name>FN</name></name></type>(<name>Bank</name>) <block>{<block_content>
  <macro><name>FN</name><argument_list>(<argument>Slot</argument>)</argument_list></macro> <expr_stmt><expr><name><name>slots</name><index>[<expr><name>BANK_SIZE</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function></typedef> <expr_stmt><expr><call><name>FN</name><argument_list>(<argument><expr><name>Bank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <name>HashForgetfulChain</name> <block>{
  <decl_stmt><decl><type><name>uint16_t</name></type> <name><name>free_slot_idx</name><index>[<expr><name>NUM_BANKS</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* Up to 1KiB. Move to dynamic? */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>max_hops</name></decl>;</decl_stmt>

  <comment type="block">/* Shortcuts. */</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>extra</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HasherCommon</name><modifier>*</modifier></type> <name>common</name></decl>;</decl_stmt>

  <comment type="block">/* --- Dynamic size members --- */</comment>

  <comment type="block">/* uint32_t addr[BUCKET_SIZE]; */</comment>

  <comment type="block">/* uint16_t head[BUCKET_SIZE]; */</comment>

  <comment type="block">/* Truncated hash used for quick rejection of "distance cache" candidates. */</comment>
  <comment type="block">/* uint8_t tiny_hash[65536];*/</comment>

  <comment type="block">/* FN(Bank) banks[NUM_BANKS]; */</comment>
}</block></struct></type> <name>HashForgetfulChain</name>;</typedef>

<function><type><specifier>static</specifier> <name>uint32_t</name><modifier>*</modifier> <name>FN</name></type>(<name>Addr</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>extra</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>extra</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name><modifier>*</modifier> <name>FN</name></type>(<name>Head</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>extra</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><call><call><name>FN</name><argument_list>(<argument><expr><name>Addr</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call><index>[<expr><name>BUCKET_SIZE</name></expr>]</index><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name><modifier>*</modifier> <name>FN</name></type>(<name>TinyHash</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>extra</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><call><call><name>FN</name><argument_list>(<argument><expr><name>Head</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call><index>[<expr><name>BUCKET_SIZE</name></expr>]</index><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <call><name>FN</name><argument_list>(<argument><expr><name>Bank</name></expr></argument>)</argument_list></call><operator>*</operator> <macro><name>FN</name><argument_list>(<argument>Banks</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>*</operator> <name>extra</name><operator>)</operator> <block>{
  <return>return <expr><operator>(</operator><call><name>FN</name><argument_list>(<argument><expr><name>Bank</name></expr></argument>)</argument_list></call><operator>*</operator><operator>)</operator><operator>(</operator><name>extra</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>Initialize</name>)<parameter_list>(
    <parameter><decl><type><name>HasherCommon</name><modifier>*</modifier></type> <name>common</name></decl></parameter>, <parameter><decl><type><name>HashForgetfulChain</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>common</name></name> <operator>=</operator> <name>common</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>common</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>common</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>max_hops</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>&gt;</operator> <literal type="number">6</literal></expr> ?</condition><then> <expr><literal type="number">7u</literal></expr> </then><else>: <expr><literal type="number">8u</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>params</name><operator>-&gt;</operator><name>quality</name></name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FN</name></type>(<name>Prepare</name>)<parameter_list>(
    <parameter><decl><type><name>HashForgetfulChain</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>one_shot</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>input_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>addr</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>Addr</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>head</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>Head</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>tiny_hash</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>TinyHash</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Partial preparation is 100 times slower (per socket). */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>partial_prepare_threshold</name> <init>= <expr><name>BUCKET_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>one_shot</name> <operator>&amp;&amp;</operator> <name>input_size</name> <operator>&lt;=</operator> <name>partial_prepare_threshold</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>input_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>bucket</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HashBytes</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="block">/* See InitEmpty comment. */</comment>
      <expr_stmt><expr><name><name>addr</name><index>[<expr><name>bucket</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>head</name><index>[<expr><name>bucket</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xCCCC</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* Fill |addr| array with 0xCCCCCCCC value. Because of wrapping, position
       processed by hasher never reaches 3GB + 64M; this makes all new chains
       to be terminated after the first node. */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0xCC</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BUCKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BUCKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tiny_hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>free_slot_idx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>free_slot_idx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>HashMemAllocInBytes</name>)<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>one_shot</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>input_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>alloc_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>one_shot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alloc_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BUCKET_SIZE</name> <operator>+</operator>
                  <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BUCKET_SIZE</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">65536</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alloc_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name>FN</name><argument_list>(<argument><expr><name>Bank</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NUM_BANKS</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Look at 4 bytes at &amp;data[ix &amp; mask]. Compute a hash from these, and prepend
   node to corresponding chain; also update tiny_hash for current position. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>Store</name>)<parameter_list>(<parameter><decl><type><name>HashForgetfulChain</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>addr</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>Addr</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>head</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>Head</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>tiny_hash</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>TinyHash</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>FN</name><argument_list>(<argument><expr><name>Bank</name></expr></argument>)</argument_list></call><operator>*</operator> <name>BROTLI_RESTRICT</name> <name>banks</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>Banks</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>key</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HashBytes</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>ix</name> <operator>&amp;</operator> <name>mask</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bank</name> <init>= <expr><name>key</name> <operator>&amp;</operator> <operator>(</operator><name>NUM_BANKS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>free_slot_idx</name><index>[<expr><name>bank</name></expr>]</index></name><operator>++</operator> <operator>&amp;</operator> <operator>(</operator><name>BANK_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>delta</name> <init>= <expr><name>ix</name> <operator>-</operator> <name><name>addr</name><index>[<expr><name>key</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tiny_hash</name><index>[<expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>ix</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>key</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>delta</name> <operator>=</operator> <ternary><condition><expr><name>CAPPED_CHAINS</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0xFFFF</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>banks</name><index>[<expr><name>bank</name></expr>]</index></name><operator>.</operator><name><name>slots</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>delta</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>delta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>banks</name><index>[<expr><name>bank</name></expr>]</index></name><operator>.</operator><name><name>slots</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name><name>head</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ix</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>head</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>idx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>StoreRange</name>)<parameter_list>(
    <parameter><decl><type><name>HashForgetfulChain</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>mask</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ix_start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ix_end</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ix_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ix_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <function_decl><type><name>FN</name></type>(<name>Store</name>)<parameter_list>(<parameter><decl><type><name>self</name></type></decl></parameter>, <parameter><decl><type><name>data</name></type></decl></parameter>, <parameter><decl><type><name>mask</name></type></decl></parameter>, <parameter><decl><type><name>i</name></type></decl></parameter>)</parameter_list>;</function_decl>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>StitchToPreviousBlock</name>)<parameter_list>(
    <parameter><decl><type><name>HashForgetfulChain</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>num_bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>ring_buffer_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>&gt;=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>HashTypeLength</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>position</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Prepare the hashes for three last bytes of the last write.
       These could not be calculated before, since they require knowledge
       of both the previous and the current block. */</comment>
    <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>Store</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ringbuffer</name></expr></argument>, <argument><expr><name>ring_buffer_mask</name></expr></argument>, <argument><expr><name>position</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>Store</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ringbuffer</name></expr></argument>, <argument><expr><name>ring_buffer_mask</name></expr></argument>, <argument><expr><name>position</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>Store</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ringbuffer</name></expr></argument>, <argument><expr><name>ring_buffer_mask</name></expr></argument>, <argument><expr><name>position</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>PrepareDistanceCache</name>)<parameter_list>(
    <parameter><decl><type><name>HashForgetfulChain</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><name>int</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>distance_cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BROTLI_UNUSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PrepareDistanceCache</name><argument_list>(<argument><expr><name>distance_cache</name></expr></argument>, <argument><expr><name>NUM_LAST_DISTANCES_TO_CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Find a longest backward match of &amp;data[cur_ix] up to the length of
   max_length and stores the position cur_ix in the hash table.

   REQUIRES: FN(PrepareDistanceCache) must be invoked for current distance cache
             values; if this method is invoked repeatedly with the same distance
             cache values, it is enough to invoke FN(PrepareDistanceCache) once.

   Does not look for matches longer than max_length.
   Does not look for matches further away than max_backward.
   Writes the best match into |out|.
   |out|-&gt;score is updated only if a better match is found. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type>(<name>FindLongestMatch</name>)<parameter_list>(
    <parameter><decl><type><name>HashForgetfulChain</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderDictionary</name><modifier>*</modifier></type> <name>dictionary</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ring_buffer_mask</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>distance_cache</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>cur_ix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_backward</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dictionary_distance</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_distance</name></decl></parameter>,
    <parameter><decl><type><name>HasherSearchResult</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>addr</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>Addr</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>head</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>Head</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>tiny_hashes</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>TinyHash</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>FN</name><argument_list>(<argument><expr><name>Bank</name></expr></argument>)</argument_list></call><operator>*</operator> <name>BROTLI_RESTRICT</name> <name>banks</name> <operator>=</operator> <call><call><name>FN</name><argument_list>(<argument><expr><name>Banks</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>cur_ix_masked</name> <init>= <expr><name>cur_ix</name> <operator>&amp;</operator> <name>ring_buffer_mask</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Don't accept a short copy from far away. */</comment>
  <decl_stmt><decl><type><name>score_t</name></type> <name>min_score</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>score</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>score_t</name></type> <name>best_score</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>score</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>best_len</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>key</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HashBytes</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>cur_ix_masked</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>tiny_hash</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>key</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>len_code_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <comment type="block">/* Try last distance first. */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_LAST_DISTANCES_TO_CHECK</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>backward</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>distance_cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>prev_ix</name> <init>= <expr><operator>(</operator><name>cur_ix</name> <operator>-</operator> <name>backward</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <comment type="block">/* For distance code 0 we want to consider 2-byte matches. */</comment>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tiny_hashes</name><index>[<expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>prev_ix</name></expr>]</index></name> <operator>!=</operator> <name>tiny_hash</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>prev_ix</name> <operator>&gt;=</operator> <name>cur_ix</name> <operator>||</operator> <name>backward</name> <operator>&gt;</operator> <name>max_backward</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>prev_ix</name> <operator>&amp;=</operator> <name>ring_buffer_mask</name></expr>;</expr_stmt>
    <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>FindMatchLengthWithLimit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>prev_ix</name></expr>]</index></name></expr></argument>,
                                                  <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>cur_ix_masked</name></expr>]</index></name></expr></argument>,
                                                  <argument><expr><name>max_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>score_t</name></type> <name>score</name> <init>= <expr><call><name>BackwardReferenceScoreUsingLastDistance</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>best_score</name> <operator>&lt;</operator> <name>score</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>score</name> <operator>-=</operator> <call><name>BackwardReferencePenaltyUsingLastDistance</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name>best_score</name> <operator>&lt;</operator> <name>score</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>best_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>best_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>distance</name></name> <operator>=</operator> <name>backward</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name>best_score</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block></for>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bank</name> <init>= <expr><name>key</name> <operator>&amp;</operator> <operator>(</operator><name>NUM_BANKS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>backward</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>hops</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>max_hops</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>delta</name> <init>= <expr><name>cur_ix</name> <operator>-</operator> <name><name>addr</name><index>[<expr><name>key</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>slot</name> <init>= <expr><name><name>head</name><index>[<expr><name>key</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>hops</name><operator>--</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>prev_ix</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>last</name> <init>= <expr><name>slot</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>backward</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>backward</name> <operator>&gt;</operator> <name>max_backward</name> <operator>||</operator> <operator>(</operator><name>CAPPED_CHAINS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>delta</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>prev_ix</name> <operator>=</operator> <operator>(</operator><name>cur_ix</name> <operator>-</operator> <name>backward</name><operator>)</operator> <operator>&amp;</operator> <name>ring_buffer_mask</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>banks</name><index>[<expr><name>bank</name></expr>]</index></name><operator>.</operator><name><name>slots</name><index>[<expr><name>last</name></expr>]</index></name><operator>.</operator><name>next</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>banks</name><index>[<expr><name>bank</name></expr>]</index></name><operator>.</operator><name><name>slots</name><index>[<expr><name>last</name></expr>]</index></name><operator>.</operator><name>delta</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>cur_ix_masked</name> <operator>+</operator> <name>best_len</name> <operator>&gt;</operator> <name>ring_buffer_mask</name> <operator>||</operator>
          <name>prev_ix</name> <operator>+</operator> <name>best_len</name> <operator>&gt;</operator> <name>ring_buffer_mask</name> <operator>||</operator>
          <name><name>data</name><index>[<expr><name>cur_ix_masked</name> <operator>+</operator> <name>best_len</name></expr>]</index></name> <operator>!=</operator> <name><name>data</name><index>[<expr><name>prev_ix</name> <operator>+</operator> <name>best_len</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>FindMatchLengthWithLimit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>prev_ix</name></expr>]</index></name></expr></argument>,
                                                    <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>cur_ix_masked</name></expr>]</index></name></expr></argument>,
                                                    <argument><expr><name>max_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
          <comment type="block">/* Comparing for &gt;= 3 does not change the semantics, but just saves
             for a few unnecessary binary logarithms in backward reference
             score, since we are not interested in such short matches. */</comment>
          <decl_stmt><decl><type><name>score_t</name></type> <name>score</name> <init>= <expr><call><name>BackwardReferenceScore</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>best_score</name> <operator>&lt;</operator> <name>score</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>best_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>best_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>distance</name></name> <operator>=</operator> <name>backward</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name>best_score</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>
    </block_content>}</block></while>
    <function_decl><type><name>FN</name></type>(<name>Store</name>)<parameter_list>(<parameter><decl><type><name>self</name></type></decl></parameter>, <parameter><decl><type><name>data</name></type></decl></parameter>, <parameter><decl><type><name>ring_buffer_mask</name></type></decl></parameter>, <parameter><decl><type><name>cur_ix</name></type></decl></parameter>)</parameter_list>;</function_decl>
  </block_content>}</block>
  <if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>score</name></name> <operator>==</operator> <name>min_score</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SearchInStaticDictionary</name><argument_list>(<argument><expr><name>dictionary</name></expr></argument>,
        <argument><expr><name><name>self</name><operator>-&gt;</operator><name>common</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>cur_ix_masked</name></expr>]</index></name></expr></argument>, <argument><expr><name>max_length</name></expr></argument>, <argument><expr><name>dictionary_distance</name></expr></argument>,
        <argument><expr><name>max_distance</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>BROTLI_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BANK_SIZE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUCKET_SIZE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CAPPED_CHAINS</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HashForgetfulChain</name></cpp:undef>
</unit>
