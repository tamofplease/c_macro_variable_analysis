<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/histogram_inc.h"><comment type="block">/* NOLINT(build/header_guard) */</comment>
<comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* template parameters: Histogram, DATA_SIZE, DataType */</comment>

<comment type="block">/* A simple container for histograms of data in blocks. */</comment>

<typedef>typedef <function><type><name><name>struct</name> <name>FN</name></name></type>(<name>Histogram</name>) <block>{<block_content>
  <type><name>uint32_t</name></type> <name><name>data_</name><index>[<expr><name>DATA_SIZE</name></expr>]</index></name>;
  <type><name>size_t</name></type> <name>total_count_</name>;
  <type><name>double</name></type> <name>bit_cost_</name>;
</block_content>}</block></function></typedef> <expr_stmt><expr><call><name>FN</name><argument_list>(<argument><expr><name>Histogram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type><argument_list>(<argument><expr><name>HistogramClear</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>FN</name><argument_list>(<argument><expr><name>Histogram</name></expr></argument>)</argument_list></call><operator>*</operator> <name>self</name></expr></argument>)</argument_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>data_</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>data_</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>total_count_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>bit_cost_</name></name> <operator>=</operator> <name>HUGE_VAL</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type><argument_list>(<argument><expr><name>ClearHistograms</name></expr></argument>)</argument_list><argument_list>(
    <argument><expr><call><name>FN</name><argument_list>(<argument><expr><name>Histogram</name></expr></argument>)</argument_list></call><operator>*</operator> <name>array</name></expr></argument>, <argument><expr><name>size_t</name> <name>length</name></expr></argument>)</argument_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramClear</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>array</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type><argument_list>(<argument><expr><name>HistogramAdd</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>FN</name><argument_list>(<argument><expr><name>Histogram</name></expr></argument>)</argument_list></call><operator>*</operator> <name>self</name></expr></argument>, <argument><expr><name>size_t</name> <name>val</name></expr></argument>)</argument_list> <block>{<block_content>
  <expr_stmt><expr><operator>++</operator><name><name>self</name><operator>-&gt;</operator><name>data_</name><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>self</name><operator>-&gt;</operator><name>total_count_</name></name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type><argument_list>(<argument><expr><name>HistogramAddVector</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>FN</name><argument_list>(<argument><expr><name>Histogram</name></expr></argument>)</argument_list></call><operator>*</operator> <name>self</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>DataType</name><operator>*</operator> <name>p</name></expr></argument>, <argument><expr><name>size_t</name> <name>n</name></expr></argument>)</argument_list> <block>{<block_content>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>total_count_</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>--</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name><name>self</name><operator>-&gt;</operator><name>data_</name><index>[<expr><operator>*</operator><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name> <name>FN</name></type><argument_list>(<argument><expr><name>HistogramAddHistogram</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>FN</name><argument_list>(<argument><expr><name>Histogram</name></expr></argument>)</argument_list></call><operator>*</operator> <name>self</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <call><name>FN</name><argument_list>(<argument><expr><name>Histogram</name></expr></argument>)</argument_list></call><operator>*</operator> <name>v</name></expr></argument>)</argument_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>total_count_</name></name> <operator>+=</operator> <name><name>v</name><operator>-&gt;</operator><name>total_count_</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DATA_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data_</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>v</name><operator>-&gt;</operator><name>data_</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name> <name>FN</name></type>(<name>HistogramDataSize</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>DATA_SIZE</name></expr>;</return> </block_content>}</block></function>
</unit>
