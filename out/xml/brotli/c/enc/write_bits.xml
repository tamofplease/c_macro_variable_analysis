<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/write_bits.h"><comment type="block">/* Copyright 2010 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Write bits into a byte array. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_WRITE_BITS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_WRITE_BITS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* This function writes bits into bytes in increasing addresses, and within
   a byte least-significant-bit first.

   The function can write up to 56 bits in one go with WriteBits
   Example: let's assume that 3 bits (Rs below) have been written already:

   BYTE-0     BYTE+1       BYTE+2

   0000 0RRR    0000 0000    0000 0000

   Now, we could write 5 or less bits in MSB by just shifting by 3
   and OR'ing to BYTE-0.

   For n bits, we take the last 5 bits, OR that with high bits in BYTE-0,
   and locate the rest in BYTE+1, BYTE+2, etc. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>BrotliWriteBits</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n_bits</name></decl></parameter>,
                                          <parameter><decl><type><name>uint64_t</name></type> <name>bits</name></decl></parameter>,
                                          <parameter><decl><type><name>size_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>pos</name></decl></parameter>,
                                          <parameter><decl><type><name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BROTLI_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"WriteBits  %2d  0x%08x%08x  %10d\n"</literal><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n_bits</name><operator>,</operator>
      <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator><operator>,</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator><operator>,</operator>
      <operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <name>n_bits</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><name>n_bits</name> <operator>&lt;=</operator> <literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* This branch of the code can write up to 56 bits at a time,
     7 bits are lost by being perhaps already in *p and at least
     1 bit is needed to initialize the bit-stream ahead (i.e. if 7
     bits are in *p and we write 57 bits, then the next write will
     access a byte that was never initialized). */</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>&amp;</operator><name><name>array</name><index>[<expr><operator>*</operator><name>pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="block">/* Zero-extend 8 to 64 bits. */</comment>
    <expr_stmt><expr><name>v</name> <operator>|=</operator> <name>bits</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>*</operator><name>pos</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BROTLI_UNALIGNED_STORE64LE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Set some bits. */</comment>
    <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>+=</operator> <name>n_bits</name></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* implicit &amp; 0xFF is assumed for uint8_t arithmetics */</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>array_pos</name> <init>= <expr><operator>&amp;</operator><name><name>array</name><index>[<expr><operator>*</operator><name>pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bits_reserved_in_first_byte</name> <init>= <expr><operator>(</operator><operator>*</operator><name>pos</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bits_left_to_write</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>bits</name> <operator>&lt;&lt;=</operator> <name>bits_reserved_in_first_byte</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>array_pos</name><operator>++</operator> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>bits</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>bits_left_to_write</name> <operator>=</operator> <name>n_bits</name> <operator>+</operator> <name>bits_reserved_in_first_byte</name></expr>;</init>
         <condition><expr><name>bits_left_to_write</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>;</condition>
         <incr><expr><name>bits_left_to_write</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>bits</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>array_pos</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>bits</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><operator>*</operator><name>array_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>+=</operator> <name>n_bits</name></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>BrotliWriteBitsPrepareStorage</name><parameter_list>(
    <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BROTLI_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"WriteBitsPrepareStorage            %10d\n"</literal><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BROTLI_DCHECK</name><argument_list>(<argument><expr><operator>(</operator><name>pos</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>array</name><index>[<expr><name>pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_WRITE_BITS_H_ */</comment>
</unit>
