<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/command.h"><comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* This class models a sequence of literals and a backward reference copy. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_COMMAND_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_COMMAND_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fast_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prefix.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <specifier>extern</specifier> <specifier>const</specifier> <name>uint32_t</name></type>
    <name><name>kBrotliInsBase</name><index>[<expr><name>BROTLI_NUM_INS_COPY_CODES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <specifier>extern</specifier> <specifier>const</specifier> <name>uint32_t</name></type>
    <name><name>kBrotliInsExtra</name><index>[<expr><name>BROTLI_NUM_INS_COPY_CODES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <specifier>extern</specifier> <specifier>const</specifier> <name>uint32_t</name></type>
    <name><name>kBrotliCopyBase</name><index>[<expr><name>BROTLI_NUM_INS_COPY_CODES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <specifier>extern</specifier> <specifier>const</specifier> <name>uint32_t</name></type>
    <name><name>kBrotliCopyExtra</name><index>[<expr><name>BROTLI_NUM_INS_COPY_CODES</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint16_t</name></type> <name>GetInsertLengthCode</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>insertlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>insertlen</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>insertlen</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>insertlen</name> <operator>&lt;</operator> <literal type="number">130</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nbits</name> <init>= <expr><call><name>Log2FloorNonZero</name><argument_list>(<argument><expr><name>insertlen</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1u</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>nbits</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>insertlen</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>nbits</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>insertlen</name> <operator>&lt;</operator> <literal type="number">2114</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><call><name>Log2FloorNonZero</name><argument_list>(<argument><expr><name>insertlen</name> <operator>-</operator> <literal type="number">66</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>insertlen</name> <operator>&lt;</operator> <literal type="number">6210</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">21u</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>insertlen</name> <operator>&lt;</operator> <literal type="number">22594</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">22u</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">23u</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint16_t</name></type> <name>GetCopyLengthCode</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>copylen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>copylen</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>copylen</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>copylen</name> <operator>&lt;</operator> <literal type="number">134</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nbits</name> <init>= <expr><call><name>Log2FloorNonZero</name><argument_list>(<argument><expr><name>copylen</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1u</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>nbits</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>copylen</name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>nbits</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>copylen</name> <operator>&lt;</operator> <literal type="number">2118</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><call><name>Log2FloorNonZero</name><argument_list>(<argument><expr><name>copylen</name> <operator>-</operator> <literal type="number">70</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">12</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">23u</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint16_t</name></type> <name>CombineLengthCodes</name><parameter_list>(
    <parameter><decl><type><name>uint16_t</name></type> <name>inscode</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>copycode</name></decl></parameter>, <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>use_last_distance</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>bits64</name> <init>=
      <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>copycode</name> <operator>&amp;</operator> <literal type="number">0x7u</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>inscode</name> <operator>&amp;</operator> <literal type="number">0x7u</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3u</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>use_last_distance</name> <operator>&amp;&amp;</operator> <name>inscode</name> <operator>&lt;</operator> <literal type="number">8u</literal> <operator>&amp;&amp;</operator> <name>copycode</name> <operator>&lt;</operator> <literal type="number">16u</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>copycode</name> <operator>&lt;</operator> <literal type="number">8u</literal><operator>)</operator></expr> ?</condition><then> <expr><name>bits64</name></expr> </then><else>: <expr><operator>(</operator><name>bits64</name> <operator>|</operator> <literal type="number">64u</literal><operator>)</operator></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* Specification: 5 Encoding of ... (last table) */</comment>
    <comment type="block">/* offset = 2 * index, where index is in range [0..8] */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">2u</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>copycode</name> <operator>&gt;&gt;</operator> <literal type="number">3u</literal><operator>)</operator> <operator>+</operator> <literal type="number">3u</literal> <operator>*</operator> <operator>(</operator><name>inscode</name> <operator>&gt;&gt;</operator> <literal type="number">3u</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <comment type="block">/* All values in specification are K * 64,
       where   K = [2, 3, 6, 4, 5, 8, 7, 9, 10],
           i + 1 = [1, 2, 3, 4, 5, 6, 7, 8,  9],
       K - i - 1 = [1, 1, 3, 0, 0, 2, 0, 1,  2] = D.
       All values in D require only 2 bits to encode.
       Magic constant is shifted 6 bits left, to avoid final multiplication. */</comment>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>&lt;&lt;</operator> <literal type="number">5u</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x40u</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">0x520D40u</literal> <operator>&gt;&gt;</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xC0u</literal><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>|</operator> <name>bits64</name><operator>)</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>GetLengthCode</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>insertlen</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>copylen</name></decl></parameter>,
                                        <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>use_last_distance</name></decl></parameter>,
                                        <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>inscode</name> <init>= <expr><call><name>GetInsertLengthCode</name><argument_list>(<argument><expr><name>insertlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>copycode</name> <init>= <expr><call><name>GetCopyLengthCode</name><argument_list>(<argument><expr><name>copylen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>code</name> <operator>=</operator> <call><name>CombineLengthCodes</name><argument_list>(<argument><expr><name>inscode</name></expr></argument>, <argument><expr><name>copycode</name></expr></argument>, <argument><expr><name>use_last_distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>GetInsertBase</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>inscode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>kBrotliInsBase</name><index>[<expr><name>inscode</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>GetInsertExtra</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>inscode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>kBrotliInsExtra</name><index>[<expr><name>inscode</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>GetCopyBase</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>copycode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>kBrotliCopyBase</name><index>[<expr><name>copycode</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>GetCopyExtra</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>copycode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>kBrotliCopyExtra</name><index>[<expr><name>copycode</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>Command</name> <block>{
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>insert_len_</name></decl>;</decl_stmt>
  <comment type="block">/* Stores copy_len in low 25 bits and copy_code - copy_len in high 7 bit. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>copy_len_</name></decl>;</decl_stmt>
  <comment type="block">/* Stores distance extra bits. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>dist_extra_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>cmd_prefix_</name></decl>;</decl_stmt>
  <comment type="block">/* Stores distance code in low 10 bits
     and number of extra bits in high 6 bits. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>dist_prefix_</name></decl>;</decl_stmt>
}</block></struct></type> <name>Command</name>;</typedef>

<comment type="block">/* distance_code is e.g. 0 for same-as-last short code, or 16 for offset 1. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>InitCommand</name><parameter_list>(<parameter><decl><type><name>Command</name><modifier>*</modifier></type> <name>self</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>BrotliDistanceParams</name><modifier>*</modifier></type> <name>dist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>insertlen</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>copylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copylen_code_delta</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>distance_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* Don't rely on signed int representation, use honest casts. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>delta</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int8_t</name><operator>)</operator><name>copylen_code_delta</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>insert_len_</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>insertlen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>copy_len_</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>copylen</name> <operator>|</operator> <operator>(</operator><name>delta</name> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* The distance prefix and extra bits are stored in this Command as if
     npostfix and ndirect were 0, they are only recomputed later after the
     clustering if needed. */</comment>
  <expr_stmt><expr><call><name>PrefixEncodeCopyDistance</name><argument_list>(
      <argument><expr><name>distance_code</name></expr></argument>, <argument><expr><name><name>dist</name><operator>-&gt;</operator><name>num_direct_distance_codes</name></name></expr></argument>,
      <argument><expr><name><name>dist</name><operator>-&gt;</operator><name>distance_postfix_bits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>dist_prefix_</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>dist_extra_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GetLengthCode</name><argument_list>(
      <argument><expr><name>insertlen</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>copylen</name> <operator>+</operator> <name>copylen_code_delta</name><operator>)</operator></expr></argument>,
      <argument><expr><call><name>TO_BROTLI_BOOL</name><argument_list>(<argument><expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>dist_prefix_</name></name> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cmd_prefix_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>InitInsertCommand</name><parameter_list>(<parameter><decl><type><name>Command</name><modifier>*</modifier></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>insertlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>insert_len_</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>insertlen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>copy_len_</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>dist_extra_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>dist_prefix_</name></name> <operator>=</operator> <name>BROTLI_NUM_DISTANCE_SHORT_CODES</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GetLengthCode</name><argument_list>(<argument><expr><name>insertlen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BROTLI_FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cmd_prefix_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>CommandRestoreDistanceCode</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>Command</name><modifier>*</modifier></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BrotliDistanceParams</name><modifier>*</modifier></type> <name>dist</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>dist_prefix_</name></name> <operator>&amp;</operator> <literal type="number">0x3FFu</literal><operator>)</operator> <operator>&lt;</operator>
      <name>BROTLI_NUM_DISTANCE_SHORT_CODES</name> <operator>+</operator> <name><name>dist</name><operator>-&gt;</operator><name>num_direct_distance_codes</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>self</name><operator>-&gt;</operator><name>dist_prefix_</name></name> <operator>&amp;</operator> <literal type="number">0x3FFu</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>dcode</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>dist_prefix_</name></name> <operator>&amp;</operator> <literal type="number">0x3FFu</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nbits</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>dist_prefix_</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>extra</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>dist_extra_</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>postfix_mask</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>dist</name><operator>-&gt;</operator><name>distance_postfix_bits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1U</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>hcode</name> <init>= <expr><operator>(</operator><name>dcode</name> <operator>-</operator> <name><name>dist</name><operator>-&gt;</operator><name>num_direct_distance_codes</name></name> <operator>-</operator>
        <name>BROTLI_NUM_DISTANCE_SHORT_CODES</name><operator>)</operator> <operator>&gt;&gt;</operator>
        <name><name>dist</name><operator>-&gt;</operator><name>distance_postfix_bits</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>lcode</name> <init>= <expr><operator>(</operator><name>dcode</name> <operator>-</operator> <name><name>dist</name><operator>-&gt;</operator><name>num_direct_distance_codes</name></name> <operator>-</operator>
        <name>BROTLI_NUM_DISTANCE_SHORT_CODES</name><operator>)</operator> <operator>&amp;</operator> <name>postfix_mask</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">2U</literal> <operator>+</operator> <operator>(</operator><name>hcode</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>nbits</name><operator>)</operator> <operator>-</operator> <literal type="number">4U</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><operator>(</operator><name>offset</name> <operator>+</operator> <name>extra</name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>dist</name><operator>-&gt;</operator><name>distance_postfix_bits</name></name><operator>)</operator> <operator>+</operator> <name>lcode</name> <operator>+</operator>
        <name><name>dist</name><operator>-&gt;</operator><name>num_direct_distance_codes</name></name> <operator>+</operator> <name>BROTLI_NUM_DISTANCE_SHORT_CODES</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>CommandDistanceContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Command</name><modifier>*</modifier></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>cmd_prefix_</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>cmd_prefix_</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>r</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>r</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>r</name> <operator>==</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>c</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>CommandCopyLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Command</name><modifier>*</modifier></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>self</name><operator>-&gt;</operator><name>copy_len_</name></name> <operator>&amp;</operator> <literal type="number">0x1FFFFFF</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>CommandCopyLenCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Command</name><modifier>*</modifier></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>modifier</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>copy_len_</name></name> <operator>&gt;&gt;</operator> <literal type="number">25</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>delta</name> <init>= <expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>modifier</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>modifier</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>copy_len_</name></name> <operator>&amp;</operator> <literal type="number">0x1FFFFFF</literal><operator>)</operator> <operator>+</operator> <name>delta</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_COMMAND_H_ */</comment>
</unit>
