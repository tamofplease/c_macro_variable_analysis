<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/bit_cost_inc.h"><comment type="block">/* NOLINT(build/header_guard) */</comment>
<comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* template parameters: FN */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HistogramType</name></cpp:macro> <cpp:value>FN(Histogram)</cpp:value></cpp:define>

<function><type><name>double</name> <name>FN</name></type>(<name>BrotliPopulationCost</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HistogramType</name><modifier>*</modifier></type> <name>histogram</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>kOneSymbolHistogramCost</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>kTwoSymbolHistogramCost</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>kThreeSymbolHistogramCost</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>kFourSymbolHistogramCost</name> <init>= <expr><literal type="number">37</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>data_size</name> <init>= <expr><call><call><name>FN</name><argument_list>(<argument><expr><name>HistogramDataSize</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>bits</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>histogram</name><operator>-&gt;</operator><name>total_count_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>kOneSymbolHistogramCost</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>data_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>histogram</name><operator>-&gt;</operator><name>data_</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>kOneSymbolHistogramCost</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>kTwoSymbolHistogramCost</name> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>histogram</name><operator>-&gt;</operator><name>total_count_</name></name><operator>)</operator></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>histo0</name> <init>= <expr><name><name>histogram</name><operator>-&gt;</operator><name>data_</name><index>[<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>histo1</name> <init>= <expr><name><name>histogram</name><operator>-&gt;</operator><name>data_</name><index>[<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>histo2</name> <init>= <expr><name><name>histogram</name><operator>-&gt;</operator><name>data_</name><index>[<expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>histomax</name> <init>=
        <expr><call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>histo0</name></expr></argument>, <argument><expr><call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>histo1</name></expr></argument>, <argument><expr><name>histo2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>kThreeSymbolHistogramCost</name> <operator>+</operator>
            <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>histo0</name> <operator>+</operator> <name>histo1</name> <operator>+</operator> <name>histo2</name><operator>)</operator> <operator>-</operator> <name>histomax</name><operator>)</operator></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>histo</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>h23</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>histomax</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>histo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>histogram</name><operator>-&gt;</operator><name>data_</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Sort */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>histo</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name><name>histo</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>BROTLI_SWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>histo</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><name>h23</name> <operator>=</operator> <name><name>histo</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>histo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>histomax</name> <operator>=</operator> <call><name>BROTLI_MAX</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>h23</name></expr></argument>, <argument><expr><name><name>histo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>kFourSymbolHistogramCost</name> <operator>+</operator>
            <literal type="number">3</literal> <operator>*</operator> <name>h23</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>histo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>histo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <name>histomax</name><operator>)</operator></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <block>{<block_content>
    <comment type="block">/* In this loop we compute the entropy of the histogram and simultaneously
       build a simplified histogram of the code length codes where we use the
       zero repeat code 17, but we don't use the non-zero repeat code 16. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>max_depth</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>depth_histo</name><index>[<expr><name>BROTLI_CODE_LENGTH_CODES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>log2total</name> <init>= <expr><call><name>FastLog2</name><argument_list>(<argument><expr><name><name>histogram</name><operator>-&gt;</operator><name>total_count_</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>data_size</name></expr>;</condition><incr/>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>histogram</name><operator>-&gt;</operator><name>data_</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Compute -log2(P(symbol)) = -log2(count(symbol)/total_count) =
                                    = log2(total_count) - log2(count(symbol)) */</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>log2p</name> <init>= <expr><name>log2total</name> <operator>-</operator> <call><name>FastLog2</name><argument_list>(<argument><expr><name><name>histogram</name><operator>-&gt;</operator><name>data_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/* Approximate the bit depth by round(-log2(P(symbol))) */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>depth</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>log2p</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>histogram</name><operator>-&gt;</operator><name>data_</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>log2p</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <name>max_depth</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>max_depth</name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>depth_histo</name><index>[<expr><name>depth</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Compute the run length of zeros and add the appropriate number of 0
           and 17 code length codes to the code length code histogram. */</comment>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>reps</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>data_size</name> <operator>&amp;&amp;</operator> <name><name>histogram</name><operator>-&gt;</operator><name>data_</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><operator>++</operator><name>reps</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>reps</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>data_size</name></expr>)</condition> <block>{<block_content>
          <comment type="block">/* Don't add any cost for the last zero run, since these are encoded
             only implicitly. */</comment>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>reps</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>depth_histo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>reps</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>reps</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <while>while <condition>(<expr><name>reps</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name><name>depth_histo</name><index>[<expr><name>BROTLI_REPEAT_ZERO_CODE_LENGTH</name></expr>]</index></name></expr>;</expr_stmt>
            <comment type="block">/* Add the 3 extra bits for the 17 code length code. */</comment>
            <expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>reps</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
          </block_content>}</block></while>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Add the estimated encoding cost of the code length code histogram. */</comment>
    <expr_stmt><expr><name>bits</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><literal type="number">18</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>max_depth</name><operator>)</operator></expr>;</expr_stmt>
    <comment type="block">/* Add the entropy of the code length code histogram. */</comment>
    <expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>BitsEntropy</name><argument_list>(<argument><expr><name>depth_histo</name></expr></argument>, <argument><expr><name>BROTLI_CODE_LENGTH_CODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HistogramType</name></cpp:undef>
</unit>
