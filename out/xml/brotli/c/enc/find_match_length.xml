<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/find_match_length.h"><comment type="block">/* Copyright 2010 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Function to find maximal matching prefixes of strings. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_FIND_MATCH_LENGTH_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_FIND_MATCH_LENGTH_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Separate implementation for little-endian 64-bit targets, for speed. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_TZCNT64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>BROTLI_64_BITS</name> <operator>&amp;&amp;</operator> <name>BROTLI_LITTLE_ENDIAN</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name></type> <name>FindMatchLengthWithLimit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>s1</name></decl></parameter>,
                                                     <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>s2</name></decl></parameter>,
                                                     <parameter><decl><type><name>size_t</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>matched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>limit2</name> <init>= <expr><operator>(</operator><name>limit</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* + 1 is for pre-decrement in while */</comment>
  <while>while <condition>(<expr><call><name>BROTLI_PREDICT_TRUE</name><argument_list>(<argument><expr><operator>--</operator><name>limit2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>BROTLI_PREDICT_FALSE</name><argument_list>(<argument><expr><call><name>BROTLI_UNALIGNED_LOAD64LE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>==</operator>
                      <call><name>BROTLI_UNALIGNED_LOAD64LE</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>matched</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>s2</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>matched</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><call><name>BROTLI_UNALIGNED_LOAD64LE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>^</operator>
          <call><name>BROTLI_UNALIGNED_LOAD64LE</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>matched</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>matching_bits</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>BROTLI_TZCNT64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>matched</name> <operator>+=</operator> <name>matching_bits</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
      <return>return <expr><name>matched</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>limit</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* + 1 is for pre-decrement in while */</comment>
  <while>while <condition>(<expr><operator>--</operator><name>limit</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>BROTLI_PREDICT_TRUE</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>matched</name></expr>]</index></name> <operator>==</operator> <operator>*</operator><name>s2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>s2</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>matched</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>matched</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>matched</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>size_t</name></type> <name>FindMatchLengthWithLimit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>s1</name></decl></parameter>,
                                                     <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>s2</name></decl></parameter>,
                                                     <parameter><decl><type><name>size_t</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>matched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>s2_limit</name> <init>= <expr><name>s2</name> <operator>+</operator> <name>limit</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>s2_ptr</name> <init>= <expr><name>s2</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Find out how long the match is. We loop over the data 32 bits at a
     time until we find a 32-bit block that doesn't match; then we find
     the first non-matching bit and use that to calculate the total
     length of the match. */</comment>
  <while>while <condition>(<expr><name>s2_ptr</name> <operator>&lt;=</operator> <name>s2_limit</name> <operator>-</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
         <call><name>BrotliUnalignedRead32</name><argument_list>(<argument><expr><name>s2_ptr</name></expr></argument>)</argument_list></call> <operator>==</operator>
         <call><name>BrotliUnalignedRead32</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>matched</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>s2_ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>matched</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <while>while <condition>(<expr><operator>(</operator><name>s2_ptr</name> <operator>&lt;</operator> <name>s2_limit</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s1</name><index>[<expr><name>matched</name></expr>]</index></name> <operator>==</operator> <operator>*</operator><name>s2_ptr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>s2_ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>matched</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>matched</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_FIND_MATCH_LENGTH_H_ */</comment>
</unit>
