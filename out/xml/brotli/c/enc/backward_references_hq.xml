<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/backward_references_hq.h"><comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Function to find backward reference copies. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_BACKWARD_REFERENCES_HQ_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_BACKWARD_REFERENCES_HQ_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/dictionary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quality.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliCreateZopfliBackwardReferences</name><parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>num_bytes</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ringbuffer_mask</name></decl></parameter>,
    <parameter><decl><type><name>ContextLut</name></type> <name>literal_context_lut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
    <parameter><decl><type><name>Hasher</name><modifier>*</modifier></type> <name>hasher</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>dist_cache</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>last_insert_len</name></decl></parameter>,
    <parameter><decl><type><name>Command</name><modifier>*</modifier></type> <name>commands</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>num_commands</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>num_literals</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliCreateHqZopfliBackwardReferences</name><parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>num_bytes</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ringbuffer_mask</name></decl></parameter>,
    <parameter><decl><type><name>ContextLut</name></type> <name>literal_context_lut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
    <parameter><decl><type><name>Hasher</name><modifier>*</modifier></type> <name>hasher</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>dist_cache</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>last_insert_len</name></decl></parameter>,
    <parameter><decl><type><name>Command</name><modifier>*</modifier></type> <name>commands</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>num_commands</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>num_literals</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>ZopfliNode</name> <block>{
  <comment type="block">/* Best length to get up to this byte (not including this byte itself)
     highest 7 bit is used to reconstruct the length code. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name></decl>;</decl_stmt>
  <comment type="block">/* Distance associated with the length. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>distance</name></decl>;</decl_stmt>
  <comment type="block">/* Number of literal inserts before this copy; highest 5 bits contain
     distance short code + 1 (or zero if no short code). */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>dcode_insert_length</name></decl>;</decl_stmt>

  <comment type="block">/* This union holds information used by dynamic-programming. During forward
     pass |cost| it used to store the goal function. When node is processed its
     |cost| is invalidated in favor of |shortcut|. On path back-tracing pass
     |next| is assigned the offset to next node on the path. */</comment>
  <union>union <block>{
    <comment type="block">/* Smallest cost to get to this byte from the beginning, as found so far. */</comment>
    <decl_stmt><decl><type><name>float</name></type> <name>cost</name></decl>;</decl_stmt>
    <comment type="block">/* Offset to the next node on the path. Equals to command_length() of the
       next node on the path. For last node equals to BROTLI_UINT32_MAX */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>next</name></decl>;</decl_stmt>
    <comment type="block">/* Node position that provides next distance for distance cache. */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>shortcut</name></decl>;</decl_stmt>
  }</block> <decl><name>u</name></decl>;</union>
}</block></struct></type> <name>ZopfliNode</name>;</typedef>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliInitZopfliNodes</name><parameter_list>(<parameter><decl><type><name>ZopfliNode</name><modifier>*</modifier></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Computes the shortest path of commands from position to at most
   position + num_bytes.

   On return, path-&gt;size() is the number of commands found and path[i] is the
   length of the i-th command (copy length plus insert length).
   Note that the sum of the lengths of all commands can be less than num_bytes.

   On return, the nodes[0..num_bytes] array will have the following
   "ZopfliNode array invariant":
   For each i in [1..num_bytes], if nodes[i].cost &lt; kInfinity, then
     (1) nodes[i].copy_length() &gt;= 2
     (2) nodes[i].command_length() &lt;= i and
     (3) nodes[i - nodes[i].command_length()].cost &lt; kInfinity */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>size_t</name></type> <name>BrotliZopfliComputeShortestPath</name><parameter_list>(
    <parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_bytes</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ringbuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ringbuffer_mask</name></decl></parameter>,
    <parameter><decl><type><name>ContextLut</name></type> <name>literal_context_lut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type> <name>dist_cache</name></decl></parameter>, <parameter><decl><type><name>Hasher</name><modifier>*</modifier></type> <name>hasher</name></decl></parameter>, <parameter><decl><type><name>ZopfliNode</name><modifier>*</modifier></type> <name>nodes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliZopfliCreateCommands</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>block_start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ZopfliNode</name><modifier>*</modifier></type> <name>nodes</name></decl></parameter>,
    <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>dist_cache</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>last_insert_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
    <parameter><decl><type><name>Command</name><modifier>*</modifier></type> <name>commands</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>num_literals</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_BACKWARD_REFERENCES_HQ_H_ */</comment>
</unit>
