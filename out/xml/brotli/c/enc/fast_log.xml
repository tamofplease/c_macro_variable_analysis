<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/fast_log.h"><comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Utilities for fast computation of logarithms. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_FAST_LOG_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_FAST_LOG_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>uint32_t</name></type> <name>Log2FloorNonZero</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_BSR32</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <return>return <expr><call><name>BROTLI_BSR32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>result</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_LOG2_TABLE_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<comment type="block">/* A lookup table for small values of log2(int) to be used in entropy
   computation. */</comment>
<decl_stmt><decl><type><name>BROTLI_INTERNAL</name> <specifier>extern</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>kBrotliLog2Table</name><index>[<expr><name>BROTLI_LOG2_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* Visual Studio 2012 and Android API levels &lt; 18 do not have the log2()
 * function defined, so we use log() and a multiplication instead. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_HAVE_LOG2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;=</operator> <literal type="number">1700</literal><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID_API__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__ANDROID_API__</name> <operator>&lt;</operator> <literal type="number">18</literal><operator>)</operator><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HAVE_LOG2</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_HAVE_LOG2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_2_INV</name></cpp:macro> <cpp:value>1.4426950408889634</cpp:value></cpp:define>

<comment type="block">/* Faster logarithm for small integers, with the property of log2(0) == 0. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>double</name></type> <name>FastLog2</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>BROTLI_LOG2_TABLE_SIZE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>kBrotliLog2Table</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>BROTLI_HAVE_LOG2</name><operator>)</operator></expr></cpp:if>
  <return>return <expr><call><name>log</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>LOG_2_INV</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>log2</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_FAST_LOG_H_ */</comment>
</unit>
