<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/prefix.h"><comment type="block">/* Copyright 2013 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Functions for encoding of integers into prefix codes the amount of extra
   bits, and the actual values of the extra bits. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_PREFIX_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_PREFIX_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fast_log.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Here distance_code is an intermediate code, i.e. one of the special codes or
   the actual distance increased by BROTLI_NUM_DISTANCE_SHORT_CODES - 1. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_INLINE</name> <name>void</name></type> <name>PrefixEncodeCopyDistance</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>distance_code</name></decl></parameter>,
                                                   <parameter><decl><type><name>size_t</name></type> <name>num_direct_codes</name></decl></parameter>,
                                                   <parameter><decl><type><name>size_t</name></type> <name>postfix_bits</name></decl></parameter>,
                                                   <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>code</name></decl></parameter>,
                                                   <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>extra_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>distance_code</name> <operator>&lt;</operator> <name>BROTLI_NUM_DISTANCE_SHORT_CODES</name> <operator>+</operator> <name>num_direct_codes</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>code</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>distance_code</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>extra_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>dist</name> <init>= <expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>postfix_bits</name> <operator>+</operator> <literal type="number">2u</literal><operator>)</operator><operator>)</operator> <operator>+</operator>
        <operator>(</operator><name>distance_code</name> <operator>-</operator> <name>BROTLI_NUM_DISTANCE_SHORT_CODES</name> <operator>-</operator> <name>num_direct_codes</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bucket</name> <init>= <expr><call><name>Log2FloorNonZero</name><argument_list>(<argument><expr><name>dist</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>postfix_mask</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>postfix_bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>postfix</name> <init>= <expr><name>dist</name> <operator>&amp;</operator> <name>postfix_mask</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>prefix</name> <init>= <expr><operator>(</operator><name>dist</name> <operator>&gt;&gt;</operator> <name>bucket</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>prefix</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>bucket</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nbits</name> <init>= <expr><name>bucket</name> <operator>-</operator> <name>postfix_bits</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>code</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>nbits</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator>
        <operator>(</operator><name>BROTLI_NUM_DISTANCE_SHORT_CODES</name> <operator>+</operator> <name>num_direct_codes</name> <operator>+</operator>
         <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>nbits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>prefix</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>postfix_bits</name><operator>)</operator> <operator>+</operator> <name>postfix</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>extra_bits</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>dist</name> <operator>-</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>postfix_bits</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_PREFIX_H_ */</comment>
</unit>
