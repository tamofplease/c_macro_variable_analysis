<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/enc/brotli_bit_stream.h"><comment type="block">/* Copyright 2014 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Functions to convert brotli-related data structures into the
   brotli bit stream. The functions here operate under
   assumption that there is enough space in the storage, i.e., there are
   no out-of-range checks anywhere.

   These functions do bit addressing into a byte array. The byte array
   is called "storage" and the index to the bit is called storage_ix
   in function arguments. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_ENC_BROTLI_BIT_STREAM_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_ENC_BROTLI_BIT_STREAM_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entropy_encode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"metablock.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* All Store functions here will use a storage_ix, which is always the bit
   position for the current storage. */</comment>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliStoreHuffmanTree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>depths</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>,
    <parameter><decl><type><name>HuffmanTree</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>storage_ix</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliBuildAndStoreHuffmanTreeFast</name><parameter_list>(
    <parameter><decl><type><name>HuffmanTree</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>histogram</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>histogram_total</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_bits</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>storage_ix</name></decl></parameter>,
    <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* REQUIRES: length &gt; 0 */</comment>
<comment type="block">/* REQUIRES: length &lt;= (1 &lt;&lt; 24) */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliStoreMetaBlock</name><parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>start_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mask</name></decl></parameter>,
    <parameter><decl><type><name>uint8_t</name></type> <name>prev_byte</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>prev_byte2</name></decl></parameter>, <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>is_last</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>ContextType</name></type> <name>literal_context_mode</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>Command</name><modifier>*</modifier></type> <name>commands</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n_commands</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MetaBlockSplit</name><modifier>*</modifier></type> <name>mb</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>storage_ix</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Stores the meta-block without doing any block splitting, just collects
   one histogram per block category and uses that for entropy coding.
   REQUIRES: length &gt; 0
   REQUIRES: length &lt;= (1 &lt;&lt; 24) */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliStoreMetaBlockTrivial</name><parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>start_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mask</name></decl></parameter>,
    <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>is_last</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>Command</name><modifier>*</modifier></type> <name>commands</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n_commands</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>storage_ix</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Same as above, but uses static prefix codes for histograms with a only a few
   symbols, and uses static code length prefix codes for all other histograms.
   REQUIRES: length &gt; 0
   REQUIRES: length &lt;= (1 &lt;&lt; 24) */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliStoreMetaBlockFast</name><parameter_list>(<parameter><decl><type><name>MemoryManager</name><modifier>*</modifier></type> <name>m</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>start_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mask</name></decl></parameter>,
    <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>is_last</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BrotliEncoderParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>Command</name><modifier>*</modifier></type> <name>commands</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n_commands</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>storage_ix</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* This is for storing uncompressed blocks (simple raw storage of
   bytes-as-bytes).
   REQUIRES: length &gt; 0
   REQUIRES: length &lt;= (1 &lt;&lt; 24) */</comment>
<function_decl><type><name>BROTLI_INTERNAL</name> <name>void</name></type> <name>BrotliStoreUncompressedMetaBlock</name><parameter_list>(
    <parameter><decl><type><name>BROTLI_BOOL</name></type> <name>is_final_block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>input</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>storage_ix</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier> <name>BROTLI_RESTRICT</name></type> <name>storage</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROTLI_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>GetBlockLengthPrefixCodeForTest</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_ENC_BROTLI_BIT_STREAM_H_ */</comment>
</unit>
