<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/common/transform.h"><comment type="block">/* transforms is a part of ABI, but not API.

   It means that there are some functions that are supposed to be in "common"
   library, but header itself is not placed into include/brotli. This way,
   aforementioned functions will be available only to brotli internals.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_COMMON_TRANSFORM_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_COMMON_TRANSFORM_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/port.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>BrotliWordTransformType</name> <block>{
  <decl><name>BROTLI_TRANSFORM_IDENTITY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_LAST_1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_LAST_2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_LAST_3</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_LAST_4</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_LAST_5</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_LAST_6</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_LAST_7</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_LAST_8</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_LAST_9</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_UPPERCASE_FIRST</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_UPPERCASE_ALL</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_FIRST_1</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_FIRST_2</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_FIRST_3</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_FIRST_4</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_FIRST_5</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_FIRST_6</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_FIRST_7</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_FIRST_8</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_OMIT_FIRST_9</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_SHIFT_FIRST</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
  <decl><name>BROTLI_TRANSFORM_SHIFT_ALL</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,
  <decl><name>BROTLI_NUM_TRANSFORM_TYPES</name></decl>  <comment type="block">/* Counts transforms, not a transform itself. */</comment>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TRANSFORMS_MAX_CUT_OFF</name></cpp:macro> <cpp:value>BROTLI_TRANSFORM_OMIT_LAST_9</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>BrotliTransforms</name> <block>{
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>prefix_suffix_size</name></decl>;</decl_stmt>
  <comment type="block">/* Last character must be null, so prefix_suffix_size must be at least 1. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>prefix_suffix</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name><modifier>*</modifier></type> <name>prefix_suffix_map</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>num_transforms</name></decl>;</decl_stmt>
  <comment type="block">/* Each entry is a [prefix_id, transform, suffix_id] triplet. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>transforms</name></decl>;</decl_stmt>
  <comment type="block">/* Shift for BROTLI_TRANSFORM_SHIFT_FIRST and BROTLI_TRANSFORM_SHIFT_ALL,
     must be NULL if and only if no such transforms are present. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>params</name></decl>;</decl_stmt>
  <comment type="block">/* Indices of transforms like ["", BROTLI_TRANSFORM_OMIT_LAST_#, ""].
     0-th element corresponds to ["", BROTLI_TRANSFORM_IDENTITY, ""].
     -1, if cut-off transform does not exist. */</comment>
  <decl_stmt><decl><type><name>int16_t</name></type> <name><name>cutOffTransforms</name><index>[<expr><name>BROTLI_TRANSFORMS_MAX_CUT_OFF</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>BrotliTransforms</name>;</typedef>

<comment type="block">/* T is BrotliTransforms*; result is uint8_t. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TRANSFORM_PREFIX_ID</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T)-&gt;transforms[((I) * 3) + 0])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TRANSFORM_TYPE</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>((T)-&gt;transforms[((I) * 3) + 1])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TRANSFORM_SUFFIX_ID</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T)-&gt;transforms[((I) * 3) + 2])</cpp:value></cpp:define>

<comment type="block">/* T is BrotliTransforms*; result is const uint8_t*. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TRANSFORM_PREFIX</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;(T)-&gt;prefix_suffix[ \
    (T)-&gt;prefix_suffix_map[BROTLI_TRANSFORM_PREFIX_ID(T, I)]])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_TRANSFORM_SUFFIX</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;(T)-&gt;prefix_suffix[ \
    (T)-&gt;prefix_suffix_map[BROTLI_TRANSFORM_SUFFIX_ID(T, I)]])</cpp:value></cpp:define>

<function_decl><type><name>BROTLI_COMMON_API</name> <specifier>const</specifier> <name>BrotliTransforms</name><modifier>*</modifier></type> <name>BrotliGetTransforms</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BROTLI_COMMON_API</name> <name>int</name></type> <name>BrotliTransformDictionaryWord</name><parameter_list>(
    <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>word</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>BrotliTransforms</name><modifier>*</modifier></type> <name>transforms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>transform_idx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_COMMON_TRANSFORM_H_ */</comment>
</unit>
