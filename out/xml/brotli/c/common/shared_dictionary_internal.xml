<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/common/shared_dictionary_internal.h"><comment type="block">/* Copyright 2017 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* (Transparent) Shared Dictionary definition. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BROTLI_COMMON_SHARED_DICTIONARY_INTERNAL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_COMMON_SHARED_DICTIONARY_INTERNAL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/shared_dictionary.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dictionary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>BrotliSharedDictionaryStruct</name> <block>{
  <comment type="block">/* LZ77 prefixes (compound dictionary). */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>num_prefix</name></decl>;</decl_stmt>  <comment type="block">/* max SHARED_BROTLI_MAX_COMPOUND_DICTS */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name><name>prefix_size</name><index>[<expr><name>SHARED_BROTLI_MAX_COMPOUND_DICTS</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name><name>prefix</name><index>[<expr><name>SHARED_BROTLI_MAX_COMPOUND_DICTS</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* If set, the context map is used to select word and transform list from 64
     contexts, if not set, the context map is not used and only words[0] and
     transforms[0] are to be used. */</comment>
  <decl_stmt><decl><type><name>BROTLI_BOOL</name></type> <name>context_based</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>context_map</name><index>[<expr><name>SHARED_BROTLI_NUM_DICTIONARY_CONTEXTS</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Amount of word_list+transform_list combinations. */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>num_dictionaries</name></decl>;</decl_stmt>

  <comment type="block">/* Must use num_dictionaries values. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>BrotliDictionary</name><modifier>*</modifier></type> <name><name>words</name><index>[<expr><name>SHARED_BROTLI_NUM_DICTIONARY_CONTEXTS</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Must use num_dictionaries values. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>BrotliTransforms</name><modifier>*</modifier></type> <name><name>transforms</name><index>[<expr><name>SHARED_BROTLI_NUM_DICTIONARY_CONTEXTS</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Amount of custom word lists. May be 0 if only Brotli's built-in is used */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>num_word_lists</name></decl>;</decl_stmt>

  <comment type="block">/* Contents of the custom words lists. Must be NULL if num_word_lists is 0. */</comment>
  <decl_stmt><decl><type><name>BrotliDictionary</name><modifier>*</modifier></type> <name>words_instances</name></decl>;</decl_stmt>

  <comment type="block">/* Amount of custom transform lists. May be 0 if only Brotli's built-in is
     used */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>num_transform_lists</name></decl>;</decl_stmt>

  <comment type="block">/* Contents of the custom transform lists. Must be NULL if num_transform_lists
     is 0. */</comment>
  <decl_stmt><decl><type><name>BrotliTransforms</name><modifier>*</modifier></type> <name>transforms_instances</name></decl>;</decl_stmt>

  <comment type="block">/* Concatenated prefix_suffix_maps of the custom transform lists. Must be NULL
     if num_transform_lists is 0. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>prefix_suffix_maps</name></decl>;</decl_stmt>

  <comment type="block">/* Memory management */</comment>
  <decl_stmt><decl><type><name>brotli_alloc_func</name></type> <name>alloc_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>brotli_free_func</name></type> <name>free_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>memory_manager_opaque</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>BrotliSharedDictionaryStruct</name></name></type> <name>BrotliSharedDictionaryInternal</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BrotliSharedDictionary</name></cpp:macro> <cpp:value>BrotliSharedDictionaryInternal</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* BROTLI_COMMON_SHARED_DICTIONARY_INTERNAL_H_ */</comment>
</unit>
