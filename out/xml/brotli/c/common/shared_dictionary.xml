<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/brotli/c/common/shared_dictionary.c"><comment type="block">/* Copyright 2017 Google Inc. All Rights Reserved.

   Distributed under MIT license.
   See file LICENSE for detail or copy at https://opensource.org/licenses/MIT
*/</comment>

<comment type="block">/* Shared Dictionary definition and utilities. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/shared_dictionary.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>  <comment type="block">/* malloc, free */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dictionary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shared_dictionary_internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_NUM_ENCODED_LENGTHS</name></cpp:macro> <cpp:value>(SHARED_BROTLI_MAX_DICTIONARY_WORD_LENGTH \
    - SHARED_BROTLI_MIN_DICTIONARY_WORD_LENGTH + 1)</cpp:value></cpp:define>

<comment type="block">/* Max allowed by spec */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROTLI_MAX_SIZE_BITS</name></cpp:macro> <cpp:value>15u</cpp:value></cpp:define>

<comment type="block">/* Returns BROTLI_TRUE on success, BROTLI_FALSE on failure. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_BOOL</name></type> <name>ReadBool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>encoded</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pos</name></decl></parameter>,
    <parameter><decl><type><name>BROTLI_BOOL</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>position</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* past file end */</comment>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>encoded</name><index>[<expr><name>position</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* invalid bool */</comment>
  <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>TO_BROTLI_BOOL</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
  <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>  <comment type="block">/* success */</comment>
</block_content>}</block></function>

<comment type="block">/* Returns BROTLI_TRUE on success, BROTLI_FALSE on failure. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_BOOL</name></type> <name>ReadUint8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>encoded</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pos</name></decl></parameter>,
    <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>position</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>position</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>encoded</name><index>[<expr><name>position</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
  <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns BROTLI_TRUE on success, BROTLI_FALSE on failure. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_BOOL</name></type> <name>ReadUint16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>encoded</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pos</name></decl></parameter>,
    <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>position</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>position</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>BROTLI_UNALIGNED_LOAD16LE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoded</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>position</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
  <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Reads a varint into a uint32_t, and returns error if it's too large */</comment>
<comment type="block">/* Returns BROTLI_TRUE on success, BROTLI_FALSE on failure. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_BOOL</name></type> <name>ReadVarint32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>encoded</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>byte</name> <operator>=</operator> <name><name>encoded</name><index>[<expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>byte</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>result</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>num</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_TRUE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Returns the total length of word list. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>BrotliSizeBitsToOffsets</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>size_bits_by_length</name></decl></parameter>,
    <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>offsets_by_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SHARED_BROTLI_MAX_DICTIONARY_WORD_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>offsets_by_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>size_bits_by_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>i</name> <operator>&lt;&lt;</operator> <name><name>size_bits_by_length</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_BOOL</name></type> <name>ParseWordList</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>encoded</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>BrotliDictionary</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>position</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>position</name> <operator>+</operator> <name>BROTLI_NUM_ENCODED_LENGTHS</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>size_bits_by_length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SHARED_BROTLI_MIN_DICTIONARY_WORD_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>size_bits_by_length</name></name> <operator>+</operator> <name>SHARED_BROTLI_MIN_DICTIONARY_WORD_LENGTH</name></expr></argument>,
      <argument><expr><operator>&amp;</operator><name><name>encoded</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><name>BROTLI_NUM_ENCODED_LENGTHS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SHARED_BROTLI_MIN_DICTIONARY_WORD_LENGTH</name></expr>;</init>
      <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SHARED_BROTLI_MAX_DICTIONARY_WORD_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>size_bits_by_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>BROTLI_MAX_SIZE_BITS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>position</name> <operator>+=</operator> <name>BROTLI_NUM_ENCODED_LENGTHS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>BrotliSizeBitsToOffsets</name><argument_list>(
      <argument><expr><name><name>out</name><operator>-&gt;</operator><name>size_bits_by_length</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>offsets_by_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>encoded</name><index>[<expr><name>position</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>position</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
  <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Computes the cutOffTransforms of a BrotliTransforms which already has the
   transforms data correctly filled in. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ComputeCutoffTransforms</name><parameter_list>(<parameter><decl><type><name>BrotliTransforms</name><modifier>*</modifier></type> <name>transforms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BROTLI_TRANSFORMS_MAX_CUT_OFF</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>transforms</name><operator>-&gt;</operator><name>cutOffTransforms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transforms</name><operator>-&gt;</operator><name>num_transforms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>prefix</name> <init>= <expr><call><name>BROTLI_TRANSFORM_PREFIX</name><argument_list>(<argument><expr><name>transforms</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name> <init>= <expr><call><name>BROTLI_TRANSFORM_TYPE</name><argument_list>(<argument><expr><name>transforms</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>suffix</name> <init>= <expr><call><name>BROTLI_TRANSFORM_SUFFIX</name><argument_list>(<argument><expr><name>transforms</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <name>BROTLI_TRANSFORM_OMIT_LAST_9</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>prefix</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>suffix</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name><name>transforms</name><operator>-&gt;</operator><name>cutOffTransforms</name><index>[<expr><name>type</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>transforms</name><operator>-&gt;</operator><name>cutOffTransforms</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_BOOL</name></type> <name>ParsePrefixSuffixTable</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>encoded</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>BrotliTransforms</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>out_table</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>out_table_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>position</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>stringlet_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* NUM_PREFIX_SUFFIX */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>data_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* PREFIX_SUFFIX_LENGTH */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadUint16</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>prefix_suffix_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>data_length</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>prefix_suffix_size</name></name></expr>;</expr_stmt>

  <comment type="block">/* Must at least have space for null terminator. */</comment>
  <if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>prefix_suffix</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>encoded</name><index>[<expr><name>position</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>position</name> <operator>+</operator> <name>data_length</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name>BROTLI_TRUE</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* STRING_LENGTH */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>stringlet_len</name> <init>= <expr><name><name>encoded</name><index>[<expr><name>position</name> <operator>+</operator> <name>offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>out_table</name><index>[<expr><name>stringlet_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>stringlet_count</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>stringlet_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <name>data_length</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>stringlet_count</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>stringlet_len</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>data_length</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>position</name> <operator>+=</operator> <name>data_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>out_table_size</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>stringlet_count</name></expr>;</expr_stmt>
  <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_BOOL</name></type> <name>ParseTransformsList</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>encoded</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>BrotliTransforms</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>prefix_suffix_table</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>prefix_suffix_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BROTLI_BOOL</name></type> <name>has_params</name> <init>= <expr><name>BROTLI_FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BROTLI_BOOL</name></type> <name>prefix_suffix_ok</name> <init>= <expr><name>BROTLI_FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>position</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>stringlet_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>prefix_suffix_ok</name> <operator>=</operator> <call><name>ParsePrefixSuffixTable</name><argument_list>(
      <argument><expr><name>size</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>prefix_suffix_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stringlet_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>prefix_suffix_ok</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>prefix_suffix_map</name></name> <operator>=</operator> <name>prefix_suffix_table</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>prefix_suffix_count</name> <operator>=</operator> <name>stringlet_cnt</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>num_transforms</name></name> <operator>=</operator> <name><name>encoded</name><index>[<expr><name>position</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>transforms</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>encoded</name><index>[<expr><name>position</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>position</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>num_transforms</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
  <comment type="block">/* Check for errors and read extra parameters. */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>num_transforms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>prefix_id</name> <init>= <expr><call><name>BROTLI_TRANSFORM_PREFIX_ID</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name> <init>= <expr><call><name>BROTLI_TRANSFORM_TYPE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>suffix_id</name> <init>= <expr><call><name>BROTLI_TRANSFORM_SUFFIX_ID</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>prefix_id</name> <operator>&gt;=</operator> <name>stringlet_cnt</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>BROTLI_NUM_TRANSFORM_TYPES</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>suffix_id</name> <operator>&gt;=</operator> <name>stringlet_cnt</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BROTLI_TRANSFORM_SHIFT_FIRST</name> <operator>||</operator>
        <name>type</name> <operator>==</operator> <name>BROTLI_TRANSFORM_SHIFT_ALL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>has_params</name> <operator>=</operator> <name>BROTLI_TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>has_params</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>encoded</name><index>[<expr><name>position</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>position</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>num_transforms</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>num_transforms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name> <init>= <expr><call><name>BROTLI_TRANSFORM_TYPE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>BROTLI_TRANSFORM_SHIFT_FIRST</name> <operator>&amp;&amp;</operator>
          <name>type</name> <operator>!=</operator> <name>BROTLI_TRANSFORM_SHIFT_ALL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>params</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>out</name><operator>-&gt;</operator><name>params</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>ComputeCutoffTransforms</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
  <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_BOOL</name></type> <name>DryParseDictionary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>encoded</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>num_prefix</name></decl></parameter>, <parameter><decl><type><name>BROTLI_BOOL</name><modifier>*</modifier></type> <name>is_custom_static_dict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>chunk_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>num_word_lists</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>num_transform_lists</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>is_custom_static_dict</name> <operator>=</operator> <name>BROTLI_FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>num_prefix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* Skip magic header bytes. */</comment>
  <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

  <comment type="block">/* LZ77_DICTIONARY_LENGTH */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadVarint32</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunk_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* This limitation is not specified but the 32-bit Brotli decoder for now */</comment>
    <if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&gt;</operator> <literal type="number">1073741823</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>num_prefix</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>chunk_size</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>chunk_size</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadUint8</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_word_lists</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadUint8</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_transform_lists</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>num_word_lists</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>num_transform_lists</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>is_custom_static_dict</name> <operator>=</operator> <name>BROTLI_TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BROTLI_BOOL</name></type> <name>ParseDictionary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>encoded</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
    <parameter><decl><type><name>BrotliSharedDictionary</name><modifier>*</modifier></type> <name>dict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>chunk_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>total_prefix_suffix_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name><name>trasform_list_start</name><index>[<expr><name>SHARED_BROTLI_NUM_DICTIONARY_CONTEXTS</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name><name>temporary_prefix_suffix_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Skip magic header bytes. */</comment>
  <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

  <comment type="block">/* LZ77_DICTIONARY_LENGTH */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadVarint32</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunk_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>chunk_size</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>prefix_size</name><index>[<expr><name><name>dict</name><operator>-&gt;</operator><name>num_prefix</name></name></expr>]</index></name> <operator>=</operator> <name>chunk_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>prefix</name><index>[<expr><name><name>dict</name><operator>-&gt;</operator><name>num_prefix</name></name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>encoded</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>num_prefix</name></name><operator>++</operator></expr>;</expr_stmt>
    <comment type="block">/* LZ77_DICTIONARY_LENGTH bytes. */</comment>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>chunk_size</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* NUM_WORD_LISTS */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadUint8</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>num_word_lists</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>num_word_lists</name></name> <operator>&gt;</operator> <name>SHARED_BROTLI_NUM_DICTIONARY_CONTEXTS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>num_word_lists</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>words_instances</name></name> <operator>=</operator> <operator>(</operator><name>BrotliDictionary</name><operator>*</operator><operator>)</operator><call><name><name>dict</name><operator>-&gt;</operator><name>alloc_func</name></name><argument_list>(
        <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>memory_manager_opaque</name></name></expr></argument>,
        <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>num_word_lists</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dict</name><operator>-&gt;</operator><name>words_instances</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dict</name><operator>-&gt;</operator><name>words_instances</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* OOM */</comment>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dict</name><operator>-&gt;</operator><name>num_word_lists</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseWordList</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>words_instances</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* NUM_TRANSFORM_LISTS */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadUint8</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>num_transform_lists</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>num_transform_lists</name></name> <operator>&gt;</operator> <name>SHARED_BROTLI_NUM_DICTIONARY_CONTEXTS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>num_transform_lists</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>transforms_instances</name></name> <operator>=</operator> <operator>(</operator><name>BrotliTransforms</name><operator>*</operator><operator>)</operator><call><name><name>dict</name><operator>-&gt;</operator><name>alloc_func</name></name><argument_list>(
        <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>memory_manager_opaque</name></name></expr></argument>,
        <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>num_transform_lists</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dict</name><operator>-&gt;</operator><name>transforms_instances</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dict</name><operator>-&gt;</operator><name>transforms_instances</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* OOM */</comment>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dict</name><operator>-&gt;</operator><name>num_transform_lists</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>BROTLI_BOOL</name></type> <name>ok</name> <init>= <expr><name>BROTLI_FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>prefix_suffix_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>trasform_list_start</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>transforms_instances</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prefix_suffix_map</name> <operator>=</operator>
        <name>temporary_prefix_suffix_table</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ParseTransformsList</name><argument_list>(
        <argument><expr><name>size</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>transforms_instances</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
        <argument><expr><name>temporary_prefix_suffix_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefix_suffix_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>total_prefix_suffix_count</name> <operator>+=</operator> <name>prefix_suffix_count</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>total_prefix_suffix_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>prefix_suffix_maps</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><call><name><name>dict</name><operator>-&gt;</operator><name>alloc_func</name></name><argument_list>(
        <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>memory_manager_opaque</name></name></expr></argument>,
        <argument><expr><name>total_prefix_suffix_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dict</name><operator>-&gt;</operator><name>prefix_suffix_maps</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dict</name><operator>-&gt;</operator><name>prefix_suffix_maps</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* OOM */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>total_prefix_suffix_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dict</name><operator>-&gt;</operator><name>num_transform_lists</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>prefix_suffix_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>position</name> <init>= <expr><name><name>trasform_list_start</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>prefix_suffix_map</name> <init>=
      <expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>prefix_suffix_maps</name><index>[<expr><name>total_prefix_suffix_count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BROTLI_BOOL</name></type> <name>ok</name> <init>= <expr><call><name>ParsePrefixSuffixTable</name><argument_list>(
        <argument><expr><name>size</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>transforms_instances</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
        <argument><expr><name>prefix_suffix_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefix_suffix_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>transforms_instances</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prefix_suffix_map</name> <operator>=</operator> <name>prefix_suffix_map</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>total_prefix_suffix_count</name> <operator>+=</operator> <name>prefix_suffix_count</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>num_word_lists</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>dict</name><operator>-&gt;</operator><name>num_transform_lists</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadUint8</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>num_dictionaries</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>num_dictionaries</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
        <name><name>dict</name><operator>-&gt;</operator><name>num_dictionaries</name></name> <operator>&gt;</operator> <name>SHARED_BROTLI_NUM_DICTIONARY_CONTEXTS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dict</name><operator>-&gt;</operator><name>num_dictionaries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>words_index</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>transforms_index</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadUint8</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>words_index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>words_index</name> <operator>&gt;</operator> <name><name>dict</name><operator>-&gt;</operator><name>num_word_lists</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadUint8</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transforms_index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>transforms_index</name> <operator>&gt;</operator> <name><name>dict</name><operator>-&gt;</operator><name>num_transform_lists</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>words_index</name> <operator>==</operator> <name><name>dict</name><operator>-&gt;</operator><name>num_word_lists</name></name></expr> ?</condition><then>
          <expr><call><name>BrotliGetDictionary</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>words_instances</name><index>[<expr><name>words_index</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>transforms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>transforms_index</name> <operator>==</operator> <name><name>dict</name><operator>-&gt;</operator><name>num_transform_lists</name></name></expr> ?</condition><then>
          <expr><call><name>BrotliGetTransforms</name><argument_list>()</argument_list></call></expr></then><else>: <expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>transforms_instances</name><index>[<expr><name>transforms_index</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block">/* CONTEXT_ENABLED */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadBool</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>context_based</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* CONTEXT_MAP */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>context_based</name></name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SHARED_BROTLI_NUM_DICTIONARY_CONTEXTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadUint8</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>context_map</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>context_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>dict</name><operator>-&gt;</operator><name>num_dictionaries</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>context_based</name></name> <operator>=</operator> <name>BROTLI_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>num_dictionaries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BrotliGetDictionary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>transforms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BrotliGetTransforms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Decodes shared dictionary and verifies correctness.
   Returns BROTLI_TRUE if dictionary is valid, BROTLI_FALSE otherwise.
   The BrotliSharedDictionary must already have been initialized. If the
   BrotliSharedDictionary already contains data, compound dictionaries
   will be appended, but an error will be returned if it already has
   custom words or transforms.
   TODO(lode): link to RFC for shared brotli once published. */</comment>
<function><type><specifier>static</specifier> <name>BROTLI_BOOL</name></type> <name>DecodeSharedDictionary</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>encoded</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BrotliSharedDictionary</name><modifier>*</modifier></type> <name>dict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>num_prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BROTLI_BOOL</name></type> <name>is_custom_static_dict</name> <init>= <expr><name>BROTLI_FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BROTLI_BOOL</name></type> <name>has_custom_static_dict</name> <init>=
      <expr><name><name>dict</name><operator>-&gt;</operator><name>num_word_lists</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>dict</name><operator>-&gt;</operator><name>num_transform_lists</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check magic header bytes. */</comment>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>encoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x91</literal> <operator>||</operator> <name><name>encoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DryParseDictionary</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_prefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_custom_static_dict</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>num_prefix</name> <operator>+</operator> <name><name>dict</name><operator>-&gt;</operator><name>num_prefix</name></name> <operator>&gt;</operator> <name>SHARED_BROTLI_MAX_COMPOUND_DICTS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Cannot combine different static dictionaries, only prefix dictionaries */</comment>
  <if_stmt><if>if <condition>(<expr><name>has_custom_static_dict</name> <operator>&amp;&amp;</operator> <name>is_custom_static_dict</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BROTLI_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>ParseDictionary</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>BrotliSharedDictionaryDestroyInstance</name><parameter_list>(
    <parameter><decl><type><name>BrotliSharedDictionary</name><modifier>*</modifier></type> <name>dict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dict</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>brotli_free_func</name></type> <name>free_func</name> <init>= <expr><name><name>dict</name><operator>-&gt;</operator><name>free_func</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name> <init>= <expr><name><name>dict</name><operator>-&gt;</operator><name>memory_manager_opaque</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Cleanup. */</comment>
    <expr_stmt><expr><call><name>free_func</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>words_instances</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free_func</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>transforms_instances</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free_func</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>prefix_suffix_maps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Self-destruction. */</comment>
    <expr_stmt><expr><call><name>free_func</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>BROTLI_BOOL</name></type> <name>BrotliSharedDictionaryAttach</name><parameter_list>(
    <parameter><decl><type><name>BrotliSharedDictionary</name><modifier>*</modifier></type> <name>dict</name></decl></parameter>, <parameter><decl><type><name>BrotliSharedDictionaryType</name></type> <name>type</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>data</name><index>[<expr><call><name>BROTLI_ARRAY_PARAM</name><argument_list>(<argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dict</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BROTLI_SHARED_DICTIONARY_SERIALIZED</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>DecodeSharedDictionary</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>BROTLI_SHARED_DICTIONARY_RAW</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>num_prefix</name></name> <operator>&gt;=</operator> <name>SHARED_BROTLI_MAX_COMPOUND_DICTS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>prefix_size</name><index>[<expr><name><name>dict</name><operator>-&gt;</operator><name>num_prefix</name></name></expr>]</index></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>prefix</name><index>[<expr><name><name>dict</name><operator>-&gt;</operator><name>num_prefix</name></name></expr>]</index></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>num_prefix</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>BROTLI_TRUE</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>BROTLI_FALSE</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>BrotliSharedDictionary</name><modifier>*</modifier></type> <name>BrotliSharedDictionaryCreateInstance</name><parameter_list>(
    <parameter><decl><type><name>brotli_alloc_func</name></type> <name>alloc_func</name></decl></parameter>, <parameter><decl><type><name>brotli_free_func</name></type> <name>free_func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BrotliSharedDictionary</name><modifier>*</modifier></type> <name>dict</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>alloc_func</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>free_func</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dict</name> <operator>=</operator> <operator>(</operator><name>BrotliSharedDictionary</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BrotliSharedDictionary</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>alloc_func</name> <operator>&amp;&amp;</operator> <name>free_func</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dict</name> <operator>=</operator> <operator>(</operator><name>BrotliSharedDictionary</name><operator>*</operator><operator>)</operator><call><name>alloc_func</name><argument_list>(
        <argument><expr><name>opaque</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BrotliSharedDictionary</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* TODO(eustas): explicitly initialize all the fields? */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BrotliSharedDictionary</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>context_based</name></name> <operator>=</operator> <name>BROTLI_FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>num_dictionaries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>num_word_lists</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>num_transform_lists</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BrotliGetDictionary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>transforms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BrotliGetTransforms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>alloc_func</name></name> <operator>=</operator> <ternary><condition><expr><name>alloc_func</name></expr> ?</condition><then> <expr><name>alloc_func</name></expr> </then><else>: <expr><name>BrotliDefaultAllocFunc</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>free_func</name></name> <operator>=</operator> <ternary><condition><expr><name>free_func</name></expr> ?</condition><then> <expr><name>free_func</name></expr> </then><else>: <expr><name>BrotliDefaultFreeFunc</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>memory_manager_opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>

  <return>return <expr><name>dict</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>  <comment type="block">/* extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
