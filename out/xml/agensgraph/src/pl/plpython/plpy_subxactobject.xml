<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/pl/plpython/plpy_subxactobject.c"><comment type="block">/*
 * the PLySubtransaction class
 *
 * src/pl/plpython/plpy_subxactobject.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_subxactobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpython.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>explicit_subtransactions</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PLy_subtransaction_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>subxact</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_subtransaction_enter</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_subtransaction_exit</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>PLy_subtransaction_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"PostgreSQL subtransaction context manager"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>PLy_subtransaction_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"__enter__"</literal></expr>, <expr><name>PLy_subtransaction_enter</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"__exit__"</literal></expr>, <expr><name>PLy_subtransaction_exit</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<comment type="block">/* user-friendly names for Python &lt;2.6 */</comment>
	<expr><block>{<expr><literal type="string">"enter"</literal></expr>, <expr><name>PLy_subtransaction_enter</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"exit"</literal></expr>, <expr><name>PLy_subtransaction_exit</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PLy_SubtransactionType</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
	<operator>.</operator><name>tp_name</name> <operator>=</operator> <literal type="string">"PLySubtransaction"</literal></expr>,
	<expr><operator>.</operator><name>tp_basicsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PLySubtransactionObject</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><operator>.</operator><name>tp_dealloc</name> <operator>=</operator> <name>PLy_subtransaction_dealloc</name></expr>,
	<expr><operator>.</operator><name>tp_flags</name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name> <operator>|</operator> <name>Py_TPFLAGS_BASETYPE</name></expr>,
	<expr><operator>.</operator><name>tp_doc</name> <operator>=</operator> <name>PLy_subtransaction_doc</name></expr>,
	<expr><operator>.</operator><name>tp_methods</name> <operator>=</operator> <name>PLy_subtransaction_methods</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type>
<name>PLy_subtransaction_init_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PLy_SubtransactionType</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not initialize PLy_SubtransactionType"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* s = plpy.subtransaction() */</comment>
<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_subtransaction_new</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PLySubtransactionObject</name> <modifier>*</modifier></type><name>ob</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ob</name> <operator>=</operator> <call><name>PyObject_New</name><argument_list>(<argument><expr><name>PLySubtransactionObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PLy_SubtransactionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ob</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>exited</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <name>ob</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Python requires a dealloc function to be defined */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLy_subtransaction_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>subxact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<comment type="block">/*
 * subxact.__enter__() or subxact.enter()
 *
 * Start an explicit subtransaction.  SPI calls within an explicit
 * subtransaction will not start another one, so you can atomically
 * execute many SPI calls and still get a controllable exception if
 * one of them fails.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_subtransaction_enter</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PLySubtransactionData</name> <modifier>*</modifier></type><name>subxactdata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLySubtransactionObject</name> <modifier>*</modifier></type><name>subxact</name> <init>= <expr><operator>(</operator><name>PLySubtransactionObject</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>subxact</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><literal type="string">"this subtransaction has already been entered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>subxact</name><operator>-&gt;</operator><name>exited</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><literal type="string">"this subtransaction has already been exited"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>subxact</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>subxactdata</name> <operator>=</operator> <operator>(</operator><name>PLySubtransactionData</name> <operator>*</operator><operator>)</operator>
		<call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>,
						   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PLySubtransactionData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>subxactdata</name><operator>-&gt;</operator><name>oldcontext</name></name> <operator>=</operator> <name>oldcontext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>subxactdata</name><operator>-&gt;</operator><name>oldowner</name></name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>BeginInternalSubTransaction</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Be sure that cells of explicit_subtransactions list are long-lived */</comment>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>explicit_subtransactions</name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><name>subxactdata</name></expr></argument>, <argument><expr><name>explicit_subtransactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Caller wants to stay in original memory context */</comment>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * subxact.__exit__(exc_type, exc, tb) or subxact.exit(exc_type, exc, tb)
 *
 * Exit an explicit subtransaction. exc_type is an exception type, exc
 * is the exception object, tb is the traceback.  If exc_type is None,
 * commit the subtransaction, if not abort it.
 *
 * The method signature is chosen to allow subtransaction objects to
 * be used as context managers as described in
 * &lt;http://www.python.org/dev/peps/pep-0343/&gt;.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_subtransaction_exit</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>traceback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLySubtransactionData</name> <modifier>*</modifier></type><name>subxactdata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLySubtransactionObject</name> <modifier>*</modifier></type><name>subxact</name> <init>= <expr><operator>(</operator><name>PLySubtransactionObject</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"OOO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>traceback</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>subxact</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><literal type="string">"this subtransaction has not been entered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>subxact</name><operator>-&gt;</operator><name>exited</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><literal type="string">"this subtransaction has already been exited"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>explicit_subtransactions</name> <operator>==</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><literal type="string">"there is no subtransaction to exit from"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>subxact</name><operator>-&gt;</operator><name>exited</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Abort the inner transaction */</comment>
		<expr_stmt><expr><call><name>RollbackAndReleaseCurrentSubTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>ReleaseCurrentSubTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>subxactdata</name> <operator>=</operator> <operator>(</operator><name>PLySubtransactionData</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>explicit_subtransactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>explicit_subtransactions</name> <operator>=</operator> <call><name>list_delete_first</name><argument_list>(<argument><expr><name>explicit_subtransactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>subxactdata</name><operator>-&gt;</operator><name>oldcontext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <name><name>subxactdata</name><operator>-&gt;</operator><name>oldowner</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>subxactdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
