<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/bin/pg_rewind/parsexlog.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * parsexlog.c
 *	  Functions for reading Write-Ahead-Log
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/rmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogreader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/storage_xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands_xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filemap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_rewind.h"</cpp:file></cpp:include>

<comment type="block">/*
 * RmgrNames is an array of resource manager names, to make error messages
 * a bit nicer.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_RMGR</name><parameter_list>(<parameter><type><name>symname</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>redo</name></type></parameter>,<parameter><type><name>desc</name></type></parameter>,<parameter><type><name>identify</name></type></parameter>,<parameter><type><name>startup</name></type></parameter>,<parameter><type><name>cleanup</name></type></parameter>,<parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>name,</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>RmgrNames</name><index>[<expr><name>RM_MAX_ID</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/rmgrlist.h"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extractPageInfo</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>xlogreadfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>XLogSegNo</name></type> <name>xlogreadsegno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>xlogfpath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>XLogPageReadPrivate</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>restoreCommand</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tliIndex</name></decl>;</decl_stmt>
}</block></struct></type> <name>XLogPageReadPrivate</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>SimpleXLogPageRead</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>xlogreader</name></decl></parameter>,
							   <parameter><decl><type><name>XLogRecPtr</name></type> <name>targetPagePtr</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>reqLen</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>targetRecPtr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>readBuf</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Read WAL from the datadir/pg_wal, starting from 'startpoint' on timeline
 * index 'tliIndex' in target timeline history, until 'endpoint'. Make note of
 * the data blocks touched by the WAL records, and return them in a page map.
 *
 * 'endpoint' is the end of the last record to read. The record starting at
 * 'endpoint' is the first one that is not read.
 */</comment>
<function><type><name>void</name></type>
<name>extractPageMap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>datadir</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>startpoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tliIndex</name></decl></parameter>,
			   <parameter><decl><type><name>XLogRecPtr</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>restoreCommand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecord</name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>xlogreader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>errormsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogPageReadPrivate</name></type> <name>private</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>private</name><operator>.</operator><name>tliIndex</name></name> <operator>=</operator> <name>tliIndex</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>private</name><operator>.</operator><name>restoreCommand</name></name> <operator>=</operator> <name>restoreCommand</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>xlogreader</name> <operator>=</operator> <call><name>XLogReaderAllocate</name><argument_list>(<argument><expr><name>WalSegSz</name></expr></argument>, <argument><expr><name>datadir</name></expr></argument>,
									<argument><expr><call><name>XL_ROUTINE</name><argument_list>(<argument><expr><operator>.</operator><name>page_read</name> <operator>=</operator> <operator>&amp;</operator><name>SimpleXLogPageRead</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>xlogreader</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>XLogBeginRead</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>, <argument><expr><name>startpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>XLogReadRecord</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>record</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>errptr</name> <init>= <expr><name><name>xlogreader</name><operator>-&gt;</operator><name>EndRecPtr</name></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>errormsg</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not read WAL record at %X/%X: %s"</literal></expr></argument>,
						 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>errptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>errptr</name><operator>)</operator></expr></argument>,
						 <argument><expr><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not read WAL record at %X/%X"</literal></expr></argument>,
						 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>errptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>errptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>extractPageInfo</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block> while <condition>(<expr><name><name>xlogreader</name><operator>-&gt;</operator><name>EndRecPtr</name></name> <operator>&lt;</operator> <name>endpoint</name></expr>)</condition>;</do>

	<comment type="block">/*
	 * If 'endpoint' didn't point exactly at a record boundary, the caller
	 * messed up.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>xlogreader</name><operator>-&gt;</operator><name>EndRecPtr</name></name> <operator>!=</operator> <name>endpoint</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"end pointer %X/%X is not a valid end point; expected %X/%X"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>endpoint</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>endpoint</name><operator>)</operator></expr></argument>,
				 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>xlogreader</name><operator>-&gt;</operator><name>EndRecPtr</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator>
				 <operator>(</operator><name><name>xlogreader</name><operator>-&gt;</operator><name>EndRecPtr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>XLogReaderFree</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>xlogreadfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>xlogreadfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>xlogreadfd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Reads one WAL record. Returns the end position of the record, without
 * doing anything with the record itself.
 */</comment>
<function><type><name>XLogRecPtr</name></type>
<name>readOneRecord</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>datadir</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tliIndex</name></decl></parameter>,
			  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>restoreCommand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecord</name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>xlogreader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>errormsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogPageReadPrivate</name></type> <name>private</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>endptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>private</name><operator>.</operator><name>tliIndex</name></name> <operator>=</operator> <name>tliIndex</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>private</name><operator>.</operator><name>restoreCommand</name></name> <operator>=</operator> <name>restoreCommand</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>xlogreader</name> <operator>=</operator> <call><name>XLogReaderAllocate</name><argument_list>(<argument><expr><name>WalSegSz</name></expr></argument>, <argument><expr><name>datadir</name></expr></argument>,
									<argument><expr><call><name>XL_ROUTINE</name><argument_list>(<argument><expr><operator>.</operator><name>page_read</name> <operator>=</operator> <operator>&amp;</operator><name>SimpleXLogPageRead</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>xlogreader</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>XLogBeginRead</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>XLogReadRecord</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>record</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errormsg</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not read WAL record at %X/%X: %s"</literal></expr></argument>,
					 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not read WAL record at %X/%X"</literal></expr></argument>,
					 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>endptr</name> <operator>=</operator> <name><name>xlogreader</name><operator>-&gt;</operator><name>EndRecPtr</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>XLogReaderFree</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>xlogreadfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>xlogreadfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>xlogreadfd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>endptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the previous checkpoint preceding given WAL location.
 */</comment>
<function><type><name>void</name></type>
<name>findLastCheckpoint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>datadir</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>forkptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tliIndex</name></decl></parameter>,
				   <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>lastchkptrec</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name> <modifier>*</modifier></type><name>lastchkpttli</name></decl></parameter>,
				   <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>lastchkptredo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>restoreCommand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Walk backwards, starting from the given record */</comment>
	<decl_stmt><decl><type><name>XLogRecord</name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>searchptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>xlogreader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>errormsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogPageReadPrivate</name></type> <name>private</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The given fork pointer points to the end of the last common record,
	 * which is not necessarily the beginning of the next record, if the
	 * previous record happens to end at a page boundary. Skip over the page
	 * header in that case to find the next record.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>forkptr</name> <operator>%</operator> <name>XLOG_BLCKSZ</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>XLogSegmentOffset</name><argument_list>(<argument><expr><name>forkptr</name></expr></argument>, <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>forkptr</name> <operator>+=</operator> <name>SizeOfXLogLongPHD</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>forkptr</name> <operator>+=</operator> <name>SizeOfXLogShortPHD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>private</name><operator>.</operator><name>tliIndex</name></name> <operator>=</operator> <name>tliIndex</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>private</name><operator>.</operator><name>restoreCommand</name></name> <operator>=</operator> <name>restoreCommand</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>xlogreader</name> <operator>=</operator> <call><name>XLogReaderAllocate</name><argument_list>(<argument><expr><name>WalSegSz</name></expr></argument>, <argument><expr><name>datadir</name></expr></argument>,
									<argument><expr><call><name>XL_ROUTINE</name><argument_list>(<argument><expr><operator>.</operator><name>page_read</name> <operator>=</operator> <operator>&amp;</operator><name>SimpleXLogPageRead</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>xlogreader</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>searchptr</name> <operator>=</operator> <name>forkptr</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint8</name></type>		<name>info</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>XLogBeginRead</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>, <argument><expr><name>searchptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>XLogReadRecord</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>record</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errormsg</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not find previous WAL record at %X/%X: %s"</literal></expr></argument>,
						 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>searchptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>searchptr</name><operator>)</operator></expr></argument>,
						 <argument><expr><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not find previous WAL record at %X/%X"</literal></expr></argument>,
						 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>searchptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>searchptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Check if it is a checkpoint record. This checkpoint record needs to
		 * be the latest checkpoint before WAL forked and not the checkpoint
		 * where the master has been stopped to be rewinded.
		 */</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>searchptr</name> <operator>&lt;</operator> <name>forkptr</name> <operator>&amp;&amp;</operator>
			<call><name>XLogRecGetRmid</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RM_XLOG_ID</name> <operator>&amp;&amp;</operator>
			<operator>(</operator><name>info</name> <operator>==</operator> <name>XLOG_CHECKPOINT_SHUTDOWN</name> <operator>||</operator>
			 <name>info</name> <operator>==</operator> <name>XLOG_CHECKPOINT_ONLINE</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>CheckPoint</name></type>	<name>checkPoint</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>checkPoint</name></expr></argument>, <argument><expr><call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CheckPoint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>lastchkptrec</name> <operator>=</operator> <name>searchptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>lastchkpttli</name> <operator>=</operator> <name><name>checkPoint</name><operator>.</operator><name>ThisTimeLineID</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>lastchkptredo</name> <operator>=</operator> <name><name>checkPoint</name><operator>.</operator><name>redo</name></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Walk backwards to previous record. */</comment>
		<expr_stmt><expr><name>searchptr</name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>xl_prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>XLogReaderFree</name><argument_list>(<argument><expr><name>xlogreader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>xlogreadfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>xlogreadfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>xlogreadfd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* XLogReader callback function, to read a WAL page */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>SimpleXLogPageRead</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>xlogreader</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>targetPagePtr</name></decl></parameter>,
				   <parameter><decl><type><name>int</name></type> <name>reqLen</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>targetRecPtr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>readBuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogPageReadPrivate</name> <modifier>*</modifier></type><name>private</name> <init>= <expr><operator>(</operator><name>XLogPageReadPrivate</name> <operator>*</operator><operator>)</operator> <name><name>xlogreader</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>targetPageOff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>targetSegEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogSegNo</name></type>	<name>targetSegNo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>XLByteToSeg</name><argument_list>(<argument><expr><name>targetPagePtr</name></expr></argument>, <argument><expr><name>targetSegNo</name></expr></argument>, <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XLogSegNoOffsetToRecPtr</name><argument_list>(<argument><expr><name>targetSegNo</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WalSegSz</name></expr></argument>, <argument><expr><name>targetSegEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>targetPageOff</name> <operator>=</operator> <call><name>XLogSegmentOffset</name><argument_list>(<argument><expr><name>targetPagePtr</name></expr></argument>, <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * See if we need to switch to a new segment because the requested record
	 * is not in the currently open one.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>xlogreadfd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>XLByteInSeg</name><argument_list>(<argument><expr><name>targetPagePtr</name></expr></argument>, <argument><expr><name>xlogreadsegno</name></expr></argument>, <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>xlogreadfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>xlogreadfd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>XLByteToSeg</name><argument_list>(<argument><expr><name>targetPagePtr</name></expr></argument>, <argument><expr><name>xlogreadsegno</name></expr></argument>, <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>xlogreadfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>xlogfname</name><index>[<expr><name>MAXFNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Since incomplete segments are copied into next timelines, switch to
		 * the timeline holding the required segment. Assuming this scan can
		 * be done both forward and backward, consider also switching timeline
		 * accordingly.
		 */</comment>
		<while>while <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>tliIndex</name></name> <operator>&lt;</operator> <name>targetNentries</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
			   <name><name>targetHistory</name><index>[<expr><name><name>private</name><operator>-&gt;</operator><name>tliIndex</name></name></expr>]</index></name><operator>.</operator><name>end</name> <operator>&lt;</operator> <name>targetSegEnd</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>tliIndex</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<while>while <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>tliIndex</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			   <name><name>targetHistory</name><index>[<expr><name><name>private</name><operator>-&gt;</operator><name>tliIndex</name></name></expr>]</index></name><operator>.</operator><name>begin</name> <operator>&gt;=</operator> <name>targetSegEnd</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>tliIndex</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

		<expr_stmt><expr><call><name>XLogFileName</name><argument_list>(<argument><expr><name>xlogfname</name></expr></argument>, <argument><expr><name><name>targetHistory</name><index>[<expr><name><name>private</name><operator>-&gt;</operator><name>tliIndex</name></name></expr>]</index></name><operator>.</operator><name>tli</name></expr></argument>,
					 <argument><expr><name>xlogreadsegno</name></expr></argument>, <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>xlogfpath</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/"</literal> <name>XLOGDIR</name> <literal type="string">"/%s"</literal></expr></argument>,
				 <argument><expr><name><name>xlogreader</name><operator>-&gt;</operator><name>segcxt</name><operator>.</operator><name>ws_dir</name></name></expr></argument>, <argument><expr><name>xlogfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>xlogreadfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>xlogfpath</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>xlogreadfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * If we have no restore_command to execute, then exit.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>restoreCommand</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>xlogfpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Since we have restore_command, then try to retrieve missing WAL
			 * file from the archive.
			 */</comment>
			<expr_stmt><expr><name>xlogreadfd</name> <operator>=</operator> <call><name>RestoreArchivedFile</name><argument_list>(<argument><expr><name><name>xlogreader</name><operator>-&gt;</operator><name>segcxt</name><operator>.</operator><name>ws_dir</name></name></expr></argument>,
											 <argument><expr><name>xlogfname</name></expr></argument>,
											 <argument><expr><name>WalSegSz</name></expr></argument>,
											 <argument><expr><name><name>private</name><operator>-&gt;</operator><name>restoreCommand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>xlogreadfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_log_debug</name><argument_list>(<argument><expr><literal type="string">"using file \"%s\" restored from archive"</literal></expr></argument>,
							 <argument><expr><name>xlogfpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * At this point, we have the right segment open.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>xlogreadfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Read the requested page */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>xlogreadfd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name>targetPageOff</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"could not seek in file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>xlogfpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>


	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>xlogreadfd</name></expr></argument>, <argument><expr><name>readBuf</name></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>XLOG_BLCKSZ</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"could not read file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>xlogfpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"could not read file \"%s\": read %d of %zu"</literal></expr></argument>,
						 <argument><expr><name>xlogfpath</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>Size</name><operator>)</operator> <name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>targetSegNo</name> <operator>==</operator> <name>xlogreadsegno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>xlogreader</name><operator>-&gt;</operator><name>seg</name><operator>.</operator><name>ws_tli</name></name> <operator>=</operator> <name><name>targetHistory</name><index>[<expr><name><name>private</name><operator>-&gt;</operator><name>tliIndex</name></name></expr>]</index></name><operator>.</operator><name>tli</name></expr>;</expr_stmt>
	<return>return <expr><name>XLOG_BLCKSZ</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Extract information on which blocks the current record modifies.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>extractPageInfo</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>block_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RmgrId</name></type>		<name>rmid</name> <init>= <expr><call><name>XLogRecGetRmid</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>rminfo</name> <init>= <expr><name>info</name> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Is this a special record type that I recognize? */</comment>

	<if_stmt><if>if <condition>(<expr><name>rmid</name> <operator>==</operator> <name>RM_DBASE_ID</name> <operator>&amp;&amp;</operator> <name>rminfo</name> <operator>==</operator> <name>XLOG_DBASE_CREATE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * New databases can be safely ignored. It won't be present in the
		 * source system, so it will be deleted. There's one corner-case,
		 * though: if a new, different, database is also created in the source
		 * system, we'll see that the files already exist and not copy them.
		 * That's OK, though; WAL replay of creating the new database, from
		 * the source systems's WAL, will re-copy the new database,
		 * overwriting the database created in the target system.
		 */</comment>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>rmid</name> <operator>==</operator> <name>RM_DBASE_ID</name> <operator>&amp;&amp;</operator> <name>rminfo</name> <operator>==</operator> <name>XLOG_DBASE_DROP</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * An existing database was dropped. We'll see that the files don't
		 * exist in the target data dir, and copy them in toto from the source
		 * system. No need to do anything special here.
		 */</comment>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>rmid</name> <operator>==</operator> <name>RM_SMGR_ID</name> <operator>&amp;&amp;</operator> <name>rminfo</name> <operator>==</operator> <name>XLOG_SMGR_CREATE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We can safely ignore these. The file will be removed from the
		 * target, if it doesn't exist in source system. If a file with same
		 * name is created in source system, too, there will be WAL records
		 * for all the blocks in it.
		 */</comment>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>rmid</name> <operator>==</operator> <name>RM_SMGR_ID</name> <operator>&amp;&amp;</operator> <name>rminfo</name> <operator>==</operator> <name>XLOG_SMGR_TRUNCATE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We can safely ignore these. When we compare the sizes later on,
		 * we'll notice that they differ, and copy the missing tail from
		 * source system.
		 */</comment>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>&amp;</operator> <name>XLR_SPECIAL_REL_UPDATE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * This record type modifies a relation file in some special way, but
		 * we don't recognize the type. That's bad - we don't know how to
		 * track that change.
		 */</comment>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"WAL record modifies a relation, but record type is not recognized: "</literal>
				 <literal type="string">"lsn: %X/%X, rmgr: %s, info: %02X"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>ReadRecPtr</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>ReadRecPtr</name></name><operator>)</operator></expr></argument>,
				 <argument><expr><name><name>RmgrNames</name><index>[<expr><name>rmid</name></expr>]</index></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>block_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>block_id</name> <operator>&lt;=</operator> <name><name>record</name><operator>-&gt;</operator><name>max_block_id</name></name></expr>;</condition> <incr><expr><name>block_id</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RelFileNode</name></type> <name>rnode</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ForkNumber</name></type>	<name>forknum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BlockNumber</name></type> <name>blkno</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XLogRecGetBlockTag</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>block_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>forknum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blkno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* We only care about the main fork; others are copied in toto */</comment>
		<if_stmt><if>if <condition>(<expr><name>forknum</name> <operator>!=</operator> <name>MAIN_FORKNUM</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>process_block_change</name><argument_list>(<argument><expr><name>forknum</name></expr></argument>, <argument><expr><name>rnode</name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
