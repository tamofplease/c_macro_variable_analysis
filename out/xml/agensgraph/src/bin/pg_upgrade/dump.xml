<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/bin/pg_upgrade/dump.c"><comment type="block">/*
 *	dump.c
 *
 *	dump functions
 *
 *	Copyright (c) 2010-2020, PostgreSQL Global Development Group
 *	src/bin/pg_upgrade/dump.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/string_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>generate_old_dump</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>dbnum</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Creating dump of global objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* run new pg_dumpall binary for globals */</comment>
	<expr_stmt><expr><call><name>exec_prog</name><argument_list>(<argument><expr><name>UTILITY_LOG_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
			  <argument><expr><literal type="string">"\"%s/pg_dumpall\" %s --globals-only --quote-all-identifiers "</literal>
			  <literal type="string">"--binary-upgrade %s -f %s"</literal></expr></argument>,
			  <argument><expr><name><name>new_cluster</name><operator>.</operator><name>bindir</name></name></expr></argument>, <argument><expr><call><name>cluster_conn_opts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr></argument>,
			  <argument><expr><ternary><condition><expr><name><name>log_opts</name><operator>.</operator><name>verbose</name></name></expr> ?</condition><then> <expr><literal type="string">"--verbose"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			  <argument><expr><name>GLOBALS_DUMP_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Creating dump of database schemas\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* create per-db dump files */</comment>
	<for>for <control>(<init><expr><name>dbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dbnum</name> <operator>&lt;</operator> <name><name>old_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>ndbs</name></name></expr>;</condition> <incr><expr><name>dbnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>sql_file_name</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>,
					<decl><type ref="prev"/><name><name>log_file_name</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DbInfo</name>	   <modifier>*</modifier></type><name>old_db</name> <init>= <expr><operator>&amp;</operator><name><name>old_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>dbs</name><index>[<expr><name>dbnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PQExpBufferData</name></type> <name>connstr</name></decl>,
					<decl><type ref="prev"/><name>escaped_connstr</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>initPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connstr</name></expr></argument>, <argument><expr><literal type="string">"dbname="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendConnStrVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connstr</name></expr></argument>, <argument><expr><name><name>old_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>escaped_connstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendShellString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>escaped_connstr</name></expr></argument>, <argument><expr><name><name>connstr</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>termPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_STATUS</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>old_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql_file_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql_file_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DB_DUMP_FILE_MASK</name></expr></argument>, <argument><expr><name><name>old_db</name><operator>-&gt;</operator><name>db_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>log_file_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_file_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DB_DUMP_LOG_FILE_MASK</name></expr></argument>, <argument><expr><name><name>old_db</name><operator>-&gt;</operator><name>db_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>parallel_exec_prog</name><argument_list>(<argument><expr><name>log_file_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
						   <argument><expr><literal type="string">"\"%s/pg_dump\" %s --schema-only --quote-all-identifiers "</literal>
						   <literal type="string">"--binary-upgrade --format=custom %s --file=\"%s\" %s"</literal></expr></argument>,
						   <argument><expr><name><name>new_cluster</name><operator>.</operator><name>bindir</name></name></expr></argument>, <argument><expr><call><name>cluster_conn_opts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><ternary><condition><expr><name><name>log_opts</name><operator>.</operator><name>verbose</name></name></expr> ?</condition><then> <expr><literal type="string">"--verbose"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
						   <argument><expr><name>sql_file_name</name></expr></argument>, <argument><expr><name><name>escaped_connstr</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>termPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>escaped_connstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* reap all children */</comment>
	<while>while <condition>(<expr><call><name>reap_child</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
		<empty_stmt>;</empty_stmt></block_content></block></while>

	<expr_stmt><expr><call><name>end_progress_output</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
