<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/bin/psql/mainloop.c"><comment type="block">/*
 * psql - the PostgreSQL interactive terminal
 *
 * Copyright (c) 2000-2020, PostgreSQL Global Development Group
 *
 * src/bin/psql/mainloop.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/logging.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mainloop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prompt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"settings.h"</cpp:file></cpp:include>

<comment type="block">/* callback functions for our flex lexer */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>PsqlScanCallbacks</name></type> <name>psqlscan_callbacks</name> <init>= <expr><block>{
	<expr><name>psql_get_variable</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * Main processing loop for reading lines of input
 *	and sending them to the backend.
 *
 * This loop is re-entrant. May be called by \i command
 *	which reads input from a file.
 */</comment>
<function><type><name>int</name></type>
<name>MainLoop</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl>;</decl_stmt>	<comment type="block">/* lexer working state */</comment>
	<decl_stmt><decl><type><name>ConditionalStack</name></type> <name>cond_stack</name></decl>;</decl_stmt>	<comment type="block">/* \if status stack */</comment>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>PQExpBuffer</name></type> <name>query_buf</name></decl>;</decl_stmt> <comment type="block">/* buffer for query being accumulated */</comment>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>PQExpBuffer</name></type> <name>previous_buf</name></decl>;</decl_stmt>	<comment type="block">/* if there isn't anything in the new
										 * buffer yet, use this one for \e,
										 * etc. */</comment>
	<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>history_buf</name></decl>;</decl_stmt>	<comment type="block">/* earlier lines of a multi-line command, not
								 * yet saved to readline history */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>			<comment type="block">/* current line of input */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>added_nl_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>line_saved_in_history</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>successResult</name> <init>= <expr><name>EXIT_SUCCESS</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>backslashResult</name></type> <name>slashCmdStatus</name> <init>= <expr><name>PSQL_CMD_UNKNOWN</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>promptStatus_t</name></type> <name>prompt_status</name> <init>= <expr><name>PROMPT_READY</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>need_redisplay</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>count_eof</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>die_on_error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>prev_cmd_source</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>prev_cmd_interactive</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>prev_lineno</name></decl>;</decl_stmt>

	<comment type="block">/* Save the prior command source */</comment>
	<expr_stmt><expr><name>prev_cmd_source</name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>cur_cmd_source</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_cmd_interactive</name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_lineno</name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>lineno</name></name></expr>;</expr_stmt>
	<comment type="block">/* pset.stmt_lineno does not need to be saved and restored */</comment>

	<comment type="block">/* Establish new source */</comment>
	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>cur_cmd_source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>source</name> <operator>==</operator> <name>stdin</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pset</name><operator>.</operator><name>notty</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>lineno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>stmt_lineno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Create working state */</comment>
	<expr_stmt><expr><name>scan_state</name> <operator>=</operator> <call><name>psql_scan_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psqlscan_callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cond_stack</name> <operator>=</operator> <call><name>conditional_stack_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>psql_scan_set_passthrough</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>cond_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>query_buf</name> <operator>=</operator> <call><name>createPQExpBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>previous_buf</name> <operator>=</operator> <call><name>createPQExpBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>history_buf</name> <operator>=</operator> <call><name>createPQExpBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PQExpBufferBroken</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>)</argument_list></call> <operator>||</operator>
		<call><name>PQExpBufferBroken</name><argument_list>(<argument><expr><name>previous_buf</name></expr></argument>)</argument_list></call> <operator>||</operator>
		<call><name>PQExpBufferBroken</name><argument_list>(<argument><expr><name>history_buf</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* main loop to get queries and execute them */</comment>
	<while>while <condition>(<expr><name>successResult</name> <operator>==</operator> <name>EXIT_SUCCESS</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Clean up after a previous Control-C
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>cancel_pressed</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * You get here if you stopped a script with Ctrl-C.
				 */</comment>
				<expr_stmt><expr><name>successResult</name> <operator>=</operator> <name>EXIT_USER</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>cancel_pressed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Establish longjmp destination for exiting from wait-for-input. We
		 * must re-do this each time through the loop for safety, since the
		 * jmpbuf might get changed during command execution.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>sigsetjmp</name><argument_list>(<argument><expr><name>sigint_interrupt_jmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* got here with longjmp */</comment>

			<comment type="block">/* reset parsing state */</comment>
			<expr_stmt><expr><call><name>psql_scan_finish</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>psql_scan_reset</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>history_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>count_eof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>slashCmdStatus</name> <operator>=</operator> <name>PSQL_CMD_UNKNOWN</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>prompt_status</name> <operator>=</operator> <name>PROMPT_READY</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>need_redisplay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>stmt_lineno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cancel_pressed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * if interactive user is in an \if block, then Ctrl-C will
				 * exit from the innermost \if.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>conditional_stack_empty</name><argument_list>(<argument><expr><name>cond_stack</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"\\if: escaped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>conditional_stack_pop</name><argument_list>(<argument><expr><name>cond_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>successResult</name> <operator>=</operator> <name>EXIT_USER</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * get another line
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* May need to reset prompt, eg after \r command */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>prompt_status</name> <operator>=</operator> <name>PROMPT_READY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/* If query buffer came from \e, redisplay it with a prompt */</comment>
			<if_stmt><if>if <condition>(<expr><name>need_redisplay</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>get_prompt</name><argument_list>(<argument><expr><name>PROMPT_READY</name></expr></argument>, <argument><expr><name>cond_stack</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>query_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>need_redisplay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Now we can fetch a line */</comment>
			<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>gets_interactive</name><argument_list>(<argument><expr><call><name>get_prompt</name><argument_list>(<argument><expr><name>prompt_status</name></expr></argument>, <argument><expr><name>cond_stack</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>gets_fromFile</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line</name> <operator>&amp;&amp;</operator> <call><name>ferror</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>successResult</name> <operator>=</operator> <name>EXIT_FAILURE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * query_buf holds query already accumulated.  line is the malloc'd
		 * new line of input (note it must be freed before looping around!)
		 */</comment>

		<comment type="block">/* No more input.  Time to quit, or \i done */</comment>
		<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* This tries to mimic bash's IGNOREEOF feature. */</comment>
				<expr_stmt><expr><name>count_eof</name><operator>++</operator></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>count_eof</name> <operator>&lt;</operator> <name><name>pset</name><operator>.</operator><name>ignoreeof</name></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Use \"\\q\" to leave %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>progname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\\q"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>count_eof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>lineno</name></name><operator>++</operator></expr>;</expr_stmt>

		<comment type="block">/* ignore UTF-8 Unicode byte-order mark */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>lineno</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pset</name><operator>.</operator><name>encoding</name></name> <operator>==</operator> <name>PG_UTF8</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"\xef\xbb\xbf"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Detect attempts to run custom-format dumps as SQL scripts */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>lineno</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name> <operator>&amp;&amp;</operator>
			<call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"PGDMP"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The input is a PostgreSQL custom-format dump.\n"</literal>
				   <literal type="string">"Use the pg_restore command-line client to restore this dump to a database.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>successResult</name> <operator>=</operator> <name>EXIT_FAILURE</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* no further processing of empty lines, unless within a literal */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>psql_scan_in_quote</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Recognize "help", "quit", "exit" only in interactive mode */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>first_word</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rest_of_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>found_help</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>found_exit_or_quit</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>found_q</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * The assistance words, help/exit/quit, must have no whitespace
			 * before them, and only whitespace after, with an optional
			 * semicolon.  This prevents indented use of these words, perhaps
			 * as identifiers, from invoking the assistance behavior.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>first_word</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>rest_of_line</name> <operator>=</operator> <name>first_word</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>found_help</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>first_word</name></expr></argument>, <argument><expr><literal type="string">"exit"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
					 <call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>first_word</name></expr></argument>, <argument><expr><literal type="string">"quit"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>rest_of_line</name> <operator>=</operator> <name>first_word</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>found_exit_or_quit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>first_word</name></expr></argument>, <argument><expr><literal type="string">"\\q"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>rest_of_line</name> <operator>=</operator> <name>first_word</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>found_q</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * If we found a command word, check whether the rest of the line
			 * contains only whitespace plus maybe one semicolon.  If not,
			 * ignore the command word after all.  These commands are only for
			 * compatibility with other SQL clients and are not documented.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>rest_of_line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Ignore unless rest of line is whitespace, plus maybe one
				 * semicolon
				 */</comment>
				<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>rest_of_line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>++</operator><name>rest_of_line</name></expr>;</expr_stmt></block_content></block></while>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest_of_line</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>++</operator><name>rest_of_line</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>rest_of_line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>++</operator><name>rest_of_line</name></expr>;</expr_stmt></block_content></block></while>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest_of_line</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>found_help</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>found_exit_or_quit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * "help" is only a command when the query buffer is empty, but we
			 * emit a one-line message even when it isn't to help confused
			 * users.  The text is still added to the query buffer in that
			 * case.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>found_help</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
					<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Use \\? for help or press control-C to clear the input buffer."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
					<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Use \\? for help."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<if_stmt><else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You are using psql, the command-line interface to PostgreSQL."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Type:  \\copyright for distribution terms\n"</literal>
							 <literal type="string">"       \\h for help with SQL commands\n"</literal>
							 <literal type="string">"       \\? for help with psql commands\n"</literal>
							 <literal type="string">"       \\g or terminate with semicolon to execute query\n"</literal>
							 <literal type="string">"       \\q to quit\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * "quit" and "exit" are only commands when the query buffer is
			 * empty, but we emit a one-line message even when it isn't to
			 * help confused users.  The text is still added to the query
			 * buffer in that case.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>found_exit_or_quit</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>prompt_status</name> <operator>==</operator> <name>PROMPT_READY</name> <operator>||</operator>
						<name>prompt_status</name> <operator>==</operator> <name>PROMPT_CONTINUE</name> <operator>||</operator>
						<name>prompt_status</name> <operator>==</operator> <name>PROMPT_PAREN</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Use \\q to quit."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
						<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Use control-D to quit."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
						<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Use control-C to quit."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/* exit app */</comment>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>successResult</name> <operator>=</operator> <name>EXIT_SUCCESS</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * If they typed "\q" in a place where "\q" is not active, supply
			 * a hint.  The text is still added to the query buffer.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>found_q</name> <operator>&amp;&amp;</operator> <name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
				<name>prompt_status</name> <operator>!=</operator> <name>PROMPT_READY</name> <operator>&amp;&amp;</operator>
				<name>prompt_status</name> <operator>!=</operator> <name>PROMPT_CONTINUE</name> <operator>&amp;&amp;</operator>
				<name>prompt_status</name> <operator>!=</operator> <name>PROMPT_PAREN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
				<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Use control-D to quit."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Use control-C to quit."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* echo back if flag is set, unless interactive */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>echo</name></name> <operator>==</operator> <name>PSQL_ECHO_ALL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* insert newlines into query buffer between source lines */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>appendPQExpBufferChar</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>added_nl_pos</name> <operator>=</operator> <name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>added_nl_pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>	<comment type="block">/* flag we didn't add one */</comment>

		<comment type="block">/* Setting this will not have effect until next line. */</comment>
		<expr_stmt><expr><name>die_on_error</name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>on_error_stop</name></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Parse line, looking for command separators.
		 */</comment>
		<expr_stmt><expr><call><name>psql_scan_setup</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name><name>pset</name><operator>.</operator><name>encoding</name></name></expr></argument>, <argument><expr><call><name>standard_strings</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>line_saved_in_history</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>success</name> <operator>||</operator> <operator>!</operator><name>die_on_error</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PsqlScanResult</name></type> <name>scan_result</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>promptStatus_t</name></type> <name>prompt_tmp</name> <init>= <expr><name>prompt_status</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type>		<name>pos_in_query</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tmp_line</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>pos_in_query</name> <operator>=</operator> <name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>scan_result</name> <operator>=</operator> <call><name>psql_scan</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prompt_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>prompt_status</name> <operator>=</operator> <name>prompt_tmp</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>PQExpBufferBroken</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Increase statement line number counter for each linebreak added
			 * to the query buffer by the last psql_scan() call. There only
			 * will be ones to add when navigating to a statement in
			 * readline's history containing newlines.
			 */</comment>
			<expr_stmt><expr><name>tmp_line</name> <operator>=</operator> <name><name>query_buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos_in_query</name></expr>;</expr_stmt>
			<while>while <condition>(<expr><operator>*</operator><name>tmp_line</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>tmp_line</name><operator>++</operator><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>stmt_lineno</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></while>

			<if_stmt><if>if <condition>(<expr><name>scan_result</name> <operator>==</operator> <name>PSCAN_EOL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>stmt_lineno</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * Send command if semicolon found, or if end of line and we're in
			 * single-line mode.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>scan_result</name> <operator>==</operator> <name>PSCAN_SEMICOLON</name> <operator>||</operator>
				<operator>(</operator><name>scan_result</name> <operator>==</operator> <name>PSCAN_EOL</name> <operator>&amp;&amp;</operator> <name><name>pset</name><operator>.</operator><name>singleline</name></name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Save line in history.  We use history_buf to accumulate
				 * multi-line queries into a single history entry.  Note that
				 * history accumulation works on input lines, so it doesn't
				 * matter whether the query will be ignored due to \if.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>line_saved_in_history</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pg_append_history</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>history_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pg_send_history</name><argument_list>(<argument><expr><name>history_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>line_saved_in_history</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* execute query unless we're in an inactive \if branch */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>conditional_active</name><argument_list>(<argument><expr><name>cond_stack</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>SendQuery</name><argument_list>(<argument><expr><name><name>query_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>slashCmdStatus</name> <operator>=</operator> <ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SEND</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>stmt_lineno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

					<comment type="block">/* transfer query to previous_buf by pointer-swapping */</comment>
					<block>{<block_content>
						<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>swap_buf</name> <init>= <expr><name>previous_buf</name></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name>previous_buf</name> <operator>=</operator> <name>query_buf</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>query_buf</name> <operator>=</operator> <name>swap_buf</name></expr>;</expr_stmt>
					</block_content>}</block>
					<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>added_nl_pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<comment type="block">/* we need not do psql_scan_reset() here */</comment>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/* if interactive, warn about non-executed query */</comment>
					<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"query ignored; use \\endif or Ctrl-C to exit current \\if block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<comment type="block">/* fake an OK result for purposes of loop checks */</comment>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>slashCmdStatus</name> <operator>=</operator> <name>PSQL_CMD_SEND</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>stmt_lineno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<comment type="block">/* note that query_buf doesn't change state */</comment>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>scan_result</name> <operator>==</operator> <name>PSCAN_BACKSLASH</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* handle backslash command */</comment>

				<comment type="block">/*
				 * If we added a newline to query_buf, and nothing else has
				 * been inserted in query_buf by the lexer, then strip off the
				 * newline again.  This avoids any change to query_buf when a
				 * line contains only a backslash command.  Also, in this
				 * situation we force out any previous lines as a separate
				 * history entry; we don't want SQL and backslash commands
				 * intermixed in history if at all possible.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>added_nl_pos</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>query_buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>--</operator><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pg_send_history</name><argument_list>(<argument><expr><name>history_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>added_nl_pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

				<comment type="block">/* save backslash command in history */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>line_saved_in_history</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pg_append_history</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>history_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pg_send_history</name><argument_list>(<argument><expr><name>history_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>line_saved_in_history</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* execute backslash command */</comment>
				<expr_stmt><expr><name>slashCmdStatus</name> <operator>=</operator> <call><name>HandleSlashCmds</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												 <argument><expr><name>cond_stack</name></expr></argument>,
												 <argument><expr><name>query_buf</name></expr></argument>,
												 <argument><expr><name>previous_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>success</name> <operator>=</operator> <name>slashCmdStatus</name> <operator>!=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>

				<comment type="block">/*
				 * Resetting stmt_lineno after a backslash command isn't
				 * always appropriate, but it's what we've done historically
				 * and there have been few complaints.
				 */</comment>
				<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>stmt_lineno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>slashCmdStatus</name> <operator>==</operator> <name>PSQL_CMD_SEND</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* should not see this in inactive branch */</comment>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>conditional_active</name><argument_list>(<argument><expr><name>cond_stack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>SendQuery</name><argument_list>(<argument><expr><name><name>query_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* transfer query to previous_buf by pointer-swapping */</comment>
					<block>{<block_content>
						<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>swap_buf</name> <init>= <expr><name>previous_buf</name></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name>previous_buf</name> <operator>=</operator> <name>query_buf</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>query_buf</name> <operator>=</operator> <name>swap_buf</name></expr>;</expr_stmt>
					</block_content>}</block>
					<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* flush any paren nesting info after forced send */</comment>
					<expr_stmt><expr><call><name>psql_scan_reset</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>slashCmdStatus</name> <operator>==</operator> <name>PSQL_CMD_NEWEDIT</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* should not see this in inactive branch */</comment>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>conditional_active</name><argument_list>(<argument><expr><name>cond_stack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* ensure what came back from editing ends in a newline */</comment>
					<if_stmt><if>if <condition>(<expr><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
						<name><name>query_buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>appendPQExpBufferChar</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<comment type="block">/* rescan query_buf as new input */</comment>
					<expr_stmt><expr><call><name>psql_scan_finish</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name><name>query_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* reset parsing state since we are rescanning whole line */</comment>
					<expr_stmt><expr><call><name>psql_scan_reset</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>psql_scan_setup</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>pset</name><operator>.</operator><name>encoding</name></name></expr></argument>, <argument><expr><call><name>standard_strings</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>line_saved_in_history</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>prompt_status</name> <operator>=</operator> <name>PROMPT_READY</name></expr>;</expr_stmt>
					<comment type="block">/* we'll want to redisplay after parsing what we have */</comment>
					<expr_stmt><expr><name>need_redisplay</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>slashCmdStatus</name> <operator>==</operator> <name>PSQL_CMD_TERMINATE</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* fall out of loop if lexer reached EOL */</comment>
			<if_stmt><if>if <condition>(<expr><name>scan_result</name> <operator>==</operator> <name>PSCAN_INCOMPLETE</name> <operator>||</operator>
				<name>scan_result</name> <operator>==</operator> <name>PSCAN_EOL</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></while>

		<comment type="block">/* Add line to pending history if we didn't execute anything yet */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>line_saved_in_history</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_append_history</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>history_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>psql_scan_finish</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>slashCmdStatus</name> <operator>==</operator> <name>PSQL_CMD_TERMINATE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>successResult</name> <operator>=</operator> <name>EXIT_SUCCESS</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>&amp;&amp;</operator> <name>die_on_error</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>successResult</name> <operator>=</operator> <name>EXIT_USER</name></expr>;</expr_stmt></block_content></block></if>
			<comment type="block">/* Have we lost the db connection? */</comment>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>db</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>successResult</name> <operator>=</operator> <name>EXIT_BADCONN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>							<comment type="block">/* while !endoffile/session */</comment>

	<comment type="block">/*
	 * If we have a non-semicolon-terminated query at the end of file, we
	 * process it unless the input source is interactive --- in that case it
	 * seems better to go ahead and quit.  Also skip if this is an error exit.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name> <operator>&amp;&amp;</operator>
		<name>successResult</name> <operator>==</operator> <name>EXIT_SUCCESS</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* save query in history */</comment>
		<comment type="block">/* currently unneeded since we don't use this block if interactive */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_send_history</name><argument_list>(<argument><expr><name>history_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/* execute query unless we're in an inactive \if branch */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>conditional_active</name><argument_list>(<argument><expr><name>cond_stack</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>SendQuery</name><argument_list>(<argument><expr><name><name>query_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"query ignored; use \\endif or Ctrl-C to exit current \\if block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>&amp;&amp;</operator> <name>die_on_error</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>successResult</name> <operator>=</operator> <name>EXIT_USER</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>pset</name><operator>.</operator><name>db</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>successResult</name> <operator>=</operator> <name>EXIT_BADCONN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Check for unbalanced \if-\endifs unless user explicitly quit, or the
	 * script is erroring out
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>slashCmdStatus</name> <operator>!=</operator> <name>PSQL_CMD_TERMINATE</name> <operator>&amp;&amp;</operator>
		<name>successResult</name> <operator>!=</operator> <name>EXIT_USER</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>conditional_stack_empty</name><argument_list>(<argument><expr><name>cond_stack</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"reached EOF without finding closing \\endif(s)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>die_on_error</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>successResult</name> <operator>=</operator> <name>EXIT_USER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Let's just make real sure the SIGINT handler won't try to use
	 * sigint_interrupt_jmp after we exit this routine.  If there is an outer
	 * MainLoop instance, it will reset sigint_interrupt_jmp to point to
	 * itself at the top of its loop, before any further interactive input
	 * happens.
	 */</comment>
	<expr_stmt><expr><name>sigint_interrupt_enabled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>previous_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>history_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>psql_scan_destroy</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conditional_stack_destroy</name><argument_list>(<argument><expr><name>cond_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>cur_cmd_source</name></name> <operator>=</operator> <name>prev_cmd_source</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name> <operator>=</operator> <name>prev_cmd_interactive</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>lineno</name></name> <operator>=</operator> <name>prev_lineno</name></expr>;</expr_stmt>

	<return>return <expr><name>successResult</name></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* MainLoop() */</comment>
</unit>
