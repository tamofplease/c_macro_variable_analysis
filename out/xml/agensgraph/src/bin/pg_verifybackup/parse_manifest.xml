<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/bin/pg_verifybackup/parse_manifest.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * parse_manifest.c
 *	  Parse a backup manifest in JSON format.
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/bin/pg_verifybackup/parse_manifest.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse_manifest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/jsonapi.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Semantic states for JSON manifest parsing.
 */</comment>
<typedef>typedef <type><enum>enum
<block>{
	<decl><name>JM_EXPECT_TOPLEVEL_START</name></decl>,
	<decl><name>JM_EXPECT_TOPLEVEL_END</name></decl>,
	<decl><name>JM_EXPECT_TOPLEVEL_FIELD</name></decl>,
	<decl><name>JM_EXPECT_VERSION_VALUE</name></decl>,
	<decl><name>JM_EXPECT_FILES_START</name></decl>,
	<decl><name>JM_EXPECT_FILES_NEXT</name></decl>,
	<decl><name>JM_EXPECT_THIS_FILE_FIELD</name></decl>,
	<decl><name>JM_EXPECT_THIS_FILE_VALUE</name></decl>,
	<decl><name>JM_EXPECT_WAL_RANGES_START</name></decl>,
	<decl><name>JM_EXPECT_WAL_RANGES_NEXT</name></decl>,
	<decl><name>JM_EXPECT_THIS_WAL_RANGE_FIELD</name></decl>,
	<decl><name>JM_EXPECT_THIS_WAL_RANGE_VALUE</name></decl>,
	<decl><name>JM_EXPECT_MANIFEST_CHECKSUM_VALUE</name></decl>,
	<decl><name>JM_EXPECT_EOF</name></decl>
}</block></enum></type> <name>JsonManifestSemanticState</name>;</typedef>

<comment type="block">/*
 * Possible fields for one file as described by the manifest.
 */</comment>
<typedef>typedef <type><enum>enum
<block>{
	<decl><name>JMFF_PATH</name></decl>,
	<decl><name>JMFF_ENCODED_PATH</name></decl>,
	<decl><name>JMFF_SIZE</name></decl>,
	<decl><name>JMFF_LAST_MODIFIED</name></decl>,
	<decl><name>JMFF_CHECKSUM_ALGORITHM</name></decl>,
	<decl><name>JMFF_CHECKSUM</name></decl>
}</block></enum></type> <name>JsonManifestFileField</name>;</typedef>

<comment type="block">/*
 * Possible fields for one file as described by the manifest.
 */</comment>
<typedef>typedef <type><enum>enum
<block>{
	<decl><name>JMWRF_TIMELINE</name></decl>,
	<decl><name>JMWRF_START_LSN</name></decl>,
	<decl><name>JMWRF_END_LSN</name></decl>
}</block></enum></type> <name>JsonManifestWALRangeField</name>;</typedef>

<comment type="block">/*
 * Internal state used while decoding the JSON-format backup manifest.
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>JsonManifestParseContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonManifestSemanticState</name></type> <name>state</name></decl>;</decl_stmt>

	<comment type="block">/* These fields are used for parsing objects in the list of files. */</comment>
	<decl_stmt><decl><type><name>JsonManifestFileField</name></type> <name>file_field</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pathname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>encoded_pathname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>algorithm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_checksum_type</name></type> <name>checksum_algorithm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>checksum</name></decl>;</decl_stmt>

	<comment type="block">/* These fields are used for parsing objects in the list of WAL ranges. */</comment>
	<decl_stmt><decl><type><name>JsonManifestWALRangeField</name></type> <name>wal_range_field</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>timeline</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>start_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>end_lsn</name></decl>;</decl_stmt>

	<comment type="block">/* Miscellaneous other stuff. */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>saw_version_field</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>manifest_checksum</name></decl>;</decl_stmt>
}</block></struct></type> <name>JsonManifestParseState</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>json_manifest_object_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>json_manifest_object_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>json_manifest_array_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>json_manifest_array_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>json_manifest_object_field_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,
											 <parameter><decl><type><name>bool</name></type> <name>isnull</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>json_manifest_scalar</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>,
								 <parameter><decl><type><name>JsonTokenType</name></type> <name>tokentype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>json_manifest_finalize_file</name><parameter_list>(<parameter><decl><type><name>JsonManifestParseState</name> <modifier>*</modifier></type><name>parse</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>json_manifest_finalize_wal_range</name><parameter_list>(<parameter><decl><type><name>JsonManifestParseState</name> <modifier>*</modifier></type><name>parse</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>verify_manifest_checksum</name><parameter_list>(<parameter><decl><type><name>JsonManifestParseState</name> <modifier>*</modifier></type><name>parse</name></decl></parameter>,
									 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>json_manifest_parse_failure</name><parameter_list>(<parameter><decl><type><name>JsonManifestParseContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
										<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>hexdecode_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hexdecode_string</name><parameter_list>(<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>parse_xlogrecptr</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Main entrypoint to parse a JSON-format backup manifest.
 *
 * Caller should set up the parsing context and then invoke this function.
 * For each file whose information is extracted from the manifest,
 * context-&gt;perfile_cb is invoked.  In case of trouble, context-&gt;error_cb is
 * invoked and is expected not to return.
 */</comment>
<function><type><name>void</name></type>
<name>json_parse_manifest</name><parameter_list>(<parameter><decl><type><name>JsonManifestParseContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
					<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonParseErrorType</name></type> <name>json_error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonSemAction</name></type> <name>sem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonManifestParseState</name></type> <name>parse</name></decl>;</decl_stmt>

	<comment type="block">/* Set up our private parsing context. */</comment>
	<expr_stmt><expr><name><name>parse</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parse</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_TOPLEVEL_START</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parse</name><operator>.</operator><name>saw_version_field</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* Create a JSON lexing context. */</comment>
	<expr_stmt><expr><name>lex</name> <operator>=</operator> <call><name>makeJsonLexContextCstringLen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set up semantic actions. */</comment>
	<expr_stmt><expr><name><name>sem</name><operator>.</operator><name>semstate</name></name> <operator>=</operator> <operator>&amp;</operator><name>parse</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sem</name><operator>.</operator><name>object_start</name></name> <operator>=</operator> <name>json_manifest_object_start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sem</name><operator>.</operator><name>object_end</name></name> <operator>=</operator> <name>json_manifest_object_end</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sem</name><operator>.</operator><name>array_start</name></name> <operator>=</operator> <name>json_manifest_array_start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sem</name><operator>.</operator><name>array_end</name></name> <operator>=</operator> <name>json_manifest_array_end</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sem</name><operator>.</operator><name>object_field_start</name></name> <operator>=</operator> <name>json_manifest_object_field_start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sem</name><operator>.</operator><name>object_field_end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sem</name><operator>.</operator><name>array_element_start</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sem</name><operator>.</operator><name>array_element_end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sem</name><operator>.</operator><name>scalar</name></name> <operator>=</operator> <name>json_manifest_scalar</name></expr>;</expr_stmt>

	<comment type="block">/* Run the actual JSON parser. */</comment>
	<expr_stmt><expr><name>json_error</name> <operator>=</operator> <call><name>pg_parse_json</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>json_error</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>json_errdetail</name><argument_list>(<argument><expr><name>json_error</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>JM_EXPECT_EOF</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"manifest ended unexpectedly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Verify the manifest checksum. */</comment>
	<expr_stmt><expr><call><name>verify_manifest_checksum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Invoked at the start of each object in the JSON document.
 *
 * The document as a whole is expected to be an object; each file and each
 * WAL range is also expected to be an object. If we're anywhere else in the
 * document, it's an error.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>json_manifest_object_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonManifestParseState</name> <modifier>*</modifier></type><name>parse</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JM_EXPECT_TOPLEVEL_START</name></expr>:</case>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_TOPLEVEL_FIELD</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JM_EXPECT_FILES_NEXT</name></expr>:</case>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_THIS_FILE_FIELD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>pathname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>encoded_pathname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>algorithm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JM_EXPECT_WAL_RANGES_NEXT</name></expr>:</case>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_THIS_WAL_RANGE_FIELD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>timeline</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
										<argument><expr><literal type="string">"unexpected object start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Invoked at the end of each object in the JSON document.
 *
 * The possible cases here are the same as for json_manifest_object_start.
 * There's nothing special to do at the end of the document, but when we
 * reach the end of an object representing a particular file or WAL range,
 * we must call json_manifest_finalize_file() to save the associated details.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>json_manifest_object_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonManifestParseState</name> <modifier>*</modifier></type><name>parse</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JM_EXPECT_TOPLEVEL_END</name></expr>:</case>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_EOF</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JM_EXPECT_THIS_FILE_FIELD</name></expr>:</case>
			<expr_stmt><expr><call><name>json_manifest_finalize_file</name><argument_list>(<argument><expr><name>parse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_FILES_NEXT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JM_EXPECT_THIS_WAL_RANGE_FIELD</name></expr>:</case>
			<expr_stmt><expr><call><name>json_manifest_finalize_wal_range</name><argument_list>(<argument><expr><name>parse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_WAL_RANGES_NEXT</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
										<argument><expr><literal type="string">"unexpected object end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Invoked at the start of each array in the JSON document.
 *
 * Within the toplevel object, the value associated with the "Files" key
 * should be an array. Similarly for the "WAL-Ranges" key. No other arrays
 * are expected.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>json_manifest_array_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonManifestParseState</name> <modifier>*</modifier></type><name>parse</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JM_EXPECT_FILES_START</name></expr>:</case>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_FILES_NEXT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JM_EXPECT_WAL_RANGES_START</name></expr>:</case>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_WAL_RANGES_NEXT</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
										<argument><expr><literal type="string">"unexpected array start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Invoked at the end of each array in the JSON document.
 *
 * The cases here are analogous to those in json_manifest_array_start.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>json_manifest_array_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonManifestParseState</name> <modifier>*</modifier></type><name>parse</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JM_EXPECT_FILES_NEXT</name></expr>:</case>
		<case>case <expr><name>JM_EXPECT_WAL_RANGES_NEXT</name></expr>:</case>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_TOPLEVEL_FIELD</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
										<argument><expr><literal type="string">"unexpected array end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Invoked at the start of each object field in the JSON document.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>json_manifest_object_field_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonManifestParseState</name> <modifier>*</modifier></type><name>parse</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JM_EXPECT_TOPLEVEL_FIELD</name></expr>:</case>

			<comment type="block">/*
			 * Inside toplevel object. The version indicator should always be
			 * the first field.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parse</name><operator>-&gt;</operator><name>saw_version_field</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"PostgreSQL-Backup-Manifest-Version"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
												<argument><expr><literal type="string">"expected version indicator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_VERSION_VALUE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>saw_version_field</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Is this the list of files? */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"Files"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_FILES_START</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Is this the list of WAL ranges? */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"WAL-Ranges"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_WAL_RANGES_START</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Is this the manifest checksum? */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"Manifest-Checksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_MANIFEST_CHECKSUM_VALUE</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* It's not a field we recognize. */</comment>
			<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
										<argument><expr><literal type="string">"unrecognized top-level field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>JM_EXPECT_THIS_FILE_FIELD</name></expr>:</case>
			<comment type="block">/* Inside object for one file; which key have we got? */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"Path"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>file_field</name></name> <operator>=</operator> <name>JMFF_PATH</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"Encoded-Path"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>file_field</name></name> <operator>=</operator> <name>JMFF_ENCODED_PATH</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"Size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>file_field</name></name> <operator>=</operator> <name>JMFF_SIZE</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"Last-Modified"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>file_field</name></name> <operator>=</operator> <name>JMFF_LAST_MODIFIED</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"Checksum-Algorithm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>file_field</name></name> <operator>=</operator> <name>JMFF_CHECKSUM_ALGORITHM</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"Checksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>file_field</name></name> <operator>=</operator> <name>JMFF_CHECKSUM</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
											<argument><expr><literal type="string">"unexpected file field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_THIS_FILE_VALUE</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>JM_EXPECT_THIS_WAL_RANGE_FIELD</name></expr>:</case>
			<comment type="block">/* Inside object for one file; which key have we got? */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"Timeline"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>wal_range_field</name></name> <operator>=</operator> <name>JMWRF_TIMELINE</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"Start-LSN"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>wal_range_field</name></name> <operator>=</operator> <name>JMWRF_START_LSN</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"End-LSN"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>wal_range_field</name></name> <operator>=</operator> <name>JMWRF_END_LSN</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
											<argument><expr><literal type="string">"unexpected WAL range field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_THIS_WAL_RANGE_VALUE</name></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
										<argument><expr><literal type="string">"unexpected object field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Invoked at the start of each scalar in the JSON document.
 *
 * Object field names don't reach this code; those are handled by
 * json_manifest_object_field_start. When we're inside of the object for
 * a particular file or WAL range, that function will have noticed the name
 * of the field, and we'll get the corresponding value here. When we're in
 * the toplevel object, the parse state itself tells us which field this is.
 *
 * In all cases except for PostgreSQL-Backup-Manifest-Version, which we
 * can just check on the spot, the goal here is just to save the value in
 * the parse state for later use. We don't actually do anything until we
 * reach either the end of the object representing this file, or the end
 * of the manifest, as the case may be.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>json_manifest_scalar</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>JsonTokenType</name></type> <name>tokentype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonManifestParseState</name> <modifier>*</modifier></type><name>parse</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JM_EXPECT_VERSION_VALUE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
											<argument><expr><literal type="string">"unexpected manifest version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_TOPLEVEL_FIELD</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>JM_EXPECT_THIS_FILE_VALUE</name></expr>:</case>
			<switch>switch <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>file_field</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>JMFF_PATH</name></expr>:</case>
					<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>pathname</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>JMFF_ENCODED_PATH</name></expr>:</case>
					<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>encoded_pathname</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>JMFF_SIZE</name></expr>:</case>
					<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>JMFF_LAST_MODIFIED</name></expr>:</case>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* unused */</comment>
					<break>break;</break>
				<case>case <expr><name>JMFF_CHECKSUM_ALGORITHM</name></expr>:</case>
					<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>algorithm</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>JMFF_CHECKSUM</name></expr>:</case>
					<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_THIS_FILE_FIELD</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>JM_EXPECT_THIS_WAL_RANGE_VALUE</name></expr>:</case>
			<switch>switch <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>wal_range_field</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>JMWRF_TIMELINE</name></expr>:</case>
					<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>timeline</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>JMWRF_START_LSN</name></expr>:</case>
					<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>JMWRF_END_LSN</name></expr>:</case>
					<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_THIS_WAL_RANGE_FIELD</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>JM_EXPECT_MANIFEST_CHECKSUM_VALUE</name></expr>:</case>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JM_EXPECT_TOPLEVEL_END</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>manifest_checksum</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="string">"unexpected scalar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Do additional parsing and sanity-checking of the details gathered for one
 * file, and invoke the per-file callback so that the caller gets those
 * details. This happens for each file when the corresponding JSON object is
 * completely parsed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>json_manifest_finalize_file</name><parameter_list>(<parameter><decl><type><name>JsonManifestParseState</name> <modifier>*</modifier></type><name>parse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonManifestParseContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>checksum_string_length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_checksum_type</name></type> <name>checksum_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>checksum_length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>checksum_payload</name></decl>;</decl_stmt>

	<comment type="block">/* Pathname and size are required. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>pathname</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parse</name><operator>-&gt;</operator><name>encoded_pathname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="string">"missing path name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>pathname</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parse</name><operator>-&gt;</operator><name>encoded_pathname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
									<argument><expr><literal type="string">"both path name and encoded path name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="string">"missing size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>algorithm</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parse</name><operator>-&gt;</operator><name>checksum</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
									<argument><expr><literal type="string">"checksum without algorithm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Decode encoded pathname, if that's what we have. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>encoded_pathname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>encoded_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>encoded_pathname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>raw_length</name> <init>= <expr><name>encoded_length</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>pathname</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>raw_length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>encoded_length</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
			<operator>!</operator><call><name>hexdecode_string</name><argument_list>(<argument><expr><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name><name>parse</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>,
							  <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>encoded_pathname</name></name></expr></argument>,
							  <argument><expr><name>raw_length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
										<argument><expr><literal type="string">"could not decode file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>pathname</name><index>[<expr><name>raw_length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>encoded_pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>encoded_pathname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Parse size. */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
									<argument><expr><literal type="string">"file size is not an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Parse the checksum algorithm, if it's present. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>algorithm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>checksum_type</name> <operator>=</operator> <name>CHECKSUM_TYPE_NONE</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>pg_checksum_parse_type</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checksum_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>error_cb</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"unrecognized checksum algorithm: \"%s\""</literal></expr></argument>,
						  <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Parse the checksum payload, if it's present. */</comment>
	<expr_stmt><expr><name>checksum_string_length</name> <operator>=</operator> <ternary><condition><expr><name><name>parse</name><operator>-&gt;</operator><name>checksum</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>
		</then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>checksum_string_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>checksum_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>checksum_payload</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>checksum_length</name> <operator>=</operator> <name>checksum_string_length</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>checksum_payload</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>checksum_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>checksum_string_length</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
			<operator>!</operator><call><name>hexdecode_string</name><argument_list>(<argument><expr><name>checksum_payload</name></expr></argument>, <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>,
							  <argument><expr><name>checksum_length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>error_cb</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
							  <argument><expr><literal type="string">"invalid checksum for file \"%s\": \"%s\""</literal></expr></argument>,
							  <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>, <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Invoke the callback with the details we've gathered. */</comment>
	<expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>perfile_cb</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
						<argument><expr><name>checksum_type</name></expr></argument>, <argument><expr><name>checksum_length</name></expr></argument>, <argument><expr><name>checksum_payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Free memory we no longer need. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>algorithm</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>algorithm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>checksum</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Do additional parsing and sanity-checking of the details gathered for one
 * WAL range, and invoke the per-WAL-range callback so that the caller gets
 * those details. This happens for each WAL range when the corresponding JSON
 * object is completely parsed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>json_manifest_finalize_wal_range</name><parameter_list>(<parameter><decl><type><name>JsonManifestParseState</name> <modifier>*</modifier></type><name>parse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonManifestParseContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineID</name></type>	<name>tli</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>start_lsn</name></decl>,
				<decl><type ref="prev"/><name>end_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

	<comment type="block">/* Make sure all fields are present. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>timeline</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="string">"missing timeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="string">"missing start LSN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="string">"missing end LSN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Parse timeline. */</comment>
	<expr_stmt><expr><name>tli</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>timeline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
									<argument><expr><literal type="string">"timeline is not an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_xlogrecptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_lsn</name></expr></argument>, <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>start_lsn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
									<argument><expr><literal type="string">"could not parse start LSN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_xlogrecptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end_lsn</name></expr></argument>, <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>end_lsn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
									<argument><expr><literal type="string">"could not parse end LSN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Invoke the callback with the details we've gathered. */</comment>
	<expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>perwalrange_cb</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>tli</name></expr></argument>, <argument><expr><name>start_lsn</name></expr></argument>, <argument><expr><name>end_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Free memory we no longer need. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>timeline</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>timeline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>timeline</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>start_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>end_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parse</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Verify that the manifest checksum is correct.
 *
 * The last line of the manifest file is excluded from the manifest checksum,
 * because the last line is expected to contain the checksum that covers
 * the rest of the file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>verify_manifest_checksum</name><parameter_list>(<parameter><decl><type><name>JsonManifestParseState</name> <modifier>*</modifier></type><name>parse</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
						 <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonManifestParseContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>number_of_newlines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>ultimate_newline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>penultimate_newline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_sha256_ctx</name></type> <name>manifest_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>manifest_checksum_actual</name><index>[<expr><name>PG_SHA256_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>manifest_checksum_expected</name><index>[<expr><name>PG_SHA256_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* Find the last two newlines in the file. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>++</operator><name>number_of_newlines</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>penultimate_newline</name> <operator>=</operator> <name>ultimate_newline</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ultimate_newline</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Make sure that the last newline is right at the end, and that there are
	 * at least two lines total. We need this to be true in order for the
	 * following code, which computes the manifest checksum, to work properly.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>number_of_newlines</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
									<argument><expr><literal type="string">"expected at least 2 lines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ultimate_newline</name> <operator>!=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>json_manifest_parse_failure</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
									<argument><expr><literal type="string">"last line not newline-terminated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Checksum the rest. */</comment>
	<expr_stmt><expr><call><name>pg_sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>manifest_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>manifest_ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr></argument>, <argument><expr><name>penultimate_newline</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_sha256_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>manifest_ctx</name></expr></argument>, <argument><expr><name>manifest_checksum_actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now verify it. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>manifest_checksum</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>error_cb</name></name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="string">"manifest has no checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>manifest_checksum</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PG_SHA256_DIGEST_LENGTH</name> <operator>*</operator> <literal type="number">2</literal> <operator>||</operator>
		<operator>!</operator><call><name>hexdecode_string</name><argument_list>(<argument><expr><name>manifest_checksum_expected</name></expr></argument>, <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>manifest_checksum</name></name></expr></argument>,
						  <argument><expr><name>PG_SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>error_cb</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"invalid manifest checksum: \"%s\""</literal></expr></argument>,
						  <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>manifest_checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>manifest_checksum_actual</name></expr></argument>, <argument><expr><name>manifest_checksum_expected</name></expr></argument>,
			   <argument><expr><name>PG_SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>error_cb</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"manifest checksum mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Report a parse error.
 *
 * This is intended to be used for fairly low-level failures that probably
 * shouldn't occur unless somebody has deliberately constructed a bad manifest,
 * or unless the server is generating bad manifests due to some bug. msg should
 * be a short string giving some hint as to what the problem is.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>json_manifest_parse_failure</name><parameter_list>(<parameter><decl><type><name>JsonManifestParseContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>error_cb</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"could not parse backup manifest: %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Convert a character which represents a hexadecimal digit to an integer.
 *
 * Returns -1 if the character is not a hexadecimal digit.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>hexdecode_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Decode a hex string into a byte string, 2 hex chars per byte.
 *
 * Returns false if invalid characters are encountered; otherwise true.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>hexdecode_string</name><parameter_list>(<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbytes</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>n1</name> <init>= <expr><call><name>hexdecode_char</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>n2</name> <init>= <expr><call><name>hexdecode_char</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n1</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>n2</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse an XLogRecPtr expressed using the usual string format.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>parse_xlogrecptr</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>hi</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>lo</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"%X/%X"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name>hi</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <name>lo</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
