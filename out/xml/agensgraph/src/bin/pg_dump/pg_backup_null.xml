<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/bin/pg_dump/pg_backup_null.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pg_backup_null.c
 *
 *	Implementation of an archive that is never saved; it is used by
 *	pg_dump to output a plain text SQL script instead of saving
 *	a real archive.
 *
 *	See the headers to pg_restore for more details.
 *
 * Copyright (c) 2000, Philip Warner
 *		Rights are granted to use this software in any way so long
 *		as this notice is not removed.
 *
 *	The author is not responsible for loss or damages that may
 *	result from its use.
 *
 *
 * IDENTIFICATION
 *		src/bin/pg_dump/pg_backup_null.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/string_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq-fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_backup_archiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_backup_utils.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_WriteData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dLen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_WriteBlobData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dLen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_EndData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>_WriteByte</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_WriteBuf</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_CloseArchive</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_PrintTocData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_StartBlobs</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_StartBlob</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_EndBlob</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_EndBlobs</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 *	Initializer
 */</comment>
<function><type><name>void</name></type>
<name>InitArchiveFmt_Null</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Assuming static functions, this can be copied for each format. */</comment>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>WriteDataPtr</name></name> <operator>=</operator> <name>_WriteData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>EndDataPtr</name></name> <operator>=</operator> <name>_EndData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>WriteBytePtr</name></name> <operator>=</operator> <name>_WriteByte</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>WriteBufPtr</name></name> <operator>=</operator> <name>_WriteBuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>ClosePtr</name></name> <operator>=</operator> <name>_CloseArchive</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>ReopenPtr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>PrintTocDataPtr</name></name> <operator>=</operator> <name>_PrintTocData</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>StartBlobsPtr</name></name> <operator>=</operator> <name>_StartBlobs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>StartBlobPtr</name></name> <operator>=</operator> <name>_StartBlob</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>EndBlobPtr</name></name> <operator>=</operator> <name>_EndBlob</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>EndBlobsPtr</name></name> <operator>=</operator> <name>_EndBlobs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>ClonePtr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>DeClonePtr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Initialize LO buffering */</comment>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>lo_buf_size</name></name> <operator>=</operator> <name>LOBBUFSIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>lo_buf</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>LOBBUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now prevent reading...
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>archModeRead</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"this format cannot be read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * - Start a new TOC entry
 */</comment>

<comment type="block">/*
 * Called by dumper via archiver from within a data dump routine
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_WriteData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Just send it to output, ahwrite() already errors on failure */</comment>
	<expr_stmt><expr><call><name>ahwrite</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dLen</name></expr></argument>, <argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Called by dumper via archiver from within a data dump routine
 * We substitute this for _WriteData while emitting a BLOB
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_WriteBlobData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>dLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>buf</name> <init>= <expr><call><name>createPQExpBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendByteaLiteralAHX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
							  <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>,
							  <argument><expr><name>dLen</name></expr></argument>,
							  <argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ahprintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"SELECT pg_catalog.lowrite(0, %s);\n"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_EndData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ahprintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Called by the archiver when starting to save all BLOB DATA (not schema).
 * This routine should save whatever format-specific information is needed
 * to read the BLOBs back into memory.
 *
 * It is called just prior to the dumper's DataDumper routine.
 *
 * Optional, but strongly recommended.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_StartBlobs</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ahprintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"BEGIN;\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Called by the archiver when the dumper calls StartBlob.
 *
 * Mandatory.
 *
 * Must save the passed OID for retrieval at restore-time.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_StartBlob</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>old_blob_style</name> <init>= <expr><operator>(</operator><name><name>AH</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <name>K_VERS_1_12</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>oid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"invalid OID for large object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* With an old archive we must do drop and create logic here */</comment>
	<if_stmt><if>if <condition>(<expr><name>old_blob_style</name> <operator>&amp;&amp;</operator> <name><name>AH</name><operator>-&gt;</operator><name>public</name><operator>.</operator><name>ropt</name><operator>-&gt;</operator><name>dropSchema</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>DropBlobIfExists</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>old_blob_style</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ahprintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"SELECT pg_catalog.lo_open(pg_catalog.lo_create('%u'), %d);\n"</literal></expr></argument>,
				 <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>INV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ahprintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"SELECT pg_catalog.lo_open('%u', %d);\n"</literal></expr></argument>,
				 <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>INV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>WriteDataPtr</name></name> <operator>=</operator> <name>_WriteBlobData</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Called by the archiver when the dumper calls EndBlob.
 *
 * Optional.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_EndBlob</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>WriteDataPtr</name></name> <operator>=</operator> <name>_WriteData</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ahprintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"SELECT pg_catalog.lo_close(0);\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Called by the archiver when finishing saving all BLOB DATA.
 *
 * Optional.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_EndBlobs</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ahprintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"COMMIT;\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*------
 * Called as part of a RestoreArchive call; for the NULL archive, this
 * just sends the data for a given TOC entry to the output.
 *------
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_PrintTocData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>dataDumper</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>currToc</name></name> <operator>=</operator> <name>te</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>te</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><literal type="string">"BLOBS"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>_StartBlobs</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name><name>te</name><operator>-&gt;</operator><name>dataDumper</name></name><argument_list>(<argument><expr><operator>(</operator><name>Archive</name> <operator>*</operator><operator>)</operator> <name>AH</name></expr></argument>, <argument><expr><name><name>te</name><operator>-&gt;</operator><name>dataDumperArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>te</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><literal type="string">"BLOBS"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>_EndBlobs</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>currToc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_WriteByte</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Don't do anything */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_WriteBuf</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Don't do anything */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_CloseArchive</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Nothing to do */</comment>
</block_content>}</block></function>
</unit>
