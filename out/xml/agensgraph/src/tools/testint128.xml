<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/tools/testint128.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * testint128.c
 *	  Testbed for roll-our-own 128-bit integer arithmetic.
 *
 * This is a standalone test program that compares the behavior of an
 * implementation in int128.h to an (assumed correct) int128 native type.
 *
 * Copyright (c) 2017-2020, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/tools/testint128.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<comment type="block">/*
 * By default, we test the non-native implementation in int128.h; but
 * by predefining USE_NATIVE_INT128 to 1, you can test the native
 * implementation, just to be sure.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_NATIVE_INT128</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_NATIVE_INT128</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/int128.h"</cpp:file></cpp:include>

<comment type="block">/*
 * We assume the parts of this union are laid out compatibly.
 */</comment>
<typedef>typedef <type><union>union
<block>{
	<decl_stmt><decl><type><name>int128</name></type>		<name>i128</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>INT128</name></type>		<name>I128</name></decl>;</decl_stmt>
	<union>union
	<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
		<decl_stmt><decl><type><name>int64</name></type>		<name>hi</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type>		<name>lo</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name>uint64</name></type>		<name>lo</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type>		<name>hi</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block>			<decl><name>hl</name></decl>;</union>
}</block></union></type>			<name>test128</name>;</typedef>


<comment type="block">/*
 * Control version of comparator.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>my_int128_compare</name><parameter_list>(<parameter><decl><type><name>int128</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int128</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get a random uint64 value.
 * We don't assume random() is good for more than 16 bits.
 */</comment>
<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>get_random_uint64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <operator>(</operator><call><name>random</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <operator>(</operator><call><name>random</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <operator>(</operator><call><name>random</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <operator>(</operator><call><name>random</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Main program.
 *
 * Generates a lot of random numbers and tests the implementation for each.
 * The results should be reproducible, since we don't call srandom().
 *
 * You can give a loop count if you don't like the default 1B iterations.
 */</comment>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type>		<name>count</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<while>while <condition>(<expr><name>count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int64</name></type>		<name>x</name> <init>= <expr><call><name>get_random_uint64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type>		<name>y</name> <init>= <expr><call><name>get_random_uint64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type>		<name>z</name> <init>= <expr><call><name>get_random_uint64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>test128</name></type>		<name>t1</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>test128</name></type>		<name>t2</name></decl>;</decl_stmt>

		<comment type="block">/* check unsigned addition */</comment>
		<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>i128</name></name> <operator>+=</operator> <operator>(</operator><name>int128</name><operator>)</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <name>z</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>int128_add_uint64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t2</name><operator>.</operator><name>I128</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name><operator>)</operator> <name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name> <operator>!=</operator> <name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name> <operator>||</operator> <name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name> <operator>!=</operator> <name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%016lX%016lX + unsigned %lX\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"native = %016lX%016lX\n"</literal></expr></argument>, <argument><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"result = %016lX%016lX\n"</literal></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* check signed addition */</comment>
		<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>i128</name></name> <operator>+=</operator> <operator>(</operator><name>int128</name><operator>)</operator> <name>z</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>int128_add_int64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t2</name><operator>.</operator><name>I128</name></name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name> <operator>!=</operator> <name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name> <operator>||</operator> <name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name> <operator>!=</operator> <name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%016lX%016lX + signed %lX\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"native = %016lX%016lX\n"</literal></expr></argument>, <argument><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"result = %016lX%016lX\n"</literal></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* check multiplication */</comment>
		<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>i128</name></name> <operator>=</operator> <operator>(</operator><name>int128</name><operator>)</operator> <name>x</name> <operator>*</operator> <operator>(</operator><name>int128</name><operator>)</operator> <name>y</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>int128_add_int64_mul_int64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t2</name><operator>.</operator><name>I128</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name> <operator>!=</operator> <name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name> <operator>||</operator> <name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name> <operator>!=</operator> <name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lX * %lX\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"native = %016lX%016lX\n"</literal></expr></argument>, <argument><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"result = %016lX%016lX\n"</literal></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* check comparison */</comment>
		<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <call><name>get_random_uint64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>my_int128_compare</name><argument_list>(<argument><expr><name><name>t1</name><operator>.</operator><name>i128</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>i128</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
			<call><name>int128_compare</name><argument_list>(<argument><expr><name><name>t1</name><operator>.</operator><name>I128</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>I128</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"comparison failure: %d vs %d\n"</literal></expr></argument>,
				   <argument><expr><call><name>my_int128_compare</name><argument_list>(<argument><expr><name><name>t1</name><operator>.</operator><name>i128</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>i128</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>int128_compare</name><argument_list>(<argument><expr><name><name>t1</name><operator>.</operator><name>I128</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>I128</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"arg1 = %016lX%016lX\n"</literal></expr></argument>, <argument><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"arg2 = %016lX%016lX\n"</literal></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* check case with identical hi parts; above will hardly ever hit it */</comment>
		<expr_stmt><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>my_int128_compare</name><argument_list>(<argument><expr><name><name>t1</name><operator>.</operator><name>i128</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>i128</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
			<call><name>int128_compare</name><argument_list>(<argument><expr><name><name>t1</name><operator>.</operator><name>I128</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>I128</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"comparison failure: %d vs %d\n"</literal></expr></argument>,
				   <argument><expr><call><name>my_int128_compare</name><argument_list>(<argument><expr><name><name>t1</name><operator>.</operator><name>i128</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>i128</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>int128_compare</name><argument_list>(<argument><expr><name><name>t1</name><operator>.</operator><name>I128</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>I128</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"arg1 = %016lX%016lX\n"</literal></expr></argument>, <argument><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"arg2 = %016lX%016lX\n"</literal></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>.</operator><name>hl</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
