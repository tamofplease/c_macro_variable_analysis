<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/port/getpeereid.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * getpeereid.c
 *		get peer userid for UNIX-domain socket connection
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/port/getpeereid.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_UN_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UCRED_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ucred.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_UCRED_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ucred.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * BSD-style getpeereid() for platforms that lack it.
 */</comment>
<function><type><name>int</name></type>
<name>getpeereid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uid_t</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_PEERCRED</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Linux: use getsockopt(SO_PEERCRED) */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>ucred</name></name></type> <name>peercred</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACCEPT_TYPE_ARG3</name></type> <name>so_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>peercred</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_PEERCRED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peercred</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>so_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
		<name>so_len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>peercred</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>uid</name> <operator>=</operator> <name><name>peercred</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>gid</name> <operator>=</operator> <name><name>peercred</name><operator>.</operator><name>gid</name></name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOCAL_PEERCRED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<comment type="block">/* Debian with FreeBSD kernel: use getsockopt(LOCAL_PEERCRED) */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>xucred</name></name></type> <name>peercred</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACCEPT_TYPE_ARG3</name></type> <name>so_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>peercred</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LOCAL_PEERCRED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peercred</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>so_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
		<name>so_len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>peercred</name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
		<name><name>peercred</name><operator>.</operator><name>cr_version</name></name> <operator>!=</operator> <name>XUCRED_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>uid</name> <operator>=</operator> <name><name>peercred</name><operator>.</operator><name>cr_uid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>gid</name> <operator>=</operator> <name><name>peercred</name><operator>.</operator><name>cr_gid</name></name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPEERUCRED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<comment type="block">/* Solaris: use getpeerucred() */</comment>
	<decl_stmt><decl><type><name>ucred_t</name>    <modifier>*</modifier></type><name>ucred</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ucred</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>				<comment type="block">/* must be initialized to NULL */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>getpeerucred</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucred</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>uid</name> <operator>=</operator> <call><name>ucred_geteuid</name><argument_list>(<argument><expr><name>ucred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>gid</name> <operator>=</operator> <call><name>ucred_getegid</name><argument_list>(<argument><expr><name>ucred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ucred_free</name><argument_list>(<argument><expr><name>ucred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>uid</name> <operator>==</operator> <operator>(</operator><name>uid_t</name><operator>)</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>*</operator><name>gid</name> <operator>==</operator> <operator>(</operator><name>gid_t</name><operator>)</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* No implementation available on this platform */</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
