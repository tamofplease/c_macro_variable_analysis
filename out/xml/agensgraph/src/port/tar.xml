<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/port/tar.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtar.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Print a numeric field in a tar header.  The field starts at *s and is of
 * length len; val is the value to be written.
 *
 * Per POSIX, the way to write a number is in octal with leading zeroes and
 * one trailing space (or NUL, but we use space) at the end of the specified
 * field width.
 *
 * However, the given value may not fit in the available space in octal form.
 * If that's true, we use the GNU extension of writing \200 followed by the
 * number in base-256 form (ie, stored in binary MSB-first).  (Note: here we
 * support only non-negative numbers, so we don't worry about the GNU rules
 * for handling negative numbers.)
 */</comment>
<function><type><name>void</name></type>
<name>print_tar_number</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Use octal with trailing space */</comment>
		<expr_stmt><expr><name><name>s</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>s</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Use base-256 with leading \200 */</comment>
		<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\200'</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>s</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Read a numeric field in a tar header.  The field starts at *s and is of
 * length len.
 *
 * The POSIX-approved format for a number is octal, ending with a space or
 * NUL.  However, for values that don't fit, we recognize the GNU extension
 * of \200 followed by the number in base-256 form (ie, stored in binary
 * MSB-first).  (Note: here we support only non-negative numbers, so we don't
 * worry about the GNU rules for handling negative numbers.)
 */</comment>
<function><type><name>uint64</name></type>
<name>read_tar_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\200'</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* base-256 */</comment>
		<while>while <condition>(<expr><operator>--</operator><name>len</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>*</operator><operator>++</operator><name>s</name><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* octal */</comment>
		<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Calculate the tar checksum for a header. The header is assumed to always
 * be 512 bytes, per the tar standard.
 */</comment>
<function><type><name>int</name></type>
<name>tarChecksum</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Per POSIX, the checksum is the simple sum of all bytes in the header,
	 * treating the bytes as unsigned, and treating the checksum field (at
	 * offset 148) as though it contained 8 spaces.
	 */</comment>
	<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="char">' '</literal></expr>;</expr_stmt>				<comment type="block">/* presumed value for checksum field */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">148</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">156</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>sum</name> <operator>+=</operator> <literal type="number">0xFF</literal> <operator>&amp;</operator> <name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Fill in the buffer pointed to by h with a tar format header. This buffer
 * must always have space for 512 characters, which is a requirement of
 * the tar format.
 */</comment>
<function><type><name><name>enum</name> <name>tarError</name></name></type>
<name>tarCreateHeader</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linktarget</name></decl></parameter>,
				<parameter><decl><type><name>pgoff_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>mtime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">99</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>TAR_NAME_TOO_LONG</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>linktarget</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>linktarget</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">99</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>TAR_SYMLINK_TOO_LONG</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block">/* assume tar header size */</comment>

	<comment type="block">/* Name 100 */</comment>
	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>linktarget</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We only support symbolic links to directories, and this is
		 * indicated in the tar format by adding a slash at the end of the
		 * name, the same as for regular directories.
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>flen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>flen</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>flen</name></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>h</name><index>[<expr><name>flen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>h</name><index>[<expr><name>flen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Mode 8 - this doesn't include the file type bits (S_IFMT)  */</comment>
	<expr_stmt><expr><call><name>print_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">07777</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* User ID 8 */</comment>
	<expr_stmt><expr><call><name>print_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">108</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Group 8 */</comment>
	<expr_stmt><expr><call><name>print_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">116</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* File size 12 */</comment>
	<if_stmt><if>if <condition>(<expr><name>linktarget</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* Symbolic link or directory has size zero */</comment>
		<expr_stmt><expr><call><name>print_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">124</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>print_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">124</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* Mod Time 12 */</comment>
	<expr_stmt><expr><call><name>print_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">136</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>mtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Checksum 8 cannot be calculated until we've filled all other fields */</comment>

	<if_stmt><if>if <condition>(<expr><name>linktarget</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Type - Symbolic link */</comment>
		<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">156</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'2'</literal></expr>;</expr_stmt>
		<comment type="block">/* Link Name 100 */</comment>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">157</literal></expr>]</index></name></expr></argument>, <argument><expr><name>linktarget</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Type - directory */</comment>
		<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">156</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'5'</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Type - regular file */</comment>
		<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">156</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Magic 6 */</comment>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ustar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Version 2 */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">263</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* User 32 */</comment>
	<comment type="block">/* XXX: Do we need to care about setting correct username? */</comment>
	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">265</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"postgres"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Group 32 */</comment>
	<comment type="block">/* XXX: Do we need to care about setting correct group name? */</comment>
	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">297</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"postgres"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Major Dev 8 */</comment>
	<expr_stmt><expr><call><name>print_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">329</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Minor Dev 8 */</comment>
	<expr_stmt><expr><call><name>print_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">337</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Prefix 155 - not used, leave as nulls */</comment>

	<comment type="block">/* Finally, compute and insert the checksum */</comment>
	<expr_stmt><expr><call><name>print_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">148</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>tarChecksum</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>TAR_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
