<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/port/win32env.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * win32env.c
 *	  putenv() and unsetenv() for win32, which update both process environment
 *	  and caches in (potentially multiple) C run-time library (CRT) versions.
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/port/win32env.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>pgwin32_putenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>envcpy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<typedef>typedef <function_decl><type><name>int</name></type> (<name>_cdecl</name> <modifier>*</modifier> <name>PUTENVPROC</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>modulenames</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"msvcrt"</literal></expr>,				<comment type="block">/* Visual Studio 6.0 / MinGW */</comment>
		<expr><literal type="string">"msvcrtd"</literal></expr>,
		<expr><literal type="string">"msvcr70"</literal></expr>,				<comment type="block">/* Visual Studio 2002 */</comment>
		<expr><literal type="string">"msvcr70d"</literal></expr>,
		<expr><literal type="string">"msvcr71"</literal></expr>,				<comment type="block">/* Visual Studio 2003 */</comment>
		<expr><literal type="string">"msvcr71d"</literal></expr>,
		<expr><literal type="string">"msvcr80"</literal></expr>,				<comment type="block">/* Visual Studio 2005 */</comment>
		<expr><literal type="string">"msvcr80d"</literal></expr>,
		<expr><literal type="string">"msvcr90"</literal></expr>,				<comment type="block">/* Visual Studio 2008 */</comment>
		<expr><literal type="string">"msvcr90d"</literal></expr>,
		<expr><literal type="string">"msvcr100"</literal></expr>,				<comment type="block">/* Visual Studio 2010 */</comment>
		<expr><literal type="string">"msvcr100d"</literal></expr>,
		<expr><literal type="string">"msvcr110"</literal></expr>,				<comment type="block">/* Visual Studio 2012 */</comment>
		<expr><literal type="string">"msvcr110d"</literal></expr>,
		<expr><literal type="string">"msvcr120"</literal></expr>,				<comment type="block">/* Visual Studio 2013 */</comment>
		<expr><literal type="string">"msvcr120d"</literal></expr>,
		<expr><literal type="string">"ucrtbase"</literal></expr>,				<comment type="block">/* Visual Studio 2015 and later */</comment>
		<expr><literal type="string">"ucrtbased"</literal></expr>,
		<expr><name>NULL</name></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Update process environment, making this change visible to child
	 * processes and to CRTs initializing in the future.  Do this before the
	 * _putenv() loop, for the benefit of any CRT that initializes during this
	 * pgwin32_putenv() execution, after the loop checks that CRT.
	 *
	 * Need a copy of the string so we can modify it.
	 */</comment>
	<expr_stmt><expr><name>envcpy</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>envval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>envcpy</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>envcpy</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>envcpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Only call SetEnvironmentVariable() when we are adding a variable,
		 * not when removing it. Calling it on both crashes on at least
		 * certain versions of MinGW.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetEnvironmentVariable</name><argument_list>(<argument><expr><name>envcpy</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>envcpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>envcpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Each CRT has its own _putenv() symbol and copy of the environment.
	 * Update the environment in each CRT module currently loaded, so every
	 * third-party library sees this change regardless of the CRT it links
	 * against.  Addresses within these modules may become invalid the moment
	 * we call FreeLibrary(), so don't cache them.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>modulenames</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HMODULE</name></type>		<name>hmodule</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BOOL</name></type>		<name>res</name> <init>= <expr><call><name>GetModuleHandleEx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>modulenames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hmodule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>hmodule</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PUTENVPROC</name></type>	<name>putenvFunc</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>putenvFunc</name> <operator>=</operator> <operator>(</operator><name>PUTENVPROC</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hmodule</name></expr></argument>, <argument><expr><literal type="string">"_putenv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>putenvFunc</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>putenvFunc</name><argument_list>(<argument><expr><name>envval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hmodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Finally, update our "own" cache.  This is redundant with the loop
	 * above, except when PostgreSQL itself links to a CRT not listed above.
	 * Ideally, the loop does visit all possible CRTs, making this redundant.
	 */</comment>
	<return>return <expr><call><name>_putenv</name><argument_list>(<argument><expr><name>envval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pgwin32_unsetenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>envbuf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>envbuf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>envbuf</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>, <argument><expr><literal type="string">"%s="</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgwin32_putenv</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
