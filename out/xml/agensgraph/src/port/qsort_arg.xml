<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/port/qsort_arg.c"><comment type="block">/*
 *	qsort_arg.c: qsort with a passthrough "void *" argument
 *
 *	Modifications from vanilla NetBSD source:
 *	  Add do ... while() macro fix
 *	  Remove __inline, _DIAGASSERTs, __P
 *	  Remove ill-considered "swap_cnt" switch to insertion sort,
 *	  in favor of a simple check for presorted input.
 *	  Take care to recurse on the smaller partition, to bound stack usage.
 *
 *	CAUTION: if you change this file, see also qsort.c, gen_qsort_tuple.pl
 *
 *	src/port/qsort_arg.c
 */</comment>

<comment type="block">/*	$NetBSD: qsort.c,v 1.13 2003/08/07 16:43:42 agc Exp $	*/</comment>

<comment type="block">/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *	  may be used to endorse or promote products derived from this software
 *	  without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>med3</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
				  <parameter><decl><type><name>qsort_arg_comparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>swapfunc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Qsort routine based on J. L. Bentley and M. D. McIlroy,
 * "Engineering a sort function",
 * Software--Practice and Experience 23 (1993) 1249-1265.
 *
 * We have modified their original by adding a check for already-sorted input,
 * which seems to be a win per discussions on pgsql-hackers around 2006-03-21.
 *
 * Also, we recurse on the smaller partition and iterate on the larger one,
 * which ensures we cannot recurse more than log(N) levels (since the
 * partition recursed to is surely no more than half of the input).  Bentley
 * and McIlroy explicitly rejected doing this on the grounds that it's "not
 * worth the effort", but we have seen crashes in the field due to stack
 * overrun, so that judgment seems wrong.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>swapcode</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>parmi</name></type></parameter>, <parameter><type><name>parmj</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do {		\
	size_t i = (n) / sizeof (TYPE);			\
	TYPE *pi = (TYPE *)(void *)(parmi);			\
	TYPE *pj = (TYPE *)(void *)(parmj);			\
	do {						\
		TYPE	t = *pi;			\
		*pi++ = *pj;				\
		*pj++ = t;				\
		} while (--i &gt; 0);				\
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAPINIT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>es</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>swaptype = ((char *)(a) - (char *)0) % sizeof(long) || \
	(es) % sizeof(long) ? 2 : (es) == sizeof(long)? 0 : 1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>swapfunc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>swaptype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>swaptype</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>swapcode</name><argument_list>(<argument><expr><name>long</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>swapcode</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>swap</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>						\
	<cpp:value>if (swaptype == 0) {					\
		long t = *(long *)(void *)(a);			\
		*(long *)(void *)(a) = *(long *)(void *)(b);	\
		*(long *)(void *)(b) = t;			\
	} else							\
		swapfunc(a, b, es, swaptype)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vecswap</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((n) &gt; 0) swapfunc(a, b, n, swaptype)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>med3</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>qsort_arg_comparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><call><name>cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
		<expr><operator>(</operator><ternary><condition><expr><call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name>cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><name>a</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>
		</then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name>cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>qsort_arg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>es</name></decl></parameter>, <parameter><decl><type><name>qsort_arg_comparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pa</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pb</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pc</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pd</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pl</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pm</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>d1</name></decl>,
				<decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>r</name></decl>,
				<decl><type ref="prev"/><name>swaptype</name></decl>,
				<decl><type ref="prev"/><name>presorted</name></decl>;</decl_stmt>

<label><name>loop</name>:</label><expr_stmt><expr><call><name>SWAPINIT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>pm</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <name>es</name></expr>;</init> <condition><expr><name>pm</name> <operator>&lt;</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>es</name></expr>;</condition> <incr><expr><name>pm</name> <operator>+=</operator> <name>es</name></expr></incr>)</control><block type="pseudo"><block_content>
			<for>for <control>(<init><expr><name>pl</name> <operator>=</operator> <name>pm</name></expr>;</init> <condition><expr><name>pl</name> <operator>&gt;</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>&amp;&amp;</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>pl</name> <operator>-</operator> <name>es</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition>
				 <incr><expr><name>pl</name> <operator>-=</operator> <name>es</name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>pl</name></expr></argument>, <argument><expr><name>pl</name> <operator>-</operator> <name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>presorted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>pm</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <name>es</name></expr>;</init> <condition><expr><name>pm</name> <operator>&lt;</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>es</name></expr>;</condition> <incr><expr><name>pm</name> <operator>+=</operator> <name>es</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>pm</name> <operator>-</operator> <name>es</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>presorted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>presorted</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>pm</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>es</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>pl</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pn</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>es</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type>		<name>d</name> <init>= <expr><operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>es</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>med3</name><argument_list>(<argument><expr><name>pl</name></expr></argument>, <argument><expr><name>pl</name> <operator>+</operator> <name>d</name></expr></argument>, <argument><expr><name>pl</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>d</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pm</name> <operator>=</operator> <call><name>med3</name><argument_list>(<argument><expr><name>pm</name> <operator>-</operator> <name>d</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><name>pm</name> <operator>+</operator> <name>d</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pn</name> <operator>=</operator> <call><name>med3</name><argument_list>(<argument><expr><name>pn</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>d</name></expr></argument>, <argument><expr><name>pn</name> <operator>-</operator> <name>d</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pm</name> <operator>=</operator> <call><name>med3</name><argument_list>(<argument><expr><name>pl</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pa</name> <operator>=</operator> <name>pb</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <name>es</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>pd</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>es</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<while>while <condition>(<expr><name>pb</name> <operator>&lt;=</operator> <name>pc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>r</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>pa</name> <operator>+=</operator> <name>es</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pb</name> <operator>+=</operator> <name>es</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<while>while <condition>(<expr><name>pb</name> <operator>&lt;=</operator> <name>pc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>r</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>pd</name> <operator>-=</operator> <name>es</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pc</name> <operator>-=</operator> <name>es</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><name>pb</name> <operator>&gt;</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pb</name> <operator>+=</operator> <name>es</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pc</name> <operator>-=</operator> <name>es</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>pn</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>es</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>pa</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><name>pb</name> <operator>-</operator> <name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vecswap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pb</name> <operator>-</operator> <name>d1</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>pd</name> <operator>-</operator> <name>pc</name></expr></argument>, <argument><expr><name>pn</name> <operator>-</operator> <name>pd</name> <operator>-</operator> <name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vecswap</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pn</name> <operator>-</operator> <name>d1</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>pb</name> <operator>-</operator> <name>pa</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>pd</name> <operator>-</operator> <name>pc</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>d1</name> <operator>&lt;=</operator> <name>d2</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Recurse on left partition, then iterate on right partition */</comment>
		<if_stmt><if>if <condition>(<expr><name>d1</name> <operator>&gt;</operator> <name>es</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>qsort_arg</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>d1</name> <operator>/</operator> <name>es</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>d2</name> <operator>&gt;</operator> <name>es</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Iterate rather than recurse to save stack space */</comment>
			<comment type="block">/* qsort_arg(pn - d2, d2 / es, es, cmp, arg); */</comment>
			<expr_stmt><expr><name>a</name> <operator>=</operator> <name>pn</name> <operator>-</operator> <name>d2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>d2</name> <operator>/</operator> <name>es</name></expr>;</expr_stmt>
			<goto>goto <name>loop</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Recurse on right partition, then iterate on left partition */</comment>
		<if_stmt><if>if <condition>(<expr><name>d2</name> <operator>&gt;</operator> <name>es</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>qsort_arg</name><argument_list>(<argument><expr><name>pn</name> <operator>-</operator> <name>d2</name></expr></argument>, <argument><expr><name>d2</name> <operator>/</operator> <name>es</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>d1</name> <operator>&gt;</operator> <name>es</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Iterate rather than recurse to save stack space */</comment>
			<comment type="block">/* qsort_arg(a, d1 / es, es, cmp, arg); */</comment>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>d1</name> <operator>/</operator> <name>es</name></expr>;</expr_stmt>
			<goto>goto <name>loop</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
