<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/port/gettimeofday.c"><comment type="block">/*
 * gettimeofday.c
 *	  Win32 gettimeofday() replacement
 *
 * src/port/gettimeofday.c
 *
 * Copyright (c) 2003 SRA, Inc.
 * Copyright (c) 2003 SKC, Inc.
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose, without fee, and without a
 * written agreement is hereby granted, provided that the above
 * copyright notice and this paragraph and the following two
 * paragraphs appear in all copies.
 *
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE TO ANY PARTY FOR DIRECT,
 * INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE AUTHOR SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS
 * IS" BASIS, AND THE AUTHOR HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE,
 * SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<comment type="block">/* FILETIME of Jan 1 1970 00:00:00, the PostgreSQL epoch */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>__int64</name></type> <name>epoch</name> <init>= <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">116444736000000000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * FILETIME represents the number of 100-nanosecond intervals since
 * January 1, 1601 (UTC).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILETIME_UNITS_PER_SEC</name></cpp:macro>	<cpp:value>10000000L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILETIME_UNITS_PER_USEC</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<comment type="block">/*
 * Both GetSystemTimeAsFileTime and GetSystemTimePreciseAsFileTime share a
 * signature, so we can just store a pointer to whichever we find. This
 * is the pointer's type.
 */</comment>
<typedef>typedef <function_decl><type><name>VOID</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>PgGetSystemTimeFn</name>) <parameter_list>(<parameter><decl><type><name>LPFILETIME</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* One-time initializer function, must match that signature. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name> <name>WINAPI</name></type> <name>init_gettimeofday</name><parameter_list>(<parameter><decl><type><name>LPFILETIME</name></type> <name>lpSystemTimeAsFileTime</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Storage for the function we pick at runtime */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PgGetSystemTimeFn</name></type> <name>pg_get_system_time</name> <init>= <expr><operator>&amp;</operator><name>init_gettimeofday</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * One time initializer.  Determine whether GetSystemTimePreciseAsFileTime
 * is available and if so, plan to use it; if not, fall back to
 * GetSystemTimeAsFileTime.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name> <name>WINAPI</name></type>
<name>init_gettimeofday</name><parameter_list>(<parameter><decl><type><name>LPFILETIME</name></type> <name>lpSystemTimeAsFileTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Because it's guaranteed that kernel32.dll will be linked into our
	 * address space already, we don't need to LoadLibrary it and worry about
	 * closing it afterwards, so we're not using Pg's dlopen/dlsym() wrapper.
	 *
	 * We'll just look up the address of GetSystemTimePreciseAsFileTime if
	 * present.
	 *
	 * While we could look up the Windows version and skip this on Windows
	 * versions below Windows 8 / Windows Server 2012 there isn't much point,
	 * and determining the windows version is its self somewhat Windows
	 * version and development SDK specific...
	 */</comment>
	<expr_stmt><expr><name>pg_get_system_time</name> <operator>=</operator> <operator>(</operator><name>PgGetSystemTimeFn</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
															<argument><expr><literal type="string">"GetSystemTimePreciseAsFileTime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pg_get_system_time</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * The expected error from GetLastError() is ERROR_PROC_NOT_FOUND, if
		 * the function isn't present. No other error should occur.
		 *
		 * We can't report an error here because this might be running in
		 * frontend code; and even if we're in the backend, it's too early to
		 * elog(...) if we get some unexpected error.  Also, it's not a
		 * serious problem, so just silently fall back to
		 * GetSystemTimeAsFileTime irrespective of why the failure occurred.
		 */</comment>
		<expr_stmt><expr><name>pg_get_system_time</name> <operator>=</operator> <operator>&amp;</operator><name>GetSystemTimeAsFileTime</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call>(<modifier>*</modifier><name>pg_get_system_time</name>) <argument_list>(<argument><expr><name>lpSystemTimeAsFileTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * timezone information is stored outside the kernel so tzp isn't used anymore.
 *
 * Note: this function is not for Win32 high precision timing purposes. See
 * elapsed_time().
 */</comment>
<function><type><name>int</name></type>
<name>gettimeofday</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timezone</name></name> <modifier>*</modifier></type><name>tzp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILETIME</name></type>	<name>file_time</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>ularge</name></decl>;</decl_stmt>

	<expr_stmt><expr><call>(<modifier>*</modifier><name>pg_get_system_time</name>) <argument_list>(<argument><expr><operator>&amp;</operator><name>file_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ularge</name><operator>.</operator><name>LowPart</name></name> <operator>=</operator> <name><name>file_time</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ularge</name><operator>.</operator><name>HighPart</name></name> <operator>=</operator> <name><name>file_time</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ularge</name><operator>.</operator><name>QuadPart</name></name> <operator>-</operator> <name>epoch</name><operator>)</operator> <operator>/</operator> <name>FILETIME_UNITS_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>ularge</name><operator>.</operator><name>QuadPart</name></name> <operator>-</operator> <name>epoch</name><operator>)</operator> <operator>%</operator> <name>FILETIME_UNITS_PER_SEC</name><operator>)</operator>
						  <operator>/</operator> <name>FILETIME_UNITS_PER_USEC</name><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
