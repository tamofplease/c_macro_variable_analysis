<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/port/getrusage.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * getrusage.c
 *	  get information about resource utilisation
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/port/getrusage.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rusagestub.h"</cpp:file></cpp:include>

<comment type="block">/* This code works on:
 *		solaris_i386
 *		solaris_sparc
 *		hpux 9.*
 *		win32
 * which currently is all the supported platforms that don't have a
 * native version of getrusage().  So, if configure decides to compile
 * this file at all, we just use this version unconditionally.
 */</comment>

<function><type><name>int</name></type>
<name>getrusage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>who</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rusage</name></name> <modifier>*</modifier></type><name>rusage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<decl_stmt><decl><type><name>FILETIME</name></type>	<name>starttime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILETIME</name></type>	<name>exittime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILETIME</name></type>	<name>kerneltime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILETIME</name></type>	<name>usertime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>li</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>who</name> <operator>!=</operator> <name>RUSAGE_SELF</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Only RUSAGE_SELF is supported in this implementation for now */</comment>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>rusage</name> <operator>==</operator> <operator>(</operator>struct <name>rusage</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFAULT</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rusage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rusage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>GetProcessTimes</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exittime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kerneltime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usertime</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>_dosmaperr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Convert FILETIMEs (0.1 us) to struct timeval */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kerneltime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILETIME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>/=</operator> <literal type="number">10L</literal></expr>;</expr_stmt>			<comment type="block">/* Convert to microseconds */</comment>
	<expr_stmt><expr><name><name>rusage</name><operator>-&gt;</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>/</operator> <literal type="number">1000000L</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rusage</name><operator>-&gt;</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>%</operator> <literal type="number">1000000L</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usertime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILETIME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>/=</operator> <literal type="number">10L</literal></expr>;</expr_stmt>			<comment type="block">/* Convert to microseconds */</comment>
	<expr_stmt><expr><name><name>rusage</name><operator>-&gt;</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>/</operator> <literal type="number">1000000L</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rusage</name><operator>-&gt;</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>%</operator> <literal type="number">1000000L</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* all but WIN32 */</comment>

	<decl_stmt><decl><type><name><name>struct</name> <name>tms</name></name></type>	<name>tms</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tick_rate</name> <init>= <expr><name>CLK_TCK</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* ticks per second */</comment>
	<decl_stmt><decl><type><name>clock_t</name></type>		<name>u</name></decl>,
				<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rusage</name> <operator>==</operator> <operator>(</operator>struct <name>rusage</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFAULT</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>times</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tms</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* errno set by times */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><name>who</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RUSAGE_SELF</name></expr>:</case>
			<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>tms</name><operator>.</operator><name>tms_utime</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>tms</name><operator>.</operator><name>tms_stime</name></name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RUSAGE_CHILDREN</name></expr>:</case>
			<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>tms</name><operator>.</operator><name>tms_cutime</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>tms</name><operator>.</operator><name>tms_cstime</name></name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></switch>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TICK_TO_SEC</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>RATE</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((T)/(RATE))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TICK_TO_USEC</name><parameter_list>(<parameter><type><name>T</name></type></parameter>,<parameter><type><name>RATE</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(((T)%(RATE)*1000000)/RATE)</cpp:value></cpp:define>
	<expr_stmt><expr><name><name>rusage</name><operator>-&gt;</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>TICK_TO_SEC</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>tick_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rusage</name><operator>-&gt;</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <call><name>TICK_TO_USEC</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>tick_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rusage</name><operator>-&gt;</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>TICK_TO_SEC</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tick_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rusage</name><operator>-&gt;</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <call><name>TICK_TO_USEC</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>tick_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WIN32 */</comment>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
