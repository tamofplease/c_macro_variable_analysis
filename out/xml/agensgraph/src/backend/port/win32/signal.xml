<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/port/win32/signal.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * signal.c
 *	  Microsoft Windows Win32 Signal Emulation Functions
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/port/win32/signal.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqsignal.h"</cpp:file></cpp:include>

<comment type="block">/*
 * These are exported for use by the UNBLOCKED_SIGNAL_QUEUE() macro.
 * pg_signal_queue must be volatile since it is changed by the signal
 * handling thread and inspected without any lock by the main thread.
 * pg_signal_mask is only changed by main thread so shouldn't need it.
 */</comment>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>pg_signal_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>pg_signal_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type>		<name>pgwin32_signal_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type>		<name>pgwin32_initial_signal_pipe</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * pg_signal_crit_sec is used to protect only pg_signal_queue. That is the only
 * variable that can be accessed from the signal sending threads!
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>CRITICAL_SECTION</name></type> <name>pg_signal_crit_sec</name></decl>;</decl_stmt>

<comment type="block">/* Note that array elements 0 are unused since they correspond to signal 0 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>pqsigfunc</name></type> <name><name>pg_signal_array</name><index>[<expr><name>PG_SIGNAL_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pqsigfunc</name></type> <name><name>pg_signal_defaults</name><index>[<expr><name>PG_SIGNAL_COUNT</name></expr>]</index></name></decl>;</decl_stmt>


<comment type="block">/* Signal handling thread functions */</comment>
<function_decl><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>pg_signal_thread</name><parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>pg_console_handler</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>dwCtrlType</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * pg_usleep --- delay the specified number of microseconds, but
 * stop waiting if a signal arrives.
 *
 * This replaces the non-signal-aware version provided by src/port/pgsleep.c.
 */</comment>
<function><type><name>void</name></type>
<name>pg_usleep</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>microsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pgwin32_signal_event</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>pgwin32_signal_event</name></expr></argument>,
							<argument><expr><operator>(</operator><ternary><condition><expr><name>microsec</name> <operator>&lt;</operator> <literal type="number">500</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>microsec</name> <operator>+</operator> <literal type="number">500</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call>
		<operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pgwin32_dispatch_queued_signals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/* Initialization */</comment>
<function><type><name>void</name></type>
<name>pgwin32_signal_initialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>signal_thread_handle</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pg_signal_crit_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PG_SIGNAL_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>pg_signal_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>SIG_DFL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pg_signal_defaults</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>SIG_IGN</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>pg_signal_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>pg_signal_queue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Create the global event handle used to flag signals */</comment>
	<expr_stmt><expr><name>pgwin32_signal_event</name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pgwin32_signal_event</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"could not create signal event: error code %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Create thread for handling signals */</comment>
	<expr_stmt><expr><name>signal_thread_handle</name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pg_signal_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>signal_thread_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"could not create signal handler thread"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Create console control handle to pick up Ctrl-C etc */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>pg_console_handler</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"could not set console control handler"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Dispatch all signals currently queued and not blocked
 * Blocked signals are ignored, and will be fired at the time of
 * the pqsigsetmask() call.
 */</comment>
<function><type><name>void</name></type>
<name>pgwin32_dispatch_queued_signals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>exec_mask</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pgwin32_signal_event</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pg_signal_crit_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>exec_mask</name> <operator>=</operator> <call><name>UNBLOCKED_SIGNAL_QUEUE</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* One or more unblocked signals queued for execution */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PG_SIGNAL_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>exec_mask</name> <operator>&amp;</operator> <call><name>sigmask</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Execute this signal */</comment>
				<decl_stmt><decl><type><name>pqsigfunc</name></type>	<name>sig</name> <init>= <expr><name><name>pg_signal_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIG_DFL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>sig</name> <operator>=</operator> <name><name>pg_signal_defaults</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>pg_signal_queue</name> <operator>&amp;=</operator> <operator>~</operator><call><name>sigmask</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>!=</operator> <name>SIG_ERR</name> <operator>&amp;&amp;</operator> <name>sig</name> <operator>!=</operator> <name>SIG_IGN</name> <operator>&amp;&amp;</operator> <name>sig</name> <operator>!=</operator> <name>SIG_DFL</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pg_signal_crit_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>sig</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pg_signal_crit_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>		<comment type="block">/* Restart outer loop, in case signal mask or
								 * queue has been modified inside signal
								 * handler */</comment>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>ResetEvent</name><argument_list>(<argument><expr><name>pgwin32_signal_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pg_signal_crit_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* signal masking. Only called on main thread, no sync required */</comment>
<function><type><name>int</name></type>
<name>pqsigsetmask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>prevmask</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>prevmask</name> <operator>=</operator> <name>pg_signal_mask</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pg_signal_mask</name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Dispatch any signals queued up right away, in case we have unblocked
	 * one or more signals previously queued
	 */</comment>
	<expr_stmt><expr><call><name>pgwin32_dispatch_queued_signals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>prevmask</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Unix-like signal handler installation
 *
 * Only called on main thread, no sync required
 */</comment>
<function><type><name>pqsigfunc</name></type>
<name>pqsignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><name>pqsigfunc</name></type> <name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pqsigfunc</name></type>	<name>prevfunc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>signum</name> <operator>&gt;=</operator> <name>PG_SIGNAL_COUNT</name> <operator>||</operator> <name>signum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SIG_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>prevfunc</name> <operator>=</operator> <name><name>pg_signal_array</name><index>[<expr><name>signum</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pg_signal_array</name><index>[<expr><name>signum</name></expr>]</index></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
	<return>return <expr><name>prevfunc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create the signal listener pipe for specified PID */</comment>
<function><type><name>HANDLE</name></type>
<name>pgwin32_create_signal_listener</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>pipename</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>pipe</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pipename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pipename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\\\.\\pipe\\pgsignal_%u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pipe</name> <operator>=</operator> <call><name>CreateNamedPipe</name><argument_list>(<argument><expr><name>pipename</name></expr></argument>, <argument><expr><name>PIPE_ACCESS_DUPLEX</name></expr></argument>,
						   <argument><expr><name>PIPE_TYPE_MESSAGE</name> <operator>|</operator> <name>PIPE_READMODE_MESSAGE</name> <operator>|</operator> <name>PIPE_WAIT</name></expr></argument>,
						   <argument><expr><name>PIPE_UNLIMITED_INSTANCES</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>pipe</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create signal listener pipe for PID %d: error code %lu"</literal></expr></argument>,
						<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>pid</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>pipe</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * All functions below execute on the signal handler thread
 * and must be synchronized as such!
 * NOTE! The only global variable that can be used is
 * pg_signal_queue!
 */</comment>


<comment type="block">/*
 * Queue a signal for the main thread, by setting the flag bit and event.
 */</comment>
<function><type><name>void</name></type>
<name>pg_queue_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pgwin32_signal_event</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>signum</name> <operator>&gt;=</operator> <name>PG_SIGNAL_COUNT</name> <operator>||</operator> <name>signum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>					<comment type="block">/* ignore any bad signal number */</comment>

	<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pg_signal_crit_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pg_signal_queue</name> <operator>|=</operator> <call><name>sigmask</name><argument_list>(<argument><expr><name>signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pg_signal_crit_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>pgwin32_signal_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Signal handling thread */</comment>
<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type>
<name>pg_signal_thread</name><parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>pipename</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>pipe</name> <init>= <expr><name>pgwin32_initial_signal_pipe</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Set up pipe name, in case we have to re-create the pipe. */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pipename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pipename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\\\.\\pipe\\pgsignal_%lu"</literal></expr></argument>, <argument><expr><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BOOL</name></type>		<name>fConnected</name></decl>;</decl_stmt>

		<comment type="block">/* Create a new pipe instance if we don't have one. */</comment>
		<if_stmt><if>if <condition>(<expr><name>pipe</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>pipe</name> <operator>=</operator> <call><name>CreateNamedPipe</name><argument_list>(<argument><expr><name>pipename</name></expr></argument>, <argument><expr><name>PIPE_ACCESS_DUPLEX</name></expr></argument>,
								   <argument><expr><name>PIPE_TYPE_MESSAGE</name> <operator>|</operator> <name>PIPE_READMODE_MESSAGE</name> <operator>|</operator> <name>PIPE_WAIT</name></expr></argument>,
								   <argument><expr><name>PIPE_UNLIMITED_INSTANCES</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>pipe</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>write_stderr</name><argument_list>(<argument><expr><literal type="string">"could not create signal listener pipe: error code %lu; retrying\n"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SleepEx</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Wait for a client to connect.  If something connects before we
		 * reach here, we'll get back a "failure" with ERROR_PIPE_CONNECTED,
		 * which is actually a success (way to go, Microsoft).
		 */</comment>
		<expr_stmt><expr><name>fConnected</name> <operator>=</operator> <ternary><condition><expr><call><name>ConnectNamedPipe</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><operator>(</operator><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_PIPE_CONNECTED</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>fConnected</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * We have a connection from a would-be signal sender. Process it.
			 */</comment>
			<decl_stmt><decl><type><name>BYTE</name></type>		<name>sigNum</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>DWORD</name></type>		<name>bytes</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>ReadFile</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigNum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<name>bytes</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Queue the signal before responding to the client.  In this
				 * way, it's guaranteed that once kill() has returned in the
				 * signal sender, the next CHECK_FOR_INTERRUPTS() in the
				 * signal recipient will see the signal.  (This is a stronger
				 * guarantee than POSIX makes; maybe we don't need it?  But
				 * without it, we've seen timing bugs on Windows that do not
				 * manifest on any known Unix.)
				 */</comment>
				<expr_stmt><expr><call><name>pg_queue_signal</name><argument_list>(<argument><expr><name>sigNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * Write something back to the client, allowing its
				 * CallNamedPipe() call to terminate.
				 */</comment>
				<expr_stmt><expr><call><name>WriteFile</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigNum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* Don't care if it
															 * works or not */</comment>

				<comment type="block">/*
				 * We must wait for the client to read the data before we can
				 * disconnect, else the data will be lost.  (If the WriteFile
				 * call failed, there'll be nothing in the buffer, so this
				 * shouldn't block.)
				 */</comment>
				<expr_stmt><expr><call><name>FlushFileBuffers</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * If we fail to read a byte from the client, assume it's the
				 * client's problem and do nothing.  Perhaps it'd be better to
				 * force a pipe close and reopen?
				 */</comment>
			</block_content>}</block></else></if_stmt>

			<comment type="block">/* Disconnect from client so that we can re-use the pipe. */</comment>
			<expr_stmt><expr><call><name>DisconnectNamedPipe</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * Connection failed.  Cleanup and try again.
			 *
			 * This should never happen.  If it does, there's a window where
			 * we'll miss signals until we manage to re-create the pipe.
			 * However, just trying to use the same pipe again is probably not
			 * going to work, so we have little choice.
			 */</comment>
			<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pipe</name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Console control handler will execute on a thread created
   by the OS at the time of invocation */</comment>
<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type>
<name>pg_console_handler</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>dwCtrlType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>dwCtrlType</name> <operator>==</operator> <name>CTRL_C_EVENT</name> <operator>||</operator>
		<name>dwCtrlType</name> <operator>==</operator> <name>CTRL_BREAK_EVENT</name> <operator>||</operator>
		<name>dwCtrlType</name> <operator>==</operator> <name>CTRL_CLOSE_EVENT</name> <operator>||</operator>
		<name>dwCtrlType</name> <operator>==</operator> <name>CTRL_SHUTDOWN_EVENT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_queue_signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>TRUE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>
</unit>
