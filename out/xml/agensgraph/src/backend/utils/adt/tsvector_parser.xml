<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/utils/adt/tsvector_parser.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * tsvector_parser.c
 *	  Parser for tsvector
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/adt/tsvector_parser.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_utils.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Private state of tsvector parser.  Note that tsquery also uses this code to
 * parse its input, hence the boolean flags.  The two flags are both true or
 * both false in current usage, but we keep them separate for clarity.
 * is_tsquery affects *only* the content of error messages.
 */</comment>
<struct>struct <name>TSVectorParseStateData</name>
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>prsbuf</name></decl>;</decl_stmt>			<comment type="block">/* next input character */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>bufstart</name></decl>;</decl_stmt>		<comment type="block">/* whole string (used only for errors) */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>word</name></decl>;</decl_stmt>			<comment type="block">/* buffer to hold the current word */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>			<comment type="block">/* size in bytes allocated for 'word' */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>eml</name></decl>;</decl_stmt>			<comment type="block">/* max bytes per character */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>oprisdelim</name></decl>;</decl_stmt>		<comment type="block">/* treat ! | * ( ) as delimiters? */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_tsquery</name></decl>;</decl_stmt>		<comment type="block">/* say "tsquery" not "tsvector" in errors? */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_web</name></decl>;</decl_stmt>			<comment type="block">/* we're in websearch_to_tsquery() */</comment>
}</block>;</struct>


<comment type="block">/*
 * Initializes parser for the input string. If oprisdelim is set, the
 * following characters are treated as delimiters in addition to whitespace:
 * ! | &amp; ( )
 */</comment>
<function><type><name>TSVectorParseState</name></type>
<name>init_tsvector_parser</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSVectorParseState</name></type> <name>state</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>TSVectorParseState</name><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>TSVectorParseStateData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bufstart</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>word</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>eml</name></name> <operator>=</operator> <call><name>pg_database_encoding_max_length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>oprisdelim</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_TSV_OPR_IS_DELIM</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>is_tsquery</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_TSV_IS_TSQUERY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>is_web</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_TSV_IS_WEB</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reinitializes parser to parse 'input', instead of previous input.
 */</comment>
<function><type><name>void</name></type>
<name>reset_tsvector_parser</name><parameter_list>(<parameter><decl><type><name>TSVectorParseState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Shuts down a tsvector parser.
 */</comment>
<function><type><name>void</name></type>
<name>close_tsvector_parser</name><parameter_list>(<parameter><decl><type><name>TSVectorParseState</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* increase the size of 'word' if needed to hold one more character */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESIZEPRSBUF</name></cpp:macro> \
<cpp:value>do { \
	int clen = curpos - state-&gt;word; \
	if ( clen + state-&gt;eml &gt;= state-&gt;len ) \
	{ \
		state-&gt;len *= 2; \
		state-&gt;word = (char *) repalloc(state-&gt;word, state-&gt;len); \
		curpos = state-&gt;word + clen; \
	} \
} while (0)</cpp:value></cpp:define>

<comment type="block">/* Fills gettoken_tsvector's output parameters, and returns true */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_TOKEN</name></cpp:macro> \
<cpp:value>do { \
	if (pos_ptr != NULL) \
	{ \
		*pos_ptr = pos; \
		*poslen = npos; \
	} \
	else if (pos != NULL) \
		pfree(pos); \
	\
	if (strval != NULL) \
		*strval = state-&gt;word; \
	if (lenval != NULL) \
		*lenval = curpos - state-&gt;word; \
	if (endptr != NULL) \
		*endptr = state-&gt;prsbuf; \
	return true; \
} while(0)</cpp:value></cpp:define>


<comment type="block">/* State codes used in gettoken_tsvector */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITWORD</name></cpp:macro>		<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITENDWORD</name></cpp:macro>		<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITNEXTCHAR</name></cpp:macro>	<cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITENDCMPLX</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITPOSINFO</name></cpp:macro>		<cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPOSINFO</name></cpp:macro>		<cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITPOSDELIM</name></cpp:macro>	<cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITCHARCMPLX</name></cpp:macro>	<cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRSSYNTAXERROR</name></cpp:macro> <cpp:value>prssyntaxerror(state)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>prssyntaxerror</name><parameter_list>(<parameter><decl><type><name>TSVectorParseState</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>is_tsquery</name></name></expr> ?</condition><then>
			 <expr><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"syntax error in tsquery: \"%s\""</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>bufstart</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
			 <expr><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"syntax error in tsvector: \"%s\""</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>bufstart</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Get next token from string being parsed. Returns true if successful,
 * false if end of input string is reached.  On success, these output
 * parameters are filled in:
 *
 * *strval		pointer to token
 * *lenval		length of *strval
 * *pos_ptr		pointer to a palloc'd array of positions and weights
 *				associated with the token. If the caller is not interested
 *				in the information, NULL can be supplied. Otherwise
 *				the caller is responsible for pfreeing the array.
 * *poslen		number of elements in *pos_ptr
 * *endptr		scan resumption point
 *
 * Pass NULL for unwanted output parameters.
 */</comment>
<function><type><name>bool</name></type>
<name>gettoken_tsvector</name><parameter_list>(<parameter><decl><type><name>TSVectorParseState</name></type> <name>state</name></decl></parameter>,
				  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strval</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenval</name></decl></parameter>,
				  <parameter><decl><type><name>WordEntryPos</name> <modifier>*</modifier><modifier>*</modifier></type><name>pos_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poslen</name></decl></parameter>,
				  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>oldstate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>curpos</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>word</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>statecode</name> <init>= <expr><name>WAITWORD</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * pos is for collecting the comma delimited list of positions followed by
	 * the actual token.
	 */</comment>
	<decl_stmt><decl><type><name>WordEntryPos</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>npos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>		<comment type="block">/* elements of pos used */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>posalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* allocated size of pos */</comment>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>statecode</name> <operator>==</operator> <name>WAITWORD</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>is_web</name></name> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>WAITENDCMPLX</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>is_web</name></name> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>WAITNEXTCHAR</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>oldstate</name> <operator>=</operator> <name>WAITENDWORD</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>oprisdelim</name></name> <operator>&amp;&amp;</operator> <call><name>ISOPERATOR</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
					 <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>is_web</name></name> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>PRSSYNTAXERROR</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>t_isspace</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>COPYCHAR</name><argument_list>(<argument><expr><name>curpos</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>curpos</name> <operator>+=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>WAITENDWORD</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>statecode</name> <operator>==</operator> <name>WAITNEXTCHAR</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"there is no escaped character: \"%s\""</literal></expr></argument>,
								<argument><expr><name><name>state</name><operator>-&gt;</operator><name>bufstart</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>RESIZEPRSBUF</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>COPYCHAR</name><argument_list>(<argument><expr><name>curpos</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>curpos</name> <operator>+=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oldstate</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>oldstate</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>statecode</name> <operator>==</operator> <name>WAITENDWORD</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>is_web</name></name> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>WAITNEXTCHAR</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>oldstate</name> <operator>=</operator> <name>WAITENDWORD</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>t_isspace</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator>
					 <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>oprisdelim</name></name> <operator>&amp;&amp;</operator> <call><name>ISOPERATOR</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
					 <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>is_web</name></name> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>RESIZEPRSBUF</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>curpos</name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>word</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>PRSSYNTAXERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name>curpos</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>RETURN_TOKEN</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>curpos</name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>word</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>PRSSYNTAXERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name>curpos</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>oprisdelim</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>RETURN_TOKEN</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>INPOSINFO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>RESIZEPRSBUF</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>COPYCHAR</name><argument_list>(<argument><expr><name>curpos</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>curpos</name> <operator>+=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>statecode</name> <operator>==</operator> <name>WAITENDCMPLX</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>is_web</name></name> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>WAITCHARCMPLX</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>is_web</name></name> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>WAITNEXTCHAR</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>oldstate</name> <operator>=</operator> <name>WAITENDCMPLX</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>PRSSYNTAXERROR</name></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>RESIZEPRSBUF</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>COPYCHAR</name><argument_list>(<argument><expr><name>curpos</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>curpos</name> <operator>+=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>statecode</name> <operator>==</operator> <name>WAITCHARCMPLX</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>is_web</name></name> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>RESIZEPRSBUF</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>COPYCHAR</name><argument_list>(<argument><expr><name>curpos</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>curpos</name> <operator>+=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>WAITENDCMPLX</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>RESIZEPRSBUF</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name>curpos</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>curpos</name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>word</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>PRSSYNTAXERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>oprisdelim</name></name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* state-&gt;prsbuf+=pg_mblen(state-&gt;prsbuf); */</comment>
					<expr_stmt><expr><name>RETURN_TOKEN</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>WAITPOSINFO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<continue>continue;</continue>		<comment type="block">/* recheck current character */</comment>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>statecode</name> <operator>==</operator> <name>WAITPOSINFO</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>INPOSINFO</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>RETURN_TOKEN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>statecode</name> <operator>==</operator> <name>INPOSINFO</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>t_isdigit</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>posalen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>posalen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>WordEntryPos</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WordEntryPos</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>posalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>npos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>npos</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>posalen</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>posalen</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>WordEntryPos</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WordEntryPos</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>posalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>npos</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>WEP_SETPOS</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>npos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>LIMITPOS</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* we cannot get here in tsquery, so no need for 2 errmsgs */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>npos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"wrong position info in tsvector: \"%s\""</literal></expr></argument>,
									<argument><expr><name><name>state</name><operator>-&gt;</operator><name>bufstart</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>WEP_SETWEIGHT</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>npos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>WAITPOSDELIM</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>PRSSYNTAXERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>statecode</name> <operator>==</operator> <name>WAITPOSDELIM</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>statecode</name> <operator>=</operator> <name>INPOSINFO</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>WEP_GETWEIGHT</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>npos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>PRSSYNTAXERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>WEP_SETWEIGHT</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>npos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>WEP_GETWEIGHT</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>npos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>PRSSYNTAXERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>WEP_SETWEIGHT</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>npos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>WEP_GETWEIGHT</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>npos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>PRSSYNTAXERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>WEP_SETWEIGHT</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>npos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>WEP_GETWEIGHT</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>npos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>PRSSYNTAXERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>WEP_SETWEIGHT</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>npos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>t_isspace</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
					 <operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>RETURN_TOKEN</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>t_isdigit</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>PRSSYNTAXERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>					<comment type="block">/* internal error */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized state in gettoken_tsvector: %d"</literal></expr></argument>,
				 <argument><expr><name>statecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* get next char */</comment>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name> <operator>+=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prsbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
</unit>
