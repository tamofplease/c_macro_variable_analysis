<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/utils/adt/tsrank.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * tsrank.c
 *		rank tsvector by tsquery
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/adt/tsrank.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>weights</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.1f</literal></expr>, <expr><literal type="number">0.2f</literal></expr>, <expr><literal type="number">0.4f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wpos</name><parameter_list>(<parameter><type><name>wep</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>( w[ WEP_GETWEIGHT(wep) ] )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANK_NO_NORM</name></cpp:macro>			<cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANK_NORM_LOGLENGTH</name></cpp:macro>		<cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANK_NORM_LENGTH</name></cpp:macro>		<cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANK_NORM_EXTDIST</name></cpp:macro>		<cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANK_NORM_UNIQ</name></cpp:macro>			<cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANK_NORM_LOGUNIQ</name></cpp:macro>		<cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANK_NORM_RDIVRPLUS1</name></cpp:macro>	<cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_NORM_METHOD</name></cpp:macro>			<cpp:value>RANK_NO_NORM</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>calc_rank_or</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>TSVector</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>q</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>calc_rank_and</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>TSVector</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>q</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Returns a weight of a word collocation
 */</comment>
<function><type><specifier>static</specifier> <name>float4</name></type>
<name>word_distance</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1e-30f</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1.005</literal> <operator>+</operator> <literal type="number">0.05</literal> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>float4</name><operator>)</operator> <name>w</name><operator>)</operator> <operator>/</operator> <literal type="number">1.5</literal> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cnt_length</name><parameter_list>(<parameter><decl><type><name>TSVector</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WordEntry</name>  <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><operator>(</operator><name>WordEntry</name> <operator>*</operator><operator>)</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>clen</name> <init>= <expr><call><name>POSDATALEN</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WordECompareQueryItem</name><parameter_list>(<parameter><type><name>e</name></type></parameter>,<parameter><type><name>q</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>tsCompareString((q) + (i)-&gt;distance, (i)-&gt;length,	\
					(e) + (p)-&gt;pos, (p)-&gt;len, (m))</cpp:value></cpp:define>


<comment type="block">/*
 * Returns a pointer to a WordEntry's array corresponding to 'item' from
 * tsvector 't'. 'q' is the TSQuery containing 'item'.
 * Returns NULL if not found.
 */</comment>
<function><type><specifier>static</specifier> <name>WordEntry</name> <modifier>*</modifier></type>
<name>find_wordentry</name><parameter_list>(<parameter><decl><type><name>TSVector</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>nitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WordEntry</name>  <modifier>*</modifier></type><name>StopLow</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordEntry</name>  <modifier>*</modifier></type><name>StopHigh</name> <init>= <expr><operator>(</operator><name>WordEntry</name> <operator>*</operator><operator>)</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordEntry</name>  <modifier>*</modifier></type><name>StopMiddle</name> <init>= <expr><name>StopHigh</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>difference</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>nitem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Loop invariant: StopLow &lt;= item &lt; StopHigh */</comment>
	<while>while <condition>(<expr><name>StopLow</name> <operator>&lt;</operator> <name>StopHigh</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>StopMiddle</name> <operator>=</operator> <name>StopLow</name> <operator>+</operator> <operator>(</operator><name>StopHigh</name> <operator>-</operator> <name>StopLow</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>difference</name> <operator>=</operator> <call><name>WordECompareQueryItem</name><argument_list>(<argument><expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GETOPERAND</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>StopMiddle</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>difference</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>StopHigh</name> <operator>=</operator> <name>StopMiddle</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>nitem</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>difference</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>StopLow</name> <operator>=</operator> <name>StopMiddle</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>StopHigh</name> <operator>=</operator> <name>StopMiddle</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>StopLow</name> <operator>&gt;=</operator> <name>StopHigh</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>StopMiddle</name> <operator>=</operator> <name>StopHigh</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>nitem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>StopMiddle</name> <operator>&lt;</operator> <operator>(</operator><name>WordEntry</name> <operator>*</operator><operator>)</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			   <call><name>WordECompareQueryItem</name><argument_list>(<argument><expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GETOPERAND</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>StopMiddle</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>nitem</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>StopMiddle</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>nitem</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>StopHigh</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * sort QueryOperands by (length, word)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compareQueryOperand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>operand</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>qa</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>QueryOperand</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>qb</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>QueryOperand</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>tsCompareString</name><argument_list>(<argument><expr><name>operand</name> <operator>+</operator> <name><name>qa</name><operator>-&gt;</operator><name>distance</name></name></expr></argument>, <argument><expr><name><name>qa</name><operator>-&gt;</operator><name>length</name></name></expr></argument>,
						   <argument><expr><name>operand</name> <operator>+</operator> <name><name>qb</name><operator>-&gt;</operator><name>distance</name></name></expr></argument>, <argument><expr><name><name>qb</name><operator>-&gt;</operator><name>length</name></name></expr></argument>,
						   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns a sorted, de-duplicated array of QueryOperands in a query.
 * The returned QueryOperands are pointers to the original QueryOperands
 * in the query.
 *
 * Length of the returned array is stored in *size
 */</comment>
<function><type><specifier>static</specifier> <name>QueryOperand</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>SortAndUniqItems</name><parameter_list>(<parameter><decl><type><name>TSQuery</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>operand</name> <init>= <expr><call><name>GETOPERAND</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryItem</name>  <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryOperand</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl>,
			  <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl>,
			  <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>prevptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>res</name> <operator>=</operator> <operator>(</operator><name>QueryOperand</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryOperand</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Collect all operands from the tree to res */</comment>
	<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>size</name><operator>)</operator><operator>--</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_VAL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>QueryOperand</name> <operator>*</operator><operator>)</operator> <name>item</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>item</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>res</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>qsort_arg</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryOperand</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareQueryOperand</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>res</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>prevptr</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

	<comment type="block">/* remove duplicates */</comment>
	<while>while <condition>(<expr><name>ptr</name> <operator>-</operator> <name>res</name> <operator>&lt;</operator> <operator>*</operator><name>size</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>compareQueryOperand</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>prevptr</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>operand</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>prevptr</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>prevptr</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>prevptr</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>res</name></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type>
<name>calc_rank_and</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>TSVector</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WordEntryPosVector</name> <modifier>*</modifier><modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordEntryPosVector1</name></type> <name>posnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordEntryPosVector</name> <modifier>*</modifier></type><name>POSNULL</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>k</name></decl>,
				<decl><type ref="prev"/><name>l</name></decl>,
				<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>firstentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordEntryPos</name> <modifier>*</modifier></type><name>post</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ct</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>dimt</name></decl>,
				<decl><type ref="prev"/><name>lenct</name></decl>,
				<decl><type ref="prev"/><name>dist</name></decl>,
				<decl><type ref="prev"/><name>nitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>res</name> <init>= <expr><operator>-</operator><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryOperand</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>SortAndUniqItems</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>calc_rank_or</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>WordEntryPosVector</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WordEntryPosVector</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* A dummy WordEntryPos array to use when haspos is false */</comment>
	<expr_stmt><expr><name><name>posnull</name><operator>.</operator><name>npos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>posnull</name><operator>.</operator><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WEP_SETPOS</name><argument_list>(<argument><expr><name><name>posnull</name><operator>.</operator><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MAXENTRYPOS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>POSNULL</name> <operator>=</operator> <operator>(</operator><name>WordEntryPosVector</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>posnull</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>firstentry</name> <operator>=</operator> <name>entry</name> <operator>=</operator> <call><name>find_wordentry</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<while>while <condition>(<expr><name>entry</name> <operator>-</operator> <name>firstentry</name> <operator>&lt;</operator> <name>nitem</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>haspos</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>_POSVECPTR</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>POSNULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name>dimt</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>npos</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>post</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pos</name></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pos</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>lenct</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name>npos</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ct</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name>pos</name></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>dimt</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>lenct</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>Abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>post</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>ct</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>||</operator> <operator>(</operator><name>dist</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>POSNULL</name> <operator>||</operator> <name><name>pos</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>POSNULL</name><operator>)</operator><operator>)</operator></expr>)</condition>
						<block>{<block_content>
							<decl_stmt><decl><type><name>float</name></type>		<name>curw</name></decl>;</decl_stmt>

							<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dist</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name>dist</name> <operator>=</operator> <name>MAXENTRYPOS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
							<expr_stmt><expr><name>curw</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>wpos</name><argument_list>(<argument><expr><name><name>post</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>wpos</name><argument_list>(<argument><expr><name><name>ct</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>word_distance</name><argument_list>(<argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>curw</name></expr> </then><else>: <expr><literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>res</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>curw</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></for>
				</block_content>}</block></for>
			</block_content>}</block></for>

			<expr_stmt><expr><name>entry</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type>
<name>calc_rank_or</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>TSVector</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WordEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>firstentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordEntryPosVector1</name></type> <name>posnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordEntryPos</name> <modifier>*</modifier></type><name>post</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>dimt</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>,
				<decl><type ref="prev"/><name>nitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>res</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryOperand</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* A dummy WordEntryPos array to use when haspos is false */</comment>
	<expr_stmt><expr><name><name>posnull</name><operator>.</operator><name>npos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>posnull</name><operator>.</operator><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>SortAndUniqItems</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>float</name></type>		<name>resj</name></decl>,
					<decl><type ref="prev"/><name>wjm</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>jm</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>firstentry</name> <operator>=</operator> <name>entry</name> <operator>=</operator> <call><name>find_wordentry</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<while>while <condition>(<expr><name>entry</name> <operator>-</operator> <name>firstentry</name> <operator>&lt;</operator> <name>nitem</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>haspos</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>dimt</name> <operator>=</operator> <call><name>POSDATALEN</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>post</name> <operator>=</operator> <call><name>POSDATAPTR</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>dimt</name> <operator>=</operator> <name><name>posnull</name><operator>.</operator><name>npos</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>post</name> <operator>=</operator> <name><name>posnull</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name>resj</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>wjm</name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>jm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dimt</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>resj</name> <operator>=</operator> <name>resj</name> <operator>+</operator> <call><name>wpos</name><argument_list>(<argument><expr><name><name>post</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>wpos</name><argument_list>(<argument><expr><name><name>post</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>wjm</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>wjm</name> <operator>=</operator> <call><name>wpos</name><argument_list>(<argument><expr><name><name>post</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>jm</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
<comment type="block">/*
			limit (sum(1/i^2),i=1,inf) = pi^2/6
			resj = sum(wi/i^2),i=1,noccurence,
			wi - should be sorted desc,
			don't sort for now, just choose maximum weight. This should be corrected
			Oleg Bartunov
*/</comment>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>+</operator> <operator>(</operator><name>wjm</name> <operator>+</operator> <name>resj</name> <operator>-</operator> <name>wjm</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>jm</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>jm</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">1.64493406685</literal></expr>;</expr_stmt>

			<expr_stmt><expr><name>entry</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>/</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type>
<name>calc_rank</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>TSVector</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QueryItem</name>  <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>res</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* XXX: What about NOT? */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_OPR</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name> <operator>==</operator> <name>OP_AND</name> <operator>||</operator>
									<name><name>item</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name> <operator>==</operator> <name>OP_PHRASE</name><operator>)</operator><operator>)</operator></expr> ?</condition><then>
		<expr><call><name>calc_rank_and</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr> </then><else>:
		<expr><call><name>calc_rank_or</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1e-20f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>method</name> <operator>&amp;</operator> <name>RANK_NORM_LOGLENGTH</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>/=</operator> <call><name>log</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><call><name>cnt_length</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>method</name> <operator>&amp;</operator> <name>RANK_NORM_LENGTH</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>cnt_length</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* RANK_NORM_EXTDIST not applicable */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>method</name> <operator>&amp;</operator> <name>RANK_NORM_UNIQ</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>method</name> <operator>&amp;</operator> <name>RANK_NORM_LOGUNIQ</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>/=</operator> <call><name>log</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>method</name> <operator>&amp;</operator> <name>RANK_NORM_RDIVRPLUS1</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>/=</operator> <operator>(</operator><name>res</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name> <modifier>*</modifier></type>
<name>getWeights</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>ws</name><index>[<expr><call><name>lengthof</name><argument_list>(<argument><expr><name>weights</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float4</name>	   <modifier>*</modifier></type><name>arrdata</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>weights</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_ARRAY_SUBSCRIPT_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"array of weight must be one-dimensional"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ArrayGetNItems</name><argument_list>(<argument><expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>weights</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_ARRAY_SUBSCRIPT_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"array of weight is too short"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>array_contains_nulls</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"array of weight must not contain nulls"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>arrdata</name> <operator>=</operator> <operator>(</operator><name>float4</name> <operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>weights</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ws</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>arrdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>arrdata</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>weights</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ws</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"weight out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>ws</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_rank_wttf</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>win</name> <init>= <expr><operator>(</operator><name>ArrayType</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>txt</name> <init>= <expr><call><name>PG_GETARG_TSVECTOR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>method</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_rank</name><argument_list>(<argument><expr><call><name>getWeights</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_rank_wtt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>win</name> <init>= <expr><operator>(</operator><name>ArrayType</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>txt</name> <init>= <expr><call><name>PG_GETARG_TSVECTOR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_rank</name><argument_list>(<argument><expr><call><name>getWeights</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>DEF_NORM_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_rank_ttf</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>txt</name> <init>= <expr><call><name>PG_GETARG_TSVECTOR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>method</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_rank</name><argument_list>(<argument><expr><call><name>getWeights</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_rank_tt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>txt</name> <init>= <expr><call><name>PG_GETARG_TSVECTOR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_rank</name><argument_list>(<argument><expr><call><name>getWeights</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>DEF_NORM_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
	<union>union
	<block>{
		<struct>struct
		<block>{						<comment type="block">/* compiled doc representation */</comment>
			<decl_stmt><decl><type><name>QueryItem</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int16</name></type>		<name>nitem</name></decl>;</decl_stmt>
		}</block>			<decl><name>query</name></decl>;</struct>
		<struct>struct
		<block>{						<comment type="block">/* struct is used for preparing doc
								 * representation */</comment>
			<decl_stmt><decl><type><name>QueryItem</name>  <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>WordEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
		}</block>			<decl><name>map</name></decl>;</struct>
	}</block>			<decl><name>data</name></decl>;</union>
	<decl_stmt><decl><type><name>WordEntryPos</name></type> <name>pos</name></decl>;</decl_stmt>
}</block></struct></type> <name>DocRepresentation</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compareDocR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DocRepresentation</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>DocRepresentation</name> <operator>*</operator><operator>)</operator> <name>va</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DocRepresentation</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>DocRepresentation</name> <operator>*</operator><operator>)</operator> <name>vb</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>WEP_GETWEIGHT</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>WEP_GETWEIGHT</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>map</name><operator>.</operator><name>entry</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>map</name><operator>.</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

			<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>map</name><operator>.</operator><name>entry</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>map</name><operator>.</operator><name>entry</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>WEP_GETWEIGHT</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>WEP_GETWEIGHT</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXQROPOS</name></cpp:macro>	<cpp:value>MAXENTRYPOS</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>bool</name></type>		<name>operandexists</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>reverseinsert</name></decl>;</decl_stmt>	<comment type="block">/* indicates insert order, true means
								 * descending order */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>npos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordEntryPos</name></type> <name><name>pos</name><index>[<expr><name>MAXQROPOS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>QueryRepresentationOperand</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryRepresentationOperand</name> <modifier>*</modifier></type><name>operandData</name></decl>;</decl_stmt>
}</block></struct></type> <name>QueryRepresentation</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QR_GET_OPERAND_DATA</name><parameter_list>(<parameter><type><name>q</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>( (q)-&gt;operandData + (((QueryItem*)(v)) - GETQUERY((q)-&gt;query)) )</cpp:value></cpp:define>

<comment type="block">/*
 * TS_execute callback for matching a tsquery operand to QueryRepresentation
 */</comment>
<function><type><specifier>static</specifier> <name>TSTernaryValue</name></type>
<name>checkcondition_QueryOperand</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checkval</name></decl></parameter>, <parameter><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
							<parameter><decl><type><name>ExecPhraseData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QueryRepresentation</name> <modifier>*</modifier></type><name>qr</name> <init>= <expr><operator>(</operator><name>QueryRepresentation</name> <operator>*</operator><operator>)</operator> <name>checkval</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryRepresentationOperand</name> <modifier>*</modifier></type><name>opData</name> <init>= <expr><call><name>QR_GET_OPERAND_DATA</name><argument_list>(<argument><expr><name>qr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opData</name><operator>-&gt;</operator><name>operandexists</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>TS_NO</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>npos</name></name> <operator>=</operator> <name><name>opData</name><operator>-&gt;</operator><name>npos</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>opData</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>opData</name><operator>-&gt;</operator><name>reverseinsert</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>MAXQROPOS</name> <operator>-</operator> <name><name>opData</name><operator>-&gt;</operator><name>npos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>TS_YES</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DocRepresentation</name> <modifier>*</modifier></type><name>begin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DocRepresentation</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
}</block></struct></type> <name>CoverExt</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>resetQueryRepresentation</name><parameter_list>(<parameter><decl><type><name>QueryRepresentation</name> <modifier>*</modifier></type><name>qr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reverseinsert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>qr</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>qr</name><operator>-&gt;</operator><name>operandData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>operandexists</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>qr</name><operator>-&gt;</operator><name>operandData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reverseinsert</name> <operator>=</operator> <name>reverseinsert</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>qr</name><operator>-&gt;</operator><name>operandData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>npos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fillQueryRepresentationData</name><parameter_list>(<parameter><decl><type><name>QueryRepresentation</name> <modifier>*</modifier></type><name>qr</name></decl></parameter>, <parameter><decl><type><name>DocRepresentation</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lastPos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryRepresentationOperand</name> <modifier>*</modifier></type><name>opData</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>query</name><operator>.</operator><name>nitem</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>query</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>QI_VAL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>opData</name> <operator>=</operator> <call><name>QR_GET_OPERAND_DATA</name><argument_list>(<argument><expr><name>qr</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>query</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>opData</name><operator>-&gt;</operator><name>operandexists</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>opData</name><operator>-&gt;</operator><name>npos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>lastPos</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>opData</name><operator>-&gt;</operator><name>reverseinsert</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>MAXQROPOS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>opData</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>lastPos</name></expr>]</index></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>opData</name><operator>-&gt;</operator><name>npos</name></name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>lastPos</name> <operator>=</operator> <ternary><condition><expr><name><name>opData</name><operator>-&gt;</operator><name>reverseinsert</name></name></expr> ?</condition><then>
			<expr><operator>(</operator><name>MAXQROPOS</name> <operator>-</operator> <name><name>opData</name><operator>-&gt;</operator><name>npos</name></name><operator>)</operator></expr> </then><else>:
			<expr><operator>(</operator><name><name>opData</name><operator>-&gt;</operator><name>npos</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>opData</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>lastPos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>lastPos</name> <operator>=</operator> <ternary><condition><expr><name><name>opData</name><operator>-&gt;</operator><name>reverseinsert</name></name></expr> ?</condition><then>
				<expr><operator>(</operator><name>MAXQROPOS</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>opData</name><operator>-&gt;</operator><name>npos</name></name><operator>)</operator></expr> </then><else>:
				<expr><operator>(</operator><name><name>opData</name><operator>-&gt;</operator><name>npos</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>opData</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>lastPos</name></expr>]</index></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>opData</name><operator>-&gt;</operator><name>npos</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>Cover</name><parameter_list>(<parameter><decl><type><name>DocRepresentation</name> <modifier>*</modifier></type><name>doc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>QueryRepresentation</name> <modifier>*</modifier></type><name>qr</name></decl></parameter>, <parameter><decl><type><name>CoverExt</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DocRepresentation</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lastpos</name> <init>= <expr><name><name>ext</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * since this function recurses, it could be driven to stack overflow.
	 * (though any decent compiler will optimize away the tail-recursion.
	 */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>resetQueryRepresentation</name><argument_list>(<argument><expr><name>qr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>doc</name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

	<comment type="block">/* find upper bound of cover from current position, move up */</comment>
	<while>while <condition>(<expr><name>ptr</name> <operator>-</operator> <name>doc</name> <operator>&lt;</operator> <name>len</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fillQueryRepresentationData</name><argument_list>(<argument><expr><name>qr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>TS_execute</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name><name>qr</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>qr</name></expr></argument>,
					   <argument><expr><name>TS_EXEC_EMPTY</name></expr></argument>, <argument><expr><name>checkcondition_QueryOperand</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>q</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>lastpos</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>doc</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>resetQueryRepresentation</name><argument_list>(<argument><expr><name>qr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>doc</name> <operator>+</operator> <name>lastpos</name></expr>;</expr_stmt>

	<comment type="block">/* find lower bound of cover from found upper bound, move down */</comment>
	<while>while <condition>(<expr><name>ptr</name> <operator>&gt;=</operator> <name>doc</name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * we scan doc from right to left, so pos info in reverse order!
		 */</comment>
		<expr_stmt><expr><call><name>fillQueryRepresentationData</name><argument_list>(<argument><expr><name>qr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>TS_execute</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name><name>qr</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>qr</name></expr></argument>,
					   <argument><expr><name>TS_EXEC_EMPTY</name></expr></argument>, <argument><expr><name>checkcondition_QueryOperand</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ext</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>WEP_GETPOS</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>p</name></name> <operator>&lt;=</operator> <name><name>ext</name><operator>-&gt;</operator><name>q</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * set position for next try to next lexeme after beginning of found
		 * cover
		 */</comment>
		<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>doc</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><call><name>Cover</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>qr</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DocRepresentation</name> <modifier>*</modifier></type>
<name>get_docrep</name><parameter_list>(<parameter><decl><type><name>TSVector</name></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>QueryRepresentation</name> <modifier>*</modifier></type><name>qr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>doclen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QueryItem</name>  <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name><name>qr</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>firstentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordEntryPos</name> <modifier>*</modifier></type><name>post</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>dimt</name></decl>,			<comment type="block">/* number of 'post' items */</comment>
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>,
				<decl><type ref="prev"/><name>nitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><name><name>qr</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DocRepresentation</name> <modifier>*</modifier></type><name>doc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>doc</name> <operator>=</operator> <operator>(</operator><name>DocRepresentation</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DocRepresentation</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Iterate through query to make DocRepresentation for words and it's
	 * entries satisfied by query
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>qr</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>curoperand</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>QI_VAL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>curoperand</name> <operator>=</operator> <operator>&amp;</operator><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>qoperand</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>firstentry</name> <operator>=</operator> <name>entry</name> <operator>=</operator> <call><name>find_wordentry</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name><name>qr</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name>curoperand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* iterations over entries in tsvector */</comment>
		<while>while <condition>(<expr><name>entry</name> <operator>-</operator> <name>firstentry</name> <operator>&lt;</operator> <name>nitem</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>haspos</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>dimt</name> <operator>=</operator> <call><name>POSDATALEN</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>post</name> <operator>=</operator> <call><name>POSDATAPTR</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* ignore words without positions */</comment>
				<expr_stmt><expr><name>entry</name><operator>++</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></else></if_stmt>

			<while>while <condition>(<expr><name>cur</name> <operator>+</operator> <name>dimt</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>len</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>doc</name> <operator>=</operator> <operator>(</operator><name>DocRepresentation</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DocRepresentation</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>

			<comment type="block">/* iterations over entry's positions */</comment>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dimt</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>curoperand</name><operator>-&gt;</operator><name>weight</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
					<name><name>curoperand</name><operator>-&gt;</operator><name>weight</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>WEP_GETWEIGHT</name><argument_list>(<argument><expr><name><name>post</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>doc</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name><name>post</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>doc</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>map</name><operator>.</operator><name>entry</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>doc</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>map</name><operator>.</operator><name>item</name></name> <operator>=</operator> <operator>(</operator><name>QueryItem</name> <operator>*</operator><operator>)</operator> <name>curoperand</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><name>entry</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DocRepresentation</name> <modifier>*</modifier></type><name>rptr</name> <init>= <expr><name>doc</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>wptr</name> <init>= <expr><name>doc</name></expr></init></decl>,
					<decl><type ref="prev"/><name>storage</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Sort representation in ascending order by pos and entry
		 */</comment>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>doc</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DocRepresentation</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareDocR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Join QueryItem per WordEntry and it's position
		 */</comment>
		<expr_stmt><expr><name><name>storage</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>storage</name><operator>.</operator><name>data</name><operator>.</operator><name>query</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryItem</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>qr</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>storage</name><operator>.</operator><name>data</name><operator>.</operator><name>query</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>map</name><operator>.</operator><name>item</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>storage</name><operator>.</operator><name>data</name><operator>.</operator><name>query</name><operator>.</operator><name>nitem</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>rptr</name> <operator>-</operator> <name>doc</name> <operator>&lt;</operator> <name>cur</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>rptr</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <operator>(</operator><name>rptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>pos</name> <operator>&amp;&amp;</operator>
				<name><name>rptr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>map</name><operator>.</operator><name>entry</name></name> <operator>==</operator> <operator>(</operator><name>rptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>map</name><operator>.</operator><name>entry</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>storage</name><operator>.</operator><name>data</name><operator>.</operator><name>query</name><operator>.</operator><name>items</name><index>[<expr><name><name>storage</name><operator>.</operator><name>data</name><operator>.</operator><name>query</name><operator>.</operator><name>nitem</name></name></expr>]</index></name> <operator>=</operator> <name><name>rptr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>map</name><operator>.</operator><name>item</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>storage</name><operator>.</operator><name>data</name><operator>.</operator><name>query</name><operator>.</operator><name>nitem</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>wptr</name> <operator>=</operator> <name>storage</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>wptr</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>storage</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>rptr</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>storage</name><operator>.</operator><name>data</name><operator>.</operator><name>query</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryItem</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>qr</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>storage</name><operator>.</operator><name>data</name><operator>.</operator><name>query</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rptr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>map</name><operator>.</operator><name>item</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>storage</name><operator>.</operator><name>data</name><operator>.</operator><name>query</name><operator>.</operator><name>nitem</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name>rptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><operator>*</operator><name>wptr</name> <operator>=</operator> <name>storage</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>wptr</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>doclen</name> <operator>=</operator> <name>wptr</name> <operator>-</operator> <name>doc</name></expr>;</expr_stmt>
		<return>return <expr><name>doc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float4</name></type>
<name>calc_rank_cd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float4</name> <modifier>*</modifier></type><name>arrdata</name></decl></parameter>, <parameter><decl><type><name>TSVector</name></type> <name>txt</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DocRepresentation</name> <modifier>*</modifier></type><name>doc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>,
				<decl><type ref="prev"/><name>doclen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CoverExt</name></type>	<name>ext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>Wdoc</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name><name>invws</name><index>[<expr><call><name>lengthof</name><argument_list>(<argument><expr><name>weights</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>SumDist</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>PrevExtPos</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>CurExtPos</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>NExtent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryRepresentation</name></type> <name>qr</name></decl>;</decl_stmt>


	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>weights</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>invws</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>arrdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>arrdata</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>weights</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>invws</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"weight out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>invws</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name><name>invws</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>qr</name><operator>.</operator><name>query</name></name> <operator>=</operator> <name>query</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qr</name><operator>.</operator><name>operandData</name></name> <operator>=</operator> <operator>(</operator><name>QueryRepresentationOperand</name> <operator>*</operator><operator>)</operator>
		<call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryRepresentationOperand</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>doc</name> <operator>=</operator> <call><name>get_docrep</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>doclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>doc</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>qr</name><operator>.</operator><name>operandData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0.0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CoverExt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>Cover</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>doclen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ext</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>double</name></type>		<name>Cpos</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type>		<name>InvSum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>nNoise</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DocRepresentation</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>ext</name><operator>.</operator><name>begin</name></name></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>ptr</name> <operator>&lt;=</operator> <name><name>ext</name><operator>.</operator><name>end</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>InvSum</name> <operator>+=</operator> <name><name>invws</name><index>[<expr><call><name>WEP_GETWEIGHT</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><name>Cpos</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name><name>ext</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>ext</name><operator>.</operator><name>begin</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>InvSum</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * if doc are big enough then ext.q may be equal to ext.p due to limit
		 * of positional information. In this case we approximate number of
		 * noise word as half cover's length
		 */</comment>
		<expr_stmt><expr><name>nNoise</name> <operator>=</operator> <operator>(</operator><name><name>ext</name><operator>.</operator><name>q</name></name> <operator>-</operator> <name><name>ext</name><operator>.</operator><name>p</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>ext</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>ext</name><operator>.</operator><name>begin</name></name><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>nNoise</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>nNoise</name> <operator>=</operator> <operator>(</operator><name><name>ext</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>ext</name><operator>.</operator><name>begin</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>Wdoc</name> <operator>+=</operator> <name>Cpos</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>nNoise</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>CurExtPos</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name><name>ext</name><operator>.</operator><name>q</name></name> <operator>+</operator> <name><name>ext</name><operator>.</operator><name>p</name></name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>NExtent</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>CurExtPos</name> <operator>&gt;</operator> <name>PrevExtPos</name></expr>	<comment type="block">/* prevent division by
													 * zero in a case of
			  * multiple lexize */</comment> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>SumDist</name> <operator>+=</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name>CurExtPos</name> <operator>-</operator> <name>PrevExtPos</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>PrevExtPos</name> <operator>=</operator> <name>CurExtPos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>NExtent</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>method</name> <operator>&amp;</operator> <name>RANK_NORM_LOGLENGTH</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>txt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>Wdoc</name> <operator>/=</operator> <call><name>log</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><call><name>cnt_length</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>method</name> <operator>&amp;</operator> <name>RANK_NORM_LENGTH</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>cnt_length</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>Wdoc</name> <operator>/=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>method</name> <operator>&amp;</operator> <name>RANK_NORM_EXTDIST</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>NExtent</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>SumDist</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>Wdoc</name> <operator>/=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>NExtent</name><operator>)</operator> <operator>/</operator> <name>SumDist</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>method</name> <operator>&amp;</operator> <name>RANK_NORM_UNIQ</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>txt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>Wdoc</name> <operator>/=</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name><name>txt</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>method</name> <operator>&amp;</operator> <name>RANK_NORM_LOGUNIQ</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>txt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>Wdoc</name> <operator>/=</operator> <call><name>log</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name><name>txt</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>method</name> <operator>&amp;</operator> <name>RANK_NORM_RDIVRPLUS1</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>Wdoc</name> <operator>/=</operator> <operator>(</operator><name>Wdoc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>qr</name><operator>.</operator><name>operandData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>float4</name><operator>)</operator> <name>Wdoc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_rankcd_wttf</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>win</name> <init>= <expr><operator>(</operator><name>ArrayType</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>txt</name> <init>= <expr><call><name>PG_GETARG_TSVECTOR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>method</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_rank_cd</name><argument_list>(<argument><expr><call><name>getWeights</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_rankcd_wtt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>win</name> <init>= <expr><operator>(</operator><name>ArrayType</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>txt</name> <init>= <expr><call><name>PG_GETARG_TSVECTOR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_rank_cd</name><argument_list>(<argument><expr><call><name>getWeights</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>DEF_NORM_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_rankcd_ttf</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>txt</name> <init>= <expr><call><name>PG_GETARG_TSVECTOR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>method</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_rank_cd</name><argument_list>(<argument><expr><call><name>getWeights</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_rankcd_tt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>txt</name> <init>= <expr><call><name>PG_GETARG_TSVECTOR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_rank_cd</name><argument_list>(<argument><expr><call><name>getWeights</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>DEF_NORM_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
