<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/utils/adt/numutils.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * numutils.c
 *	  utility functions for I/O of built-in numeric types.
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/adt/numutils.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/pg_bitutils.h"</cpp:file></cpp:include>

<comment type="block">/*
 * A table of all two-digit numbers. This is used to speed up decimal digit
 * generation by copying pairs of digits into the final output.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>DIGIT_TABLE</name><index>[<expr><literal type="number">200</literal></expr>]</index></name> <init>=
<expr><literal type="string">"00"</literal> <literal type="string">"01"</literal> <literal type="string">"02"</literal> <literal type="string">"03"</literal> <literal type="string">"04"</literal> <literal type="string">"05"</literal> <literal type="string">"06"</literal> <literal type="string">"07"</literal> <literal type="string">"08"</literal> <literal type="string">"09"</literal>
<literal type="string">"10"</literal> <literal type="string">"11"</literal> <literal type="string">"12"</literal> <literal type="string">"13"</literal> <literal type="string">"14"</literal> <literal type="string">"15"</literal> <literal type="string">"16"</literal> <literal type="string">"17"</literal> <literal type="string">"18"</literal> <literal type="string">"19"</literal>
<literal type="string">"20"</literal> <literal type="string">"21"</literal> <literal type="string">"22"</literal> <literal type="string">"23"</literal> <literal type="string">"24"</literal> <literal type="string">"25"</literal> <literal type="string">"26"</literal> <literal type="string">"27"</literal> <literal type="string">"28"</literal> <literal type="string">"29"</literal>
<literal type="string">"30"</literal> <literal type="string">"31"</literal> <literal type="string">"32"</literal> <literal type="string">"33"</literal> <literal type="string">"34"</literal> <literal type="string">"35"</literal> <literal type="string">"36"</literal> <literal type="string">"37"</literal> <literal type="string">"38"</literal> <literal type="string">"39"</literal>
<literal type="string">"40"</literal> <literal type="string">"41"</literal> <literal type="string">"42"</literal> <literal type="string">"43"</literal> <literal type="string">"44"</literal> <literal type="string">"45"</literal> <literal type="string">"46"</literal> <literal type="string">"47"</literal> <literal type="string">"48"</literal> <literal type="string">"49"</literal>
<literal type="string">"50"</literal> <literal type="string">"51"</literal> <literal type="string">"52"</literal> <literal type="string">"53"</literal> <literal type="string">"54"</literal> <literal type="string">"55"</literal> <literal type="string">"56"</literal> <literal type="string">"57"</literal> <literal type="string">"58"</literal> <literal type="string">"59"</literal>
<literal type="string">"60"</literal> <literal type="string">"61"</literal> <literal type="string">"62"</literal> <literal type="string">"63"</literal> <literal type="string">"64"</literal> <literal type="string">"65"</literal> <literal type="string">"66"</literal> <literal type="string">"67"</literal> <literal type="string">"68"</literal> <literal type="string">"69"</literal>
<literal type="string">"70"</literal> <literal type="string">"71"</literal> <literal type="string">"72"</literal> <literal type="string">"73"</literal> <literal type="string">"74"</literal> <literal type="string">"75"</literal> <literal type="string">"76"</literal> <literal type="string">"77"</literal> <literal type="string">"78"</literal> <literal type="string">"79"</literal>
<literal type="string">"80"</literal> <literal type="string">"81"</literal> <literal type="string">"82"</literal> <literal type="string">"83"</literal> <literal type="string">"84"</literal> <literal type="string">"85"</literal> <literal type="string">"86"</literal> <literal type="string">"87"</literal> <literal type="string">"88"</literal> <literal type="string">"89"</literal>
<literal type="string">"90"</literal> <literal type="string">"91"</literal> <literal type="string">"92"</literal> <literal type="string">"93"</literal> <literal type="string">"94"</literal> <literal type="string">"95"</literal> <literal type="string">"96"</literal> <literal type="string">"97"</literal> <literal type="string">"98"</literal> <literal type="string">"99"</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Adapted from http://graphics.stanford.edu/~seander/bithacks.html#IntegerLog10
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>decimalLength32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32</name></type> <name><name>PowersOfTen</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><literal type="number">1000</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">100000</literal></expr>,
		<expr><literal type="number">1000000</literal></expr>, <expr><literal type="number">10000000</literal></expr>, <expr><literal type="number">100000000</literal></expr>,
		<expr><literal type="number">1000000000</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Compute base-10 logarithm by dividing the base-2 logarithm by a
	 * good-enough approximation of the base-2 logarithm of 10
	 */</comment>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><call><name>pg_leftmost_one_pos32</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">1233</literal> <operator>/</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
	<return>return <expr><name>t</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>&gt;=</operator> <name><name>PowersOfTen</name><index>[<expr><name>t</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>decimalLength64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64</name></type> <name><name>PowersOfTen</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">10000000</literal></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">100000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">10000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">100000000000</literal></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1000000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">10000000000000</literal></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">100000000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1000000000000000</literal></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">10000000000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">100000000000000000</literal></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1000000000000000000</literal></expr></argument>)</argument_list></call></expr>, <macro><name>UINT64CONST</name><argument_list>(<argument><literal type="number">10000000000000000000</literal></argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Compute base-10 logarithm by dividing the base-2 logarithm by a
	 * good-enough approximation of the base-2 logarithm of 10
	 */</comment>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><call><name>pg_leftmost_one_pos64</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">1233</literal> <operator>/</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
	<return>return <expr><name>t</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>&gt;=</operator> <name><name>PowersOfTen</name><index>[<expr><name>t</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_atoi: convert string to integer
 *
 * allows any number of leading or trailing whitespace characters.
 *
 * 'size' is the sizeof() the desired integral result (1, 2, or 4 bytes).
 *
 * c, if not 0, is a terminator character that may appear after the
 * integer (plus whitespace).  If 0, the string must end after the integer.
 *
 * Unlike plain atoi(), this will throw ereport() upon bad input format or
 * overflow.
 */</comment>
<function><type><name>int32</name></type>
<name>pg_atoi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type>		<name>l</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>badp</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Some versions of strtol treat the empty string as an error, but some
	 * seem not to.  Make an explicit test to be sure we catch it.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"NULL pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for type %s: \"%s\""</literal></expr></argument>,
						<argument><expr><literal type="string">"integer"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>badp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We made no progress parsing the string, so bail out */</comment>
	<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>badp</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for type %s: \"%s\""</literal></expr></argument>,
						<argument><expr><literal type="string">"integer"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>size</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_INT_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* won't get ERANGE on these with 64-bit longs... */</comment>
				<operator>||</operator> <name><name>l</name> <argument_list type="generic">&lt; <argument><expr><name>INT_MIN</name> <operator>||</operator> <name>l</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value \"%s\" is out of range for type %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>,
								<argument><expr><literal type="string">"integer"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></sizeof></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>||</operator> <name><name>l</name> <argument_list type="generic">&lt; <argument><expr><name>SHRT_MIN</name> <operator>||</operator> <name>l</name></expr></argument> &gt;</argument_list></name> <name>SHRT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value \"%s\" is out of range for type %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>,
								<argument><expr><literal type="string">"smallint"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8</name></expr></argument>)</argument_list></sizeof></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>||</operator> <name><name>l</name> <argument_list type="generic">&lt; <argument><expr><name>SCHAR_MIN</name> <operator>||</operator> <name>l</name></expr></argument> &gt;</argument_list></name> <name>SCHAR_MAX</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value \"%s\" is out of range for 8-bit integer"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported result size: %d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Skip any trailing whitespace; if anything but whitespace remains before
	 * the terminating character, bail out
	 */</comment>
	<while>while <condition>(<expr><operator>*</operator><name>badp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>badp</name> <operator>!=</operator> <name>c</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>badp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>badp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>badp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>badp</name> <operator>!=</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for type %s: \"%s\""</literal></expr></argument>,
						<argument><expr><literal type="string">"integer"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>int32</name><operator>)</operator> <name>l</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert input string to a signed 16 bit integer.
 *
 * Allows any number of leading or trailing whitespace characters. Will throw
 * ereport() upon bad input format or overflow.
 *
 * NB: Accumulate input as a negative number, to deal with two's complement
 * representation of the most negative number, which can't be represented as a
 * positive number.
 */</comment>
<function><type><name>int16</name></type>
<name>pg_strtoint16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>		<name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>neg</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* skip leading spaces */</comment>
	<while>while <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

	<comment type="block">/* handle sign */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>neg</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* require at least one digit */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>invalid_syntax</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* process digits */</comment>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int8</name></type>		<name>digit</name> <init>= <expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>pg_mul_s16_overflow</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
			<call><name>unlikely</name><argument_list>(<argument><expr><call><name>pg_sub_s16_overflow</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>digit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>out_of_range</name>;</goto></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* allow trailing whitespace, but not other trailing chars */</comment>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>invalid_syntax</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>neg</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* could fail if input is most negative number */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>tmp</name> <operator>==</operator> <name>PG_INT16_MIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>out_of_range</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>-</operator><name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>tmp</name></expr>;</return>

<label><name>out_of_range</name>:</label>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value \"%s\" is out of range for type %s"</literal></expr></argument>,
					<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"smallint"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>invalid_syntax</name>:</label>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for type %s: \"%s\""</literal></expr></argument>,
					<argument><expr><literal type="string">"smallint"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>					<comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Convert input string to a signed 32 bit integer.
 *
 * Allows any number of leading or trailing whitespace characters. Will throw
 * ereport() upon bad input format or overflow.
 *
 * NB: Accumulate input as a negative number, to deal with two's complement
 * representation of the most negative number, which can't be represented as a
 * positive number.
 */</comment>
<function><type><name>int32</name></type>
<name>pg_strtoint32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>neg</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* skip leading spaces */</comment>
	<while>while <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

	<comment type="block">/* handle sign */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>neg</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* require at least one digit */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>invalid_syntax</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* process digits */</comment>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int8</name></type>		<name>digit</name> <init>= <expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>pg_mul_s32_overflow</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
			<call><name>unlikely</name><argument_list>(<argument><expr><call><name>pg_sub_s32_overflow</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>digit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>out_of_range</name>;</goto></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* allow trailing whitespace, but not other trailing chars */</comment>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>invalid_syntax</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>neg</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* could fail if input is most negative number */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>tmp</name> <operator>==</operator> <name>PG_INT32_MIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>out_of_range</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>-</operator><name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>tmp</name></expr>;</return>

<label><name>out_of_range</name>:</label>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value \"%s\" is out of range for type %s"</literal></expr></argument>,
					<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"integer"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>invalid_syntax</name>:</label>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for type %s: \"%s\""</literal></expr></argument>,
					<argument><expr><literal type="string">"integer"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>					<comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * pg_itoa: converts a signed 16-bit integer to its string representation
 *
 * Caller must ensure that 'a' points to enough memory to hold the result
 * (at least 7 bytes, counting a leading sign and trailing NUL).
 *
 * It doesn't seem worth implementing this separately.
 */</comment>
<function><type><name>void</name></type>
<name>pg_itoa</name><parameter_list>(<parameter><decl><type><name>int16</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pg_ltoa</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>i</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * pg_ultoa_n: converts an unsigned 32-bit integer to its string representation,
 * not NUL-terminated, and returns the length of that string representation
 *
 * Caller must ensure that 'a' points to enough memory to hold the result (at
 * least 10 bytes)
 */</comment>
<function><type><name>int</name></type>
<name>pg_ultoa_n</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>olength</name></decl>,
				<decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Degenerate case */</comment>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>olength</name> <operator>=</operator> <call><name>decimalLength32</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Compute the result string. */</comment>
	<while>while <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>value</name> <operator>-</operator> <literal type="number">10000</literal> <operator>*</operator> <operator>(</operator><name>value</name> <operator>/</operator> <literal type="number">10000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c0</name> <init>= <expr><operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>a</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>value</name> <operator>/=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>value</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>a</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>value</name> <operator>/=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>a</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>value</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>olength</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * NUL-terminate the output of pg_ultoa_n.
 *
 * It is the caller's responsibility to ensure that a is at least 12 bytes long,
 * which is enough room to hold a minus sign, a maximally long int32, and the
 * above terminating NUL.
 */</comment>
<function><type><name>void</name></type>
<name>pg_ltoa</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>uvalue</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>value</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>uvalue</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <literal type="number">0</literal> <operator>-</operator> <name>uvalue</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pg_ultoa_n</name><argument_list>(<argument><expr><name>uvalue</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get the decimal representation, not NUL-terminated, and return the length of
 * same.  Caller must ensure that a points to at least MAXINT8LEN bytes.
 */</comment>
<function><type><name>int</name></type>
<name>pg_ulltoa_n</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>olength</name></decl>,
				<decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>value2</name></decl>;</decl_stmt>

	<comment type="block">/* Degenerate case */</comment>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>olength</name> <operator>=</operator> <call><name>decimalLength64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Compute the result string. */</comment>
	<while>while <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">100000000</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>q</name> <init>= <expr><name>value</name> <operator>/</operator> <literal type="number">100000000</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>value2</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>-</operator> <literal type="number">100000000</literal> <operator>*</operator> <name>q</name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>value2</name> <operator>%</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>d</name> <init>= <expr><name>value2</name> <operator>/</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c0</name> <init>= <expr><operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>d0</name> <init>= <expr><operator>(</operator><name>d</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>d1</name> <init>= <expr><operator>(</operator><name>d</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>a</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>d0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>d1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Switch to 32-bit for speed */</comment>
	<expr_stmt><expr><name>value2</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>value2</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>value2</name> <operator>-</operator> <literal type="number">10000</literal> <operator>*</operator> <operator>(</operator><name>value2</name> <operator>/</operator> <literal type="number">10000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c0</name> <init>= <expr><operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>a</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>value2</name> <operator>/=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>value2</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>value2</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>a</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>value2</name> <operator>/=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>value2</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>value2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>a</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>value2</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>olength</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_lltoa: convert a signed 64-bit integer to its string representation
 *
 * Caller must ensure that 'a' points to enough memory to hold the result
 * (at least MAXINT8LEN + 1 bytes, counting a leading sign and trailing NUL).
 */</comment>
<function><type><name>void</name></type>
<name>pg_lltoa</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>uvalue</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>uvalue</name> <operator>=</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <literal type="number">0</literal> <operator>-</operator> <name>uvalue</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pg_ulltoa_n</name><argument_list>(<argument><expr><name>uvalue</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * pg_ultostr_zeropad
 *		Converts 'value' into a decimal string representation stored at 'str'.
 *		'minwidth' specifies the minimum width of the result; any extra space
 *		is filled up by prefixing the number with zeros.
 *
 * Returns the ending address of the string result (the last character written
 * plus 1).  Note that no NUL terminator is written.
 *
 * The intended use-case for this function is to build strings that contain
 * multiple individual numbers, for example:
 *
 *	str = pg_ultostr_zeropad(str, hours, 2);
 *	*str++ = ':';
 *	str = pg_ultostr_zeropad(str, mins, 2);
 *	*str++ = ':';
 *	str = pg_ultostr_zeropad(str, secs, 2);
 *	*str = '\0';
 *
 * Note: Caller must ensure that 'str' points to enough memory to hold the
 * result.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>pg_ultostr_zeropad</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>minwidth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>minwidth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <name>minwidth</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>	<comment type="block">/* Short cut for common case */</comment>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>value</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pg_ultoa_n</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>minwidth</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>str</name> <operator>+</operator> <name>len</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>minwidth</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><name>minwidth</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>str</name> <operator>+</operator> <name>minwidth</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_ultostr
 *		Converts 'value' into a decimal string representation stored at 'str'.
 *
 * Returns the ending address of the string result (the last character written
 * plus 1).  Note that no NUL terminator is written.
 *
 * The intended use-case for this function is to build strings that contain
 * multiple individual numbers, for example:
 *
 *	str = pg_ultostr(str, a);
 *	*str++ = ' ';
 *	str = pg_ultostr(str, b);
 *	*str = '\0';
 *
 * Note: Caller must ensure that 'str' points to enough memory to hold the
 * result.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>pg_ultostr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>pg_ultoa_n</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>str</name> <operator>+</operator> <name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_strtouint64
 *		Converts 'str' into an unsigned 64-bit integer.
 *
 * This has the identical API to strtoul(3), except that it will handle
 * 64-bit ints even where "long" is narrower than that.
 *
 * For the moment it seems sufficient to assume that the platform has
 * such a function somewhere; let's not roll our own.
 */</comment>
<function><type><name>uint64</name></type>
<name>pg_strtouint64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>					<comment type="block">/* MSVC only */</comment>
	<return>return <expr><call><name>_strtoui64</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRTOULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SIZEOF_LONG</name> <operator>&lt;</operator> <literal type="number">8</literal></expr></cpp:elif>
	<return>return <expr><call><name>strtoull</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
