<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/utils/misc/pg_rusage.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pg_rusage.c
 *	  Resource usage measurement support routines.
 *
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/misc/pg_rusage.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/pg_rusage.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Initialize usage snapshot.
 */</comment>
<function><type><name>void</name></type>
<name>pg_rusage_init</name><parameter_list>(<parameter><decl><type><name>PGRUsage</name> <modifier>*</modifier></type><name>ru0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>getrusage</name><argument_list>(<argument><expr><name>RUSAGE_SELF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ru0</name><operator>-&gt;</operator><name>ru</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ru0</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Compute elapsed time since ru0 usage snapshot, and format into
 * a displayable string.  Result is in a static string, which is
 * tacky, but no one ever claimed that the Postgres backend is
 * threadable...
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pg_rusage_show</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGRUsage</name> <modifier>*</modifier></type><name>ru0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>result</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGRUsage</name></type>	<name>ru1</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_rusage_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ru1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ru1</name><operator>.</operator><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>&lt;</operator> <name><name>ru0</name><operator>-&gt;</operator><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ru1</name><operator>.</operator><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ru1</name><operator>.</operator><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>+=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ru1</name><operator>.</operator><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name> <operator>&lt;</operator> <name><name>ru0</name><operator>-&gt;</operator><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ru1</name><operator>.</operator><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ru1</name><operator>.</operator><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name> <operator>+=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ru1</name><operator>.</operator><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name> <operator>&lt;</operator> <name><name>ru0</name><operator>-&gt;</operator><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ru1</name><operator>.</operator><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ru1</name><operator>.</operator><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name> <operator>+=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"CPU: user: %d.%02d s, system: %d.%02d s, elapsed: %d.%02d s"</literal></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>ru1</name><operator>.</operator><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>ru0</name><operator>-&gt;</operator><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>ru1</name><operator>.</operator><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>ru0</name><operator>-&gt;</operator><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">10000</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>ru1</name><operator>.</operator><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>ru0</name><operator>-&gt;</operator><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>ru1</name><operator>.</operator><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>ru0</name><operator>-&gt;</operator><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">10000</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>ru1</name><operator>.</operator><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>ru0</name><operator>-&gt;</operator><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>ru1</name><operator>.</operator><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>ru0</name><operator>-&gt;</operator><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
