<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/utils/init/globals.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * globals.c
 *	  global variable declarations
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/init/globals.c
 *
 * NOTES
 *	  Globals used all over the place should be declared here and not
 *	  in other modules.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/file_perm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq-be.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqcomm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/backendid.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>ProtocolVersion</name></type> <name>FrontendProtocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>InterruptPending</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>QueryCancelPending</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>ProcDiePending</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>ClientConnectionLost</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>IdleInTransactionSessionTimeoutPending</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>ProcSignalBarrierPending</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>uint32</name></type> <name>InterruptHoldoffCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>uint32</name></type> <name>QueryCancelHoldoffCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>uint32</name></type> <name>CritSectionCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>MyProcPid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pg_time_t</name></type>	<name>MyStartTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimestampTz</name></type> <name>MyStartTimestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Port</name></name> <modifier>*</modifier></type><name>MyProcPort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32</name></type>		<name>MyCancelKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>MyPMChildSlot</name></decl>;</decl_stmt>

<comment type="block">/*
 * MyLatch points to the latch that should be used for signal handling by the
 * current process. It will either point to a process local latch if the
 * current process does not have a PGPROC entry in that moment, or to
 * PGPROC-&gt;procLatch if it has. Thus it can always be used in signal handlers,
 * without checking for its existence.
 */</comment>
<decl_stmt><decl><type><name><name>struct</name> <name>Latch</name></name> <modifier>*</modifier></type><name>MyLatch</name></decl>;</decl_stmt>

<comment type="block">/*
 * DataDir is the absolute path to the top level of the PGDATA directory tree.
 * Except during early startup, this is also the server's working directory;
 * most code therefore can simply use relative paths and not reference DataDir
 * explicitly.
 */</comment>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>DataDir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Mode of the data directory.  The default is 0700 but it may be changed in
 * checkDataDir() to 0750 if the data directory actually has that mode.
 */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>data_directory_mode</name> <init>= <expr><name>PG_DIR_MODE_OWNER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type>		<name><name>OutputFileName</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* debugging output file */</comment>

<decl_stmt><decl><type><name>char</name></type>		<name><name>my_exec_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* full path to my executable */</comment>
<decl_stmt><decl><type><name>char</name></type>		<name><name>pkglib_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* full path to lib directory */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EXEC_BACKEND</name></cpp:ifdef>
<decl_stmt><decl><type><name>char</name></type>		<name><name>postgres_exec_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* full path to backend */</comment>

<comment type="block">/* note: currently this is not valid in backend processes */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>BackendId</name></type>	<name>MyBackendId</name> <init>= <expr><name>InvalidBackendId</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BackendId</name></type>	<name>ParallelMasterBackendId</name> <init>= <expr><name>InvalidBackendId</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Oid</name></type>			<name>MyDatabaseId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Oid</name></type>			<name>MyDatabaseTableSpace</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * DatabasePath is the path (relative to DataDir) of my database's
 * primary directory, ie, its directory in the default tablespace.
 */</comment>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>DatabasePath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pid_t</name></type>		<name>PostmasterPid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * IsPostmasterEnvironment is true in a postmaster process and any postmaster
 * child process; it is false in a standalone process (bootstrap or
 * standalone backend).  IsUnderPostmaster is true in postmaster child
 * processes.  Note that "child process" includes all children, not only
 * regular backends.  These should be set correctly as early as possible
 * in the execution of a process, so that error handling will do the right
 * things if an error should occur during process initialization.
 *
 * These are initialized for the bootstrap/standalone case.
 */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>IsPostmasterEnvironment</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>IsUnderPostmaster</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>IsBinaryUpgrade</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>IsBackgroundWorker</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>		<name>ExitOnAnyError</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>DateStyle</name> <init>= <expr><name>USE_ISO_DATES</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>DateOrder</name> <init>= <expr><name>DATEORDER_MDY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>IntervalStyle</name> <init>= <expr><name>INTSTYLE_POSTGRES</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>		<name>enableFsync</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>allowSystemTableMods</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>work_mem</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>hash_mem_multiplier</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>maintenance_work_mem</name> <init>= <expr><literal type="number">16384</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>max_parallel_maintenance_workers</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>eager_mem</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*
 * Primary determinants of sizes of shared-memory structures.
 *
 * MaxBackends is computed by PostmasterMain after modules have had a chance to
 * register background workers.
 */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>NBuffers</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>MaxConnections</name> <init>= <expr><literal type="number">90</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>max_worker_processes</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>max_parallel_workers</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>MaxBackends</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>VacuumCostPageHit</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* GUC parameters for vacuum */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>VacuumCostPageMiss</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>VacuumCostPageDirty</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>VacuumCostLimit</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>VacuumCostDelay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64</name></type>		<name>VacuumPageHit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64</name></type>		<name>VacuumPageMiss</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64</name></type>		<name>VacuumPageDirty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>VacuumCostBalance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* working state for vacuum */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>VacuumCostActive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type>		<name>vacuum_cleanup_index_scale_factor</name></decl>;</decl_stmt>
</unit>
