<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/utils/mb/stringinfo_mb.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * stringinfo_mb.c
 *		Multibyte encoding-aware additional StringInfo facilities
 *
 * This is separate from common/stringinfo.c so that frontend users
 * of that file need not pull in unnecessary multibyte-encoding support
 * code.
 *
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/mb/stringinfo_mb.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/stringinfo_mb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>


<comment type="block">/*
 * appendStringInfoStringQuoted
 *
 * Append up to maxlen bytes from s to str, or the whole input string if
 * maxlen &lt; 0, adding single quotes around it and doubling all single quotes.
 * Add an ellipsis if the copy is incomplete.
 */</comment>
<function><type><name>void</name></type>
<name>appendStringInfoStringQuoted</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chunk_search_start</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>chunk_copy_start</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>chunk_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>slen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ellipsis</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>maxlen</name> <operator>&lt;</operator> <name>slen</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>finallen</name> <init>= <expr><call><name>pg_mbcliplen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>finallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>chunk_search_start</name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>chunk_copy_start</name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>ellipsis</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>chunk_search_start</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>chunk_copy_start</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>ellipsis</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>appendStringInfoCharMacro</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>chunk_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>chunk_search_start</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* copy including the found delimiting ' */</comment>
		<expr_stmt><expr><call><name>appendBinaryStringInfoNT</name><argument_list>(<argument><expr><name>str</name></expr></argument>,
								 <argument><expr><name>chunk_copy_start</name></expr></argument>,
								 <argument><expr><name>chunk_end</name> <operator>-</operator> <name>chunk_copy_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* in order to double it, include this ' into the next chunk as well */</comment>
		<expr_stmt><expr><name>chunk_copy_start</name> <operator>=</operator> <name>chunk_end</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>chunk_search_start</name> <operator>=</operator> <name>chunk_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* copy the last chunk and terminate */</comment>
	<if_stmt><if>if <condition>(<expr><name>ellipsis</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s...'"</literal></expr></argument>, <argument><expr><name>chunk_copy_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s'"</literal></expr></argument>, <argument><expr><name>chunk_copy_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
