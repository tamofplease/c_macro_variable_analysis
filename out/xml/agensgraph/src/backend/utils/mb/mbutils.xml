<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/utils/mb/mbutils.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * mbutils.c
 *	  This file contains functions for encoding conversion.
 *
 * The string-conversion functions in this file share some API quirks.
 * Note the following:
 *
 * The functions return a palloc'd, null-terminated string if conversion
 * is required.  However, if no conversion is performed, the given source
 * string pointer is returned as-is.
 *
 * Although the presence of a length argument means that callers can pass
 * non-null-terminated strings, care is required because the same string
 * will be passed back if no conversion occurs.  Such callers *must* check
 * whether result == src and handle that case differently.
 *
 * If the source and destination encodings are the same, the source string
 * is returned without any verification; it's assumed to be valid data.
 * If that might not be the case, the caller is responsible for validating
 * the string using a separate call to pg_verify_mbstr().  Whenever the
 * source and destination encodings are different, the functions ensure that
 * the result is validly encoded according to the destination encoding.
 *
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/mb/mbutils.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<comment type="block">/*
 * We maintain a simple linked list caching the fmgr lookup info for the
 * currently selected conversion functions, as well as any that have been
 * selected previously in the current session.  (We remember previous
 * settings because we must be able to restore a previous setting during
 * transaction rollback, without doing any fresh catalog accesses.)
 *
 * Since we'll never release this data, we just keep it in TopMemoryContext.
 */</comment>
<typedef>typedef <type><struct>struct <name>ConvProcInfo</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>s_encoding</name></decl>;</decl_stmt>		<comment type="block">/* server and client encoding IDs */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>c_encoding</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name></type>	<name>to_server_info</name></decl>;</decl_stmt> <comment type="block">/* lookup info for conversion procs */</comment>
	<decl_stmt><decl><type><name>FmgrInfo</name></type>	<name>to_client_info</name></decl>;</decl_stmt>
}</block></struct></type> <name>ConvProcInfo</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>ConvProcList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* List of ConvProcInfo */</comment>

<comment type="block">/*
 * These variables point to the currently active conversion functions,
 * or are NULL when no conversion is needed.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>FmgrInfo</name> <modifier>*</modifier></type><name>ToServerConvProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FmgrInfo</name> <modifier>*</modifier></type><name>ToClientConvProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * This variable stores the conversion function to convert from UTF-8
 * to the server encoding.  It's NULL if the server encoding *is* UTF-8,
 * or if we lack a conversion function for this.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>FmgrInfo</name> <modifier>*</modifier></type><name>Utf8ToServerConvProc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * These variables track the currently-selected encodings.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>pg_enc2name</name> <modifier>*</modifier></type><name>ClientEncoding</name> <init>= <expr><operator>&amp;</operator><name><name>pg_enc2name_tbl</name><index>[<expr><name>PG_SQL_ASCII</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>pg_enc2name</name> <modifier>*</modifier></type><name>DatabaseEncoding</name> <init>= <expr><operator>&amp;</operator><name><name>pg_enc2name_tbl</name><index>[<expr><name>PG_SQL_ASCII</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>pg_enc2name</name> <modifier>*</modifier></type><name>MessageEncoding</name> <init>= <expr><operator>&amp;</operator><name><name>pg_enc2name_tbl</name><index>[<expr><name>PG_SQL_ASCII</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * During backend startup we can't set client encoding because we (a)
 * can't look up the conversion functions, and (b) may not know the database
 * encoding yet either.  So SetClientEncoding() just accepts anything and
 * remembers it for InitializeClientEncoding() to apply later.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>backend_startup_complete</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>pending_client_encoding</name> <init>= <expr><name>PG_SQL_ASCII</name></expr></init></decl>;</decl_stmt>


<comment type="block">/* Internal functions */</comment>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>perform_default_encoding_conversion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
												 <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_client_to_server</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>cliplen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Prepare for a future call to SetClientEncoding.  Success should mean
 * that SetClientEncoding is guaranteed to succeed for this encoding request.
 *
 * (But note that success before backend_startup_complete does not guarantee
 * success after ...)
 *
 * Returns 0 if okay, -1 if not (bad encoding or can't support conversion)
 */</comment>
<function><type><name>int</name></type>
<name>PrepareClientEncoding</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>current_server_encoding</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_FE_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Can't do anything during startup, per notes above */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>backend_startup_complete</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>current_server_encoding</name> <operator>=</operator> <call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check for cases that require no conversion function.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>current_server_encoding</name> <operator>==</operator> <name>encoding</name> <operator>||</operator>
		<name>current_server_encoding</name> <operator>==</operator> <name>PG_SQL_ASCII</name> <operator>||</operator>
		<name>encoding</name> <operator>==</operator> <name>PG_SQL_ASCII</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsTransactionState</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If we're in a live transaction, it's safe to access the catalogs,
		 * so look up the functions.  We repeat the lookup even if the info is
		 * already cached, so that we can react to changes in the contents of
		 * pg_conversion.
		 */</comment>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>to_server_proc</name></decl>,
					<decl><type ref="prev"/><name>to_client_proc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ConvProcInfo</name> <modifier>*</modifier></type><name>convinfo</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>to_server_proc</name> <operator>=</operator> <call><name>FindDefaultConversionProc</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>,
												   <argument><expr><name>current_server_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>to_server_proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>to_client_proc</name> <operator>=</operator> <call><name>FindDefaultConversionProc</name><argument_list>(<argument><expr><name>current_server_encoding</name></expr></argument>,
												   <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>to_client_proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Load the fmgr info into TopMemoryContext (could still fail here)
		 */</comment>
		<expr_stmt><expr><name>convinfo</name> <operator>=</operator> <operator>(</operator><name>ConvProcInfo</name> <operator>*</operator><operator>)</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
													   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConvProcInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>convinfo</name><operator>-&gt;</operator><name>s_encoding</name></name> <operator>=</operator> <name>current_server_encoding</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>convinfo</name><operator>-&gt;</operator><name>c_encoding</name></name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name>to_server_proc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>convinfo</name><operator>-&gt;</operator><name>to_server_info</name></name></expr></argument>,
					  <argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name>to_client_proc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>convinfo</name><operator>-&gt;</operator><name>to_client_info</name></name></expr></argument>,
					  <argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Attach new info to head of list */</comment>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ConvProcList</name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><name>convinfo</name></expr></argument>, <argument><expr><name>ConvProcList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * We cannot yet remove any older entry for the same encoding pair,
		 * since it could still be in use.  SetClientEncoding will clean up.
		 */</comment>

		<return>return <expr><literal type="number">0</literal></expr>;</return>				<comment type="block">/* success */</comment>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * If we're not in a live transaction, the only thing we can do is
		 * restore a previous setting using the cache.  This covers all
		 * transaction-rollback cases.  The only case it might not work for is
		 * trying to change client_encoding on the fly by editing
		 * postgresql.conf and SIGHUP'ing.  Which would probably be a stupid
		 * thing to do anyway.
		 */</comment>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>ConvProcList</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ConvProcInfo</name> <modifier>*</modifier></type><name>oldinfo</name> <init>= <expr><operator>(</operator><name>ConvProcInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>oldinfo</name><operator>-&gt;</operator><name>s_encoding</name></name> <operator>==</operator> <name>current_server_encoding</name> <operator>&amp;&amp;</operator>
				<name><name>oldinfo</name><operator>-&gt;</operator><name>c_encoding</name></name> <operator>==</operator> <name>encoding</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block>

		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>				<comment type="block">/* it's not cached, so fail */</comment>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set the active client encoding and set up the conversion-function pointers.
 * PrepareClientEncoding should have been called previously for this encoding.
 *
 * Returns 0 if okay, -1 if not (bad encoding or can't support conversion)
 */</comment>
<function><type><name>int</name></type>
<name>SetClientEncoding</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>current_server_encoding</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_FE_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Can't do anything during startup, per notes above */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>backend_startup_complete</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>pending_client_encoding</name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>current_server_encoding</name> <operator>=</operator> <call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check for cases that require no conversion function.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>current_server_encoding</name> <operator>==</operator> <name>encoding</name> <operator>||</operator>
		<name>current_server_encoding</name> <operator>==</operator> <name>PG_SQL_ASCII</name> <operator>||</operator>
		<name>encoding</name> <operator>==</operator> <name>PG_SQL_ASCII</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ClientEncoding</name> <operator>=</operator> <operator>&amp;</operator><name><name>pg_enc2name_tbl</name><index>[<expr><name>encoding</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ToServerConvProc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ToClientConvProc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Search the cache for the entry previously prepared by
	 * PrepareClientEncoding; if there isn't one, we lose.  While at it,
	 * release any duplicate entries so that repeated Prepare/Set cycles don't
	 * leak memory.
	 */</comment>
	<expr_stmt><expr><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>ConvProcList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ConvProcInfo</name> <modifier>*</modifier></type><name>convinfo</name> <init>= <expr><operator>(</operator><name>ConvProcInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>convinfo</name><operator>-&gt;</operator><name>s_encoding</name></name> <operator>==</operator> <name>current_server_encoding</name> <operator>&amp;&amp;</operator>
			<name><name>convinfo</name><operator>-&gt;</operator><name>c_encoding</name></name> <operator>==</operator> <name>encoding</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Found newest entry, so set up */</comment>
				<expr_stmt><expr><name>ClientEncoding</name> <operator>=</operator> <operator>&amp;</operator><name><name>pg_enc2name_tbl</name><index>[<expr><name>encoding</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ToServerConvProc</name> <operator>=</operator> <operator>&amp;</operator><name><name>convinfo</name><operator>-&gt;</operator><name>to_server_info</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ToClientConvProc</name> <operator>=</operator> <operator>&amp;</operator><name><name>convinfo</name><operator>-&gt;</operator><name>to_client_info</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* Duplicate entry, release it */</comment>
				<expr_stmt><expr><name>ConvProcList</name> <operator>=</operator> <call><name>foreach_delete_current</name><argument_list>(<argument><expr><name>ConvProcList</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>convinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>				<comment type="block">/* success */</comment>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>				<comment type="block">/* it's not cached, so fail */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize client encoding conversions.
 *		Called from InitPostgres() once during backend startup.
 */</comment>
<function><type><name>void</name></type>
<name>InitializeClientEncoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>current_server_encoding</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>backend_startup_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>backend_startup_complete</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PrepareClientEncoding</name><argument_list>(<argument><expr><name>pending_client_encoding</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>SetClientEncoding</name><argument_list>(<argument><expr><name>pending_client_encoding</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Oops, the requested conversion is not available. We couldn't fail
		 * before, but we can now.
		 */</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"conversion between %s and %s is not supported"</literal></expr></argument>,
						<argument><expr><name><name>pg_enc2name_tbl</name><index>[<expr><name>pending_client_encoding</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
						<argument><expr><call><name>GetDatabaseEncodingName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Also look up the UTF8-to-server conversion function if needed.  Since
	 * the server encoding is fixed within any one backend process, we don't
	 * have to do this more than once.
	 */</comment>
	<expr_stmt><expr><name>current_server_encoding</name> <operator>=</operator> <call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>current_server_encoding</name> <operator>!=</operator> <name>PG_UTF8</name> <operator>&amp;&amp;</operator>
		<name>current_server_encoding</name> <operator>!=</operator> <name>PG_SQL_ASCII</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>utf8_to_server_proc</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsTransactionState</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>utf8_to_server_proc</name> <operator>=</operator>
			<call><name>FindDefaultConversionProc</name><argument_list>(<argument><expr><name>PG_UTF8</name></expr></argument>,
									  <argument><expr><name>current_server_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* If there's no such conversion, just leave the pointer as NULL */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>utf8_to_server_proc</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>finfo</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <operator>(</operator><name>FmgrInfo</name> <operator>*</operator><operator>)</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
													<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name>utf8_to_server_proc</name></expr></argument>, <argument><expr><name>finfo</name></expr></argument>,
						  <argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Set Utf8ToServerConvProc only after data is fully valid */</comment>
			<expr_stmt><expr><name>Utf8ToServerConvProc</name> <operator>=</operator> <name>finfo</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * returns the current client encoding
 */</comment>
<function><type><name>int</name></type>
<name>pg_get_client_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>ClientEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * returns the current client encoding name
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pg_get_client_encoding_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>ClientEncoding</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert src string to another encoding (general case).
 *
 * See the notes about string conversion functions at the top of this file.
 */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>pg_do_encoding_conversion</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
						  <parameter><decl><type><name>int</name></type> <name>src_encoding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>proc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>src</name></expr>;</return></block_content></block></if></if_stmt>				<comment type="block">/* empty string is always valid */</comment>

	<if_stmt><if>if <condition>(<expr><name>src_encoding</name> <operator>==</operator> <name>dest_encoding</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>src</name></expr>;</return></block_content></block></if></if_stmt>				<comment type="block">/* no conversion required, assume valid */</comment>

	<if_stmt><if>if <condition>(<expr><name>dest_encoding</name> <operator>==</operator> <name>PG_SQL_ASCII</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>src</name></expr>;</return></block_content></block></if></if_stmt>				<comment type="block">/* any string is valid in SQL_ASCII */</comment>

	<if_stmt><if>if <condition>(<expr><name>src_encoding</name> <operator>==</operator> <name>PG_SQL_ASCII</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* No conversion is possible, but we must validate the result */</comment>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pg_verify_mbstr</name><argument_list>(<argument><expr><name>dest_encoding</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>src</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsTransactionState</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* shouldn't happen */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot perform encoding conversion outside a transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>FindDefaultConversionProc</name><argument_list>(<argument><expr><name>src_encoding</name></expr></argument>, <argument><expr><name>dest_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_FUNCTION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"default conversion function for encoding \"%s\" to \"%s\" does not exist"</literal></expr></argument>,
						<argument><expr><call><name>pg_encoding_to_char</name><argument_list>(<argument><expr><name>src_encoding</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>pg_encoding_to_char</name><argument_list>(<argument><expr><name>dest_encoding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Allocate space for conversion result, being wary of integer overflow.
	 *
	 * len * MAX_CONVERSION_GROWTH is typically a vast overestimate of the
	 * required space, so it might exceed MaxAllocSize even though the result
	 * would actually fit.  We do not want to hand back a result string that
	 * exceeds MaxAllocSize, because callers might not cope gracefully --- but
	 * if we just allocate more than that, and don't use it, that's fine.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Size</name><operator>)</operator> <name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>MaxAllocHugeSize</name> <operator>/</operator> <operator>(</operator><name>Size</name><operator>)</operator> <name>MAX_CONVERSION_GROWTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"String of %d bytes is too long for encoding conversion."</literal></expr></argument>,
						   <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator>
		<call><name>MemoryContextAllocHuge</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
							   <argument><expr><operator>(</operator><name>Size</name><operator>)</operator> <name>len</name> <operator>*</operator> <name>MAX_CONVERSION_GROWTH</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>OidFunctionCall5</name><argument_list>(<argument><expr><name>proc</name></expr></argument>,
					 <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>src_encoding</name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dest_encoding</name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If the result is large, it's worth repalloc'ing to release any extra
	 * space we asked for.  The cutoff here is somewhat arbitrary, but we
	 * *must* check when len * MAX_CONVERSION_GROWTH exceeds MaxAllocSize.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Size</name></type>		<name>resultlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>resultlen</name> <operator>&gt;=</operator> <name>MaxAllocSize</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"String of %d bytes is too long for encoding conversion."</literal></expr></argument>,
							   <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>resultlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert string to encoding encoding_name. The source
 * encoding is the DB encoding.
 *
 * BYTEA convert_to(TEXT string, NAME encoding_name) */</comment>
<function><type><name>Datum</name></type>
<name>pg_convert_to</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>string</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>dest_encoding_name</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>src_encoding_name</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>namein</name></expr></argument>,
														<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * pg_convert expects a bytea as its first argument. We're passing it a
	 * text argument here, relying on the fact that they are both in fact
	 * varlena types, and thus structurally identical.
	 */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>pg_convert</name></expr></argument>, <argument><expr><name>string</name></expr></argument>,
								 <argument><expr><name>src_encoding_name</name></expr></argument>, <argument><expr><name>dest_encoding_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Convert string from encoding encoding_name. The destination
 * encoding is the DB encoding.
 *
 * TEXT convert_from(BYTEA string, NAME encoding_name) */</comment>
<function><type><name>Datum</name></type>
<name>pg_convert_from</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>string</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>src_encoding_name</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>dest_encoding_name</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>namein</name></expr></argument>,
														 <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>pg_convert</name></expr></argument>, <argument><expr><name>string</name></expr></argument>,
								 <argument><expr><name>src_encoding_name</name></expr></argument>, <argument><expr><name>dest_encoding_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * pg_convert returns a bytea, which we in turn return as text, relying on
	 * the fact that they are both in fact varlena types, and thus
	 * structurally identical. Although not all bytea values are valid text,
	 * in this case it will be because we've told pg_convert to return one
	 * that is valid as text in the current database encoding.
	 */</comment>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Convert string between two arbitrary encodings.
 *
 * BYTEA convert(BYTEA string, NAME src_encoding_name, NAME dest_encoding_name)
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_convert</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>string</name> <init>= <expr><call><name>PG_GETARG_BYTEA_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>src_encoding_name</name> <init>= <expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>src_encoding</name> <init>= <expr><call><name>pg_char_to_encoding</name><argument_list>(<argument><expr><name>src_encoding_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dest_encoding_name</name> <init>= <expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>dest_encoding</name> <init>= <expr><call><name>pg_char_to_encoding</name><argument_list>(<argument><expr><name>dest_encoding_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dest_str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>src_encoding</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid source encoding name \"%s\""</literal></expr></argument>,
						<argument><expr><name>src_encoding_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>dest_encoding</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid destination encoding name \"%s\""</literal></expr></argument>,
						<argument><expr><name>dest_encoding_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* make sure that source string is valid */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>src_str</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_verify_mbstr_len</name><argument_list>(<argument><expr><name>src_encoding</name></expr></argument>, <argument><expr><name>src_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* perform conversion */</comment>
	<expr_stmt><expr><name>dest_str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_do_encoding_conversion</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>src_str</name></expr></argument>)</argument_list></call></expr></argument>,
												  <argument><expr><name>len</name></expr></argument>,
												  <argument><expr><name>src_encoding</name></expr></argument>,
												  <argument><expr><name>dest_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* update len if conversion actually happened */</comment>
	<if_stmt><if>if <condition>(<expr><name>dest_str</name> <operator>!=</operator> <name>src_str</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dest_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * build bytea data type structure.
	 */</comment>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dest_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dest_str</name> <operator>!=</operator> <name>src_str</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dest_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* free memory if allocated by the toaster */</comment>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BYTEA_P</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * get the length of the string considered as text in the specified
 * encoding. Raises an error if the data is not valid in that
 * encoding.
 *
 * INT4 length (BYTEA string, NAME src_encoding_name)
 */</comment>
<function><type><name>Datum</name></type>
<name>length_in_encoding</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>string</name> <init>= <expr><call><name>PG_GETARG_BYTEA_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>src_encoding_name</name> <init>= <expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>src_encoding</name> <init>= <expr><call><name>pg_char_to_encoding</name><argument_list>(<argument><expr><name>src_encoding_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>retval</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>src_encoding</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid encoding name \"%s\""</literal></expr></argument>,
						<argument><expr><name>src_encoding_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>src_str</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>pg_verify_mbstr_len</name><argument_list>(<argument><expr><name>src_encoding</name></expr></argument>, <argument><expr><name>src_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get maximum multibyte character length in the specified encoding.
 *
 * Note encoding is specified numerically, not by name as above.
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_encoding_max_length_sql</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>encoding</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_VALID_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name><name>pg_wchar_table</name><index>[<expr><name>encoding</name></expr>]</index></name><operator>.</operator><name>maxmblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Convert client encoding to server encoding.
 *
 * See the notes about string conversion functions at the top of this file.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>pg_client_to_server</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pg_any_to_server</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ClientEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert any encoding to server encoding.
 *
 * See the notes about string conversion functions at the top of this file.
 *
 * Unlike the other string conversion functions, this will apply validation
 * even if encoding == DatabaseEncoding-&gt;encoding.  This is because this is
 * used to process data coming in from outside the database, and we never
 * want to just assume validity.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>pg_any_to_server</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>	<comment type="block">/* empty string is always valid */</comment>

	<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name> <operator>||</operator>
		<name>encoding</name> <operator>==</operator> <name>PG_SQL_ASCII</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * No conversion is needed, but we must still validate the data.
		 */</comment>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pg_verify_mbstr</name><argument_list>(<argument><expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>PG_SQL_ASCII</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * No conversion is possible, but we must still validate the data,
		 * because the client-side code might have done string escaping using
		 * the selected client_encoding.  If the client encoding is ASCII-safe
		 * then we just do a straight validation under that encoding.  For an
		 * ASCII-unsafe encoding we have a problem: we dare not pass such data
		 * to the parser but we have no way to convert it.  We compromise by
		 * rejecting the data if it contains any non-ASCII characters.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>PG_VALID_BE_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pg_verify_mbstr</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CHARACTER_NOT_IN_REPERTOIRE</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid byte value for encoding \"%s\": 0x%02x"</literal></expr></argument>,
									<argument><expr><name><name>pg_enc2name_tbl</name><index>[<expr><name>PG_SQL_ASCII</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
									<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Fast path if we can use cached conversion function */</comment>
	<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name><name>ClientEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>perform_default_encoding_conversion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* General case ... will not work outside transactions */</comment>
	<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_do_encoding_conversion</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,
											  <argument><expr><name>len</name></expr></argument>,
											  <argument><expr><name>encoding</name></expr></argument>,
											  <argument><expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert server encoding to client encoding.
 *
 * See the notes about string conversion functions at the top of this file.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>pg_server_to_client</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pg_server_to_any</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ClientEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert server encoding to any encoding.
 *
 * See the notes about string conversion functions at the top of this file.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>pg_server_to_any</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>	<comment type="block">/* empty string is always valid */</comment>

	<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name> <operator>||</operator>
		<name>encoding</name> <operator>==</operator> <name>PG_SQL_ASCII</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>	<comment type="block">/* assume data is valid */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>PG_SQL_ASCII</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* No conversion is possible, but we must validate the result */</comment>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pg_verify_mbstr</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Fast path if we can use cached conversion function */</comment>
	<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name><name>ClientEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>perform_default_encoding_conversion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* General case ... will not work outside transactions */</comment>
	<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_do_encoding_conversion</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,
											  <argument><expr><name>len</name></expr></argument>,
											  <argument><expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>,
											  <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *	Perform default encoding conversion using cached FmgrInfo. Since
 *	this function does not access database at all, it is safe to call
 *	outside transactions.  If the conversion has not been set up by
 *	SetClientEncoding(), no conversion is performed.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>perform_default_encoding_conversion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
									<parameter><decl><type><name>bool</name></type> <name>is_client_to_server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>src_encoding</name></decl>,
				<decl><type ref="prev"/><name>dest_encoding</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>flinfo</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>is_client_to_server</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>src_encoding</name> <operator>=</operator> <name><name>ClientEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dest_encoding</name> <operator>=</operator> <name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>flinfo</name> <operator>=</operator> <name>ToServerConvProc</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>src_encoding</name> <operator>=</operator> <name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dest_encoding</name> <operator>=</operator> <name><name>ClientEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>flinfo</name> <operator>=</operator> <name>ToClientConvProc</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Allocate space for conversion result, being wary of integer overflow.
	 * See comments in pg_do_encoding_conversion.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Size</name><operator>)</operator> <name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>MaxAllocHugeSize</name> <operator>/</operator> <operator>(</operator><name>Size</name><operator>)</operator> <name>MAX_CONVERSION_GROWTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"String of %d bytes is too long for encoding conversion."</literal></expr></argument>,
						   <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator>
		<call><name>MemoryContextAllocHuge</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
							   <argument><expr><operator>(</operator><name>Size</name><operator>)</operator> <name>len</name> <operator>*</operator> <name>MAX_CONVERSION_GROWTH</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FunctionCall5</name><argument_list>(<argument><expr><name>flinfo</name></expr></argument>,
				  <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>src_encoding</name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dest_encoding</name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Release extra space if there might be a lot --- see comments in
	 * pg_do_encoding_conversion.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Size</name></type>		<name>resultlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>resultlen</name> <operator>&gt;=</operator> <name>MaxAllocSize</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"String of %d bytes is too long for encoding conversion."</literal></expr></argument>,
							   <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>resultlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert a single Unicode code point into a string in the server encoding.
 *
 * The code point given by "c" is converted and stored at *s, which must
 * have at least MAX_UNICODE_EQUIVALENT_STRING+1 bytes available.
 * The output will have a trailing '\0'.  Throws error if the conversion
 * cannot be performed.
 *
 * Note that this relies on having previously looked up any required
 * conversion function.  That's partly for speed but mostly because the parser
 * may call this outside any transaction, or in an aborted transaction.
 */</comment>
<function><type><name>void</name></type>
<name>pg_unicode_to_server</name><parameter_list>(<parameter><decl><type><name>pg_wchar</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>c_as_utf8</name><index>[<expr><name>MAX_MULTIBYTE_CHAR_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>c_as_utf8_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>server_encoding</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Complain if invalid Unicode code point.  The choice of errcode here is
	 * debatable, but really our caller should have checked this anyway.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_unicode_codepoint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid Unicode code point"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Otherwise, if it's in ASCII range, conversion is trivial */</comment>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If the server encoding is UTF-8, we just need to reformat the code */</comment>
	<expr_stmt><expr><name>server_encoding</name> <operator>=</operator> <call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>server_encoding</name> <operator>==</operator> <name>PG_UTF8</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>unicode_to_utf8</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><index>[<expr><call><name>pg_utf_mblen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* For all other cases, we must have a conversion function available */</comment>
	<if_stmt><if>if <condition>(<expr><name>Utf8ToServerConvProc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"conversion between %s and %s is not supported"</literal></expr></argument>,
						<argument><expr><name><name>pg_enc2name_tbl</name><index>[<expr><name>PG_UTF8</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
						<argument><expr><call><name>GetDatabaseEncodingName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Construct UTF-8 source string */</comment>
	<expr_stmt><expr><call><name>unicode_to_utf8</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c_as_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>c_as_utf8_len</name> <operator>=</operator> <call><name>pg_utf_mblen</name><argument_list>(<argument><expr><name>c_as_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c_as_utf8</name><index>[<expr><name>c_as_utf8_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<comment type="block">/* Convert, or throw error if we can't */</comment>
	<expr_stmt><expr><call><name>FunctionCall5</name><argument_list>(<argument><expr><name>Utf8ToServerConvProc</name></expr></argument>,
				  <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>PG_UTF8</name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>server_encoding</name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>c_as_utf8</name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>c_as_utf8_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* convert a multibyte string to a wchar */</comment>
<function><type><name>int</name></type>
<name>pg_mb2wchar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>pg_wchar</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pg_wchar_table</name><index>[<expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>]</index></name><operator>.</operator><call><name>mb2wchar_with_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* convert a multibyte string to a wchar with a limited length */</comment>
<function><type><name>int</name></type>
<name>pg_mb2wchar_with_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>pg_wchar</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pg_wchar_table</name><index>[<expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>]</index></name><operator>.</operator><call><name>mb2wchar_with_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* same, with any encoding */</comment>
<function><type><name>int</name></type>
<name>pg_encoding_mb2wchar_with_len</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>,
							  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>pg_wchar</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pg_wchar_table</name><index>[<expr><name>encoding</name></expr>]</index></name><operator>.</operator><call><name>mb2wchar_with_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* convert a wchar string to a multibyte */</comment>
<function><type><name>int</name></type>
<name>pg_wchar2mb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pg_wchar</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pg_wchar_table</name><index>[<expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>]</index></name><operator>.</operator><call><name>wchar2mb_with_len</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>to</name></expr></argument>, <argument><expr><call><name>pg_wchar_strlen</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* convert a wchar string to a multibyte with a limited length */</comment>
<function><type><name>int</name></type>
<name>pg_wchar2mb_with_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pg_wchar</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pg_wchar_table</name><index>[<expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>]</index></name><operator>.</operator><call><name>wchar2mb_with_len</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>to</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* same, with any encoding */</comment>
<function><type><name>int</name></type>
<name>pg_encoding_wchar2mb_with_len</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>,
							  <parameter><decl><type><specifier>const</specifier> <name>pg_wchar</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pg_wchar_table</name><index>[<expr><name>encoding</name></expr>]</index></name><operator>.</operator><call><name>wchar2mb_with_len</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>to</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* returns the byte length of a multibyte character */</comment>
<function><type><name>int</name></type>
<name>pg_mblen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pg_wchar_table</name><index>[<expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>]</index></name><operator>.</operator><call><name>mblen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>mbstr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* returns the display length of a multibyte character */</comment>
<function><type><name>int</name></type>
<name>pg_dsplen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pg_wchar_table</name><index>[<expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>]</index></name><operator>.</operator><call><name>dsplen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>mbstr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* returns the length (counted in wchars) of a multibyte string */</comment>
<function><type><name>int</name></type>
<name>pg_mbstrlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* optimization for single byte encoding */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pg_database_encoding_max_length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>mbstr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>mbstr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>mbstr</name> <operator>+=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>mbstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* returns the length (counted in wchars) of a multibyte string
 * (not necessarily NULL terminated)
 */</comment>
<function><type><name>int</name></type>
<name>pg_mbstrlen_with_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* optimization for single byte encoding */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pg_database_encoding_max_length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>limit</name></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>mbstr</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>l</name> <init>= <expr><call><name>pg_mblen</name><argument_list>(<argument><expr><name>mbstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>limit</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mbstr</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * returns the byte length of a multibyte string
 * (not necessarily NULL terminated)
 * that is no longer than limit.
 * this function does not break multibyte character boundary.
 */</comment>
<function><type><name>int</name></type>
<name>pg_mbcliplen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pg_encoding_mbcliplen</name><argument_list>(<argument><expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>, <argument><expr><name>mbstr</name></expr></argument>,
								 <argument><expr><name>len</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_mbcliplen with specified encoding
 */</comment>
<function><type><name>int</name></type>
<name>pg_encoding_mbcliplen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbstr</name></decl></parameter>,
					  <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mblen_converter</name></type> <name>mblen_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>l</name></decl>;</decl_stmt>

	<comment type="block">/* optimization for single byte encoding */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pg_encoding_max_length</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>cliplen</name><argument_list>(<argument><expr><name>mbstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>mblen_fn</name> <operator>=</operator> <name><name>pg_wchar_table</name><index>[<expr><name>encoding</name></expr>]</index></name><operator>.</operator><name>mblen</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>mbstr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mblen_fn</name>) <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>mbstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>clen</name> <operator>+</operator> <name>l</name><operator>)</operator> <operator>&gt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>clen</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mbstr</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>clen</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Similar to pg_mbcliplen except the limit parameter specifies the
 * character length, not the byte length.
 */</comment>
<function><type><name>int</name></type>
<name>pg_mbcharcliplen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>l</name></decl>;</decl_stmt>

	<comment type="block">/* optimization for single byte encoding */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pg_database_encoding_max_length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>cliplen</name><argument_list>(<argument><expr><name>mbstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>mbstr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>mbstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nch</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>nch</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>clen</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mbstr</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>clen</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* mbcliplen for any single-byte encoding */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cliplen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>SetDatabaseEncoding</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_BE_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid database encoding: %d"</literal></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>DatabaseEncoding</name> <operator>=</operator> <operator>&amp;</operator><name><name>pg_enc2name_tbl</name><index>[<expr><name>encoding</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>SetMessageEncoding</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Some calls happen before we can elog()! */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PG_VALID_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>MessageEncoding</name> <operator>=</operator> <operator>&amp;</operator><name><name>pg_enc2name_tbl</name><index>[<expr><name>encoding</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>MessageEncoding</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_NLS</name></cpp:ifdef>
<comment type="block">/*
 * Make one bind_textdomain_codeset() call, translating a pg_enc to a gettext
 * codeset.  Fails for MULE_INTERNAL, an encoding unknown to gettext; can also
 * fail for gettext-internal causes like out-of-memory.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>raw_pg_bind_textdomain_codeset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domainname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>elog_ok</name> <init>= <expr><operator>(</operator><name>CurrentMemoryContext</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pg_enc2gettext_tbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pg_enc2gettext_tbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>encoding</name> <operator>==</operator> <name>encoding</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>bind_textdomain_codeset</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>,
										<argument><expr><name><name>pg_enc2gettext_tbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>elog_ok</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"bind_textdomain_codeset failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>write_stderr</name><argument_list>(<argument><expr><literal type="string">"bind_textdomain_codeset failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Bind a gettext message domain to the codeset corresponding to the database
 * encoding.  For SQL_ASCII, instead bind to the codeset implied by LC_CTYPE.
 * Return the MessageEncoding implied by the new settings.
 *
 * On most platforms, gettext defaults to the codeset implied by LC_CTYPE.
 * When that matches the database encoding, we don't need to do anything.  In
 * CREATE DATABASE, we enforce or trust that the locale's codeset matches the
 * database encoding, except for the C locale.  (On Windows, we also permit a
 * discrepancy under the UTF8 encoding.)  For the C locale, explicitly bind
 * gettext to the right codeset.
 *
 * On Windows, gettext defaults to the Windows ANSI code page.  This is a
 * convenient departure for software that passes the strings to Windows ANSI
 * APIs, but we don't do that.  Compel gettext to use database encoding or,
 * failing that, the LC_CTYPE encoding as it would on other platforms.
 *
 * This function is called before elog() and palloc() are usable.
 */</comment>
<function><type><name>int</name></type>
<name>pg_bind_textdomain_codeset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domainname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>elog_ok</name> <init>= <expr><operator>(</operator><name>CurrentMemoryContext</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>encoding</name> <init>= <expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>new_msgenc</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctype</name> <init>= <expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"POSIX"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>!=</operator> <name>PG_SQL_ASCII</name> <operator>&amp;&amp;</operator>
			<call><name>raw_pg_bind_textdomain_codeset</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>encoding</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>new_msgenc</name> <operator>=</operator> <call><name>pg_get_encoding_from_locale</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>elog_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>new_msgenc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>new_msgenc</name> <operator>=</operator> <name>PG_SQL_ASCII</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raw_pg_bind_textdomain_codeset</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>, <argument><expr><name>new_msgenc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* On failure, the old message encoding remains valid. */</comment>
		<return>return <expr><call><name>GetMessageEncoding</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>new_msgenc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * The database encoding, also called the server encoding, represents the
 * encoding of data stored in text-like data types.  Affected types include
 * cstring, text, varchar, name, xml, and json.
 */</comment>
<function><type><name>int</name></type>
<name>GetDatabaseEncoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GetDatabaseEncodingName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>getdatabaseencoding</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>namein</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name><name>DatabaseEncoding</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>pg_client_encoding</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>namein</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name><name>ClientEncoding</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>PG_char_to_encoding</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Name</name></type>		<name>s</name> <init>= <expr><call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><call><name>pg_char_to_encoding</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>PG_encoding_to_char</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>encoding</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding_name</name> <init>= <expr><call><name>pg_encoding_to_char</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>namein</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>encoding_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * gettext() returns messages in this encoding.  This often matches the
 * database encoding, but it differs for SQL_ASCII databases, for processes
 * not attached to a database, and under a database encoding lacking iconv
 * support (MULE_INTERNAL).
 */</comment>
<function><type><name>int</name></type>
<name>GetMessageEncoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>MessageEncoding</name><operator>-&gt;</operator><name>encoding</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Generic character incrementer function.
 *
 * Not knowing anything about the properties of the encoding in use, we just
 * keep incrementing the last byte until we get a validly-encoded result,
 * or we run out of values to try.  We don't bother to try incrementing
 * higher-order bytes, so there's no growth in runtime for wider characters.
 * (If we did try to do that, we'd need to consider the likelihood that 255
 * is not a valid final byte in the encoding.)
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>pg_generic_charinc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>charptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lastbyte</name> <init>= <expr><name>charptr</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mbverifier</name></type>	<name>mbverify</name></decl>;</decl_stmt>

	<comment type="block">/* We can just invoke the character verifier directly. */</comment>
	<expr_stmt><expr><name>mbverify</name> <operator>=</operator> <name><name>pg_wchar_table</name><index>[<expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>]</index></name><operator>.</operator><name>mbverify</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>lastbyte</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="number">255</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>lastbyte</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mbverify</name>) <argument_list>(<argument><expr><name>charptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * UTF-8 character incrementer function.
 *
 * For a one-byte character less than 0x7F, we just increment the byte.
 *
 * For a multibyte character, every byte but the first must fall between 0x80
 * and 0xBF; and the first byte must be between 0xC0 and 0xF4.  We increment
 * the last byte that's not already at its maximum value.  If we can't find a
 * byte that's less than the maximum allowable value, we simply fail.  We also
 * need some special-case logic to skip regions used for surrogate pair
 * handling, as those should not occur in valid UTF-8.
 *
 * Note that we don't reset lower-order bytes back to their minimums, since
 * we can't afford to make an exhaustive search (see make_greater_string).
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>pg_utf8_increment</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>charptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>limit</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>length</name></expr>)</condition>
	<block>{<block_content>
		<default>default:</default>
			<comment type="block">/* reject lengths 5 and 6 for now */</comment>
			<return>return <expr><name>false</name></expr>;</return>
		<case>case <expr><literal type="number">4</literal></expr>:</case>
			<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>charptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0xBF</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>charptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* FALL THRU */</comment>
		<case>case <expr><literal type="number">3</literal></expr>:</case>
			<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>charptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0xBF</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>charptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* FALL THRU */</comment>
		<case>case <expr><literal type="number">2</literal></expr>:</case>
			<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>charptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<switch>switch <condition>(<expr><operator>*</operator><name>charptr</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><literal type="number">0xED</literal></expr>:</case>
					<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0x9F</literal></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="number">0xF4</literal></expr>:</case>
					<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0x8F</literal></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0xBF</literal></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>charptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* FALL THRU */</comment>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><name>charptr</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0x7F</literal> <operator>||</operator> <name>a</name> <operator>==</operator> <literal type="number">0xDF</literal> <operator>||</operator> <name>a</name> <operator>==</operator> <literal type="number">0xEF</literal> <operator>||</operator> <name>a</name> <operator>==</operator> <literal type="number">0xF4</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>charptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * EUC-JP character incrementer function.
 *
 * If the sequence starts with SS2 (0x8e), it must be a two-byte sequence
 * representing JIS X 0201 characters with the second byte ranging between
 * 0xa1 and 0xdf.  We just increment the last byte if it's less than 0xdf,
 * and otherwise rewrite the whole sequence to 0xa1 0xa1.
 *
 * If the sequence starts with SS3 (0x8f), it must be a three-byte sequence
 * in which the last two bytes range between 0xa1 and 0xfe.  The last byte
 * is incremented if possible, otherwise the second-to-last byte.
 *
 * If the sequence starts with a value other than the above and its MSB
 * is set, it must be a two-byte sequence representing JIS X 0208 characters
 * with both bytes ranging between 0xa1 and 0xfe.  The last byte is
 * incremented if possible, otherwise the second-to-last byte.
 *
 * Otherwise, the sequence is a single-byte ASCII character. It is
 * incremented up to 0x7f.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>pg_eucjp_increment</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>charptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>,
				<decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>charptr</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>c1</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>SS2</name></expr>:</case>				<comment type="block">/* JIS X 0201 */</comment>
			<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>charptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&gt;=</operator> <literal type="number">0xdf</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>charptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>charptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xa1</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0xa1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>charptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xa1</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>charptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>SS3</name></expr>:</case>				<comment type="block">/* JIS X 0212 */</comment>
			<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>charptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0xa1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>charptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xa1</literal></expr>;</expr_stmt>
					<return>return <expr><name>true</name></expr>;</return>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0xfe</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>charptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
					<return>return <expr><name>true</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<comment type="block">/* Out of 3-byte code region */</comment>
			<return>return <expr><name>false</name></expr>;</return>

		<default>default:</default>
			<if_stmt><if>if <condition>(<expr><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="block">/* JIS X 0208? */</comment>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>charptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0xa1</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>charptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xa1</literal></expr>;</expr_stmt>
						<return>return <expr><name>true</name></expr>;</return>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0xfe</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>charptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
						<return>return <expr><name>true</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>

				<comment type="block">/* Out of 2 byte code region */</comment>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>					<comment type="block">/* ASCII, single byte */</comment>
				<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&gt;</operator> <literal type="number">0x7e</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>charptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get the character incrementer for the encoding for the current database
 */</comment>
<function><type><name>mbcharacter_incrementer</name></type>
<name>pg_database_encoding_character_incrementer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Eventually it might be best to add a field to pg_wchar_table[], but for
	 * now we just use a switch.
	 */</comment>
	<switch>switch <condition>(<expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PG_UTF8</name></expr>:</case>
			<return>return <expr><name>pg_utf8_increment</name></expr>;</return>

		<case>case <expr><name>PG_EUC_JP</name></expr>:</case>
			<return>return <expr><name>pg_eucjp_increment</name></expr>;</return>

		<default>default:</default>
			<return>return <expr><name>pg_generic_charinc</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * fetch maximum length of the encoding for the current database
 */</comment>
<function><type><name>int</name></type>
<name>pg_database_encoding_max_length</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pg_wchar_table</name><index>[<expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>]</index></name><operator>.</operator><name>maxmblen</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Verify mbstr to make sure that it is validly encoded in the current
 * database encoding.  Otherwise same as pg_verify_mbstr().
 */</comment>
<function><type><name>bool</name></type>
<name>pg_verifymbstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>noError</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return
		<expr><call><name>pg_verify_mbstr_len</name><argument_list>(<argument><expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mbstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>noError</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Verify mbstr to make sure that it is validly encoded in the specified
 * encoding.
 */</comment>
<function><type><name>bool</name></type>
<name>pg_verify_mbstr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>noError</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pg_verify_mbstr_len</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>mbstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>noError</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Verify mbstr to make sure that it is validly encoded in the specified
 * encoding.
 *
 * mbstr is not necessarily zero terminated; length of mbstr is
 * specified by len.
 *
 * If OK, return length of string in the encoding.
 * If a problem is found, return -1 when noError is
 * true; when noError is false, ereport() a descriptive message.
 */</comment>
<function><type><name>int</name></type>
<name>pg_verify_mbstr_len</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>noError</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mbverifier</name></type>	<name>mbverify</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>mb_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PG_VALID_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * In single-byte encodings, we need only reject nulls (\0).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pg_encoding_max_length</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nullpos</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>mbstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>nullpos</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>noError</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>nullpos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* fetch function pointer just once */</comment>
	<expr_stmt><expr><name>mbverify</name> <operator>=</operator> <name><name>pg_wchar_table</name><index>[<expr><name>encoding</name></expr>]</index></name><operator>.</operator><name>mbverify</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>mb_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>l</name></decl>;</decl_stmt>

		<comment type="block">/* fast path for ASCII-subset characters */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><operator>*</operator><name>mbstr</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>mbstr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>mb_len</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>mbstr</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>noError</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>mbstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mbverify</name>) <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>mbstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>noError</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>mbstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>mbstr</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mb_len</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>mb_len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * check_encoding_conversion_args: check arguments of a conversion function
 *
 * "expected" arguments can be either an encoding ID or -1 to indicate that
 * the caller will check whether it accepts the ID.
 *
 * Note: the errors here are not really user-facing, so elog instead of
 * ereport seems sufficient.  Also, we trust that the "expected" encoding
 * arguments are valid encoding IDs, but we don't trust the actuals.
 */</comment>
<function><type><name>void</name></type>
<name>check_encoding_conversion_args</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>src_encoding</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>dest_encoding</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>expected_src_encoding</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>expected_dest_encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_ENCODING</name><argument_list>(<argument><expr><name>src_encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid source encoding ID: %d"</literal></expr></argument>, <argument><expr><name>src_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>src_encoding</name> <operator>!=</operator> <name>expected_src_encoding</name> <operator>&amp;&amp;</operator> <name>expected_src_encoding</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"expected source encoding \"%s\", but got \"%s\""</literal></expr></argument>,
			 <argument><expr><name><name>pg_enc2name_tbl</name><index>[<expr><name>expected_src_encoding</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
			 <argument><expr><name><name>pg_enc2name_tbl</name><index>[<expr><name>src_encoding</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_ENCODING</name><argument_list>(<argument><expr><name>dest_encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid destination encoding ID: %d"</literal></expr></argument>, <argument><expr><name>dest_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>dest_encoding</name> <operator>!=</operator> <name>expected_dest_encoding</name> <operator>&amp;&amp;</operator> <name>expected_dest_encoding</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"expected destination encoding \"%s\", but got \"%s\""</literal></expr></argument>,
			 <argument><expr><name><name>pg_enc2name_tbl</name><index>[<expr><name>expected_dest_encoding</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
			 <argument><expr><name><name>pg_enc2name_tbl</name><index>[<expr><name>dest_encoding</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"encoding conversion length must not be negative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * report_invalid_encoding: complain about invalid multibyte character
 *
 * note: len is remaining length of string, not length of character;
 * len must be greater than zero, as we always examine the first byte.
 */</comment>
<function><type><name>void</name></type>
<name>report_invalid_encoding</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>l</name> <init>= <expr><call><name>pg_encoding_mblen</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>mbstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>,
				<decl><type ref="prev"/><name>jlimit</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>jlimit</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>jlimit</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>jlimit</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* prevent buffer overrun */</comment>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>jlimit</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"0x%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>mbstr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>jlimit</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CHARACTER_NOT_IN_REPERTOIRE</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid byte sequence for encoding \"%s\": %s"</literal></expr></argument>,
					<argument><expr><name><name>pg_enc2name_tbl</name><index>[<expr><name>encoding</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
					<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * report_untranslatable_char: complain about untranslatable character
 *
 * note: len is remaining length of string, not length of character;
 * len must be greater than zero, as we always examine the first byte.
 */</comment>
<function><type><name>void</name></type>
<name>report_untranslatable_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>src_encoding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_encoding</name></decl></parameter>,
						   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>l</name> <init>= <expr><call><name>pg_encoding_mblen</name><argument_list>(<argument><expr><name>src_encoding</name></expr></argument>, <argument><expr><name>mbstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>,
				<decl><type ref="prev"/><name>jlimit</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>jlimit</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>jlimit</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>jlimit</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* prevent buffer overrun */</comment>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>jlimit</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"0x%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>mbstr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>jlimit</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNTRANSLATABLE_CHARACTER</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"character with byte sequence %s in encoding \"%s\" has no equivalent in encoding \"%s\""</literal></expr></argument>,
					<argument><expr><name>buf</name></expr></argument>,
					<argument><expr><name><name>pg_enc2name_tbl</name><index>[<expr><name>src_encoding</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
					<argument><expr><name><name>pg_enc2name_tbl</name><index>[<expr><name>dest_encoding</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<comment type="block">/*
 * Convert from MessageEncoding to a palloc'ed, null-terminated utf16
 * string. The character length is also passed to utf16len if not
 * null. Returns NULL iff failed. Before MessageEncoding initialization, "str"
 * should be ASCII-only; this will function as though MessageEncoding is UTF8.
 */</comment>
<function><type><name>WCHAR</name> <modifier>*</modifier></type>
<name>pgwin32_message_to_UTF16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>utf16len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>msgenc</name> <init>= <expr><call><name>GetMessageEncoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WCHAR</name>	   <modifier>*</modifier></type><name>utf16</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>dstlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UINT</name></type>		<name>codepage</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>msgenc</name> <operator>==</operator> <name>PG_SQL_ASCII</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* No conversion is possible, and SQL_ASCII is never utf16. */</comment>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>codepage</name> <operator>=</operator> <name><name>pg_enc2name_tbl</name><index>[<expr><name>msgenc</name></expr>]</index></name><operator>.</operator><name>codepage</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Use MultiByteToWideChar directly if there is a corresponding codepage,
	 * or double conversion through UTF8 if not.  Double conversion is needed,
	 * for example, in an ENCODING=LATIN8, LC_CTYPE=C database.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>codepage</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>utf16</name> <operator>=</operator> <operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dstlen</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>codepage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>utf16</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>utf16</name><index>[<expr><name>dstlen</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>WCHAR</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>utf8</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * XXX pg_do_encoding_conversion() requires a transaction.  In the
		 * absence of one, hope for the input to be valid UTF8.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>IsTransactionState</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>utf8</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_do_encoding_conversion</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>,
													  <argument><expr><name>len</name></expr></argument>,
													  <argument><expr><name>msgenc</name></expr></argument>,
													  <argument><expr><name>PG_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>utf8</name> <operator>!=</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>utf8</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>utf16</name> <operator>=</operator> <operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dstlen</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>utf8</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>utf16</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>utf16</name><index>[<expr><name>dstlen</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>WCHAR</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>utf8</name> <operator>!=</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dstlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>			<comment type="block">/* error */</comment>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>utf16len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>utf16len</name> <operator>=</operator> <name>dstlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>utf16</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WIN32 */</comment>
</unit>
