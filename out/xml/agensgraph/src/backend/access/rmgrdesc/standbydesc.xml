<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/access/rmgrdesc/standbydesc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * standbydesc.c
 *	  rmgr descriptor routines for storage/ipc/standby.c
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/access/rmgrdesc/standbydesc.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/standbydefs.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>standby_desc_running_xacts</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>xl_running_xacts</name> <modifier>*</modifier></type><name>xlrec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"nextXid %u latestCompletedXid %u oldestRunningXid %u"</literal></expr></argument>,
					 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>nextXid</name></name></expr></argument>,
					 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>latestCompletedXid</name></name></expr></argument>,
					 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>oldestRunningXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>xcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; %d xacts:"</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>xcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>xcnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %u"</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>xids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>subxid_overflow</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; subxid ovf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>standby_desc</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rec</name> <init>= <expr><call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_STANDBY_LOCK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_standby_locks</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_standby_locks</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>nlocks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"xid %u db %u rel %u "</literal></expr></argument>,
							 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>locks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xid</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>locks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dbOid</name></expr></argument>,
							 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>locks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>relOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_RUNNING_XACTS</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_running_xacts</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_running_xacts</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>standby_desc_running_xacts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>xlrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_INVALIDATIONS</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_invalidations</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_invalidations</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>standby_desc_invalidations</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>nmsgs</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>msgs</name></name></expr></argument>,
								   <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>tsId</name></name></expr></argument>,
								   <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>relcacheInitFileInval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>standby_identify</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>info</name> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XLOG_STANDBY_LOCK</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"LOCK"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_RUNNING_XACTS</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"RUNNING_XACTS"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_INVALIDATIONS</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"INVALIDATIONS"</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This routine is used by both standby_desc and xact_desc, because
 * transaction commits and XLOG_INVALIDATIONS messages contain invalidations;
 * it seems pointless to duplicate the code.
 */</comment>
<function><type><name>void</name></type>
<name>standby_desc_invalidations</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
						   <parameter><decl><type><name>int</name></type> <name>nmsgs</name></decl></parameter>, <parameter><decl><type><name>SharedInvalidationMessage</name> <modifier>*</modifier></type><name>msgs</name></decl></parameter>,
						   <parameter><decl><type><name>Oid</name></type> <name>dbId</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>tsId</name></decl></parameter>,
						   <parameter><decl><type><name>bool</name></type> <name>relcacheInitFileInval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Do nothing if there are no invalidation messages */</comment>
	<if_stmt><if>if <condition>(<expr><name>nmsgs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>relcacheInitFileInval</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; relcache init file inval dbid %u tsid %u"</literal></expr></argument>,
						 <argument><expr><name>dbId</name></expr></argument>, <argument><expr><name>tsId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; inval msgs:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nmsgs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SharedInvalidationMessage</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><operator>&amp;</operator><name><name>msgs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" catcache %d"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>SHAREDINVALCATALOG_ID</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" catalog %u"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>cat</name><operator>.</operator><name>catId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>SHAREDINVALRELCACHE_ID</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" relcache %u"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>relId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<comment type="block">/* not expected, but print something anyway */</comment>
		<if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>SHAREDINVALSMGR_ID</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" smgr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<comment type="block">/* not expected, but print something anyway */</comment>
		<if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>SHAREDINVALRELMAP_ID</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" relmap db %u"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>SHAREDINVALSNAPSHOT_ID</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" snapshot %u"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>sn</name><operator>.</operator><name>relId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" unrecognized id %d"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
