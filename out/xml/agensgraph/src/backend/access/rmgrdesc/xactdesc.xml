<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/access/rmgrdesc/xactdesc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * xactdesc.c
 *	  rmgr descriptor routines for access/transam/xact.c
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/access/rmgrdesc/xactdesc.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/sinval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/standbydefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Parse the WAL format of an xact commit and abort records into an easier to
 * understand format.
 *
 * This routines are in xactdesc.c because they're accessed in backend (when
 * replaying WAL) and frontend (pg_waldump) code. This file is the only xact
 * specific one shared between both. They're complicated enough that
 * duplication would be bothersome.
 */</comment>

<function><type><name>void</name></type>
<name>ParseCommitRecord</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>xl_xact_commit</name> <modifier>*</modifier></type><name>xlrec</name></decl></parameter>, <parameter><decl><type><name>xl_xact_parsed_commit</name> <modifier>*</modifier></type><name>parsed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>xlrec</name><operator>)</operator> <operator>+</operator> <name>MinSizeOfXactCommit</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>parsed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>parsed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>			<comment type="block">/* default, if no XLOG_XACT_HAS_INFO is
								 * present */</comment>

	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>xact_time</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>xact_time</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>&amp;</operator> <name>XLOG_XACT_HAS_INFO</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_xinfo</name> <modifier>*</modifier></type><name>xl_xinfo</name> <init>= <expr><operator>(</operator><name>xl_xact_xinfo</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>=</operator> <name><name>xl_xinfo</name><operator>-&gt;</operator><name>xinfo</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xl_xact_xinfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_DBINFO</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_dbinfo</name> <modifier>*</modifier></type><name>xl_dbinfo</name> <init>= <expr><operator>(</operator><name>xl_xact_dbinfo</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name><name>xl_dbinfo</name><operator>-&gt;</operator><name>dbId</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>tsId</name></name> <operator>=</operator> <name><name>xl_dbinfo</name><operator>-&gt;</operator><name>tsId</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xl_xact_dbinfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_SUBXACTS</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_subxacts</name> <modifier>*</modifier></type><name>xl_subxacts</name> <init>= <expr><operator>(</operator><name>xl_xact_subxacts</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>nsubxacts</name></name> <operator>=</operator> <name><name>xl_subxacts</name><operator>-&gt;</operator><name>nsubxacts</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>subxacts</name></name> <operator>=</operator> <name><name>xl_subxacts</name><operator>-&gt;</operator><name>subxacts</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>MinSizeOfXactSubxacts</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>parsed</name><operator>-&gt;</operator><name>nsubxacts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TransactionId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_RELFILENODES</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_relfilenodes</name> <modifier>*</modifier></type><name>xl_relfilenodes</name> <init>= <expr><operator>(</operator><name>xl_xact_relfilenodes</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>nrels</name></name> <operator>=</operator> <name><name>xl_relfilenodes</name><operator>-&gt;</operator><name>nrels</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>xnodes</name></name> <operator>=</operator> <name><name>xl_relfilenodes</name><operator>-&gt;</operator><name>xnodes</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>MinSizeOfXactRelfilenodes</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>xl_relfilenodes</name><operator>-&gt;</operator><name>nrels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RelFileNode</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_INVALS</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_invals</name> <modifier>*</modifier></type><name>xl_invals</name> <init>= <expr><operator>(</operator><name>xl_xact_invals</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>nmsgs</name></name> <operator>=</operator> <name><name>xl_invals</name><operator>-&gt;</operator><name>nmsgs</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>msgs</name></name> <operator>=</operator> <name><name>xl_invals</name><operator>-&gt;</operator><name>msgs</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>MinSizeOfXactInvals</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>xl_invals</name><operator>-&gt;</operator><name>nmsgs</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SharedInvalidationMessage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_TWOPHASE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_twophase</name> <modifier>*</modifier></type><name>xl_twophase</name> <init>= <expr><operator>(</operator><name>xl_xact_twophase</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>twophase_xid</name></name> <operator>=</operator> <name><name>xl_twophase</name><operator>-&gt;</operator><name>xid</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xl_xact_twophase</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_GID</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>parsed</name><operator>-&gt;</operator><name>twophase_gid</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>parsed</name><operator>-&gt;</operator><name>twophase_gid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Note: no alignment is guaranteed after this point */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_ORIGIN</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_origin</name></type> <name>xl_origin</name></decl>;</decl_stmt>

		<comment type="block">/* no alignment is guaranteed, so copy onto stack */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xl_origin</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xl_origin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>origin_lsn</name></name> <operator>=</operator> <name><name>xl_origin</name><operator>.</operator><name>origin_lsn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>origin_timestamp</name></name> <operator>=</operator> <name><name>xl_origin</name><operator>.</operator><name>origin_timestamp</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xl_xact_origin</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ParseAbortRecord</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>xl_xact_abort</name> <modifier>*</modifier></type><name>xlrec</name></decl></parameter>, <parameter><decl><type><name>xl_xact_parsed_abort</name> <modifier>*</modifier></type><name>parsed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>xlrec</name><operator>)</operator> <operator>+</operator> <name>MinSizeOfXactAbort</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>parsed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>parsed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>			<comment type="block">/* default, if no XLOG_XACT_HAS_INFO is
								 * present */</comment>

	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>xact_time</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>xact_time</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>&amp;</operator> <name>XLOG_XACT_HAS_INFO</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_xinfo</name> <modifier>*</modifier></type><name>xl_xinfo</name> <init>= <expr><operator>(</operator><name>xl_xact_xinfo</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>=</operator> <name><name>xl_xinfo</name><operator>-&gt;</operator><name>xinfo</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xl_xact_xinfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_DBINFO</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_dbinfo</name> <modifier>*</modifier></type><name>xl_dbinfo</name> <init>= <expr><operator>(</operator><name>xl_xact_dbinfo</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name><name>xl_dbinfo</name><operator>-&gt;</operator><name>dbId</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>tsId</name></name> <operator>=</operator> <name><name>xl_dbinfo</name><operator>-&gt;</operator><name>tsId</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xl_xact_dbinfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_SUBXACTS</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_subxacts</name> <modifier>*</modifier></type><name>xl_subxacts</name> <init>= <expr><operator>(</operator><name>xl_xact_subxacts</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>nsubxacts</name></name> <operator>=</operator> <name><name>xl_subxacts</name><operator>-&gt;</operator><name>nsubxacts</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>subxacts</name></name> <operator>=</operator> <name><name>xl_subxacts</name><operator>-&gt;</operator><name>subxacts</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>MinSizeOfXactSubxacts</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>parsed</name><operator>-&gt;</operator><name>nsubxacts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TransactionId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_RELFILENODES</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_relfilenodes</name> <modifier>*</modifier></type><name>xl_relfilenodes</name> <init>= <expr><operator>(</operator><name>xl_xact_relfilenodes</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>nrels</name></name> <operator>=</operator> <name><name>xl_relfilenodes</name><operator>-&gt;</operator><name>nrels</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>xnodes</name></name> <operator>=</operator> <name><name>xl_relfilenodes</name><operator>-&gt;</operator><name>xnodes</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>MinSizeOfXactRelfilenodes</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>xl_relfilenodes</name><operator>-&gt;</operator><name>nrels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RelFileNode</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_TWOPHASE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_twophase</name> <modifier>*</modifier></type><name>xl_twophase</name> <init>= <expr><operator>(</operator><name>xl_xact_twophase</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>twophase_xid</name></name> <operator>=</operator> <name><name>xl_twophase</name><operator>-&gt;</operator><name>xid</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xl_xact_twophase</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_GID</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>parsed</name><operator>-&gt;</operator><name>twophase_gid</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>parsed</name><operator>-&gt;</operator><name>twophase_gid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Note: no alignment is guaranteed after this point */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>-&gt;</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_ORIGIN</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_origin</name></type> <name>xl_origin</name></decl>;</decl_stmt>

		<comment type="block">/* no alignment is guaranteed, so copy onto stack */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xl_origin</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xl_origin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>origin_lsn</name></name> <operator>=</operator> <name><name>xl_origin</name><operator>.</operator><name>origin_lsn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>origin_timestamp</name></name> <operator>=</operator> <name><name>xl_origin</name><operator>.</operator><name>origin_timestamp</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xl_xact_origin</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ParsePrepareRecord
 */</comment>
<function><type><name>void</name></type>
<name>ParsePrepareRecord</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>xl_xact_prepare</name> <modifier>*</modifier></type><name>xlrec</name></decl></parameter>, <parameter><decl><type><name>xl_xact_parsed_prepare</name> <modifier>*</modifier></type><name>parsed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>bufptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bufptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>xlrec</name><operator>)</operator> <operator>+</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xl_xact_prepare</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>parsed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>parsed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>xact_time</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>prepared_at</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>origin_lsn</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>origin_lsn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>origin_timestamp</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>origin_timestamp</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>twophase_xid</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>xid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>database</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>nsubxacts</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>nsubxacts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>nrels</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>ncommitrels</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>nabortrels</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>nabortrels</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>nmsgs</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>ninvalmsgs</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>parsed</name><operator>-&gt;</operator><name>twophase_gid</name></name></expr></argument>, <argument><expr><name>bufptr</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>gidlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufptr</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>gidlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>subxacts</name></name> <operator>=</operator> <operator>(</operator><name>TransactionId</name> <operator>*</operator><operator>)</operator> <name>bufptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufptr</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>nsubxacts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>xnodes</name></name> <operator>=</operator> <operator>(</operator><name>RelFileNode</name> <operator>*</operator><operator>)</operator> <name>bufptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufptr</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>ncommitrels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RelFileNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>abortnodes</name></name> <operator>=</operator> <operator>(</operator><name>RelFileNode</name> <operator>*</operator><operator>)</operator> <name>bufptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufptr</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>nabortrels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RelFileNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>parsed</name><operator>-&gt;</operator><name>msgs</name></name> <operator>=</operator> <operator>(</operator><name>SharedInvalidationMessage</name> <operator>*</operator><operator>)</operator> <name>bufptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufptr</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>ninvalmsgs</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SharedInvalidationMessage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xact_desc_relations</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nrels</name></decl></parameter>,
					<parameter><decl><type><name>RelFileNode</name> <modifier>*</modifier></type><name>xnodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nrels</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; %s:"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>relpathperm</name><argument_list>(<argument><expr><name><name>xnodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xact_desc_subxacts</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nsubxacts</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name> <modifier>*</modifier></type><name>subxacts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nsubxacts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; subxacts:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsubxacts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %u"</literal></expr></argument>, <argument><expr><name><name>subxacts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xact_desc_commit</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>xl_xact_commit</name> <modifier>*</modifier></type><name>xlrec</name></decl></parameter>, <parameter><decl><type><name>RepOriginId</name></type> <name>origin_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>xl_xact_parsed_commit</name></type> <name>parsed</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ParseCommitRecord</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>xlrec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If this is a prepared xact, show the xid of the original xact */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>TransactionIdIsValid</name><argument_list>(<argument><expr><name><name>parsed</name><operator>.</operator><name>twophase_xid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%u: "</literal></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>twophase_xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>timestamptz_to_str</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>xact_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>xact_desc_relations</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"rels"</literal></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>nrels</name></name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>xnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xact_desc_subxacts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>nsubxacts</name></name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>subxacts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>standby_desc_invalidations</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>nmsgs</name></name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>msgs</name></name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>dbId</name></name></expr></argument>,
							   <argument><expr><name><name>parsed</name><operator>.</operator><name>tsId</name></name></expr></argument>,
							   <argument><expr><call><name>XactCompletionRelcacheInitFileInval</name><argument_list>(<argument><expr><name><name>parsed</name><operator>.</operator><name>xinfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>XactCompletionForceSyncCommit</name><argument_list>(<argument><expr><name><name>parsed</name><operator>.</operator><name>xinfo</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; sync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parsed</name><operator>.</operator><name>xinfo</name></name> <operator>&amp;</operator> <name>XACT_XINFO_HAS_ORIGIN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; origin: node %u, lsn %X/%X, at %s"</literal></expr></argument>,
						 <argument><expr><name>origin_id</name></expr></argument>,
						 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>parsed</name><operator>.</operator><name>origin_lsn</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
						 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>parsed</name><operator>.</operator><name>origin_lsn</name></name></expr></argument>,
						 <argument><expr><call><name>timestamptz_to_str</name><argument_list>(<argument><expr><name><name>parsed</name><operator>.</operator><name>origin_timestamp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xact_desc_abort</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>xl_xact_abort</name> <modifier>*</modifier></type><name>xlrec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>xl_xact_parsed_abort</name></type> <name>parsed</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ParseAbortRecord</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>xlrec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If this is a prepared xact, show the xid of the original xact */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>TransactionIdIsValid</name><argument_list>(<argument><expr><name><name>parsed</name><operator>.</operator><name>twophase_xid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%u: "</literal></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>twophase_xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>timestamptz_to_str</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>xact_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>xact_desc_relations</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"rels"</literal></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>nrels</name></name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>xnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xact_desc_subxacts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>nsubxacts</name></name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>subxacts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xact_desc_prepare</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>xl_xact_prepare</name> <modifier>*</modifier></type><name>xlrec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>xl_xact_parsed_prepare</name></type> <name>parsed</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ParsePrepareRecord</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>xlrec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"gid %s: "</literal></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>twophase_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>timestamptz_to_str</name><argument_list>(<argument><expr><name><name>parsed</name><operator>.</operator><name>xact_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>xact_desc_relations</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"rels(commit)"</literal></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>nrels</name></name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>xnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xact_desc_relations</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"rels(abort)"</literal></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>nabortrels</name></name></expr></argument>,
						<argument><expr><name><name>parsed</name><operator>.</operator><name>abortnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xact_desc_subxacts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>nsubxacts</name></name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>subxacts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>standby_desc_invalidations</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>nmsgs</name></name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>msgs</name></name></expr></argument>, <argument><expr><name><name>parsed</name><operator>.</operator><name>dbId</name></name></expr></argument>,
							   <argument><expr><name><name>parsed</name><operator>.</operator><name>tsId</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>initfileinval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xact_desc_assignment</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>xl_xact_assignment</name> <modifier>*</modifier></type><name>xlrec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"subxacts:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>nsubxacts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %u"</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>xsub</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xact_desc</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rec</name> <init>= <expr><call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>XLOG_XACT_OPMASK</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_XACT_COMMIT</name> <operator>||</operator> <name>info</name> <operator>==</operator> <name>XLOG_XACT_COMMIT_PREPARED</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_commit</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_xact_commit</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>xact_desc_commit</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xlrec</name></expr></argument>,
						 <argument><expr><call><name>XLogRecGetOrigin</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_XACT_ABORT</name> <operator>||</operator> <name>info</name> <operator>==</operator> <name>XLOG_XACT_ABORT_PREPARED</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_abort</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_xact_abort</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>xact_desc_abort</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xlrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_XACT_PREPARE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_prepare</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_xact_prepare</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>xact_desc_prepare</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xlrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_XACT_ASSIGNMENT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_xact_assignment</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_xact_assignment</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Note that we ignore the WAL record's xid, since we're more
		 * interested in the top-level xid that issued the record and which
		 * xids are being reported here.
		 */</comment>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"xtop %u: "</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>xtop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xact_desc_assignment</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>xlrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xact_identify</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>info</name> <operator>&amp;</operator> <name>XLOG_XACT_OPMASK</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XLOG_XACT_COMMIT</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"COMMIT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_XACT_PREPARE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"PREPARE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_XACT_ABORT</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"ABORT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_XACT_COMMIT_PREPARED</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"COMMIT_PREPARED"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_XACT_ABORT_PREPARED</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"ABORT_PREPARED"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_XACT_ASSIGNMENT</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"ASSIGNMENT"</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>
</unit>
