<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/access/rmgrdesc/heapdesc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * heapdesc.c
 *	  rmgr descriptor routines for access/heap/heapam.c
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/access/rmgrdesc/heapdesc.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam_xlog.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>out_infobits</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>infobits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>infobits</name> <operator>&amp;</operator> <name>XLHL_XMAX_IS_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"IS_MULTI "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>infobits</name> <operator>&amp;</operator> <name>XLHL_XMAX_LOCK_ONLY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"LOCK_ONLY "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>infobits</name> <operator>&amp;</operator> <name>XLHL_XMAX_EXCL_LOCK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"EXCL_LOCK "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>infobits</name> <operator>&amp;</operator> <name>XLHL_XMAX_KEYSHR_LOCK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"KEYSHR_LOCK "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>infobits</name> <operator>&amp;</operator> <name>XLHL_KEYS_UPDATED</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"KEYS_UPDATED "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>heap_desc</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rec</name> <init>= <expr><call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>info</name> <operator>&amp;=</operator> <name>XLOG_HEAP_OPMASK</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP_INSERT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_insert</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_insert</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"off %u flags 0x%02X"</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>offnum</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP_DELETE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_delete</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_delete</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"off %u flags 0x%02X "</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>offnum</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>out_infobits</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>infobits_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP_UPDATE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_update</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_update</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"off %u xmax %u flags 0x%02X "</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>old_offnum</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>old_xmax</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>out_infobits</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>old_infobits_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; new off %u xmax %u"</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>new_offnum</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>new_xmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP_HOT_UPDATE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_update</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_update</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"off %u xmax %u flags 0x%02X "</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>old_offnum</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>old_xmax</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>out_infobits</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>old_infobits_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; new off %u xmax %u"</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>new_offnum</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>new_xmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP_TRUNCATE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_truncate</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_truncate</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>XLH_TRUNCATE_CASCADE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cascade "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>XLH_TRUNCATE_RESTART_SEQS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"restart_seqs "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"nrelids %u relids"</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>nrelids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>nrelids</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %u"</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>relids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP_CONFIRM</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_confirm</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_confirm</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"off %u"</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>offnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP_LOCK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_lock</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_lock</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"off %u: xid %u: flags 0x%02X "</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>offnum</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>locking_xid</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>out_infobits</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>infobits_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP_INPLACE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_inplace</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_inplace</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"off %u"</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>offnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>heap2_desc</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rec</name> <init>= <expr><call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>info</name> <operator>&amp;=</operator> <name>XLOG_HEAP_OPMASK</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP2_CLEAN</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_clean</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_clean</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"remxid %u"</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>latestRemovedXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP2_FREEZE_PAGE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_freeze_page</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_freeze_page</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cutoff xid %u ntuples %u"</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>cutoff_xid</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>ntuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP2_CLEANUP_INFO</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_cleanup_info</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_cleanup_info</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"remxid %u"</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>latestRemovedXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP2_VISIBLE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_visible</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_visible</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cutoff xid %u flags 0x%02X"</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>cutoff_xid</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP2_MULTI_INSERT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_multi_insert</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_multi_insert</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d tuples flags 0x%02X"</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>ntuples</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP2_LOCK_UPDATED</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_lock_updated</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_lock_updated</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"off %u: xmax %u: flags 0x%02X "</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>offnum</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>out_infobits</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>infobits_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HEAP2_NEW_CID</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_heap_new_cid</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_heap_new_cid</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"rel %u/%u/%u; tid %u/%u"</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target_node</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target_node</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target_node</name><operator>.</operator><name>relNode</name></name></expr></argument>,
						 <argument><expr><call><name>ItemPointerGetBlockNumber</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xlrec</name><operator>-&gt;</operator><name>target_tid</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><call><name>ItemPointerGetOffsetNumber</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xlrec</name><operator>-&gt;</operator><name>target_tid</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; cmin: %u, cmax: %u, combo: %u"</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>cmin</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>cmax</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>combocid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>heap_identify</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>info</name> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XLOG_HEAP_INSERT</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"INSERT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP_INSERT</name> <operator>|</operator> <name>XLOG_HEAP_INIT_PAGE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"INSERT+INIT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP_DELETE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"DELETE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP_UPDATE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"UPDATE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP_UPDATE</name> <operator>|</operator> <name>XLOG_HEAP_INIT_PAGE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"UPDATE+INIT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP_HOT_UPDATE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"HOT_UPDATE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP_HOT_UPDATE</name> <operator>|</operator> <name>XLOG_HEAP_INIT_PAGE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"HOT_UPDATE+INIT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP_TRUNCATE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"TRUNCATE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP_CONFIRM</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"HEAP_CONFIRM"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP_LOCK</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"LOCK"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP_INPLACE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"INPLACE"</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>heap2_identify</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>info</name> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XLOG_HEAP2_CLEAN</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"CLEAN"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP2_FREEZE_PAGE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"FREEZE_PAGE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP2_CLEANUP_INFO</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"CLEANUP_INFO"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP2_VISIBLE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"VISIBLE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP2_MULTI_INSERT</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"MULTI_INSERT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP2_MULTI_INSERT</name> <operator>|</operator> <name>XLOG_HEAP_INIT_PAGE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"MULTI_INSERT+INIT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP2_LOCK_UPDATED</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"LOCK_UPDATED"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP2_NEW_CID</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"NEW_CID"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_HEAP2_REWRITE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"REWRITE"</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>
</unit>
