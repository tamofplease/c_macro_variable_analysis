<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/access/spgist/spgkdtreeproc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * spgkdtreeproc.c
 *	  implementation of k-d tree over points for SP-GiST
 *
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *			src/backend/access/spgist/spgkdtreeproc.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/spgist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/spgist_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/stratnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/float.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/geo_decls.h"</cpp:file></cpp:include>


<function><type><name>Datum</name></type>
<name>spg_kd_config</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* spgConfigIn *cfgin = (spgConfigIn *) PG_GETARG_POINTER(0); */</comment>
	<decl_stmt><decl><type><name>spgConfigOut</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><operator>(</operator><name>spgConfigOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>prefixType</name></name> <operator>=</operator> <name>FLOAT8OID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>labelType</name></name> <operator>=</operator> <name>VOIDOID</name></expr>;</expr_stmt>	<comment type="block">/* we don't need node labels */</comment>
	<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>canReturnData</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>longValuesOK</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getSide</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isX</name></decl></parameter>, <parameter><decl><type><name>Point</name> <modifier>*</modifier></type><name>tst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>tstcoord</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>isX</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>tst</name><operator>-&gt;</operator><name>x</name></name></expr> </then><else>: <expr><name><name>tst</name><operator>-&gt;</operator><name>y</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>coord</name> <operator>==</operator> <name>tstcoord</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>coord</name> <operator>&gt;</operator> <name>tstcoord</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>spg_kd_choose</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>spgChooseIn</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>spgChooseIn</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>spgChooseOut</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>spgChooseOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name>	   <modifier>*</modifier></type><name>inPoint</name> <init>= <expr><call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>datum</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>coord</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>allTheSame</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"allTheSame should not occur for k-d trees"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>hasPrefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>coord</name> <operator>=</operator> <call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>prefixDatum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>resultType</name></name> <operator>=</operator> <name>spgMatchNode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>matchNode</name><operator>.</operator><name>nodeN</name></name> <operator>=</operator>
		<ternary><condition><expr><operator>(</operator><call><name>getSide</name><argument_list>(<argument><expr><name>coord</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>level</name></name> <operator>%</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>inPoint</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>matchNode</name><operator>.</operator><name>levelAdd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>matchNode</name><operator>.</operator><name>restDatum</name></name> <operator>=</operator> <call><name>PointPGetDatum</name><argument_list>(<argument><expr><name>inPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SortedPoint</name>
<block>{
	<decl_stmt><decl><type><name>Point</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
}</block></struct></type> <name>SortedPoint</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>x_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SortedPoint</name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><operator>(</operator><name>SortedPoint</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SortedPoint</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>(</operator><name>SortedPoint</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pa</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name><name>pb</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pa</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <name><name>pb</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>y_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SortedPoint</name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><operator>(</operator><name>SortedPoint</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SortedPoint</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>(</operator><name>SortedPoint</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pa</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <name><name>pb</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pa</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <name><name>pb</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>y</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>spg_kd_picksplit</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>spgPickSplitIn</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>spgPickSplitIn</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>spgPickSplitOut</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>spgPickSplitOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>middle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SortedPoint</name> <modifier>*</modifier></type><name>sorted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>coord</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sorted</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sorted</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>sorted</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sorted</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sorted</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		  <argument><expr><ternary><condition><expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>level</name></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>x_cmp</name></expr> </then><else>: <expr><name>y_cmp</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>middle</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>coord</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>level</name></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>sorted</name><index>[<expr><name>middle</name></expr>]</index></name><operator>.</operator><name><name>p</name><operator>-&gt;</operator><name>x</name></name></expr> </then><else>: <expr><name><name>sorted</name><index>[<expr><name>middle</name></expr>]</index></name><operator>.</operator><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>hasPrefix</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>prefixDatum</name></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeLabels</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>		<comment type="block">/* we don't need node labels */</comment>

	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>mapTuplesToNodes</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>leafTupleDatums</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Note: points that have coordinates exactly equal to coord may get
	 * classified into either node, depending on where they happen to fall in
	 * the sorted list.  This is okay as long as the inner_consistent function
	 * descends into both sides for such cases.  This is better than the
	 * alternative of trying to have an exact boundary, because it keeps the
	 * tree balanced even when we have many instances of the same point value.
	 * So we should never trigger the allTheSame logic.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Point</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>sorted</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>n</name> <init>= <expr><name><name>sorted</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>mapTuplesToNodes</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>middle</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>leafTupleDatums</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>PointPGetDatum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>spg_kd_inner_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>spgInnerConsistentIn</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>spgInnerConsistentIn</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>spgInnerConsistentOut</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>spgInnerConsistentOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>coord</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>which</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOX</name></type>			<name><name>bboxes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>hasPrefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>coord</name> <operator>=</operator> <call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>prefixDatum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>allTheSame</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"allTheSame should not occur for k-d trees"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* "which" is a bitmask of children that satisfy all constraints */</comment>
	<expr_stmt><expr><name>which</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nkeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Point</name>	   <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_argument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BOX</name>		   <modifier>*</modifier></type><name>boxQuery</name></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_strategy</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>RTLeftStrategyNumber</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>level</name></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FPlt</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>RTRightStrategyNumber</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>level</name></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FPgt</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>RTSameStrategyNumber</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>level</name></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>FPlt</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><call><name>FPgt</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>FPlt</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><call><name>FPgt</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>RTBelowStrategyNumber</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>level</name></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FPlt</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>RTAboveStrategyNumber</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>level</name></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FPgt</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>RTContainedByStrategyNumber</name></expr>:</case>

				<comment type="block">/*
				 * For this operator, the query is a box not a point.  We
				 * cheat to the extent of assuming that DatumGetPointP won't
				 * do anything that would be bad for a pointer-to-box.
				 */</comment>
				<expr_stmt><expr><name>boxQuery</name> <operator>=</operator> <call><name>DatumGetBoxP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>level</name></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>FPlt</name><argument_list>(<argument><expr><name><name>boxQuery</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><call><name>FPgt</name><argument_list>(<argument><expr><name><name>boxQuery</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>FPlt</name><argument_list>(<argument><expr><name><name>boxQuery</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><call><name>FPgt</name><argument_list>(<argument><expr><name><name>boxQuery</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized strategy number: %d"</literal></expr></argument>,
					 <argument><expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>which</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* no need to consider remaining conditions */</comment>
	</block_content>}</block></for>

	<comment type="block">/* We must descend into the children identified by which */</comment>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Fast-path for no matching children */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>which</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeNumbers</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * When ordering scan keys are specified, we've to calculate distance for
	 * them.  In order to do that, we need calculate bounding boxes for both
	 * children nodes.  Calculation of those bounding boxes on non-zero level
	 * require knowledge of bounding box of upper node.  So, we save bounding
	 * boxes to traversalValues.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>norderbys</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BOX</name></type>			<name>infArea</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BOX</name>		   <modifier>*</modifier></type><name>area</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>distances</name></name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>traversalValues</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>float8</name></type>		<name>inf</name> <init>= <expr><call><name>get_float8_infinity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>infArea</name><operator>.</operator><name>high</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>inf</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>infArea</name><operator>.</operator><name>high</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>inf</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>infArea</name><operator>.</operator><name>low</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name>inf</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>infArea</name><operator>.</operator><name>low</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name>inf</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>area</name> <operator>=</operator> <operator>&amp;</operator><name>infArea</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>area</name> <operator>=</operator> <operator>(</operator><name>BOX</name> <operator>*</operator><operator>)</operator> <name><name>in</name><operator>-&gt;</operator><name>traversalValue</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>bboxes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>low</name> <operator>=</operator> <name><name>area</name><operator>-&gt;</operator><name>low</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bboxes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>high</name> <operator>=</operator> <name><name>area</name><operator>-&gt;</operator><name>high</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>level</name></name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* split box by x */</comment>
			<expr_stmt><expr><name><name>bboxes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>high</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bboxes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>low</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>coord</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>bboxes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>high</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>area</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>bboxes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>low</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>area</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* split box by y */</comment>
			<expr_stmt><expr><name><name>bboxes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>high</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>bboxes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>low</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>coord</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>bboxes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>high</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>area</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>bboxes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>low</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>area</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>which</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeNumbers</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>norderbys</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCtx</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>traversalMemoryContext</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>BOX</name>		   <modifier>*</modifier></type><name>box</name> <init>= <expr><call><name>box_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bboxes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>traversalValues</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name></expr>]</index></name> <operator>=</operator> <name>box</name></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>distances</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name></expr>]</index></name> <operator>=</operator> <call><name>spg_key_orderbys_distances</name><argument_list>(<argument><expr><call><name>BoxPGetDatum</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>,
																		 <argument><expr><name><name>in</name><operator>-&gt;</operator><name>orderbys</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>norderbys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Set up level increments, too */</comment>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>levelAdds</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>levelAdds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>levelAdds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * spg_kd_leaf_consistent() is the same as spg_quad_leaf_consistent(),
 * since we support the same operators and the same leaf data type.
 * So we just borrow that function.
 */</comment>
</unit>
