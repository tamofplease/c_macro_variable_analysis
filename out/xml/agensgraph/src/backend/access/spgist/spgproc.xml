<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/access/spgist/spgproc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * spgproc.c
 *	  Common supporting procedures for SP-GiST opclasses.
 *
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *			src/backend/access/spgist/spgproc.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/spgist_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/float.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/geo_decls.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>point_point_distance</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>,<parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>DatumGetFloat8(DirectFunctionCall2(point_distance, \
									   PointPGetDatum(p1), PointPGetDatum(p2)))</cpp:value></cpp:define>

<comment type="block">/* Point-box distance in the assumption that box is aligned by axis */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>point_box_distance</name><parameter_list>(<parameter><decl><type><name>Point</name> <modifier>*</modifier></type><name>point</name></decl></parameter>, <parameter><decl><type><name>BOX</name> <modifier>*</modifier></type><name>box</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>dx</name></decl>,
				<decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>point</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>box</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
		<call><name>isnan</name><argument_list>(<argument><expr><name><name>point</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>box</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>get_float8_nan</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>point</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name><name>box</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>box</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>point</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>point</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <name><name>box</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>point</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>box</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>dx</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>point</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;</operator> <name><name>box</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>box</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>point</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>point</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <name><name>box</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>point</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>box</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>dy</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><call><name>HYPOT</name><argument_list>(<argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns distances from given key to array of ordering scan keys.  Leaf key
 * is expected to be point, non-leaf key is expected to be box.  Scan key
 * arguments are expected to be points.
 */</comment>
<function><type><name>double</name> <modifier>*</modifier></type>
<name>spg_key_orderbys_distances</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isLeaf</name></decl></parameter>,
						   <parameter><decl><type><name>ScanKey</name></type> <name>orderbys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>norderbys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>sk_num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name>	   <modifier>*</modifier></type><name>distances</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>norderbys</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>distance</name> <init>= <expr><name>distances</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>sk_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sk_num</name> <operator>&lt;</operator> <name>norderbys</name></expr>;</condition> <incr><expr><operator>++</operator><name>sk_num</name></expr><operator>,</operator> <expr><operator>++</operator><name>orderbys</name></expr><operator>,</operator> <expr><operator>++</operator><name>distance</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Point</name>	   <modifier>*</modifier></type><name>point</name> <init>= <expr><call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>orderbys</name><operator>-&gt;</operator><name>sk_argument</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <ternary><condition><expr><name>isLeaf</name></expr> ?</condition><then> <expr><call><name>point_point_distance</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><call><name>DatumGetPointP</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
			</then><else>: <expr><call><name>point_box_distance</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><call><name>DatumGetBoxP</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>distances</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BOX</name> <modifier>*</modifier></type>
<name>box_copy</name><parameter_list>(<parameter><decl><type><name>BOX</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BOX</name>		   <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BOX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>*</operator><name>orig</name></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
