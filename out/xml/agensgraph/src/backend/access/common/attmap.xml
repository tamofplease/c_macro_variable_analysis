<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/access/common/attmap.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * attmap.c
 *	  Attribute mapping support.
 *
 * This file provides utility routines to build and manage attribute
 * mappings by comparing input and output TupleDescs.  Such mappings
 * are typically used by DDL operating on inheritance and partition trees
 * to do a conversion between rowtypes logically equivalent but with
 * columns in a different order, taking into account dropped columns.
 * They are also used by the tuple conversion routines in tupconvert.c.
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/access/common/attmap.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/attmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_attrmap_match</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>indesc</name></decl></parameter>,
								<parameter><decl><type><name>TupleDesc</name></type> <name>outdesc</name></decl></parameter>,
								<parameter><decl><type><name>AttrMap</name> <modifier>*</modifier></type><name>attrMap</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * make_attrmap
 *
 * Utility routine to allocate an attribute map in the current memory
 * context.
 */</comment>
<function><type><name>AttrMap</name> <modifier>*</modifier></type>
<name>make_attrmap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maplen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AttrMap</name>    <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>AttrMap</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AttrMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>maplen</name></name> <operator>=</operator> <name>maplen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>attnums</name></name> <operator>=</operator> <operator>(</operator><name>AttrNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * free_attrmap
 *
 * Utility routine to release an attribute map.
 */</comment>
<function><type><name>void</name></type>
<name>free_attrmap</name><parameter_list>(<parameter><decl><type><name>AttrMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>attnums</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * build_attrmap_by_position
 *
 * Return a palloc'd bare attribute map for tuple conversion, matching input
 * and output columns by position.  Dropped columns are ignored in both input
 * and output, marked as 0.  This is normally a subroutine for
 * convert_tuples_by_position in tupconvert.c, but it can be used standalone.
 *
 * Note: the errdetail messages speak of indesc as the "returned" rowtype,
 * outdesc as the "expected" rowtype.  This is okay for current uses but
 * might need generalization in future.
 */</comment>
<function><type><name>AttrMap</name> <modifier>*</modifier></type>
<name>build_attrmap_by_position</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>indesc</name></decl></parameter>,
						  <parameter><decl><type><name>TupleDesc</name></type> <name>outdesc</name></decl></parameter>,
						  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AttrMap</name>    <modifier>*</modifier></type><name>attrMap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nincols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>noutcols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>same</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The length is computed as the number of attributes of the expected
	 * rowtype as it includes dropped attributes in its count.
	 */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>attrMap</name> <operator>=</operator> <call><name>make_attrmap</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>						<comment type="block">/* j is next physical input attribute */</comment>
	<expr_stmt><expr><name>nincols</name> <operator>=</operator> <name>noutcols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>		<comment type="block">/* these count non-dropped attributes */</comment>
	<expr_stmt><expr><name>same</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>outdesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>atttypid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>atttypmod</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* attrMap-&gt;attnums[i] is already 0 */</comment>
		<expr_stmt><expr><name>noutcols</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>atttypid</name> <operator>=</operator> <name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>atttypmod</name> <operator>=</operator> <name><name>att</name><operator>-&gt;</operator><name>atttypmod</name></name></expr>;</expr_stmt>
		<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>indesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>att</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>indesc</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>nincols</name><operator>++</operator></expr>;</expr_stmt>

			<comment type="block">/* Found matching column, now check type */</comment>
			<if_stmt><if>if <condition>(<expr><name>atttypid</name> <operator>!=</operator> <name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name> <operator>||</operator>
				<operator>(</operator><name>atttypmod</name> <operator>!=</operator> <name><name>att</name><operator>-&gt;</operator><name>atttypmod</name></name> <operator>&amp;&amp;</operator> <name>atttypmod</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Returned type %s does not match expected type %s in column %d."</literal></expr></argument>,
								   <argument><expr><call><name>format_type_with_typemod</name><argument_list>(<argument><expr><name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
															<argument><expr><name><name>att</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></argument>)</argument_list></call></expr></argument>,
								   <argument><expr><call><name>format_type_with_typemod</name><argument_list>(<argument><expr><name>atttypid</name></expr></argument>,
															<argument><expr><name>atttypmod</name></expr></argument>)</argument_list></call></expr></argument>,
								   <argument><expr><name>noutcols</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>attrMap</name><operator>-&gt;</operator><name>attnums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AttrNumber</name><operator>)</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name><name>attrMap</name><operator>-&gt;</operator><name>attnums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>same</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>		<comment type="block">/* we'll complain below */</comment>
	</block_content>}</block></for>

	<comment type="block">/* Check for unused input columns */</comment>
	<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>indesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>indesc</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>nincols</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>same</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>			<comment type="block">/* we'll complain below */</comment>
	</block_content>}</block></for>

	<comment type="block">/* Report column count mismatch using the non-dropped-column counts */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>same</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Number of returned columns (%d) does not match "</literal>
						   <literal type="string">"expected column count (%d)."</literal></expr></argument>,
						   <argument><expr><name>nincols</name></expr></argument>, <argument><expr><name>noutcols</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Check if the map has a one-to-one match */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>check_attrmap_match</name><argument_list>(<argument><expr><name>indesc</name></expr></argument>, <argument><expr><name>outdesc</name></expr></argument>, <argument><expr><name>attrMap</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Runtime conversion is not needed */</comment>
		<expr_stmt><expr><call><name>free_attrmap</name><argument_list>(<argument><expr><name>attrMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>attrMap</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * build_attrmap_by_name
 *
 * Return a palloc'd bare attribute map for tuple conversion, matching input
 * and output columns by name.  (Dropped columns are ignored in both input and
 * output.)  This is normally a subroutine for convert_tuples_by_name in
 * tupconvert.c, but can be used standalone.
 */</comment>
<function><type><name>AttrMap</name> <modifier>*</modifier></type>
<name>build_attrmap_by_name</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>indesc</name></decl></parameter>,
					  <parameter><decl><type><name>TupleDesc</name></type> <name>outdesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AttrMap</name>    <modifier>*</modifier></type><name>attrMap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>outnatts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>innatts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nextindesc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>outnatts</name> <operator>=</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>innatts</name> <operator>=</operator> <name><name>indesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>attrMap</name> <operator>=</operator> <call><name>make_attrmap</name><argument_list>(<argument><expr><name>outnatts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>outnatts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>outatt</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>outdesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>attname</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>atttypid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>atttypmod</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>outatt</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* attrMap-&gt;attnums[i] is already 0 */</comment>
		<expr_stmt><expr><name>attname</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><name><name>outatt</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>atttypid</name> <operator>=</operator> <name><name>outatt</name><operator>-&gt;</operator><name>atttypid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>atttypmod</name> <operator>=</operator> <name><name>outatt</name><operator>-&gt;</operator><name>atttypmod</name></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Now search for an attribute with the same name in the indesc. It
		 * seems likely that a partitioned table will have the attributes in
		 * the same order as the partition, so the search below is optimized
		 * for that case.  It is possible that columns are dropped in one of
		 * the relations, but not the other, so we use the 'nextindesc'
		 * counter to track the starting point of the search.  If the inner
		 * loop encounters dropped columns then it will have to skip over
		 * them, but it should leave 'nextindesc' at the correct position for
		 * the next outer loop.
		 */</comment>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>innatts</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>inatt</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>nextindesc</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nextindesc</name> <operator>&gt;=</operator> <name>innatts</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>nextindesc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>inatt</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>indesc</name></expr></argument>, <argument><expr><name>nextindesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>inatt</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>attname</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>inatt</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Found it, check type */</comment>
				<if_stmt><if>if <condition>(<expr><name>atttypid</name> <operator>!=</operator> <name><name>inatt</name><operator>-&gt;</operator><name>atttypid</name></name> <operator>||</operator> <name>atttypmod</name> <operator>!=</operator> <name><name>inatt</name><operator>-&gt;</operator><name>atttypmod</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not convert row type"</literal></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Attribute \"%s\" of type %s does not match corresponding attribute of type %s."</literal></expr></argument>,
									   <argument><expr><name>attname</name></expr></argument>,
									   <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>outdesc</name><operator>-&gt;</operator><name>tdtypeid</name></name></expr></argument>)</argument_list></call></expr></argument>,
									   <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>indesc</name><operator>-&gt;</operator><name>tdtypeid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>attrMap</name><operator>-&gt;</operator><name>attnums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>inatt</name><operator>-&gt;</operator><name>attnum</name></name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name><name>attrMap</name><operator>-&gt;</operator><name>attnums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not convert row type"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Attribute \"%s\" of type %s does not exist in type %s."</literal></expr></argument>,
							   <argument><expr><name>attname</name></expr></argument>,
							   <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>outdesc</name><operator>-&gt;</operator><name>tdtypeid</name></name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>indesc</name><operator>-&gt;</operator><name>tdtypeid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>attrMap</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * build_attrmap_by_name_if_req
 *
 * Returns mapping created by build_attrmap_by_name, or NULL if no
 * conversion is required.  This is a convenience routine for
 * convert_tuples_by_name() in tupconvert.c and other functions, but it
 * can be used standalone.
 */</comment>
<function><type><name>AttrMap</name> <modifier>*</modifier></type>
<name>build_attrmap_by_name_if_req</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>indesc</name></decl></parameter>,
							 <parameter><decl><type><name>TupleDesc</name></type> <name>outdesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AttrMap</name>    <modifier>*</modifier></type><name>attrMap</name></decl>;</decl_stmt>

	<comment type="block">/* Verify compatibility and prepare attribute-number map */</comment>
	<expr_stmt><expr><name>attrMap</name> <operator>=</operator> <call><name>build_attrmap_by_name</name><argument_list>(<argument><expr><name>indesc</name></expr></argument>, <argument><expr><name>outdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check if the map has a one-to-one match */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>check_attrmap_match</name><argument_list>(<argument><expr><name>indesc</name></expr></argument>, <argument><expr><name>outdesc</name></expr></argument>, <argument><expr><name>attrMap</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Runtime conversion is not needed */</comment>
		<expr_stmt><expr><call><name>free_attrmap</name><argument_list>(<argument><expr><name>attrMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>attrMap</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * check_attrmap_match
 *
 * Check to see if the map is a one-to-one match, in which case we need
 * not to do a tuple conversion, and the attribute map is not necessary.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_attrmap_match</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>indesc</name></decl></parameter>,
					<parameter><decl><type><name>TupleDesc</name></type> <name>outdesc</name></decl></parameter>,
					<parameter><decl><type><name>AttrMap</name> <modifier>*</modifier></type><name>attrMap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* no match if attribute numbers are not the same */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>indesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>!=</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attrMap</name><operator>-&gt;</operator><name>maplen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>inatt</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>indesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>outatt</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>outdesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * If the input column has a missing attribute, we need a conversion.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>inatt</name><operator>-&gt;</operator><name>atthasmissing</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>attrMap</name><operator>-&gt;</operator><name>attnums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * If it's a dropped column and the corresponding input column is also
		 * dropped, we don't need a conversion.  However, attlen and attalign
		 * must agree.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>attrMap</name><operator>-&gt;</operator><name>attnums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<name><name>inatt</name><operator>-&gt;</operator><name>attisdropped</name></name> <operator>&amp;&amp;</operator>
			<name><name>inatt</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <name><name>outatt</name><operator>-&gt;</operator><name>attlen</name></name> <operator>&amp;&amp;</operator>
			<name><name>inatt</name><operator>-&gt;</operator><name>attalign</name></name> <operator>==</operator> <name><name>outatt</name><operator>-&gt;</operator><name>attalign</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></for>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
