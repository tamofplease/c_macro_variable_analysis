<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/access/hash/hashsort.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * hashsort.c
 *		Sort tuples for insertion into a new hash index.
 *
 * When building a very large hash index, we pre-sort the tuples by bucket
 * number to improve locality of access to the index, and thereby avoid
 * thrashing.  We use tuplesort.c to sort the given index tuples into order.
 *
 * Note: if the number of rows in the table has been underestimated,
 * bucket splits may occur during the index build.  In that case we'd
 * be inserting into two or more buckets for each possible masked-off
 * hash code value.  That's no big problem though, since we'll still have
 * plenty of locality of access.
 *
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/access/hash/hashsort.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/pg_bitutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/tuplesort.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Status record for spooling/sorting phase.
 */</comment>
<struct>struct <name>HSpool</name>
<block>{
	<decl_stmt><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>sortstate</name></decl>;</decl_stmt>	<comment type="block">/* state data for tuplesort.c */</comment>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>index</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We sort the hash keys based on the buckets they belong to. Below masks
	 * are used in _hash_hashkey2bucket to determine the bucket of given hash
	 * key.
	 */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>high_mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>low_mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>max_buckets</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/*
 * create and initialize a spool structure
 */</comment>
<function><type><name>HSpool</name> <modifier>*</modifier></type>
<name>_h_spoolinit</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>heap</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>num_buckets</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HSpool</name>	   <modifier>*</modifier></type><name>hspool</name> <init>= <expr><operator>(</operator><name>HSpool</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HSpool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>hspool</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Determine the bitmask for hash code values.  Since there are currently
	 * num_buckets buckets in the index, the appropriate mask can be computed
	 * as follows.
	 *
	 * NOTE : This hash mask calculation should be in sync with similar
	 * calculation in _hash_init_metabuffer.
	 */</comment>
	<expr_stmt><expr><name><name>hspool</name><operator>-&gt;</operator><name>high_mask</name></name> <operator>=</operator> <call><name>pg_nextpower2_32</name><argument_list>(<argument><expr><name>num_buckets</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hspool</name><operator>-&gt;</operator><name>low_mask</name></name> <operator>=</operator> <operator>(</operator><name><name>hspool</name><operator>-&gt;</operator><name>high_mask</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hspool</name><operator>-&gt;</operator><name>max_buckets</name></name> <operator>=</operator> <name>num_buckets</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * We size the sort area as maintenance_work_mem rather than work_mem to
	 * speed index creation.  This should be OK since a single backend can't
	 * run multiple index creations in parallel.
	 */</comment>
	<expr_stmt><expr><name><name>hspool</name><operator>-&gt;</operator><name>sortstate</name></name> <operator>=</operator> <call><name>tuplesort_begin_index_hash</name><argument_list>(<argument><expr><name>heap</name></expr></argument>,
												   <argument><expr><name>index</name></expr></argument>,
												   <argument><expr><name><name>hspool</name><operator>-&gt;</operator><name>high_mask</name></name></expr></argument>,
												   <argument><expr><name><name>hspool</name><operator>-&gt;</operator><name>low_mask</name></name></expr></argument>,
												   <argument><expr><name><name>hspool</name><operator>-&gt;</operator><name>max_buckets</name></name></expr></argument>,
												   <argument><expr><name>maintenance_work_mem</name></expr></argument>,
												   <argument><expr><name>NULL</name></expr></argument>,
												   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>hspool</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * clean up a spool structure and its substructures.
 */</comment>
<function><type><name>void</name></type>
<name>_h_spooldestroy</name><parameter_list>(<parameter><decl><type><name>HSpool</name> <modifier>*</modifier></type><name>hspool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tuplesort_end</name><argument_list>(<argument><expr><name><name>hspool</name><operator>-&gt;</operator><name>sortstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>hspool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * spool an index entry into the sort file.
 */</comment>
<function><type><name>void</name></type>
<name>_h_spool</name><parameter_list>(<parameter><decl><type><name>HSpool</name> <modifier>*</modifier></type><name>hspool</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tuplesort_putindextuplevalues</name><argument_list>(<argument><expr><name><name>hspool</name><operator>-&gt;</operator><name>sortstate</name></name></expr></argument>, <argument><expr><name><name>hspool</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
								  <argument><expr><name>self</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * given a spool loaded by successive calls to _h_spool,
 * create an entire index.
 */</comment>
<function><type><name>void</name></type>
<name>_h_indexbuild</name><parameter_list>(<parameter><decl><type><name>HSpool</name> <modifier>*</modifier></type><name>hspool</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>heapRel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexTuple</name></type>	<name>itup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>tups_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>hashkey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>tuplesort_performsort</name><argument_list>(<argument><expr><name><name>hspool</name><operator>-&gt;</operator><name>sortstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>itup</name> <operator>=</operator> <call><name>tuplesort_getindextuple</name><argument_list>(<argument><expr><name><name>hspool</name><operator>-&gt;</operator><name>sortstate</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Technically, it isn't critical that hash keys be found in sorted
		 * order, since this sorting is only used to increase locality of
		 * access as a performance optimization.  It still seems like a good
		 * idea to test tuplesort.c's handling of hash index tuple sorts
		 * through an assertion, though.
		 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>lasthashkey</name> <init>= <expr><name>hashkey</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>hashkey</name> <operator>=</operator> <call><name>_hash_hashkey2bucket</name><argument_list>(<argument><expr><call><name>_hash_get_indextuple_hashkey</name><argument_list>(<argument><expr><name>itup</name></expr></argument>)</argument_list></call></expr></argument>,
									   <argument><expr><name><name>hspool</name><operator>-&gt;</operator><name>max_buckets</name></name></expr></argument>, <argument><expr><name><name>hspool</name><operator>-&gt;</operator><name>high_mask</name></name></expr></argument>,
									   <argument><expr><name><name>hspool</name><operator>-&gt;</operator><name>low_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>hashkey</name> <operator>&gt;=</operator> <name>lasthashkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><call><name>_hash_doinsert</name><argument_list>(<argument><expr><name><name>hspool</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>itup</name></expr></argument>, <argument><expr><name>heapRel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pgstat_progress_update_param</name><argument_list>(<argument><expr><name>PROGRESS_CREATEIDX_TUPLES_DONE</name></expr></argument>,
									 <argument><expr><operator>++</operator><name>tups_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
</unit>
